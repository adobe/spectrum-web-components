{"version":3,"file":"swc.DQJ8QTKN.js","sources":["../../../test/lit-helpers.js"],"sourcesContent":["\"use strict\";\nimport { nothing } from \"lit/html.js\";\nimport { AsyncDirective, directive } from \"lit/async-directive.js\";\nclass SpreadDirective extends AsyncDirective {\n  constructor() {\n    super(...arguments);\n    this.prevData = {};\n  }\n  render(_spreadData) {\n    return nothing;\n  }\n  update(part, [spreadData]) {\n    var _a;\n    if (this.element !== part.element) {\n      this.element = part.element;\n    }\n    this.host = ((_a = part.options) == null ? void 0 : _a.host) || this.element;\n    this.apply(spreadData);\n    this.groom(spreadData);\n    this.prevData = spreadData;\n  }\n  apply(data) {\n    if (!data) return;\n    const { prevData, element } = this;\n    for (const key in data) {\n      const value = data[key];\n      if (value === prevData[key]) {\n        continue;\n      }\n      const name = key.slice(1);\n      switch (key[0]) {\n        case \"@\":\n          const prevHandler = prevData[key];\n          if (prevHandler) {\n            element.removeEventListener(\n              name,\n              this,\n              value\n            );\n          }\n          element.addEventListener(\n            name,\n            this,\n            value\n          );\n          break;\n        case \".\":\n          element[name] = value;\n          break;\n        case \"?\":\n          if (value) {\n            element.setAttribute(name, \"\");\n          } else {\n            element.removeAttribute(name);\n          }\n          break;\n        default:\n          if (value != null) {\n            element.setAttribute(key, String(value));\n          } else {\n            element.removeAttribute(key);\n          }\n          break;\n      }\n    }\n  }\n  groom(data) {\n    const { prevData, element } = this;\n    if (!prevData) return;\n    for (const key in prevData) {\n      if (!data || !(key in data)) {\n        switch (key[0]) {\n          case \"@\":\n            const value = prevData[key];\n            element.removeEventListener(\n              key.slice(1),\n              this,\n              value\n            );\n            break;\n          case \".\":\n            element[key.slice(1)] = void 0;\n            break;\n          case \"?\":\n            element.removeAttribute(key.slice(1));\n            break;\n          default:\n            element.removeAttribute(key);\n            break;\n        }\n      }\n    }\n  }\n  handleEvent(event) {\n    const value = this.prevData[`@${event.type}`];\n    if (typeof value === \"function\") {\n      value.call(this.host, event);\n    } else {\n      value.handleEvent(event);\n    }\n  }\n  disconnected() {\n    const { prevData, element } = this;\n    for (const key in prevData) {\n      if (key[0] !== \"@\") continue;\n      const value = prevData[key];\n      element.removeEventListener(\n        key.slice(1),\n        this,\n        value\n      );\n    }\n  }\n  reconnected() {\n    const { prevData, element } = this;\n    for (const key in prevData) {\n      if (key[0] !== \"@\") continue;\n      const value = prevData[key];\n      element.addEventListener(\n        key.slice(1),\n        this,\n        value\n      );\n    }\n  }\n}\nexport const spread = directive(SpreadDirective);\nclass SpreadPropsDirective extends AsyncDirective {\n  constructor() {\n    super(...arguments);\n    this.prevData = {};\n  }\n  render(_spreadData) {\n    return nothing;\n  }\n  update(part, [spreadData]) {\n    var _a;\n    if (this.element !== part.element) {\n      this.element = part.element;\n    }\n    this.host = ((_a = part.options) == null ? void 0 : _a.host) || this.element;\n    this.apply(spreadData);\n    this.groom(spreadData);\n    this.prevData = spreadData;\n  }\n  apply(data) {\n    if (!data) return;\n    const { prevData, element } = this;\n    for (const key in data) {\n      const value = data[key];\n      if (value === prevData[key]) {\n        continue;\n      }\n      element[key] = value;\n    }\n  }\n  groom(data) {\n    const { prevData, element } = this;\n    if (!prevData) return;\n    for (const key in prevData) {\n      if (!data || !(key in data)) {\n        element[key] = void 0;\n      }\n    }\n  }\n}\nexport const spreadProps = directive(SpreadPropsDirective);\n//# sourceMappingURL=lit-helpers.js.map\n"],"names":["spreadProps","directive","AsyncDirective","constructor","super","arguments","this","prevData","render","_spreadData","nothing","update","part","spreadData","_a","element","host","options","apply","groom","data","key","value"],"mappings":"kHA4Na,MAAAA,EAAcC,EA3C3B,cAAmCC,EAAnCC,WAAAA,GAAAC,SAAAC,WAGIC,KAAAC,SAAuC,CAAA,CAEvCC,CAAAA,MAAAA,CAAOC,GACH,OAAOC,CACX,CACSC,MAAAA,CAAOC,GAAaC,IAzLjC,IAAAC,EA0LYR,KAAKS,UAAaH,EAAqBG,UACvCT,KAAKS,QAAWH,EAAqBG,SAEzCT,KAAKU,MAAO,OAAAF,EAAAF,EAAKK,cAALH,EAAAA,EAAcE,OAAQV,KAAKS,QACvCT,KAAKY,MAAML,GACXP,KAAKa,MAAMN,GACXP,KAAKC,SAAWM,CACpB,CAEAK,KAAAA,CAAME,GACF,IAAKA,EAAM,OACX,MAAMb,SAAEA,EAAAQ,QAAUA,GAAYT,KAC9B,IAAW,MAAAe,KAAOD,EAAM,CACpB,MAAME,EAAQF,EAAKC,GACfC,IAAUf,EAASc,KAIvBN,EAAQM,GAAOC,EACnB,CACJ,CAEAH,KAAAA,CAAMC,GACF,MAAMb,SAAEA,EAAAQ,QAAUA,GAAYT,KAC9B,GAAKC,EACL,UAAWc,KAAOd,EACTa,GAAUC,KAAOD,IAElBL,EAAQM,QAAO,EAG3B"}