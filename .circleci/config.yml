version: 2.1

executors:
    node:
        docker:
            - image: mcr.microsoft.com/playwright:v1.44.0
        resource_class: xlarge
        environment:
            NODE_ENV: development
parameters:
    # In order to update the VRT baseline images:
    # 1. Copy the hash of the latest golden images cache from the left sidebar in the VRT preview link (not to be confused with the arbitrary hash in the URL).
    # 2. Paste the hash in the current_golden_images_hash default parameter below.
    # 3. Commit this change to the PR branch where the changes exist.
    current_golden_images_hash:
        type: string
        default: c5b517432c05e1eeac576ad651233cef83957ce9
    wireit_cache_name:
        type: string
        default: wireit
commands:
    downstream:
        steps:
            - checkout
            # - restore_cache:
            #       keys:
            #           - v4c-dependencies-{{ arch }}-{{ checksum "yarn.lock" }}
            # - restore_cache:
            #       keys:
            #           - v4b-<< pipeline.parameters.wireit_cache_name >>-{{ arch }}-{{ checksum "package.json" }}-
            - run:
                  name: Installing Dependencies
                  command: |
                      corepack enable
                      yarn --immutable
            - run:
                  name: Build the project
                  command: yarn build

            - save_cache:
                  paths:
                      - ~/.cache/yarn
                      - ~/.cache/ms-playwright
                  key: v4c-dependencies-{{ arch }}-{{ checksum "yarn.lock" }}
            - save_cache:
                  paths:
                      - .wireit
                  key: v4b-wireit-{{ arch }}-{{ checksum "package.json" }}-{{ epoch }}
            - attach_workspace:
                  at: /
    run-regressions:
        parameters:
            regression_system:
                type: string
            regression_color:
                type: string
            regression_scale:
                type: string
            regression_dir:
                type: string
        steps:
            - restore_cache:
                  name: Restore Golden Images Cache
                  keys:
                      - v2-golden-images-<< pipeline.parameters.current_golden_images_hash >>-<< parameters.regression_system >>-<< parameters.regression_color >>-<< parameters.regression_scale >>-<< parameters.regression_dir >>-
                      - v2-golden-images-<< pipeline.parameters.current_golden_images_hash >>-<< parameters.regression_color >>-<< parameters.regression_scale >>-<< parameters.regression_dir >>-
                      - v2-golden-images-main-<< parameters.regression_system >>-<< parameters.regression_color >>-<< parameters.regression_scale >>-<< parameters.regression_dir >>-
                      - v2-golden-images-main-<< parameters.regression_color >>-<< parameters.regression_scale >>-<< parameters.regression_dir >>-
            - run:
                  name: Count baseline images
                  command: find test/visual/screenshots-baseline -type f | wc -l > count_start.txt
            - run:
                  when: always
                  name: VRT Run
                  command: |
                      yarn test:ci --config web-test-runner.config.vrt.js --group vrt-<< parameters.regression_system >>-<< parameters.regression_color >>-<< parameters.regression_scale >>-<< parameters.regression_dir >>
            # store results and artifacts before rearranging things for the new cache.
            - store_test_results:
                  path: /root/project/results/
            - run:
                  when: on_success
                  name: Count current images
                  command: find test/visual/screenshots-actual/updates -type f | wc -l > count_end.txt
            # prevent removing regression tests without requiring a new golden cache
            - run:
                  when: on_success
                  name: Fail if there are a different number of images...
                  command: |
                      echo $(cat count_start.txt)
                      echo $(cat count_end.txt)
                      if [[ $(cat count_start.txt) -eq $(cat count_end.txt) ]]; then exit 0; else exit 1; fi
            # build diff review site
            - run:
                  when: always
                  name: Create review site
                  command: |
                      branch=$(git symbolic-ref --short HEAD)
                      node test/visual/review.js --branch=$branch --commit=<< pipeline.git.revision >> --system="<< parameters.regression_system >> << parameters.regression_color >> << parameters.regression_scale >> << parameters.regression_dir >>"
                      yarn rollup -c test/visual/rollup.config.js
            - run:
                  when: always
                  name: Deploy Visual Tests to Azure
                  command: |
                      cp projects/documentation/content/favicon.ico test/visual
                      branch=$(git symbolic-ref --short HEAD)
                      hash=$(echo -n $branch-<< parameters.regression_system >>-<< parameters.regression_color >>-<< parameters.regression_scale >>-<< parameters.regression_dir >> | md5sum | cut -c 1-32)
                      echo "Azure deployment hash: $hash"
                      echo "Deploying visual tests from test/visual directory..."

                      # Install Azure Static Web Apps CLI
                      npm install -g @azure/static-web-apps-cli

                      max_attempts=3
                      attempt=0

                      while [ $attempt -lt $max_attempts ]; do
                          if swa deploy test/visual --deployment-token $SWA_CLI_DEPLOYMENT_TOKEN --env $hash; then
                              echo "Azure deployment successful!"
                              
                              # Generate the deployment URL using the correct pattern with /review/ path
                              echo "https://brave-plant-02f0c200f-${hash}.eastus2.6.azurestaticapps.net/review/" > vrt_url.txt
                              echo "Visual Test URL: $(cat vrt_url.txt)"
                              
                              # Save URL for the master comment with descriptive name
                              mkdir -p /tmp/vrt-urls
                              echo "ðŸŽ¨ **<< parameters.regression_system >> << parameters.regression_color >> << parameters.regression_scale >> << parameters.regression_dir >>**: $(cat vrt_url.txt)" > /tmp/vrt-urls/<< parameters.regression_system >>-<< parameters.regression_color >>-<< parameters.regression_scale >>-<< parameters.regression_dir >>.txt
                              exit 0
                          else
                              attempt=$((attempt + 1))
                              echo "Azure deploy failed, retrying ($attempt/$max_attempts)..."
                              sleep 10
                          fi
                      done

                      echo "Azure deployment failed after $max_attempts attempts."
                      exit 1

            # move "updated" screenshot into the baseline directory before making the new cache
            - run:
                  when: always
                  command: |
                      rm -rf test/visual/screenshots-baseline
                      cp -R test/visual/screenshots-actual/updates test/visual/screenshots-baseline
            - save_cache:
                  when: always
                  name: Build Golden Images Revision Cache
                  paths:
                      - test/visual/screenshots-baseline
                  key: v2-golden-images-{{ .Revision }}-<< parameters.regression_system >>-<< parameters.regression_color >>-<< parameters.regression_scale >>-<< parameters.regression_dir >>-{{ epoch }}
            - save_cache:
                  name: Build Golden Images Branch Cache
                  paths:
                      - test/visual/screenshots-baseline
                  key: v2-golden-images-{{ .Branch }}-<< parameters.regression_system >>-<< parameters.regression_color >>-<< parameters.regression_scale >>-<< parameters.regression_dir >>-{{ epoch }}
            - persist_to_workspace:
                  root: /tmp
                  paths:
                      - vrt-urls/<< parameters.regression_system >>-<< parameters.regression_color >>-<< parameters.regression_scale >>-<< parameters.regression_dir >>.txt

jobs:
    commitlint:
        executor: node

        steps:
            - downstream
            - run:
                  name: Define environment variable with lastest commit's message
                  command: |
                      echo 'export COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")' >> $BASH_ENV
                      source $BASH_ENV
            - run:
                  name: Lint commit message
                  command: echo "$COMMIT_MESSAGE" | yarn commitlint --config commitlint.config.cjs

    test-chromium:
        executor: node

        steps:
            - downstream
            - run:
                  name: Run unit tests
                  command: yarn test:ci --config web-test-runner.config.ci-chromium.js --group no-memory-ci --coverage
            - store_test_results:
                  path: /root/project/results/
            - store_artifacts:
                  path: coverage

    test-chromium-memory:
        executor: node

        steps:
            - downstream
            - run:
                  name: Run memory tests
                  command: yarn test:ci --config web-test-runner.config.ci-chromium.js --group memory-ci
            - store_test_results:
                  path: /root/project/results/

    test-firefox:
        executor: node
        parallelism: 5

        steps:
            - downstream
            - run:
                  name: Run tests
                  command: |
                      TEST=$(circleci tests glob packages/*/test/*.test.js | circleci tests split --split-by=timings)
                      yarn test:start --files $TEST --config web-test-runner.config.ci-firefox.js --group unit-ci
            - store_test_results:
                  path: /root/project/results/

    test-webkit:
        executor: node
        parallelism: 5

        steps:
            - downstream
            - run:
                  name: Run tests
                  command: |
                      TEST=$(circleci tests glob packages/*/test/*.test.js | circleci tests split --split-by=timings)
                      yarn test:start --files $TEST --config web-test-runner.config.ci-webkit.js --group unit-ci
            - store_test_results:
                  path: /root/project/results/

    lint:
        executor: node

        steps:
            - downstream
            - run:
                  name: Lint
                  command: yarn lint
            - run:
                  name: Are there changes?
                  command: git diff-files --exit-code

    beta-docs:
        executor: node

        steps:
            - downstream
            - run:
                  name: Generate Custom Elements Manifest
                  command: yarn docs:analyze
            - run:
                  name: Move CEM to Storybook directory
                  command: cp projects/documentation/custom-elements.json storybook/
            - run:
                  name: Build documentation
                  command: yarn docs:build
            - run:
                  name: Build Storybook
                  command: yarn storybook:build
            - run: echo '/*    /index.html   200' > projects/documentation/dist/_redirects
            - run: |
                  branch=$(git symbolic-ref --short HEAD)
                  branch=$(npx slugify-cli $branch)
                  yarn netlify deploy --alias=beta --cwd projects/documentation

    hcm-visual:
        executor: node

        steps:
            - downstream
            - restore_cache:
                  name: Restore Golden Images Cache
                  keys:
                      - v2-golden-images-<< pipeline.parameters.current_golden_images_hash >>-hcm-
                      - v2-golden-images-main-hcm-
            - run:
                  name: Count baseline images
                  command: find test/visual/screenshots-baseline -type f | wc -l > count_start.txt
            - run:
                  when: always
                  name: VRT Run
                  command: |
                      yarn test:ci --config web-test-runner.config.vrt.js --group vrt-hcm
            # store results and artifacts before rearranging things for the new cache.
            - store_test_results:
                  path: /root/project/results/
            - run:
                  when: on_success
                  name: Count current images
                  command: find test/visual/screenshots-actual/updates -type f | wc -l > count_end.txt
            # prevent removing regression tests without requiring a new golden cache
            - run:
                  when: on_success
                  name: Fail if there are a different number of images...
                  command: |
                      echo $(cat count_start.txt)
                      echo $(cat count_end.txt)
                      if [[ $(cat count_start.txt) -eq $(cat count_end.txt) ]]; then exit 0; else exit 1; fi
            # build diff review site
            - run:
                  when: always
                  name: Create review site
                  command: |
                      branch=$(git symbolic-ref --short HEAD)
                      node test/visual/review.js --branch=$branch --commit=<< pipeline.git.revision >> --system="hcm"
                      yarn rollup -c test/visual/rollup.config.js
            - run:
                  when: always
                  name: Deploy Visual Tests to Azure
                  command: |
                      cp projects/documentation/content/favicon.ico test/visual
                      branch=$(git symbolic-ref --short HEAD)
                      hash=$(echo -n $branch-hcm | md5sum | cut -c 1-32)
                      echo "Azure deployment hash: $hash"
                      echo "Deploying visual tests from test/visual directory..."

                      # Install Azure Static Web Apps CLI
                      npm install -g @azure/static-web-apps-cli

                      max_attempts=3
                      attempt=0

                      while [ $attempt -lt $max_attempts ]; do
                          if swa deploy test/visual --deployment-token $SWA_CLI_DEPLOYMENT_TOKEN --env $hash; then
                              echo "Azure deployment successful!"
                              
                              # Generate the deployment URL using the correct pattern with /review/ path
                              echo "https://brave-plant-02f0c200f-${hash}.eastus2.6.azurestaticapps.net/review/" > vrt_url.txt
                              echo "Visual Test URL: $(cat vrt_url.txt)"
                              
                              # Save URL for the master comment
                              mkdir -p /tmp/vrt-urls
                              echo "ðŸŽ¨ **HCM Visual Tests**: $(cat vrt_url.txt)" > /tmp/vrt-urls/hcm-visual.txt
                              exit 0
                          else
                              attempt=$((attempt + 1))
                              echo "Azure deploy failed, retrying ($attempt/$max_attempts)..."
                              sleep 10
                          fi
                      done

                      echo "Azure deployment failed after $max_attempts attempts."
                      exit 1

            # move "updated" screenshot into the baseline directory before making the new cache
            - run:
                  when: always
                  command: |
                      rm -rf test/visual/screenshots-baseline
                      cp -R test/visual/screenshots-actual/updates test/visual/screenshots-baseline
            - save_cache:
                  when: always
                  name: Build Golden Images Revision Cache
                  paths:
                      - test/visual/screenshots-baseline
                  key: v2-golden-images-{{ .Revision }}-hcm-{{ epoch }}
            - save_cache:
                  name: Build Golden Images Branch Cache
                  paths:
                      - test/visual/screenshots-baseline
                  key: v2-golden-images-{{ .Branch }}-hcm-{{ epoch }}
            - persist_to_workspace:
                  root: /tmp
                  paths:
                      - vrt-urls/hcm-visual.txt

    visual:
        executor: node
        parameters:
            system:
                type: string
            color:
                type: string
            scale:
                type: string
            dir:
                type: string
        steps:
            - downstream
            - run-regressions:
                  regression_system: << parameters.system >>
                  regression_color: << parameters.color >>
                  regression_scale: << parameters.scale >>
                  regression_dir: << parameters.dir >>

    create-vrt-comment:
        executor: node
        steps:
            - checkout
            - attach_workspace:
                  at: /tmp
            - run:
                  name: Create Master Visual Test Comment
                  command: |
                      if [ -n "$CIRCLE_PULL_REQUEST" ]; then
                          echo "Creating master comment for all visual tests..."
                          
                          # Start building the comment
                          echo "## ðŸŽ¨ Visual Regression Test Results" > comment.md
                          echo "" >> comment.md
                          echo "All visual test environments have been deployed to Azure Static Web Apps:" >> comment.md
                          echo "" >> comment.md
                          
                          # Add all URLs from workspace
                          if [ -d "/tmp/vrt-urls" ]; then
                              for file in /tmp/vrt-urls/*.txt; do
                                  if [ -f "$file" ]; then
                                      cat "$file" >> comment.md
                                      echo "" >> comment.md
                                  fi
                              done
                          fi
                          
                          echo "" >> comment.md
                          echo "---" >> comment.md
                          echo "*Deployed from commit: \`<< pipeline.git.revision >>\`*" >> comment.md
                          
                          # Get PR number from URL
                          PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST | sed 's/.*\/pull\///')
                          
                          # Create the comment body (escape for JSON)
                          COMMENT_BODY=$(cat comment.md | jq -Rs .)
                          
                          # Post comment using GitHub API
                          curl -X POST \
                            -H "Authorization: token $GITHUB_TOKEN" \
                            -H "Accept: application/vnd.github.v3+json" \
                            "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/issues/$PR_NUMBER/comments" \
                            -d "{\"body\":$COMMENT_BODY}"
                          
                          echo "Master comment created successfully!"
                      else
                          echo "Not a pull request, skipping comment creation."
                      fi

workflows:
    version: 2
    commitlint:
        jobs:
            - commitlint
    build:
        jobs:
            - test-chromium
            - test-chromium-memory
            - test-firefox
            - test-webkit
            - lint
            - hcm-visual:
                  filters:
                      branches:
                          # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
                          ignore: /pull\/[0-9]+/
            - beta-docs:
                  filters:
                      branches:
                          # Beta docs are only published from main
                          only: main
            - visual:
                  name: << matrix.system >>-<< matrix.color >>-<< matrix.scale >>-<< matrix.dir >>
                  matrix:
                      parameters:
                          system: [spectrum, express, spectrum-two]
                          color: [light]
                          scale: [medium]
                          dir: [ltr]
                  filters:
                      branches:
                          # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
                          ignore: /pull\/[0-9]+/
            - visual:
                  name: << matrix.system >>-<< matrix.color >>-<< matrix.scale >>-<< matrix.dir >>
                  matrix:
                      parameters:
                          system: [spectrum, express, spectrum-two]
                          color: [dark]
                          scale: [large]
                          dir: [rtl]
                  filters:
                      branches:
                          # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
                          ignore: /pull\/[0-9]+/
            - create-vrt-comment:
                  requires:
                      - hcm-visual
                      - spectrum-light-medium-ltr
                      - express-light-medium-ltr
                      - spectrum-two-light-medium-ltr
                      - spectrum-dark-large-rtl
                      - express-dark-large-rtl
                      - spectrum-two-dark-large-rtl
                  filters:
                      branches:
                          # Only run on PRs, not on forked PRs
                          ignore: /pull\/[0-9]+/
