version: 2.1

executors:
    default:
        docker:
            - image: cimg/base:current
        resource_class: medium
    node:
        docker:
            - image: mcr.microsoft.com/playwright:v1.53.1-noble
        resource_class: xlarge
        environment:
            NODE_ENV: development
            AZCOPY_AUTO_LOGIN_TYPE: SPN
            AZCOPY_SPA_APPLICATION_ID: $AZURE_CLIENT_ID
            AZCOPY_SPA_CLIENT_SECRET: $AZURE_CLIENT_SECRET
            AZCOPY_TENANT_ID: $AZURE_TENANT_ID
parameters:
    # In order to update the VRT baseline images:
    # 1. Copy the hash of the latest golden images cache from the left sidebar in the VRT preview link (not to be confused with the arbitrary hash in the URL).
    # 2. Paste the hash in the current_golden_images_hash default parameter below.
    # 3. Commit this change to the PR branch where the changes exist.
    current_golden_images_hash:
        type: string
        default: e3b8843dd455793122ec53d4f91733eb1487b99a
    wireit_cache_name:
        type: string
        default: wireit
commands:
    install-azcopy:
        description: 'Install AzCopy and set up authentication'
        steps:
            - run:
                  when: always
                  name: Install AzCopy
                  command: |
                      # Create a bin directory in the home folder
                      mkdir -p ~/bin
                      cd ~/bin
                      wget -O azcopy.tar.gz https://github.com/Azure/azure-storage-azcopy/releases/download/v10.29.1/azcopy_linux_amd64_10.29.1.tar.gz
                      tar -xf azcopy.tar.gz --strip-components=1
                      chmod +x azcopy
                      # Add to PATH and set environment variables
                      echo 'export PATH=~/bin:$PATH' >> $BASH_ENV
                      echo 'export AZCOPY_AUTO_LOGIN_TYPE="SPN"' >> $BASH_ENV
                      echo 'export AZCOPY_SPA_APPLICATION_ID="$AZURE_CLIENT_ID"' >> $BASH_ENV
                      echo 'export AZCOPY_SPA_CLIENT_SECRET="$AZURE_CLIENT_SECRET"' >> $BASH_ENV
                      echo 'export AZCOPY_TENANT_ID="$AZURE_TENANT_ID"' >> $BASH_ENV
                      source $BASH_ENV
                      azcopy --version
    setup-project:
        steps:
            - checkout
            # - restore_cache:
            #       keys:
            #           - v4c-dependencies-{{ arch }}-{{ checksum "yarn.lock" }}
            # - restore_cache:
            #       keys:
            #           - v4b-<< pipeline.parameters.wireit_cache_name >>-{{ arch }}-{{ checksum "package.json" }}-
            - run:
                  name: Installing Dependencies
                  command: |
                      corepack enable
                      yarn --immutable
            - run:
                  name: Build the project
                  command: yarn build

            - save_cache:
                  paths:
                      - ~/.cache/yarn
                      - ~/.cache/ms-playwright
                  key: v4c-dependencies-{{ arch }}-{{ checksum "yarn.lock" }}
            - save_cache:
                  paths:
                      - .wireit
                  key: v4b-wireit-{{ arch }}-{{ checksum "package.json" }}-{{ epoch }}
            - attach_workspace:
                  at: /
    run-regressions:
        parameters:
            regression_system:
                type: string
            regression_color:
                type: string
            regression_scale:
                type: string
            regression_dir:
                type: string
        steps:
            - restore_cache:
                  name: Restore Golden Images Cache
                  keys:
                      - v2-golden-images-<< pipeline.parameters.current_golden_images_hash >>-<< parameters.regression_system >>-<< parameters.regression_color >>-<< parameters.regression_scale >>-<< parameters.regression_dir >>-
                      - v2-golden-images-<< pipeline.parameters.current_golden_images_hash >>-<< parameters.regression_color >>-<< parameters.regression_scale >>-<< parameters.regression_dir >>-
                      - v2-golden-images-main-<< parameters.regression_system >>-<< parameters.regression_color >>-<< parameters.regression_scale >>-<< parameters.regression_dir >>-
                      - v2-golden-images-main-<< parameters.regression_color >>-<< parameters.regression_scale >>-<< parameters.regression_dir >>-
            - run:
                  name: Count baseline images
                  command: find test/visual/screenshots-baseline -type f | wc -l > count_start.txt
            - run:
                  when: always
                  name: VRT Run
                  command: |
                      yarn test:ci --config web-test-runner.config.vrt.js --group vrt-<< parameters.regression_system >>-<< parameters.regression_color >>-<< parameters.regression_scale >>-<< parameters.regression_dir >>
            # store results and artifacts before rearranging things for the new cache.
            - store_test_results:
                  path: /root/project/results/
            - run:
                  when: on_success
                  name: Count current images
                  command: find test/visual/screenshots-actual/updates -type f | wc -l > count_end.txt
            # prevent removing regression tests without requiring a new golden cache
            - run:
                  when: on_success
                  name: Fail if there are a different number of images...
                  command: |
                      echo $(cat count_start.txt)
                      echo $(cat count_end.txt)
                      if [[ $(cat count_start.txt) -eq $(cat count_end.txt) ]]; then exit 0; else exit 1; fi
            # build diff review site
            - run:
                  when: always
                  name: Create review site
                  command: |
                      branch=$(git symbolic-ref --short HEAD)
                      node test/visual/review.js --branch=$branch --commit=<< pipeline.git.revision >> --system="<< parameters.regression_system >> << parameters.regression_color >> << parameters.regression_scale >> << parameters.regression_dir >>"
                      yarn rollup -c test/visual/rollup.config.js
            - install-azcopy
            - run:
                  when: always
                  name: Deploy VRT Results to Azure Blob Storage
                  command: |
                      # Set deployment path based on branch
                      if [ "$CIRCLE_BRANCH" = "main" ]; then
                          PR_HASH="main"
                          echo "Deploying VRT for main branch to main path"
                      else
                          # Get PR number from CircleCI environment
                          PR_NUMBER=""
                          if [ -n "$CIRCLE_PULL_REQUEST" ]; then
                              PR_NUMBER=$(echo "$CIRCLE_PULL_REQUEST" | sed 's/.*\/pull\///')
                              echo "Deploying VRT for PR #$PR_NUMBER"
                          elif [ -n "$CIRCLE_PR_NUMBER" ]; then
                              PR_NUMBER="$CIRCLE_PR_NUMBER"
                              echo "Deploying VRT for PR #$PR_NUMBER"
                          elif [[ "$CIRCLE_BRANCH" =~ ^pull/[0-9]+$ ]]; then
                              PR_NUMBER=$(echo "$CIRCLE_BRANCH" | sed 's/pull\///')
                              echo "Deploying VRT for forked PR #$PR_NUMBER"
                          elif [ -n "$GITHUB_TOKEN" ]; then
                              # GitHub API fallback
                              PR_NUMBER=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                                  -H "Accept: application/vnd.github+json" \
                                  "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?head=$CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH&state=open" \
                                  | grep -o '"number":[0-9]*' | head -1 | sed 's/"number"://')
                              
                              if [ -n "$PR_NUMBER" ]; then
                                  echo "Deploying VRT for PR #$PR_NUMBER (via GitHub API)"
                              else
                                  echo "⏭️  No PR found - skipping VRT deployment"
                                  exit 0
                              fi
                          else
                              echo "⏭️  No PR detected - skipping VRT deployment"
                              exit 0
                          fi

                          PR_HASH="pr-${PR_NUMBER}"
                      fi

                      # VRT combination for subdirectory
                      combination="<< parameters.regression_system >>-<< parameters.regression_color >>-<< parameters.regression_scale >>-<< parameters.regression_dir >>"

                      # Prepare files for deployment
                      cp projects/documentation/content/favicon.ico test/visual/ || echo "Failed to copy favicon"

                      # Upload VRT results to Azure Blob Storage
                      echo "Uploading VRT results to ${PR_HASH}/${combination}/"
                      azcopy copy "test/visual/*" \
                        "https://swcpreviews.blob.core.windows.net/\$web/${PR_HASH}/${combination}/" \
                        --recursive \
                        --from-to LocalBlob

                      # Generate the deployment URL
                      VRT_URL="https://swcpreviews.z13.web.core.windows.net/${PR_HASH}/${combination}/"
                      echo "$VRT_URL" > vrt_url.txt
                      echo "VRT URL for ${combination}: $VRT_URL"

            # move "updated" screenshot into the baseline directory before making the new cache
            - run:
                  when: always
                  command: |
                      rm -rf test/visual/screenshots-baseline
                      cp -R test/visual/screenshots-actual/updates test/visual/screenshots-baseline
            - save_cache:
                  when: always
                  name: Build Golden Images Revision Cache
                  paths:
                      - test/visual/screenshots-baseline
                  key: v2-golden-images-{{ .Revision }}-<< parameters.regression_system >>-<< parameters.regression_color >>-<< parameters.regression_scale >>-<< parameters.regression_dir >>-{{ epoch }}
            - save_cache:
                  name: Build Golden Images Branch Cache
                  paths:
                      - test/visual/screenshots-baseline
                  key: v2-golden-images-{{ .Branch }}-<< parameters.regression_system >>-<< parameters.regression_color >>-<< parameters.regression_scale >>-<< parameters.regression_dir >>-{{ epoch }}
    run-tests:
        parameters:
            config_file:
                type: string
        steps:
            - setup-project
            - run:
                  name: Run tests
                  command: |
                      mkdir -p /root/project/results
                      TESTFILES=$(circleci tests glob "{packages,tools}/*/test/*.test.js" | grep -v -E "memory\.test\.js")
                      echo "$TESTFILES" | circleci tests run --command="xargs yarn test:start --files $TESTFILES --config << parameters.config_file >>" --split-by=timings --verbose
            - store_test_results:
                  path: /root/project/results/

jobs:
    test-chromium-splitting:
        executor: node

        steps:
            - setup-project
            - run-tests:
                  config_file: web-test-runner.config.ci-chromium.js

    test-chromium:
        executor: node

        steps:
            - setup-project
            - run:
                  name: Run unit tests
                  command: |
                      TEST=$(circleci tests glob packages/*/test/*.test.js | circleci tests split --split-by=timings)
                      yarn test:start --files $TEST --config web-test-runner.config.ci-chromium.js --group no-memory-ci
            - store_test_results:
                  path: /root/project/results/

    test-chromium-memory:
        executor: node

        steps:
            - setup-project
            - run:
                  name: Run memory tests
                  command: |
                      TEST=$(circleci tests glob packages/*/test/*.test.js | circleci tests split --split-by=timings)
                      yarn test:start --files $TEST --config web-test-runner.config.ci-chromium.js --group memory-ci
            - store_test_results:
                  path: /root/project/results/

    test-firefox:
        executor: node

        steps:
            - setup-project
            - run:
                  name: Run tests
                  command: |
                      TEST=$(circleci tests glob packages/*/test/*.test.js | circleci tests split --split-by=timings)
                      yarn test:start --files $TEST --config web-test-runner.config.ci-firefox.js --group no-memory-ci
            - store_test_results:
                  path: /root/project/results/

    test-webkit:
        executor: node

        steps:
            - setup-project
            - run:
                  name: Run tests
                  command: |
                      TEST=$(circleci tests glob packages/*/test/*.test.js | circleci tests split --split-by=timings)
                      yarn test:start --files $TEST --config web-test-runner.config.ci-webkit.js --group no-memory-ci
            - store_test_results:
                  path: /root/project/results/

    beta-docs:
        executor: node

        steps:
            - setup-project
            - run:
                  name: Generate Custom Elements Manifest
                  command: yarn docs:analyze
            - run:
                  name: Move CEM to Storybook directory
                  command: cp projects/documentation/custom-elements.json storybook/
            - run:
                  name: Build documentation with path prefix
                  command: echo "SWC_DIR=beta/docs" >> $BASH_ENV
            - run:
                  name: Build documentation
                  command: yarn docs:build
            - run:
                  name: Build Storybook
                  command: yarn storybook:build
            - install-azcopy
            - run:
                  name: Deploy Beta Documentation to Azure Blob Storage
                  command: |
                      # Upload documentation to beta path
                      echo "Uploading documentation to beta/docs/"
                      azcopy copy "projects/documentation/dist/*" \
                        "https://swcpreviews.blob.core.windows.net/\$web/beta/docs/" \
                        --recursive \
                        --from-to LocalBlob

                      # Upload Storybook to beta path
                      echo "Uploading Storybook to beta/docs/storybook/"
                      azcopy copy "storybook-static/*" \
                        "https://swcpreviews.blob.core.windows.net/\$web/beta/docs/storybook/" \
                        --recursive \
                        --from-to LocalBlob

                      # Generate the deployment URLs
                      DOCS_URL="https://swcpreviews.z13.web.core.windows.net/beta/docs/"
                      STORYBOOK_URL="https://swcpreviews.z13.web.core.windows.net/beta/docs/storybook/"
                      echo "Beta Documentation URL: $DOCS_URL"
                      echo "Beta Storybook URL: $STORYBOOK_URL"

    hcm-visual:
        executor: node

        steps:
            - setup-project
            - restore_cache:
                  name: Restore Golden Images Cache
                  keys:
                      - v2-golden-images-<< pipeline.parameters.current_golden_images_hash >>-hcm-
                      - v2-golden-images-main-hcm-
            - run:
                  name: Count baseline images
                  command: find test/visual/screenshots-baseline -type f | wc -l > count_start.txt
            - run:
                  when: always
                  name: VRT Run
                  command: |
                      yarn test:ci --config web-test-runner.config.vrt.js --group vrt-hcm
            # store results and artifacts before rearranging things for the new cache.
            - store_test_results:
                  path: /root/project/results/
            - run:
                  when: on_success
                  name: Count current images
                  command: find test/visual/screenshots-actual/updates -type f | wc -l > count_end.txt
            # prevent removing regression tests without requiring a new golden cache
            - run:
                  when: on_success
                  name: Fail if there are a different number of images...
                  command: |
                      echo $(cat count_start.txt)
                      echo $(cat count_end.txt)
                      if [[ $(cat count_start.txt) -eq $(cat count_end.txt) ]]; then exit 0; else exit 1; fi
            # build diff review site
            - run:
                  when: always
                  name: Create review site
                  command: |
                      branch=$(git symbolic-ref --short HEAD)
                      node test/visual/review.js --branch=$branch --commit=<< pipeline.git.revision >> --system="hcm"
                      yarn rollup -c test/visual/rollup.config.js
            - install-azcopy
            - run:
                  when: always
                  name: Deploy Visual Tests to Azure Blob Storage
                  command: |
                      # Set deployment path based on branch
                      if [ "$CIRCLE_BRANCH" = "main" ]; then
                          PR_HASH="main"
                          echo "Deploying HCM VRT for main branch to main path"
                      else
                          # Get PR number from CircleCI environment
                          PR_NUMBER=""
                          if [ -n "$CIRCLE_PULL_REQUEST" ]; then
                              PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST | sed 's/.*\/pull\///')
                              echo "Deploying HCM VRT for PR #$PR_NUMBER"
                          elif [ -n "$CIRCLE_PR_NUMBER" ]; then
                              PR_NUMBER="$CIRCLE_PR_NUMBER"
                              echo "Deploying HCM VRT for PR #$PR_NUMBER"
                          elif [[ "$CIRCLE_BRANCH" =~ ^pull/[0-9]+$ ]]; then
                              PR_NUMBER=$(echo "$CIRCLE_BRANCH" | sed 's/pull\///')
                              echo "Deploying HCM VRT for forked PR #$PR_NUMBER"
                          elif [ -n "$GITHUB_TOKEN" ]; then
                              # GitHub API fallback
                              PR_NUMBER=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                                  -H "Accept: application/vnd.github+json" \
                                  "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?head=$CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH&state=open" \
                                  | grep -o '"number":[0-9]*' | head -1 | sed 's/"number"://')
                              
                              if [ -n "$PR_NUMBER" ]; then
                                  echo "Deploying HCM VRT for PR #$PR_NUMBER (via GitHub API)"
                              else
                                  echo "⏭️  No PR found - skipping HCM VRT deployment"
                                  exit 0
                              fi
                          else
                              echo "⏭️  No PR detected - skipping HCM VRT deployment"
                              exit 0
                          fi

                          PR_HASH="pr-${PR_NUMBER}"
                      fi

                      # Prepare files for deployment
                      cp projects/documentation/content/favicon.ico test/visual/

                      # Upload HCM VRT results to Azure Blob Storage
                      echo "Uploading HCM VRT to ${PR_HASH}/hcm/"
                      azcopy copy "test/visual/*" \
                        "https://swcpreviews.blob.core.windows.net/\$web/${PR_HASH}/hcm/" \
                        --recursive \
                        --from-to LocalBlob

                      # Generate the deployment URL
                      VRT_URL="https://swcpreviews.z13.web.core.windows.net/${PR_HASH}/hcm/"
                      echo "$VRT_URL" > vrt_url.txt
                      echo "HCM Visual Test URL: $VRT_URL"

            # move "updated" screenshot into the baseline directory before making the new cache
            - run:
                  when: always
                  command: |
                      rm -rf test/visual/screenshots-baseline
                      cp -R test/visual/screenshots-actual/updates test/visual/screenshots-baseline
            - save_cache:
                  when: always
                  name: Build Golden Images Revision Cache
                  paths:
                      - test/visual/screenshots-baseline
                  key: v2-golden-images-{{ .Revision }}-hcm-{{ epoch }}
            - save_cache:
                  name: Build Golden Images Branch Cache
                  paths:
                      - test/visual/screenshots-baseline
                  key: v2-golden-images-{{ .Branch }}-hcm-{{ epoch }}

    visual:
        executor: node
        parameters:
            system:
                type: string
            color:
                type: string
            scale:
                type: string
            dir:
                type: string
        steps:
            - setup-project
            - run-regressions:
                  regression_system: << parameters.system >>
                  regression_color: << parameters.color >>
                  regression_scale: << parameters.scale >>
                  regression_dir: << parameters.dir >>

workflows:
    build:
        jobs:
            - test-chromium
            - test-chromium-memory
            - test-firefox
            - test-webkit
            - test-chromium-splitting
            - hcm-visual:
                  filters:
                      branches:
                          # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
                          ignore: /pull\/[0-9]+/
            - beta-docs:
                  filters:
                      branches:
                          # Beta docs are only published from main
                          only: main
            - visual:
                  name: << matrix.system >>-<< matrix.color >>-<< matrix.scale >>-<< matrix.dir >>
                  matrix:
                      parameters:
                          system: [spectrum, express, spectrum-two]
                          color: [light]
                          scale: [medium]
                          dir: [ltr]
                  filters:
                      branches:
                          # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
                          ignore: /pull\/[0-9]+/
            - visual:
                  name: << matrix.system >>-<< matrix.color >>-<< matrix.scale >>-<< matrix.dir >>
                  matrix:
                      parameters:
                          system: [spectrum, express, spectrum-two]
                          color: [dark]
                          scale: [large]
                          dir: [rtl]
                  filters:
                      branches:
                          # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
                          ignore: /pull\/[0-9]+/
