version: 2.1

executors:
    node:
        docker:
            - image: mcr.microsoft.com/playwright:v1.53.1-noble
        environment:
            NODE_ENV: development
            AZCOPY_AUTO_LOGIN_TYPE: SPN
            AZCOPY_SPA_APPLICATION_ID: $AZURE_CLIENT_ID
            AZCOPY_SPA_CLIENT_SECRET: $AZURE_CLIENT_SECRET
            AZCOPY_TENANT_ID: $AZURE_TENANT_ID

parameters:
    # In order to update the VRT baseline images:
    # 1. Copy the hash of the latest golden images cache from the left sidebar in the VRT preview link (not to be confused with the arbitrary hash in the URL).
    # 2. Paste the hash in the current_golden_images_hash default parameter below.
    # 3. Commit this change to the PR branch where the changes exist.
    current_golden_images_hash:
        type: string
        default: e3b8843dd455793122ec53d4f91733eb1487b99a
    wireit_cache_name:
        type: string
        default: wireit

commands:
    install-azcopy:
        description: 'Install AzCopy and set up authentication'
        steps:
            - run:
                  name: Install AzCopy
                  command: |
                      mkdir -p ~/bin
                      cd ~/bin
                      wget -O azcopy.tar.gz https://github.com/Azure/azure-storage-azcopy/releases/download/v10.29.1/azcopy_linux_amd64_10.29.1.tar.gz
                      tar -xf azcopy.tar.gz --strip-components=1
                      chmod +x azcopy
                      echo 'export PATH=~/bin:$PATH' >> $BASH_ENV
                      source $BASH_ENV

    setup-project:
        description: 'Setup project dependencies and build'
        steps:
            - checkout
            - restore_cache:
                  keys:
                      - v4c-dependencies-{{ arch }}-{{ checksum "yarn.lock" }}
                      - v4c-dependencies-{{ arch }}-
            - restore_cache:
                  keys:
                      - v4b-<< pipeline.parameters.wireit_cache_name >>-{{ arch }}-{{ checksum "package.json" }}-
                      - v4b-<< pipeline.parameters.wireit_cache_name >>-{{ arch }}-
            - run:
                  name: Install dependencies
                  command: |
                      corepack enable
                      yarn --immutable
            - run:
                  name: Build project
                  command: yarn build
            - save_cache:
                  paths:
                      - ~/.cache/yarn
                      - ~/.cache/ms-playwright
                  key: v4c-dependencies-{{ arch }}-{{ checksum "yarn.lock" }}
            - save_cache:
                  paths:
                      - .wireit
                  key: v4b-wireit-{{ arch }}-{{ checksum "package.json" }}-{{ epoch }}

    run-tests:
        description: 'Run tests with CircleCI test splitting'
        parameters:
            config_file:
                type: string
            test_patterns:
                type: string
            exclude_pattern:
                type: string
                default: ''
        steps:
            - run:
                  name: Run tests
                  command: |
                      mkdir -p /root/project/results

                      # Get test files using proper space-separated patterns
                      TEST_FILES=$(circleci tests glob << parameters.test_patterns >>)

                      # Apply exclusions if specified
                      if [ -n "<< parameters.exclude_pattern >>" ]; then
                          TEST_FILES=$(echo "$TEST_FILES" | grep -v -E "<< parameters.exclude_pattern >>")
                      fi

                      # Debug output
                      echo "Test files to run:"
                      echo "$TEST_FILES"

                      # Run tests with CircleCI splitting
                      echo "$TEST_FILES" | circleci tests run \
                          --command="xargs yarn test:start --files --config << parameters.config_file >>" \
                          --split-by=timings \
                          --verbose
            - store_test_results:
                  path: /root/project/results/
            - store_artifacts:
                  path: /root/project/results/
                  destination: test-results

jobs:
    lint:
        executor: node
        resource_class: medium
        steps:
            - setup-project
            - run:
                  name: Lint code
                  command: yarn lint
            - run:
                  name: Check for changes
                  command: git diff-files --exit-code

    test-chromium:
        executor: node
        parallelism: 5
        resource_class: large
        steps:
            - setup-project
            - run-tests:
                  config_file: web-test-runner.config.ci-chromium.js
                  test_patterns: 'packages/*/test/*.test.js tools/*/test/*.test.js'
                  exclude_pattern: '-memory\.test\.js'

    test-chromium-memory:
        executor: node
        parallelism: 5
        resource_class: xlarge
        steps:
            - setup-project
            - run-tests:
                  config_file: web-test-runner.config.ci-chromium.js
                  test_patterns: 'packages/**/*-memory.test.js tools/**/*-memory.test.js'
                  exclude_pattern: 'packages/(color-area|color-wheel|color-slider)/'

    test-firefox:
        executor: node
        parallelism: 5
        resource_class: large
        steps:
            - setup-project
            - run-tests:
                  config_file: web-test-runner.config.ci-firefox.js
                  test_patterns: 'packages/*/test/*.test.js tools/*/test/*.test.js'
                  exclude_pattern: '-memory\.test\.js'

    test-webkit:
        executor: node
        parallelism: 5
        resource_class: large
        steps:
            - setup-project
            - run-tests:
                  config_file: web-test-runner.config.ci-webkit.js
                  test_patterns: 'packages/*/test/*.test.js tools/*/test/*.test.js'
                  exclude_pattern: '-memory\.test\.js'

    visual-regression:
        executor: node
        resource_class: xlarge
        parameters:
            system: { type: string }
            color: { type: string }
            scale: { type: string }
            dir: { type: string }
        steps:
            - setup-project
            - restore_cache:
                  name: Restore golden images
                  keys:
                      - v2-golden-images-<< pipeline.parameters.current_golden_images_hash >>-<< parameters.system >>-<< parameters.color >>-<< parameters.scale >>-<< parameters.dir >>-
                      - v2-golden-images-main-<< parameters.system >>-<< parameters.color >>-<< parameters.scale >>-<< parameters.dir >>-
            - run:
                  name: Count baseline images
                  command: find test/visual/screenshots-baseline -type f | wc -l > count_start.txt
            - run:
                  name: Run visual regression tests
                  command: |
                      mkdir -p /root/project/results
                      yarn test:ci --config web-test-runner.config.vrt.js --group vrt-<< parameters.system >>-<< parameters.color >>-<< parameters.scale >>-<< parameters.dir >>
            - store_test_results:
                  path: /root/project/results/
            - run:
                  name: Validate image count
                  command: |
                      find test/visual/screenshots-actual/updates -type f | wc -l > count_end.txt
                      echo "Baseline images: $(cat count_start.txt)"
                      echo "Generated images: $(cat count_end.txt)"
                      if [[ $(cat count_start.txt) -eq $(cat count_end.txt) ]]; then 
                          echo "✅ Image count matches"
                      else 
                          echo "❌ Image count mismatch"
                          exit 1
                      fi
                  when: on_success
            - run:
                  name: Create VRT review site
                  command: |
                      branch=$(git symbolic-ref --short HEAD)
                      node test/visual/review.js --branch="$branch" --commit="<< pipeline.git.revision >>" --system="<< parameters.system >> << parameters.color >> << parameters.scale >> << parameters.dir >>"
                      yarn rollup -c test/visual/rollup.config.js
                  when: always
            - run:
                  name: Deploy VRT results
                  command: |
                      # Determine deployment path
                      if [ "$CIRCLE_BRANCH" = "main" ]; then
                          DEPLOY_PATH="main"
                      else
                          PR_NUMBER=$(echo "$CIRCLE_PULL_REQUEST" | sed 's/.*\/pull\///' || echo "$CIRCLE_PR_NUMBER")
                          DEPLOY_PATH="pr-${PR_NUMBER}"
                      fi

                      # Deploy to Azure
                      COMBINATION="<< parameters.system >>-<< parameters.color >>-<< parameters.scale >>-<< parameters.dir >>"
                      azcopy copy "test/visual/*" \
                          "https://swcpreviews.blob.core.windows.net/\$web/${DEPLOY_PATH}/${COMBINATION}/" \
                          --recursive --from-to LocalBlob

                      echo "VRT URL: https://swcpreviews.z13.web.core.windows.net/${DEPLOY_PATH}/${COMBINATION}/"
                  when: always
            - run:
                  name: Update golden images cache
                  command: |
                      rm -rf test/visual/screenshots-baseline
                      cp -R test/visual/screenshots-actual/updates test/visual/screenshots-baseline
                  when: always
            - save_cache:
                  name: Save golden images cache
                  paths:
                      - test/visual/screenshots-baseline
                  key: v2-golden-images-{{ .Revision }}-<< parameters.system >>-<< parameters.color >>-<< parameters.scale >>-<< parameters.dir >>-{{ epoch }}
                  when: always

    hcm-visual:
        executor: node
        resource_class: xlarge
        steps:
            - setup-project
            - restore_cache:
                  name: Restore golden images
                  keys:
                      - v2-golden-images-<< pipeline.parameters.current_golden_images_hash >>-hcm-
                      - v2-golden-images-main-hcm-
            - run:
                  name: Count baseline images
                  command: find test/visual/screenshots-baseline -type f | wc -l > count_start.txt
            - run:
                  name: Run HCM visual tests
                  command: |
                      mkdir -p /root/project/results
                      yarn test:ci --config web-test-runner.config.vrt.js --group vrt-hcm
            - store_test_results:
                  path: /root/project/results/
            - run:
                  name: Validate image count
                  command: |
                      find test/visual/screenshots-actual/updates -type f | wc -l > count_end.txt
                      echo "Baseline images: $(cat count_start.txt)"
                      echo "Generated images: $(cat count_end.txt)"
                      if [[ $(cat count_start.txt) -eq $(cat count_end.txt) ]]; then 
                          echo "✅ Image count matches"
                      else 
                          echo "❌ Image count mismatch"
                          exit 1
                      fi
                  when: on_success
            - run:
                  name: Create VRT review site
                  command: |
                      branch=$(git symbolic-ref --short HEAD)
                      node test/visual/review.js --branch="$branch" --commit="<< pipeline.git.revision >>" --system="hcm"
                      yarn rollup -c test/visual/rollup.config.js
                  when: always
            - install-azcopy
            - run:
                  name: Deploy VRT results
                  command: |
                      # Determine deployment path
                      if [ "$CIRCLE_BRANCH" = "main" ]; then
                          DEPLOY_PATH="main"
                      else
                          PR_NUMBER=$(echo "$CIRCLE_PULL_REQUEST" | sed 's/.*\/pull\///' || echo "$CIRCLE_PR_NUMBER")
                          DEPLOY_PATH="pr-${PR_NUMBER}"
                      fi

                      # Deploy to Azure
                      azcopy copy "test/visual/*" \
                          "https://swcpreviews.blob.core.windows.net/\$web/${DEPLOY_PATH}/hcm/" \
                          --recursive --from-to LocalBlob

                      echo "VRT URL: https://swcpreviews.z13.web.core.windows.net/${DEPLOY_PATH}/hcm/"
                  when: always
            - run:
                  name: Update golden images cache
                  command: |
                      rm -rf test/visual/screenshots-baseline
                      cp -R test/visual/screenshots-actual/updates test/visual/screenshots-baseline
                  when: always
            - save_cache:
                  name: Save golden images cache
                  paths:
                      - test/visual/screenshots-baseline
                  key: v2-golden-images-{{ .Revision }}-hcm-{{ epoch }}
                  when: always

    beta-docs:
        executor: node
        resource_class: medium
        steps:
            - setup-project
            - run:
                  name: Build documentation
                  command: |
                      yarn docs:analyze
                      cp projects/documentation/custom-elements.json storybook/
                      echo "SWC_DIR=beta/docs" >> $BASH_ENV
                      yarn docs:build
                      yarn storybook:build
            - install-azcopy
            - run:
                  name: Deploy beta documentation
                  command: |
                      azcopy copy "projects/documentation/dist/*" \
                          "https://swcpreviews.blob.core.windows.net/\$web/beta/docs/" \
                          --recursive --from-to LocalBlob

                      azcopy copy "storybook-static/*" \
                          "https://swcpreviews.blob.core.windows.net/\$web/beta/docs/storybook/" \
                          --recursive --from-to LocalBlob

workflows:
    build-and-test:
        jobs:
            # Fast checks first
            - lint

            # Run all tests in parallel after linting passes
            - test-chromium:
                  requires: [lint]
            - test-chromium-memory:
                  requires: [lint]
            - test-firefox:
                  requires: [lint]
            - test-webkit:
                  requires: [lint]

            # Visual regression tests (only for non-forked PRs)
            # Each system gets exactly 2 tests: medium+light+ltr and large+dark+rtl
            - visual-regression:
                  name: vrt-<< matrix.system >>-<< matrix.color >>-<< matrix.scale >>-<< matrix.dir >>
                  matrix:
                      parameters:
                          system: [spectrum, express, spectrum-two]
                          color: [light, dark]
                          scale: [medium, large]
                          dir: [ltr, rtl]
                      exclude:
                          # Keep only: medium+light+ltr and large+dark+rtl
                          - color: light
                            scale: large
                          - color: dark
                            scale: medium
                          - color: light
                            scale: medium
                            dir: rtl
                          - color: dark
                            scale: large
                            dir: ltr
                  requires: [test-chromium, test-firefox, test-webkit]
                  filters:
                      branches:
                          ignore: /pull\/[0-9]+/

            # HCM visual tests (separate job for simplicity)
            - hcm-visual:
                  requires: [test-chromium, test-firefox, test-webkit]
                  filters:
                      branches:
                          ignore: /pull\/[0-9]+/

            # Beta documentation (main branch only)
            - beta-docs:
                  requires: [test-chromium, test-firefox, test-webkit]
                  filters:
                      branches:
                          only: main
