import type { ReactiveController, ReactiveElement } from 'lit';
declare type DirectionTypes = 'horizontal' | 'vertical' | 'both' | 'grid';
export declare class RovingTabindexController<T extends HTMLElement> implements ReactiveController {
    host: ReactiveElement;
    get elements(): T[];
    private cachedElements?;
    private _elements;
    calculateFocusInIndex: (_elements: T[]) => number;
    get currentIndex(): number;
    set currentIndex(currentIndex: number);
    private _currentIndex;
    get focusInElement(): T;
    shouldInit: boolean;
    get direction(): DirectionTypes;
    _direction: () => DirectionTypes;
    directionLength: number;
    elementEnterAction: (_el: T) => void;
    get focusInIndex(): number;
    isFocusableElement: (_el: T) => boolean;
    isEventWithinListenerScope(event: Event): boolean;
    _listenerScope: () => HTMLElement;
    constructor(host: ReactiveElement, { calculateFocusInIndex, direction, elementEnterAction, elements, isFocusableElement, listenerScope, }?: {
        calculateFocusInIndex?: (_elements: T[]) => number;
        direction?: DirectionTypes | (() => DirectionTypes);
        elementEnterAction?: (el: T) => void;
        elements: () => T[];
        isFocusableElement?: (el: T) => boolean;
        listenerScope?: HTMLElement | (() => HTMLElement);
    });
    focus(options?: FocusOptions): void;
    clearElementCache(): void;
    setCurrentIndexCircularly(diff: number): void;
    hostContainsFocus(): void;
    hostNoLongerContainsFocus(): void;
    hostContainsRelatedTarget(event: FocusEvent): boolean;
    handleFocusin: (event: FocusEvent) => void;
    handleFocusout: (event: FocusEvent) => void;
    acceptsEventCode(code: string): boolean;
    handleKeydown: (event: KeyboardEvent) => void;
    focusedOutTabindexes(): void;
    focusedInTabindexes(): void;
    updateTabindexes(getTabIndex: (el: HTMLElement) => number | false): void;
    manage(): void;
    unmanage(): void;
    addEventListeners(): void;
    removeEventListeners(): void;
    hostUpdated(): void;
    hostConnected(): void;
    hostDisconnected(): void;
}
export {};
