/*
Copyright 2023 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

/* THIS FILE IS MACHINE GENERATED. DO NOT EDIT */

:host {
    z-index: 0;
    inline-size: var(--mod-thumbnail-size, var(--spectrum-thumbnail-size));
    block-size: var(--mod-thumbnail-size, var(--spectrum-thumbnail-size));
    vertical-align: top;
    margin: 0;
    padding: 0;
    display: block;
    position: relative;
    overflow: hidden;
}

:host,
:host:before {
    border-radius: var(
        --mod-thumbnail-border-radius,
        var(--spectrum-thumbnail-border-radius)
    );
}

:host:before {
    content: '';
    z-index: 2;
    box-shadow: inset 0 0 0
        var(
            --mod-thumbnail-border-width,
            var(--spectrum-thumbnail-border-width)
        )
        var(
            --highcontrast-thumbnail-border-color,
            var(
                --mod-thumbnail-border-color,
                var(--spectrum-thumbnail-border-color-rgba)
            )
        );
    block-size: 100%;
    inline-size: 100%;
    position: absolute;
}

:host([disabled]) {
    opacity: var(
        --mod-thumbnail-color-opacity-disabled,
        var(--spectrum-thumbnail-color-opacity-disabled)
    );
}

:host([focused]) {
    overflow: visible;
}

:host([focused]):after {
    content: '';
    border-color: var(
        --highcontrast-thumbnail-focus-indicator-color,
        var(
            --mod-thumbnail-focus-indicator-color,
            var(--spectrum-thumbnail-focus-indicator-color)
        )
    );
    border-style: solid;
    border-width: var(
        --mod-thumbnail-focus-indicator-thickness,
        var(--spectrum-thumbnail-focus-indicator-thickness)
    );
    border-radius: var(
        --mod-thumbnail-border-radius,
        var(--spectrum-thumbnail-border-radius)
    );
    position: absolute;
    inset-block-start: calc(
        (
                var(
                        --mod-thumbnail-focus-indicator-gap,
                        var(--spectrum-thumbnail-focus-indicator-gap)
                    ) +
                    var(
                        --mod-thumbnail-focus-indicator-thickness,
                        var(--spectrum-thumbnail-focus-indicator-thickness)
                    )
            ) * -1
    );
    inset-block-end: calc(
        (
                var(
                        --mod-thumbnail-focus-indicator-gap,
                        var(--spectrum-thumbnail-focus-indicator-gap)
                    ) +
                    var(
                        --mod-thumbnail-focus-indicator-thickness,
                        var(--spectrum-thumbnail-focus-indicator-thickness)
                    )
            ) * -1
    );
    inset-inline-start: calc(
        (
                var(
                        --mod-thumbnail-focus-indicator-gap,
                        var(--spectrum-thumbnail-focus-indicator-gap)
                    ) +
                    var(
                        --mod-thumbnail-focus-indicator-thickness,
                        var(--spectrum-thumbnail-focus-indicator-thickness)
                    )
            ) * -1
    );
    inset-inline-end: calc(
        (
                var(
                        --mod-thumbnail-focus-indicator-gap,
                        var(--spectrum-thumbnail-focus-indicator-gap)
                    ) +
                    var(
                        --mod-thumbnail-focus-indicator-thickness,
                        var(--spectrum-thumbnail-focus-indicator-thickness)
                    )
            ) * -1
    );
}

:host([focused]) .image-wrapper {
    border-radius: var(
        --mod-thumbnail-border-radius,
        var(--spectrum-thumbnail-border-radius)
    );
    overflow: hidden;
}

:host([layer]) {
    box-sizing: border-box;
    border-color: var(
        --highcontrast-thumbnail-layer-border-color-outer,
        var(
            --mod-thumbnail-layer-border-color-outer,
            var(--spectrum-thumbnail-layer-border-color-outer)
        )
    );
    border-style: solid;
    border-width: var(
        --mod-thumbnail-layer-border-width-outer,
        var(--spectrum-thumbnail-layer-border-width-outer)
    );
    justify-content: center;
    align-items: center;
    display: flex;
}

:host([layer]):before {
    content: none;
}

:host([layer][selected]) {
    outline-color: var(
        --highcontrast-thumbnail-border-color-selected,
        var(
            --mod-thumbnail-border-color-selected,
            var(--spectrum-thumbnail-border-color-selected)
        )
    );
    outline-style: solid;
    outline-width: var(
        --mod-thumbnail-border-width-selected,
        var(--spectrum-thumbnail-border-width-selected)
    );
    outline-offset: calc(
        var(
                --mod-thumbnail-border-width-selected,
                var(--spectrum-thumbnail-border-width-selected)
            ) -
            var(
                --mod-thumbnail-layer-border-width-inner,
                var(--spectrum-thumbnail-layer-border-width-inner)
            )
    );
}

.layer-inner {
    inline-size: calc(
        var(--spectrum-thumbnail-size) -
            (
                var(
                    --mod-thumbnail-layer-border-width-inner,
                    var(--spectrum-thumbnail-layer-border-width-inner)
                )
            ) * 2
    );
    block-size: calc(
        var(--spectrum-thumbnail-size) -
            (
                var(
                    --mod-thumbnail-layer-border-width-inner,
                    var(--spectrum-thumbnail-layer-border-width-inner)
                )
            ) * 2
    );
    outline-color: var(
        --highcontrast-thumbnail-layer-border-color-inner,
        var(
            --mod-thumbnail-layer-border-color-inner,
            var(--spectrum-thumbnail-layer-border-color-inner)
        )
    );
    outline-style: solid;
    outline-width: calc(
        var(
                --mod-thumbnail-layer-border-width-inner,
                var(--spectrum-thumbnail-layer-border-width-inner)
            ) -
            var(
                --mod-thumbnail-layer-border-width-outer,
                var(--spectrum-thumbnail-layer-border-width-outer)
            )
    );
    justify-content: center;
    align-items: center;
    display: flex;
}

.image-wrapper {
    justify-content: center;
    align-items: center;
    block-size: 100%;
    inline-size: 100%;
    display: flex;
}

::slotted(*) {
    z-index: 1;
    max-block-size: 100%;
    max-inline-size: 100%;
    position: relative;
}

:host([cover]) ::slotted(*) {
    object-fit: cover;
    object-position: center;
    block-size: 100%;
    inline-size: 100%;
}

.background {
    z-index: 0;
    border-radius: var(
        --mod-thumbnail-border-radius,
        var(--spectrum-thumbnail-border-radius)
    );
    background-position: 50%;
    background-size: cover;
    block-size: 100%;
    inline-size: 100%;
    position: absolute;
    inset-block: 0;
    inset-inline: 0;
}

@media (forced-colors: active) {
    :host {
        --highcontrast-thumbnail-border-color-selected: Highlight;
        --highcontrast-thumbnail-focus-indicator-color: Highlight;
        --highcontrast-thumbnail-border-color: CanvasText;
        --highcontrast-thumbnail-layer-border-color-inner: Canvas;
        --highcontrast-thumbnail-layer-border-color-outer: CanvasText;
        forced-color-adjust: none;
    }
}
