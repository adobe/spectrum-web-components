/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

/* Base variables */
:host {
    --spectrum-combobox-inline-size: var(--spectrum-field-width);
    --spectrum-combobox-block-size: var(--spectrum-component-height-100);
    --spectrum-combobox-min-inline-size: calc(var(--spectrum-combo-box-minimum-width-multiplier) * var(--spectrum-combobox-block-size));
    --spectrum-combobox-button-width: var(--spectrum-combobox-block-size);
    --spectrum-combobox-icon-size: var(--spectrum-workflow-icon-size-100);
    --spectrum-combobox-font-size: var(--spectrum-font-size-100);
    --spectrum-combobox-spacing-inline-icon-to-button: var(--spectrum-combo-box-visual-to-field-button-medium);
    --spectrum-combobox-block-spacing-edge-to-progress-circle: var(--spectrum-field-top-to-progress-circle-medium);
    --spectrum-combobox-block-spacing-edge-to-alert: var(--spectrum-field-top-to-alert-icon-medium);
    --spectrum-combobox-spacing-edge-to-menu: var(--spectrum-component-to-menu-medium);
    --spectrum-combobox-spacing-block-start-edge-to-text: var(--spectrum-component-top-to-text-100);
    --spectrum-combobox-spacing-block-end-edge-to-text: var(--spectrum-component-bottom-to-text-100);
    --spectrum-combobox-spacing-inline-start-edge-to-text: var(--spectrum-component-edge-to-text-100);
    --spectrum-combobox-spacing-inline-end-edge-to-text: var(--spectrum-component-edge-to-text-100);
    --spectrum-combobox-focus-indicator-thickness: var(--spectrum-focus-indicator-thickness);
    --spectrum-combobox-focus-indicator-gap: var(--spectrum-focus-indicator-gap);
    --spectrum-combobox-focus-indicator-color: var(--spectrum-focus-indicator-color);
    --spectrum-combobox-border-radius: var(--spectrum-corner-radius-100);
    --spectrum-combobox-border-width: var(--spectrum-border-width-100);
    --spectrum-combobox-spacing-label-to-combobox: var(--spectrum-field-label-to-component);
    --spectrum-combobox-font-style: var(--spectrum-default-font-style);
    --spectrum-combobox-line-height: var(--spectrum-line-height-100);
    --spectrum-combobox-border-color-invalid-default: var(--spectrum-negative-border-color-default);
    --spectrum-combobox-border-color-invalid-hover: var(--spectrum-negative-border-color-hover);
    --spectrum-combobox-border-color-invalid-focus: var(--spectrum-negative-border-color-focus);
    --spectrum-combobox-border-color-invalid-focus-hover: var(--spectrum-negative-border-color-focus-hover);
    --spectrum-combobox-border-color-invalid-key-focus: var(--spectrum-negative-border-color-key-focus);
    --spectrum-textfield-focus-indicator-gap: var(--spectrum-combobox-focus-indicator-gap);
    --spectrum-textfield-focus-indicator-width: var(--spectrum-combobox-focus-indicator-thickness);
    --spectrum-textfield-focus-indicator-color: var(--spectrum-combobox-focus-indicator-color);
    --spectrum-textfield-background-color: var(--spectrum-combobox-background-color-default);
    --spectrum-textfield-background-color-disabled: var(--spectrum-combobox-background-color-disabled);
    --spectrum-textfield-font-family: var(--spectrum-combobox-font-family);
    --spectrum-textfield-font-weight: var(--spectrum-combobox-font-weight);
    --spectrum-textfield-text-color-default: var(--spectrum-combobox-font-color-default);
    --spectrum-textfield-text-color-hover: var(--spectrum-combobox-font-color-hover);
    --spectrum-textfield-text-color-focus: var(--spectrum-combobox-font-color-focus);
    --spectrum-textfield-text-color-focus-hover: var(--spectrum-combobox-font-color-focus-hover);
    --spectrum-textfield-text-color-keyboard-focus: var(--spectrum-combobox-font-color-key-focus);
    --spectrum-textfield-text-color-disabled: var(--spectrum-combobox-font-color-disabled);
    --spectrum-textfield-border-width: var(--spectrum-combobox-border-width);
    --spectrum-textfield-border-color: var(--spectrum-combobox-border-color-default);
    --spectrum-textfield-border-color-disabled: var(--spectrum-combobox-border-color-disabled);
    --spectrum-textfield-border-color-focus: var(--spectrum-combobox-border-color-focus);
    --spectrum-textfield-border-color-focus-hover: var(--spectrum-combobox-border-color-focus-hover);
    --spectrum-textfield-border-color-hover: var(--spectrum-combobox-border-color-hover);
    --spectrum-textfield-border-color-keyboard-focus: var(--spectrum-combobox-border-color-key-focus);
    --spectrum-textfield-border-color-invalid-default: var(--spectrum-combobox-border-color-invalid-default);
    --spectrum-textfield-border-color-invalid-hover: var(--spectrum-combobox-border-color-invalid-hover);
    --spectrum-textfield-border-color-invalid-focus: var(--spectrum-combobox-border-color-invalid-focus);
    --spectrum-textfield-border-color-invalid-focus-hover: var(--spectrum-combobox-border-color-invalid-focus-hover);
    --spectrum-textfield-border-color-invalid-keyboard-focus: var(--spectrum-combobox-border-color-invalid-key-focus);
    --spectrum-textfield-icon-color-invalid: var(--spectrum-combobox-alert-icon-color);
    --spectrum-picker-button-border-width: var(--spectrum-combobox-border-width);
    --spectrum-picker-button-border-color: var(--spectrum-combobox-border-color-default);
    --spectrum-picker-button-background-color: var(--spectrum-combobox-background-color-default);
    --spectrum-picker-button-background-color-disabled: var(--spectrum-combobox-background-color-disabled);
    --spectrum-picker-button-font-color-disabled: var(--spectrum-combobox-font-color-disabled);
    --spectrum-picker-button-border-color-disabled: var(--spectrum-combobox-border-color-disabled);
    --spectrum-combobox-readonly-input-background-color: var(--spectrum-gray-50);
    --spectrum-combobox-readonly-border-color-invalid-default: var(--spectrum-negative-border-color-default);
    --spectrum-combobox-readonly-background-color-disabled: var(--spectrum-disabled-background-color);
    --spectrum-combobox-readonly-text-color-disabled: var(--spectrum-disabled-content-color);
    --spectrum-combobox-readonly-border-color-disabled: var(--spectrum-disabled-border-color);
    --spectrum-combobox-button-inline-offset: calc(var(--spectrum-combobox-block-size) / 2 - var(--spectrum-combobox-icon-size) / 2);
    --spectrum-picker-button-background-color-quiet: transparent;
    --spectrum-picker-button-border-color-quiet: transparent;
    --spectrum-combobox-border-color-default: var(--spectrum-gray-500);
    --spectrum-combobox-border-color-hover: var(--spectrum-gray-600);
    --spectrum-combobox-border-color-focus: var(--spectrum-gray-800);
    --spectrum-combobox-border-color-focus-hover: var(--spectrum-gray-900);
    --spectrum-combobox-border-color-key-focus: var(--spectrum-gray-800);
    --spectrum-combobox-readonly-input-border-color: var(--spectrum-gray-500);
    --spectrum-combobox-background-color-disabled: var(--spectrum-gray-25);
    --spectrum-combobox-border-color-disabled: var(--spectrum-disabled-border-color);
}

:host {
    flex-wrap: wrap;

    inline-size: var(--spectrum-combobox-inline-size);
    min-inline-size: var(--spectrum-combobox-min-inline-size);
    block-size: var(--spectrum-combobox-block-size);
    border-radius: var(--spectrum-combobox-border-radius);
    display: inline-flex;
    flex-direction: row;
    margin-block-start: var(--spectrum-combobox-spacing-label-to-combobox);
    position: relative;
}

:host([label-position="inline-start"]) {
    flex-wrap: nowrap;
}

:host([readonly]) sp-picker-button {
    visibility: hidden;
    pointer-events: none;
}

sp-field-label {
    display: block;
    inline-size: 100%;
}

:host([label-position="inline-start"]) sp-field-label {
    inline-size: auto;
}

sp-popover {
    max-block-size: var(--spectrum-combobox-popover-max-block-size);
}

sp-popover:not(sp-overlay sp-popover) {
    display: none;
}

.icon {
    margin: 0;
}

/* TODO: The following two selector blocks are meant to override the #textfield:hover styles.
 * #textfield:hover .input was overriding the disabled border colors in S2 foundations, as well
 * as the border colors when a combobox was focused+hovered.
 */
:host([disabled]) #textfield .input,
:host([disabled]) #textfield:hover .input {
    border-color: var(--spectrum-combobox-border-color-disabled);
}

#textfield:hover .input:focus {
    border-color: var(--spectrum-combobox-border-color-focus-hover);
}

::slotted([slot="option"]) {
    display: none;
}

.button {
    inset-block-end: 0;

    position: absolute;
    inset-inline-end: calc(var(--spectrum-combobox-button-inline-offset, 0px) * -1);
}

[hidden] {
    display: none !important;
}

.visually-hidden {
    border: 0;
    clip: rect(0, 0, 0, 0);
    clip-path: inset(50%);
    block-size: 1px;
    margin: 0 -1px -1px 0;
    overflow: hidden;
    padding: 0;
    position: absolute;
    inline-size: 1px;
    white-space: nowrap;
}

:host([disabled]) {
    border-color: var(--spectrum-combobox-border-color-disabled);
}

:host(:hover) {
    border-color: var(--spectrum-combobox-border-color-focus-hover);
}

:host([size="s"]) {
}

:host([size="l"]) {
}

:host([size="xl"]) {
}

:host([quiet]) {
    border-radius: 0;
}

:host([quiet][size="s"]) {
}

:host([quiet][size="l"]) {
}

:host([quiet][size="xl"]) {
}

.button.spectrum-PickerButton--quiet .spectrum-PickerButton-fill {
    forced-color-adjust: none;
}

.button.spectrum-PickerButton--quiet .spectrum-PickerButton-icon {
    color: initial;
}

.spectrum-Popover.is-open {
    transform: translateY(var(--spectrum-combobox-spacing-edge-to-menu));
}

:host([keyboard-focused]) .is-readOnly:not(.spectrum-Combobox--quiet) #textfield #input {
    outline-offset: var(--spectrum-textfield-focus-indicator-gap);
    outline: var(--spectrum-textfield-focus-indicator-width) solid;
    outline-color: var(--spectrum-textfield-focus-indicator-color);
}

:host .is-readOnly:not(.spectrum-Combobox--quiet) #input:read-only {
    background-color: var(--spectrum-combobox-readonly-input-background-color);
    border-color: var(--spectrum-combobox-readonly-input-border-color);
}

:host([invalid]) .is-readOnly:not(.spectrum-Combobox--quiet) #input:read-only {
    border-color: var(--highcontrast-textfield-border-color-invalid-default, var(--spectrum-textfield-border-color-invalid-default, var(--spectrum-combobox-readonly-border-color-invalid-default)));
}

:host([disabled]) .is-readOnly:not(.spectrum-Combobox--quiet) #input:read-only {
    background-color: var(--spectrum-textfield-background-color-disabled, var(--spectrum-combobox-readonly-background-color-disabled));
    border-color: #0000;
    border-color: var(--spectrum-textfield-border-color-disabled, var(--spectrum-combobox-readonly-border-color-disabled, transparent));
    color: var(--highcontrast-textfield-text-color-disabled, var(--spectrum-textfield-text-color-disabled, var(--spectrum-combobox-readonly-text-color-disabled)));
}

.progress-circle {
    position: absolute;
    inset-block-start: var(--spectrum-combobox-block-spacing-edge-to-progress-circle);
    inset-block-end: var(--spectrum-combobox-block-spacing-edge-to-alert);
    inset-inline-end: calc(var(--spectrum-combobox-spacing-inline-icon-to-button) + var(--spectrum-combobox-button-width));
}

.progress-circle:dir(rtl),
:host([dir="rtl"]) .progress-circle {
    inset-inline-start: calc(var(--spectrum-combobox-spacing-inline-icon-to-button) + var(--spectrum-combobox-button-width));
    inset-inline-end: inherit;
}

.button:not(:disabled, .is-invalid, [quiet]) {
}

:host([focused]) .button:not(:disabled, .is-invalid, .spectrum-PickerButton--quiet),
.button:not(:disabled, .is-invalid, [quiet]):focus,
:host([focused]) .button:not(:disabled, .is-invalid, [quiet]),
:host:has(:focus) .button:not(:disabled, .is-invalid, [quiet]) {
}

:host([keyboard-focused]) .button:not(:disabled, .is-invalid, .spectrum-PickerButton--quiet),
.button:not(:disabled, .is-invalid, [quiet]):focus-visible,
:host([keyboard-focused]) .button:not(:disabled, .is-invalid, [quiet]) {
}

.button:not(:disabled, .is-invalid, [quiet]):active,
:host:has(:active) .button:not(:disabled, .is-invalid, [quiet]) {
}

:host([invalid]) .button:not(:disabled, .spectrum-PickerButton--quiet) {
}

:host([invalid][focused]) .button:not(:disabled, .spectrum-PickerButton--quiet),
:host([invalid]) .button:not(:disabled, .spectrum-PickerButton--quiet):focus,
:host([focused][invalid]) .button:not(:disabled, .spectrum-PickerButton--quiet),
:host([invalid]):has(:focus) .button:not(:disabled, .spectrum-PickerButton--quiet) {
}

:host([invalid][keyboard-focused]) .button:not(:disabled, .spectrum-PickerButton--quiet),
:host([invalid]) .button:not(:disabled, .spectrum-PickerButton--quiet):focus-visible,
:host([keyboard-focused][invalid]) .button:not(:disabled, .spectrum-PickerButton--quiet) {
}

:host([invalid]) .button:not(:disabled, .spectrum-PickerButton--quiet):active,
:host([invalid]):has(:active) .button:not(:disabled, .spectrum-PickerButton--quiet) {
}

#textfield {
    inline-size: 100%;
}

#input {
    backface-visibility: hidden;
    line-height: var(--spectrum-combobox-line-height);
    font-size: var(--spectrum-combobox-font-size);
    font-style: var(--spectrum-combobox-font-style);
    padding-block-start: calc(var(--spectrum-combobox-spacing-block-start-edge-to-text) - var(--spectrum-combobox-border-width));
    padding-block-end: calc(var(--spectrum-combobox-spacing-block-end-edge-to-text) - var(--spectrum-combobox-border-width));
    padding-inline-start: calc(var(--spectrum-combobox-spacing-inline-start-edge-to-text) - var(--spectrum-combobox-border-width));
    padding-inline-end: calc(var(--spectrum-combobox-button-width) + var(--spectrum-combobox-spacing-inline-end-edge-to-text) - var(--spectrum-combobox-border-width) * 2);
}

#input::placeholder {
}

#input:active {
}

#input:focus,
:host([focused]) #textfield #input {
}

:host([disabled]) .is-readOnly:not(.spectrum-Combobox--quiet) #input:read-only:hover {
    background-color: var(--spectrum-textfield-background-color-disabled, var(--spectrum-combobox-readonly-background-color-disabled));
}

.button:not(:disabled, .is-invalid, [quiet]):hover,
:host(:hover) .button:not(:disabled, .is-invalid, [quiet]) {
}

:host([focused]) .button:not(:disabled, .is-invalid, .spectrum-PickerButton--quiet):hover,
.button:not(:disabled, .is-invalid, [quiet]):focus:hover,
:host([focused]:hover) .button:not(:disabled, .is-invalid, [quiet]),
:host(:hover):has(:focus) .button:not(:disabled, .is-invalid, [quiet]) {
}

:host([invalid]) .button:not(:disabled, .spectrum-PickerButton--quiet):hover,
:host([invalid]:hover) .button:not(:disabled, .spectrum-PickerButton--quiet) {
}

:host([invalid][focused]) .button:not(:disabled, .spectrum-PickerButton--quiet):hover,
:host([invalid]) .button:not(:disabled, .spectrum-PickerButton--quiet):focus:hover,
:host([focused][invalid]:hover) .button:not(:disabled, .spectrum-PickerButton--quiet),
:host([invalid]:hover):has(:focus) .button:not(:disabled, .spectrum-PickerButton--quiet) {
}

#input:hover,
#textfield:hover #input {
}

#input:focus:hover,
:host([focused]) #textfield #input:hover {
}

:host([keyboard-focused]) #textfield #input {
}

:host([invalid]) #textfield #input,
:host([pending]) #textfield #input {
    padding-inline-end: calc(var(--spectrum-combobox-button-width) + var(--spectrum-combobox-spacing-inline-icon-to-button) + var(--spectrum-combobox-icon-size) + var(--spectrum-combobox-spacing-inline-end-edge-to-text) - var(--spectrum-combobox-button-inline-offset, 0px) - var(--spectrum-combobox-border-width) * 2);
}

:host([invalid]) #textfield .icon {
    inline-size: var(--spectrum-combobox-icon-size);
    block-size: var(--spectrum-combobox-icon-size);
    inset-block-start: var(--spectrum-combobox-block-spacing-edge-to-alert);
    inset-block-end: var(--spectrum-combobox-block-spacing-edge-to-alert);
    inset-inline-end: calc(var(--spectrum-combobox-spacing-inline-icon-to-button) + var(--spectrum-combobox-button-width));
}

:host([disabled]) #textfield .icon,
:host([pending]) #textfield .icon,
#textfield.is-readOnly .icon {
    display: none;
}

:host([quiet][invalid]) #textfield .icon {
    inset-inline-end: var(--spectrum-combobox-button-width);
}

:host([quiet]) #textfield.is-readOnly #input:read-only {
    border-block-end: var(--spectrum-combobox-border-width) solid var(--spectrum-combobox-readonly-input-border-color, var(--spectrum-combobox-readonly-input-border-color));
}

:host([quiet][invalid]) #textfield.is-readOnly > #input:read-only {
    border-color: var(--highcontrast-textfield-border-color-invalid-default, var(--spectrum-textfield-border-color-invalid-default, var(--spectrum-combobox-readonly-border-color-invalid-default)));
}

:host([quiet][disabled]) #textfield.is-readOnly #input:read-only {
    color: var(--highcontrast-textfield-text-color-disabled, var(--spectrum-textfield-text-color-disabled, var(--spectrum-combobox-readonly-text-color-disabled)));
    border-color: var(--spectrum-textfield-border-color-disabled, var(--spectrum-combobox-readonly-border-color-disabled));
}

:host([quiet]) #input {
    border-block-end-width: var(--spectrum-combobox-border-width);
    padding-block-start: var(--spectrum-combobox-spacing-block-start-edge-to-text);
    padding-block-end: calc(var(--spectrum-combobox-spacing-block-end-edge-to-text) - var(--spectrum-combobox-border-width));
    padding-inline-start: var(--spectrum-combobox-spacing-inline-start-edge-to-text);
    padding-inline-end: calc(var(--spectrum-combobox-button-width) + var(--spectrum-combobox-spacing-inline-end-edge-to-text) - var(--spectrum-combobox-button-inline-offset, 0px));
}

:host([quiet][invalid]) #textfield #input,
:host([quiet][pending]) #textfield #input {
    padding-inline-end: calc(var(--spectrum-combobox-button-width) + var(--spectrum-combobox-spacing-inline-icon-to-button) + var(--spectrum-combobox-icon-size) + var(--spectrum-combobox-spacing-inline-end-edge-to-text) - var(--spectrum-combobox-button-inline-offset, 0px));
}
