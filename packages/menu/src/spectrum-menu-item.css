/*
Copyright 2023 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

/* THIS FILE IS MACHINE GENERATED. DO NOT EDIT */
::slotted([slot='icon']) {
    fill: var(
        --highcontrast-menu-item-color-default,
        var(
            --mod-menu-item-label-icon-color-default,
            var(--spectrum-menu-item-label-icon-color-default)
        )
    );
    color: var(
        --highcontrast-menu-item-color-default,
        var(
            --mod-menu-item-label-icon-color-default,
            var(--spectrum-menu-item-label-icon-color-default)
        )
    );
}
.checkmark {
    fill: var(
        --highcontrast-menu-checkmark-icon-color-default,
        var(
            --mod-menu-checkmark-icon-color-default,
            var(--spectrum-menu-checkmark-icon-color-default)
        )
    );
    align-self: center;
    color: var(
        --highcontrast-menu-checkmark-icon-color-default,
        var(
            --mod-menu-checkmark-icon-color-default,
            var(--spectrum-menu-checkmark-icon-color-default)
        )
    );
    display: var(
        --mod-menu-checkmark-display,
        var(--spectrum-menu-checkmark-display)
    );
    opacity: 1;
}
:host {
    align-items: center;
    background-color: var(
        --highcontrast-menu-item-background-color-default,
        var(
            --mod-menu-item-background-color-default,
            var(--spectrum-menu-item-background-color-default)
        )
    );
    box-sizing: border-box;
    cursor: pointer;
    line-height: var(
        --mod-menu-item-label-line-height,
        var(--spectrum-menu-item-label-line-height)
    );
    margin: 0;
    min-block-size: var(
        --mod-menu-item-min-height,
        var(--spectrum-menu-item-min-height)
    );
    padding-block-end: var(
        --mod-menu-item-bottom-edge-to-text,
        var(--spectrum-menu-item-bottom-edge-to-text)
    );
    padding-block-start: var(
        --mod-menu-item-top-edge-to-text,
        var(--spectrum-menu-item-top-edge-to-text)
    );
    padding-inline: var(
        --mod-menu-item-label-inline-edge-to-content,
        var(--spectrum-menu-item-label-inline-edge-to-content)
    );
    position: relative;
    -webkit-text-decoration: none;
    text-decoration: none;
}
:host {
    display: grid;
    grid-template: '. chevronAreaCollapsible . iconArea sectionHeadingArea . . .' 1fr 'selectedArea chevronAreaCollapsible checkmarkArea iconArea labelArea valueArea actionsArea chevronAreaDrillIn' '. . . . descriptionArea . . .' '. . . . submenuArea . . .' / auto auto auto auto 1fr auto auto auto;
}
#label {
    grid-area: submenuItemLabelArea;
}
::slotted([slot='value']) {
    grid-area: submenuItemValueArea;
}
:host(:focus),
:host([focused]) {
    background-color: var(
        --highcontrast-menu-item-background-color-focus,
        var(
            --mod-menu-item-background-color-key-focus,
            var(--spectrum-menu-item-background-color-key-focus)
        )
    );
    outline: none;
}
:host(:focus) > #label,
:host([focused]) > #label {
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-item-label-content-color-focus,
            var(--spectrum-menu-item-label-content-color-focus)
        )
    );
}
:host(:focus) > .spectrum-Menu-itemDescription,
:host([focused]) > .spectrum-Menu-itemDescription {
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-item-description-color-focus,
            var(--spectrum-menu-item-description-color-focus)
        )
    );
}
:host(:focus) > ::slotted([slot='value']),
:host([focused]) > ::slotted([slot='value']) {
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-item-value-color-focus,
            var(--spectrum-menu-item-value-color-focus)
        )
    );
}
:host(:focus) > .icon:not(.chevron, .checkmark),
:host([focused]) > .icon:not(.chevron, .checkmark) {
    fill: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-item-label-icon-color-focus,
            var(--spectrum-menu-item-label-icon-color-focus)
        )
    );
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-item-label-icon-color-focus,
            var(--spectrum-menu-item-label-icon-color-focus)
        )
    );
}
:host(:focus) > .chevron,
:host([focused]) > .chevron {
    fill: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-collapsible-icon-color,
            var(--spectrum-menu-collapsible-icon-color)
        )
    );
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-collapsible-icon-color,
            var(--spectrum-menu-collapsible-icon-color)
        )
    );
}
:host(:focus) > .checkmark,
:host([focused]) > .checkmark {
    fill: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-checkmark-icon-color-focus,
            var(--spectrum-menu-checkmark-icon-color-focus)
        )
    );
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-checkmark-icon-color-focus,
            var(--spectrum-menu-checkmark-icon-color-focus)
        )
    );
}
:host([focused]) {
    box-shadow: inset
        calc(
            var(
                    --mod-menu-item-focus-indicator-width,
                    var(--spectrum-menu-item-focus-indicator-width)
                ) *
                var(--spectrum-menu-item-focus-indicator-direction-scalar, 1)
        )
        0 0 0
        var(
            --highcontrast-menu-item-focus-indicator-color,
            var(
                --mod-menu-item-focus-indicator-color,
                var(--spectrum-menu-item-focus-indicator-color)
            )
        );
}
:host([dir='rtl']) {
    --spectrum-menu-item-focus-indicator-direction-scalar: -1;
}
:host(:hover) {
    background-color: var(
        --highcontrast-menu-item-background-color-focus,
        var(
            --mod-menu-item-background-color-hover,
            var(--spectrum-menu-item-background-color-hover)
        )
    );
}
:host(:hover) > #label {
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-item-label-content-color-hover,
            var(--spectrum-menu-item-label-content-color-hover)
        )
    );
}
:host(:hover) > .spectrum-Menu-itemDescription {
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-item-description-color-hover,
            var(--spectrum-menu-item-description-color-hover)
        )
    );
}
:host(:hover) > ::slotted([slot='value']) {
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-item-value-color-hover,
            var(--spectrum-menu-item-value-color-hover)
        )
    );
}
:host(:hover) > .icon:not(.chevron, .checkmark) {
    fill: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-item-label-icon-color-hover,
            var(--spectrum-menu-item-label-icon-color-hover)
        )
    );
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-item-label-icon-color-hover,
            var(--spectrum-menu-item-label-icon-color-hover)
        )
    );
}
:host(:hover) > .chevron {
    fill: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-collapsible-icon-color,
            var(--spectrum-menu-collapsible-icon-color)
        )
    );
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-collapsible-icon-color,
            var(--spectrum-menu-collapsible-icon-color)
        )
    );
}
:host(:hover) > .checkmark {
    fill: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-checkmark-icon-color-hover,
            var(--spectrum-menu-checkmark-icon-color-hover)
        )
    );
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-checkmark-icon-color-hover,
            var(--spectrum-menu-checkmark-icon-color-hover)
        )
    );
}
:host:active {
    background-color: var(
        --highcontrast-menu-item-background-color-focus,
        var(
            --mod-menu-item-background-color-down,
            var(--spectrum-menu-item-background-color-down)
        )
    );
}
:host:active > #label {
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-item-label-content-color-down,
            var(--spectrum-menu-item-label-content-color-down)
        )
    );
}
:host:active > .spectrum-Menu-itemDescription {
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-item-description-color-down,
            var(--spectrum-menu-item-description-color-down)
        )
    );
}
:host:active > ::slotted([slot='value']) {
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-item-value-color-down,
            var(--spectrum-menu-item-value-color-down)
        )
    );
}
:host:active > .icon:not(.chevron, .checkmark) {
    fill: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-item-label-icon-color-down,
            var(--spectrum-menu-item-label-icon-color-down)
        )
    );
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-item-label-icon-color-down,
            var(--spectrum-menu-item-label-icon-color-down)
        )
    );
}
:host:active > .chevron {
    fill: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-collapsible-icon-color,
            var(--spectrum-menu-collapsible-icon-color)
        )
    );
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-collapsible-icon-color,
            var(--spectrum-menu-collapsible-icon-color)
        )
    );
}
:host:active > .checkmark {
    fill: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-checkmark-icon-color-down,
            var(--spectrum-menu-checkmark-icon-color-down)
        )
    );
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-checkmark-icon-color-down,
            var(--spectrum-menu-checkmark-icon-color-down)
        )
    );
}
:host([aria-disabled='true']),
:host([disabled]) {
    background-color: #0000;
}
:host([aria-disabled='true']) #label,
:host([disabled]) #label {
    color: var(
        --highcontrast-menu-item-color-disabled,
        var(
            --mod-menu-item-label-content-color-disabled,
            var(--spectrum-menu-item-label-content-color-disabled)
        )
    );
}
:host([aria-disabled='true']) .spectrum-Menu-itemDescription,
:host([disabled]) .spectrum-Menu-itemDescription {
    color: var(
        --highcontrast-menu-item-color-disabled,
        var(
            --mod-menu-item-description-color-disabled,
            var(--spectrum-menu-item-description-color-disabled)
        )
    );
}
:host([aria-disabled='true']) ::slotted([slot='icon']),
:host([disabled]) ::slotted([slot='icon']) {
    fill: var(
        --highcontrast-menu-item-color-disabled,
        var(
            --mod-menu-item-label-icon-color-disabled,
            var(--spectrum-menu-item-label-icon-color-disabled)
        )
    );
    color: var(
        --highcontrast-menu-item-color-disabled,
        var(
            --mod-menu-item-label-icon-color-disabled,
            var(--spectrum-menu-item-label-icon-color-disabled)
        )
    );
}
:host([aria-disabled='true']:hover),
:host([disabled]:hover) {
    cursor: default;
}
:host([aria-disabled='true']:hover) ::slotted([slot='icon']),
:host([disabled]:hover) ::slotted([slot='icon']) {
    fill: var(
        --highcontrast-menu-item-color-disabled,
        var(
            --mod-menu-item-label-icon-color-disabled,
            var(--spectrum-menu-item-label-icon-color-disabled)
        )
    );
    color: var(
        --highcontrast-menu-item-color-disabled,
        var(
            --mod-menu-item-label-icon-color-disabled,
            var(--spectrum-menu-item-label-icon-color-disabled)
        )
    );
}
::slotted([slot='icon']) {
    align-self: start;
    grid-area: iconArea;
}
.checkmark {
    align-self: start;
    grid-area: checkmarkArea;
}
.menu-itemSelection {
    grid-area: selectedArea;
}
#label {
    color: var(
        --highcontrast-menu-item-color-default,
        var(
            --mod-menu-item-label-content-color-default,
            var(--spectrum-menu-item-label-content-color-default)
        )
    );
    font-size: var(
        --mod-menu-item-label-font-size,
        var(--spectrum-menu-item-label-font-size)
    );
    grid-area: labelArea;
}
::slotted([slot='value']) {
    grid-area: valueArea;
}
.spectrum-Menu-itemActions {
    grid-area: actionsArea;
}
.chevron {
    align-self: center;
    block-size: var(--spectrum-menu-item-checkmark-height);
    grid-area: chevronArea;
    height: var(--spectrum-menu-item-checkmark-height);
    inline-size: var(--spectrum-menu-item-checkmark-width);
    width: var(--spectrum-menu-item-checkmark-width);
}
.spectrum-Menu-item--collapsible .chevron {
    grid-area: chevronAreaCollapsible;
}
.spectrum-Menu-itemDescription {
    grid-area: descriptionArea;
}
:host([has-submenu]) .chevron {
    grid-area: chevronAreaDrillIn;
}
.icon:not(.chevron, .checkmark) {
    block-size: var(
        --mod-menu-item-icon-height,
        var(--spectrum-menu-item-icon-height)
    );
    inline-size: var(
        --mod-menu-item-icon-width,
        var(--spectrum-menu-item-icon-width)
    );
}
.checkmark {
    block-size: var(
        --mod-menu-item-checkmark-height,
        var(--spectrum-menu-item-checkmark-height)
    );
    inline-size: var(
        --mod-menu-item-checkmark-width,
        var(--spectrum-menu-item-checkmark-width)
    );
    margin-block-start: calc(
        var(
                --mod-menu-item-top-to-checkmark,
                var(--spectrum-menu-item-top-to-checkmark)
            ) -
            var(
                --mod-menu-item-top-edge-to-text,
                var(--spectrum-menu-item-top-edge-to-text)
            )
    );
    margin-inline-end: var(
        --mod-menu-item-text-to-control,
        var(--spectrum-menu-item-text-to-control)
    );
}
::slotted([slot='icon']) {
    margin-inline-end: var(
        --mod-menu-item-label-text-to-visual,
        var(--spectrum-menu-item-label-text-to-visual)
    );
}
.chevron {
    margin-inline-end: var(
        --mod-menu-item-text-to-control,
        var(--spectrum-menu-item-text-to-control)
    );
}
.spectrum-Menu-itemDescription {
    color: var(
        --highcontrast-menu-item-color-default,
        var(
            --mod-menu-item-description-color-default,
            var(--spectrum-menu-item-description-color-default)
        )
    );
    font-size: var(
        --mod-menu-item-description-font-size,
        var(--spectrum-menu-item-description-font-size)
    );
    line-height: var(
        --mod-menu-item-description-line-height,
        var(--spectrum-menu-item-description-line-height)
    );
    margin-block-start: var(
        --mod-menu-item-label-to-description-spacing,
        var(--spectrum-menu-item-label-to-description-spacing)
    );
}
#label,
.spectrum-Menu-itemDescription {
    -webkit-hyphens: auto;
    hyphens: auto;
    overflow-wrap: break-word;
}
::slotted([slot='value']) {
    color: var(
        --highcontrast-menu-item-color-default,
        var(
            --mod-menu-item-value-color-default,
            var(--spectrum-menu-item-value-color-default)
        )
    );
    font-size: var(
        --mod-menu-item-label-font-size,
        var(--spectrum-menu-item-label-font-size)
    );
    justify-self: end;
    margin-inline-start: var(
        --mod-menu-item-label-to-value-area-min-spacing,
        var(--spectrum-menu-item-label-to-value-area-min-spacing)
    );
}
:host([no-wrap]) #label {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}
.spectrum-Menu-item--collapsible.is-open {
    padding-block-end: 0;
}
.spectrum-Menu-item--collapsible.is-open .chevron {
    transform: rotate(90deg);
}
.spectrum-Menu-item--collapsible.is-open:active,
.spectrum-Menu-item--collapsible.is-open:focus,
.spectrum-Menu-item--collapsible.is-open:hover,
:host([focused]) .spectrum-Menu-item--collapsible.is-open {
    background-color: var(
        --highcontrast-menu-item-background-color-default,
        var(
            --mod-menu-item-background-color-default,
            var(--spectrum-menu-item-background-color-default)
        )
    );
}
.spectrum-Menu-item--collapsible > ::slotted([slot='icon']) {
    padding-block-end: var(
        --mod-menu-section-header-bottom-edge-to-text,
        var(
            --mod-menu-item-bottom-edge-to-text,
            var(--spectrum-menu-item-bottom-edge-to-text)
        )
    );
    padding-block-start: var(
        --mod-menu-section-header-top-edge-to-text,
        var(
            --mod-menu-item-top-edge-to-text,
            var(--spectrum-menu-item-top-edge-to-text)
        )
    );
}
:host([dir='rtl']) .chevron {
    transform: rotate(-180deg);
}
:host([has-submenu]) .chevron {
    fill: var(
        --highcontrast-menu-item-color-default,
        var(
            --mod-menu-drillin-icon-color-default,
            var(--spectrum-menu-drillin-icon-color-default)
        )
    );
    color: var(
        --highcontrast-menu-item-color-default,
        var(
            --mod-menu-drillin-icon-color-default,
            var(--spectrum-menu-drillin-icon-color-default)
        )
    );
    margin-inline-end: 0;
    margin-inline-start: var(
        --mod-menu-item-label-to-value-area-min-spacing,
        var(--spectrum-menu-item-label-to-value-area-min-spacing)
    );
}
:host([has-submenu]) .is-open {
    --spectrum-menu-item-background-color-default: var(
        --highcontrast-menu-item-selected-background-color,
        var(
            --mod-menu-item-background-color-hover,
            var(--spectrum-menu-item-background-color-hover)
        )
    );
}
:host([has-submenu]) .is-open .icon:not(.chevron, .checkmark) {
    fill: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-item-label-icon-color-hover,
            var(--spectrum-menu-item-label-icon-color-hover)
        )
    );
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-item-label-icon-color-hover,
            var(--spectrum-menu-item-label-icon-color-hover)
        )
    );
}
:host([has-submenu]) .is-open .chevron {
    fill: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-drillin-icon-color-hover,
            var(--spectrum-menu-drillin-icon-color-hover)
        )
    );
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-drillin-icon-color-hover,
            var(--spectrum-menu-drillin-icon-color-hover)
        )
    );
}
:host([has-submenu]) .is-open .checkmark {
    fill: var(
        --highcontrast-menu-checkmark-icon-color-default,
        var(
            --mod-menu-checkmark-icon-color-hover,
            var(--spectrum-menu-checkmark-icon-color-hover)
        )
    );
    color: var(
        --highcontrast-menu-checkmark-icon-color-default,
        var(
            --mod-menu-checkmark-icon-color-hover,
            var(--spectrum-menu-checkmark-icon-color-hover)
        )
    );
}
:host([has-submenu]:hover) .chevron {
    fill: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-drillin-icon-color-hover,
            var(--spectrum-menu-drillin-icon-color-hover)
        )
    );
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-drillin-icon-color-hover,
            var(--spectrum-menu-drillin-icon-color-hover)
        )
    );
}
:host([has-submenu]:focus) .chevron,
:host([has-submenu][focused]) .chevron {
    fill: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-drillin-icon-color-focus,
            var(--spectrum-menu-drillin-icon-color-focus)
        )
    );
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-drillin-icon-color-focus,
            var(--spectrum-menu-drillin-icon-color-focus)
        )
    );
}
:host([has-submenu]):active .chevron {
    fill: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-drillin-icon-color-down,
            var(--spectrum-menu-drillin-icon-color-down)
        )
    );
    color: var(
        --highcontrast-menu-item-color-focus,
        var(
            --mod-menu-drillin-icon-color-down,
            var(--spectrum-menu-drillin-icon-color-down)
        )
    );
}
