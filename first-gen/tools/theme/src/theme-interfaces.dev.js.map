{
  "version": 3,
  "sources": ["theme-interfaces.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport { CSSResultGroup } from '@spectrum-web-components/base';\n\nexport type ShadowRootWithAdoptedStyleSheets = HTMLElement['shadowRoot'] & {\n    adoptedStyleSheets?: CSSStyleSheet[];\n};\n\nexport type FragmentType = 'color' | 'scale' | 'system' | 'core' | 'app';\nexport type SettableFragmentTypes = 'color' | 'scale' | 'system';\nexport type FragmentMap = Map<string, { name: string; styles: CSSResultGroup }>;\nexport type ThemeFragmentMap = Map<FragmentType, FragmentMap>;\n\nexport const SYSTEM_VARIANT_VALUES = [\n    'spectrum',\n    'express',\n    'spectrum-two',\n] as const;\n\nexport const SCALE_VALUES = [\n    'medium',\n    'large',\n    'medium-express',\n    'large-express',\n    'medium-spectrum-two',\n    'large-spectrum-two',\n] as const;\n\nexport const COLOR_VALUES = [\n    'light',\n    'lightest',\n    'dark',\n    'darkest',\n    'light-express',\n    'lightest-express',\n    'dark-express',\n    'darkest-express',\n    'light-spectrum-two',\n    'lightest-spectrum-two',\n    'dark-spectrum-two',\n    'darkest-spectrum-two',\n] as const;\n\nexport type SystemVariant = (typeof SYSTEM_VARIANT_VALUES)[number];\nexport type Scale = (typeof SCALE_VALUES)[number];\nexport type Color = (typeof COLOR_VALUES)[number];\n\nexport type SystemContextCallback = (\n    system: SystemVariant | '',\n    unsubscribe: () => void\n) => void;\n\nexport type FragmentName = Color | Scale | SystemVariant | 'core' | 'app';\n\nexport interface ThemeData {\n    color?: Color;\n    scale?: Scale;\n    lang?: string;\n    theme?: SystemVariant;\n    system?: SystemVariant;\n}\n\nexport type ThemeKindProvider = {\n    [P in SettableFragmentTypes]: SystemVariant | Color | Scale | '';\n};\n\nexport interface ProvideLang {\n    callback: (lang: string, unsubscribe: () => void) => void;\n}\n"],
  "mappings": ";AAsBO,aAAM,wBAAwB;AAAA,EACjC;AAAA,EACA;AAAA,EACA;AACJ;AAEO,aAAM,eAAe;AAAA,EACxB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAEO,aAAM,eAAe;AAAA,EACxB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;",
  "names": []
}
