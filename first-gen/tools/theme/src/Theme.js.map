{
  "version": 3,
  "sources": ["Theme.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { CSSResult, CSSResultGroup } from '@spectrum-web-components/base';\nimport { version } from '@spectrum-web-components/base/src/version.js';\nimport {\n    Color,\n    COLOR_VALUES,\n    FragmentMap,\n    FragmentName,\n    FragmentType,\n    ProvideLang,\n    Scale,\n    SCALE_VALUES,\n    SettableFragmentTypes,\n    ShadowRootWithAdoptedStyleSheets,\n    SYSTEM_VARIANT_VALUES,\n    SystemContextCallback,\n    SystemVariant,\n    ThemeFragmentMap,\n    ThemeKindProvider,\n} from './theme-interfaces.js';\nexport type { ProvideLang, ThemeFragmentMap, Color, Scale, SystemVariant };\n/**\n * @element sp-theme\n * @attr {string} [lang=\"\"] - The language of the content scoped to this `sp-theme` element, see: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang\" target=\"_blank\">MDN reference</a>.\n *\n * @slot - Content on which to apply the CSS Custom Properties defined by the current theme configuration\n */\nexport class Theme extends HTMLElement implements ThemeKindProvider {\n    private static themeFragmentsByKind: ThemeFragmentMap = new Map();\n    private static defaultFragments: Set<FragmentName> = new Set(['spectrum']);\n    private static templateElement?: HTMLTemplateElement;\n    private static instances: Set<Theme> = new Set();\n    static VERSION = version;\n\n    static get observedAttributes(): string[] {\n        return ['color', 'scale', 'lang', 'dir', 'system'];\n    }\n\n    _dir: 'ltr' | 'rtl' | '' = '';\n\n    override set dir(dir: 'ltr' | 'rtl' | '') {\n        if (dir === this.dir) return;\n        this.setAttribute('dir', dir);\n        this._dir = dir;\n        const targetDir = dir === 'rtl' ? dir : 'ltr';\n        /* c8 ignore next 3 */\n        this.trackedChildren.forEach((el) => {\n            el.setAttribute('dir', targetDir);\n        });\n    }\n\n    /**\n     * Reading direction of the content scoped to this `sp-theme` element.\n     * @type {\"ltr\" | \"rtl\" | \"\"}\n     * @attr\n     */\n    override get dir(): 'ltr' | 'rtl' | '' {\n        return this._dir;\n    }\n\n    protected attributeChangedCallback(\n        attrName: SettableFragmentTypes | 'lang' | 'dir',\n        old: string | null,\n        value: string | null\n    ): void {\n        if (old === value) {\n            return;\n        }\n        if (attrName === 'color') {\n            this.color = value as Color;\n        } else if (attrName === 'scale') {\n            this.scale = value as Scale;\n        } else if (attrName === 'lang' && !!value) {\n            this.lang = value;\n            this._provideContext();\n        } else if (attrName === 'system') {\n            this.system = value as SystemVariant;\n            this._provideSystemContext();\n        } else if (attrName === 'dir') {\n            this.dir = value as 'ltr' | 'rtl' | '';\n        }\n    }\n    private requestUpdate(): void {\n        this.shouldAdoptStyles();\n    }\n\n    public override shadowRoot!: ShadowRootWithAdoptedStyleSheets;\n\n    private _system: SystemVariant | '' = 'spectrum';\n    /**\n     * The Spectrum system that is applied to the content scoped to this `sp-theme` element.\n     *\n     * A value is requried.\n     * @type {\"spectrum\" | \"express\" }\n     * @attr\n     */\n    get system(): SystemVariant | '' {\n        const systemFragments = Theme.themeFragmentsByKind.get('system');\n        const { name } =\n            (systemFragments && systemFragments.get('default')) || {};\n        return this._system || (name as SystemVariant) || '';\n    }\n\n    set system(newValue: SystemVariant | '') {\n        if (newValue === this._system) return;\n        const system =\n            !!newValue && SYSTEM_VARIANT_VALUES.includes(newValue)\n                ? newValue\n                : this.system;\n        if (system !== this._system) {\n            this._system = system;\n            this.requestUpdate();\n        }\n        if (system) {\n            this.setAttribute('system', system);\n            /* c8 ignore next 3 */\n        } else {\n            this.removeAttribute('system');\n        }\n    }\n\n    private _color: Color | '' = '';\n\n    /**\n     * The Spectrum color stops to apply to content scoped by this `sp-theme` element.\n     *\n     * A value is requried.\n     * @type {\"lightest\" | \"light\" | \"dark\" | \"darkest\" | \"\"}\n     * @attr\n     */\n    get color(): Color | '' {\n        const themeFragments = Theme.themeFragmentsByKind.get('color');\n        const { name } =\n            (themeFragments && themeFragments.get('default')) || {};\n        return this._color || (name as Color) || '';\n    }\n\n    set color(newValue: Color | '') {\n        if (newValue === this._color) return;\n        const color =\n            !!newValue && COLOR_VALUES.includes(newValue)\n                ? newValue\n                : this.color;\n        if (color !== this._color) {\n            this._color = color;\n            this.requestUpdate();\n        }\n        if (color) {\n            this.setAttribute('color', color);\n        } else {\n            this.removeAttribute('color');\n        }\n    }\n\n    private _scale: Scale | '' = '';\n\n    /**\n     * The Spectrum platform scale to apply to content scoped by this `sp-theme` element.\n     *\n     * A value is requried.\n     * @type {\"medium\" | \"large\" | \"\"}\n     * @attr\n     */\n    get scale(): Scale | '' {\n        const themeFragments = Theme.themeFragmentsByKind.get('scale');\n        const { name } =\n            (themeFragments && themeFragments.get('default')) || {};\n        return this._scale || (name as Scale) || '';\n    }\n\n    set scale(newValue: Scale | '') {\n        if (newValue === this._scale) return;\n        const scale =\n            !!newValue && SCALE_VALUES.includes(newValue)\n                ? newValue\n                : this.scale;\n        if (scale !== this._scale) {\n            this._scale = scale;\n            this.requestUpdate();\n        }\n        if (scale) {\n            this.setAttribute('scale', scale);\n            /* c8 ignore next 3 */\n        } else {\n            this.removeAttribute('scale');\n        }\n    }\n\n    private get styles(): CSSResultGroup[] {\n        const themeKinds: FragmentType[] = [\n            ...Theme.themeFragmentsByKind.keys(),\n        ];\n        const getStyle = (\n            fragments: FragmentMap,\n            name: FragmentName,\n            kind?: FragmentType\n        ): CSSResultGroup | undefined => {\n            const currentStyles =\n                kind && kind !== 'system' && this.system !== 'spectrum'\n                    ? fragments.get(`${name}-${this.system}`)\n                    : fragments.get(name);\n            // system=\"spectrum\" is available by default and doesn't need to be applied.\n            const isAppliedFragment =\n                name === 'spectrum' || !kind || this.hasAttribute(kind);\n            if (currentStyles && isAppliedFragment) {\n                return currentStyles.styles;\n            }\n            return;\n        };\n        const styles = themeKinds.reduce((acc, kind) => {\n            const kindFragments = Theme.themeFragmentsByKind.get(\n                kind\n            ) as FragmentMap;\n            let style: CSSResultGroup | undefined;\n            if (kind === 'app' || kind === 'core') {\n                style = getStyle(kindFragments, kind);\n            } else {\n                const { [kind]: name } = this;\n                style = getStyle(kindFragments, <FragmentName>name, kind);\n            }\n            if (style) {\n                acc.push(style);\n            }\n            return acc;\n        }, [] as CSSResultGroup[]);\n        const themeFragmentsByKind = Theme.themeFragmentsByKind;\n\n        checkForIssues(\n            this,\n            this.system,\n            this.color,\n            this.scale,\n            themeFragmentsByKind\n        );\n\n        return [...styles];\n    }\n\n    private static get template(): HTMLTemplateElement {\n        if (!this.templateElement) {\n            this.templateElement = document.createElement('template');\n            this.templateElement.innerHTML = '<slot></slot>';\n        }\n        return this.templateElement;\n    }\n\n    constructor() {\n        super();\n        this.attachShadow({ mode: 'open' });\n        const node = document.importNode(Theme.template.content, true);\n        this.shadowRoot.appendChild(node);\n        this.shouldAdoptStyles();\n        this.addEventListener(\n            'sp-language-context',\n            this._handleContextPresence as EventListener\n        );\n        this.addEventListener(\n            'sp-system-context',\n            this._handleSystemContext as EventListener\n        );\n\n        this.updateComplete = this.__createDeferredPromise();\n    }\n\n    private _systemContextConsumers = new Map<\n        HTMLElement,\n        [SystemContextCallback, () => void]\n    >();\n\n    private _handleSystemContext(\n        event: CustomEvent<{ callback: SystemContextCallback }>\n    ): void {\n        event.stopPropagation();\n\n        const target = event.composedPath()[0] as HTMLElement;\n\n        // Avoid duplicate registrations\n        if (this._systemContextConsumers.has(target)) {\n            return;\n        }\n\n        // Create an unsubscribe function\n        const unsubscribe: () => void = () =>\n            this._systemContextConsumers.delete(target);\n\n        // Store the callback and unsubscribe function\n        this._systemContextConsumers.set(target, [\n            event.detail.callback,\n            unsubscribe,\n        ]);\n\n        // Provide the context data\n        const [callback] = this._systemContextConsumers.get(target) || [];\n        if (callback) {\n            callback(this.system, unsubscribe);\n        }\n    }\n\n    public updateComplete!: Promise<boolean>;\n    private __resolve!: (compelted: boolean) => void;\n\n    private __createDeferredPromise(): Promise<boolean> {\n        return new Promise((resolve) => {\n            this.__resolve = resolve;\n        });\n    }\n\n    protected connectedCallback(): void {\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        this.shouldAdoptStyles();\n\n        // Add `this` to the instances array.\n        Theme.instances.add(this);\n        if (!this.hasAttribute('dir')) {\n            let dirParent = ((this as HTMLElement).assignedSlot ||\n                this.parentNode) as HTMLElement | DocumentFragment | ShadowRoot;\n            while (\n                dirParent !== document.documentElement &&\n                !(dirParent instanceof Theme)\n            ) {\n                dirParent = ((dirParent as HTMLElement).assignedSlot || // step into the shadow DOM of the parent of a slotted node\n                    dirParent.parentNode || // DOM Element detected\n                    (dirParent as ShadowRoot).host) as\n                    | HTMLElement\n                    | DocumentFragment\n                    | ShadowRoot;\n            }\n            this.dir = dirParent.dir === 'rtl' ? dirParent.dir : 'ltr';\n        }\n    }\n\n    protected disconnectedCallback(): void {\n        // Remove `this` to the instances array.\n        Theme.instances.delete(this);\n    }\n\n    public startManagingContentDirection(el: HTMLElement): void {\n        this.trackedChildren.add(el);\n    }\n\n    public stopManagingContentDirection(el: HTMLElement): void {\n        this.trackedChildren.delete(el);\n    }\n\n    private trackedChildren: Set<HTMLElement> = new Set();\n\n    private _updateRequested = false;\n\n    private async shouldAdoptStyles(): Promise<void> {\n        if (!this._updateRequested) {\n            this.updateComplete = this.__createDeferredPromise();\n            this._updateRequested = true;\n            this._updateRequested = await false;\n            this.adoptStyles();\n            this.__resolve(true);\n        }\n    }\n\n    protected adoptStyles(): void {\n        const styles = this.styles;\n        const styleSheets: CSSStyleSheet[] = [];\n        for (const style of styles) {\n            styleSheets.push((style as CSSResult).styleSheet!);\n        }\n        this.shadowRoot.adoptedStyleSheets = styleSheets;\n    }\n\n    static registerThemeFragment(\n        name: FragmentName,\n        kind: FragmentType,\n        styles: CSSResultGroup\n    ): void {\n        const fragmentMap = Theme.themeFragmentsByKind.get(kind) || new Map();\n        if (fragmentMap.size === 0) {\n            Theme.themeFragmentsByKind.set(kind, fragmentMap);\n            // we're adding our first fragment for this kind, set as default\n            fragmentMap.set('default', { name, styles });\n            Theme.defaultFragments.add(name);\n        }\n        fragmentMap.set(name, { name, styles });\n        Theme.instances.forEach((instance) => instance.shouldAdoptStyles());\n    }\n\n    private _contextConsumers = new Map<\n        HTMLElement,\n        [ProvideLang['callback'], () => void]\n    >();\n\n    /* c8 ignore next 5 */\n    private _provideContext(): void {\n        this._contextConsumers.forEach(([callback, unsubscribe]) =>\n            callback(this.lang, unsubscribe)\n        );\n    }\n\n    private _provideSystemContext(): void {\n        this._systemContextConsumers.forEach(([callback, unsubscribe]) =>\n            callback(this.system, unsubscribe)\n        );\n    }\n\n    private _handleContextPresence(event: CustomEvent<ProvideLang>): void {\n        event.stopPropagation();\n        const target = event.composedPath()[0] as HTMLElement;\n        /* c8 ignore next 3 */\n        if (this._contextConsumers.has(target)) {\n            return;\n        }\n        this._contextConsumers.set(target, [\n            event.detail.callback,\n            () => this._contextConsumers.delete(target),\n        ]);\n        const [callback, unsubscribe] =\n            this._contextConsumers.get(target) || [];\n        if (callback && unsubscribe) {\n            callback(\n                this.lang ||\n                    document.documentElement.lang ||\n                    navigator.language,\n                unsubscribe\n            );\n        }\n    }\n}\n\nfunction checkForIssues(\n    instance: Theme,\n    system: SystemVariant | '',\n    color: Color | '',\n    scale: Scale | '',\n    themeFragmentsByKind: ThemeFragmentMap\n): void {\n    if (window.__swc.DEBUG) {\n        const issues: string[] = [];\n        const checkForAttribute = (\n            name: 'system' | 'color' | 'scale',\n            resolvedValue: string,\n            actualValue: string | null\n        ): void => {\n            const systemModifier =\n                system && system !== 'spectrum' ? `-${system}` : '';\n            if (!resolvedValue) {\n                issues.push(\n                    `You have not explicitly set the \"${name}\" attribute and there is no default value on which to fallback.`\n                );\n            } else if (!actualValue) {\n                issues.push(\n                    `You have not explicitly set the \"${name}\" attribute, the default value (\"${resolvedValue}\") is being used as a fallback.`\n                );\n            } else if (\n                !themeFragmentsByKind\n                    .get(name)\n                    ?.get(\n                        resolvedValue +\n                            (name === 'system' ? '' : systemModifier)\n                    )\n            ) {\n                issues.push(\n                    `You have set \"${name}='${resolvedValue}'\" but the associated system fragment has not been loaded.`\n                );\n            }\n        };\n\n        if (['lightest', 'darkest'].includes(color || '')) {\n            issues.push(\n                `DEPRECATION NOTICE: Color \"lightest\" and \"darkest\" are deprecated. For more information, see: https://opensource.adobe.com/spectrum-web-components/tools/theme/`\n            );\n        }\n        checkForAttribute('system', system, instance.getAttribute('system'));\n        checkForAttribute('color', color, instance.getAttribute('color'));\n        checkForAttribute('scale', scale, instance.getAttribute('scale'));\n\n        if (issues.length) {\n            window.__swc.warn(\n                instance,\n                'You are leveraging an <sp-theme> element and the following issues may disrupt your theme delivery:',\n                'https://opensource.adobe.com/spectrum-web-components/components/theme/#example',\n                { issues }\n            );\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["version", "COLOR_VALUES", "SCALE_VALUES", "SYSTEM_VARIANT_VALUES", "_Theme", "node", "dir", "targetDir", "el", "attrName", "old", "value", "systemFragments", "name", "newValue", "system", "themeFragments", "color", "scale", "themeKinds", "getStyle", "fragments", "kind", "currentStyles", "isAppliedFragment", "styles", "acc", "kindFragments", "style", "themeFragmentsByKind", "event", "target", "unsubscribe", "callback", "resolve", "dirParent", "styleSheets", "fragmentMap", "instance", "checkForIssues"]
}
