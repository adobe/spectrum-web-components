{
  "version": 3,
  "sources": ["themes.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport '@spectrum-web-components/theme/sp-theme.js';\nimport '@spectrum-web-components/theme/src/themes.js';\nimport { Theme, ThemeFragmentMap } from '@spectrum-web-components/theme';\nimport { elementUpdated, expect, fixture, html } from '@open-wc/testing';\nimport { css } from '@spectrum-web-components/base';\n\ntype TestableThemeConstructor = {\n    instances: Set<Theme>;\n    themeFragmentsByKind: ThemeFragmentMap;\n};\n\ndescribe('Systems', () => {\n    it('loads - light', async () => {\n        const el = await fixture<Theme>(html`\n            <sp-theme system=\"spectrum\" color=\"light\"></sp-theme>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el).to.exist;\n        expect(el).shadowDom.to.exist;\n    });\n    it('loads - dark', async () => {\n        const el = await fixture<Theme>(html`\n            <sp-theme color=\"dark\"></sp-theme>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el).to.exist;\n        expect(el).shadowDom.to.exist;\n    });\n    it('loads - unkown', async () => {\n        const el = await fixture<Theme>(html`\n            <sp-theme color=\"unknown\" scale=\"unknown\"></sp-theme>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el).to.exist;\n        expect(el).shadowDom.to.exist;\n    });\n    it('adds an instance only once', async () => {\n        const el = await fixture<Theme>(html`\n            <sp-theme system=\"express\"></sp-theme>\n        `);\n\n        await elementUpdated(el);\n        const testableTheme = Theme as unknown as TestableThemeConstructor;\n        expect(testableTheme.instances.has(el), 'first').to.be.true;\n        expect(testableTheme.instances.size).to.equal(1);\n\n        el.remove();\n        expect(testableTheme.instances.has(el), 'second').to.be.false;\n        expect(testableTheme.instances.size).to.equal(0);\n\n        document.body.append(el);\n        expect(testableTheme.instances.has(el), 'third').to.be.true;\n        expect(testableTheme.instances.size).to.equal(1);\n    });\n});\n\ndescribe('Lightest', () => {\n    it('loads', async () => {\n        const el = await fixture<Theme>(html`\n            <sp-theme color=\"lightest\"></sp-theme>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el).to.exist;\n        expect(el).shadowDom.to.exist;\n    });\n});\n\ndescribe('Medium', () => {\n    it('loads', async () => {\n        const el = await fixture<Theme>(html`\n            <sp-theme scale=\"medium\"></sp-theme>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el).to.exist;\n        expect(el).shadowDom.to.exist;\n    });\n});\n\ndescribe('App styles', () => {\n    it('applies app fragments', async () => {\n        const el = await fixture<Theme>(html`\n            <sp-theme color=\"light\">\n                <style>\n                    div {\n                        padding: var(--app-padding);\n                    }\n                </style>\n                <div></div>\n            </sp-theme>\n        `);\n        const div = el.querySelector('div') as HTMLDivElement;\n\n        await elementUpdated(el);\n\n        const preStylesDiv = getComputedStyle(div);\n        expect(preStylesDiv.paddingBlockStart).to.equal('0px');\n\n        Theme.registerThemeFragment(\n            'app',\n            'app',\n            css`\n                :host {\n                    --app-padding: 10px;\n                }\n            `\n        );\n        await elementUpdated(el);\n\n        const postStylesDiv = getComputedStyle(div);\n        expect(postStylesDiv.paddingBlockStart).to.equal('10px');\n\n        (\n            Theme as unknown as TestableThemeConstructor\n        ).themeFragmentsByKind.delete('app');\n    });\n});\n\ndescribe('Setting attributes', () => {\n    it('loads', async () => {\n        const el = await fixture<Theme>(html`\n            <sp-theme color=\"light\"></sp-theme>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el).to.not.be.undefined;\n        expect(el.hasAttribute('scale')).to.be.false;\n\n        if (el.shadowRoot.adoptedStyleSheets) {\n            expect(el.shadowRoot.adoptedStyleSheets.length).to.equal(2);\n        } else {\n            expect(\n                [...el.shadowRoot.querySelectorAll('style')].length\n            ).to.equal(2);\n        }\n\n        await elementUpdated(el);\n\n        // Invalid initial value falls back to default\n        el.setAttribute('scale', 'fish');\n        expect(el.getAttribute('scale')).to.equal('medium');\n\n        if (el.shadowRoot.adoptedStyleSheets) {\n            expect(el.shadowRoot.adoptedStyleSheets.length).to.equal(2);\n        } else {\n            expect(\n                [...el.shadowRoot.querySelectorAll('style')].length\n            ).to.equal(2);\n        }\n\n        el.color = 'dark';\n        el.scale = 'medium';\n\n        await elementUpdated(el);\n        expect(el.getAttribute('color')).to.equal('dark');\n        expect(el.getAttribute('scale')).to.equal('medium');\n\n        if (el.shadowRoot.adoptedStyleSheets) {\n            expect(el.shadowRoot.adoptedStyleSheets.length, 'all').to.equal(3);\n        } else {\n            expect(\n                [...el.shadowRoot.querySelectorAll('style')].length\n            ).to.equal(3);\n        }\n\n        // Invalid second + value fallsback to previous\n        el.setAttribute('color', 'fish');\n\n        await elementUpdated(el);\n        expect(el.getAttribute('color')).to.equal('dark');\n\n        if (el.shadowRoot.adoptedStyleSheets) {\n            expect(el.shadowRoot.adoptedStyleSheets.length, 'last').to.equal(3);\n        } else {\n            expect(\n                [...el.shadowRoot.querySelectorAll('style')].length\n            ).to.equal(3);\n        }\n    });\n\n    it('loads and handles system attribute', async () => {\n        const el = await fixture<Theme>(html`\n            <sp-theme system=\"spectrum\"></sp-theme>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el).to.not.be.undefined;\n        expect(el.hasAttribute('system')).to.be.true;\n        expect(el.getAttribute('system')).to.equal('spectrum');\n\n        el.setAttribute('system', 'invalid');\n        await elementUpdated(el);\n        expect(el.getAttribute('system')).to.equal('spectrum'); // Should fallback to 'spectrum'\n\n        el.setAttribute('system', 'express');\n        await elementUpdated(el);\n        expect(el.getAttribute('system')).to.equal('express');\n\n        // Removing attribute should persist the last valid value\n        el.removeAttribute('system');\n        await elementUpdated(el);\n        expect(el.getAttribute('system')).to.equal('express');\n\n        el.system = 'spectrum';\n        await elementUpdated(el);\n        expect(el.getAttribute('system')).to.equal('spectrum');\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
