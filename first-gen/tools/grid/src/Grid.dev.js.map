{
  "version": 3,
  "sources": ["Grid.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    adoptStyles,\n    CSSResultArray,\n    html,\n    PropertyValues,\n    ReactiveElement,\n    render,\n    RootPart,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\nimport { LitVirtualizer } from '@lit-labs/virtualizer/LitVirtualizer.js';\nimport { grid } from '@lit-labs/virtualizer/layouts/grid.js';\nimport styles from './grid.css.js';\nimport { GridController } from './GridController.dev.js'\n\n/**\n * @element sp-grid\n *\n * @fires change - Announces that the value of `selected` has changed\n */\nexport class Grid extends LitVirtualizer {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    private __gridPart: RootPart | undefined = undefined;\n\n    @property({ type: String })\n    public focusableSelector!: string;\n\n    @property({ type: String })\n    public gap: `${'0' | `${number}px`}` = '0';\n\n    @property({ type: String })\n    public padding: `${'0' | `${number}px`}` | undefined;\n\n    @property({ type: Array })\n    public override items: Record<string, unknown>[] = [];\n\n    @property({ type: Object })\n    public itemSize: {\n        width: number;\n        height: number;\n    } = {\n        width: 200,\n        height: 200,\n    };\n\n    @property({ type: Array })\n    public selected: Record<string, unknown>[] = [];\n\n    gridController = new GridController<HTMLElement>(this, {\n        elements: () => [],\n        itemSize: () => this.itemSize,\n        /* c8 ignore next 2 */\n        gap: () => this.gap,\n        padding: () => this.padding || this.gap,\n    });\n\n    private lastTargetForChange?: HTMLElement;\n    private animationFrameId?: number;\n\n    protected handleChange(event: Event): void {\n        const target = event.target as HTMLElement;\n\n        // This prevents the event from being fired multiple times\n        // when the change event originates from the same item.\n        // For example, the capture event phase used by grid\n        // captures change events from both the checkbox in\n        // the shadowDom for the card and the card itself.\n        if (this.lastTargetForChange === target) {\n            return;\n        }\n        this.lastTargetForChange = target;\n        this.animationFrameId = requestAnimationFrame(() => {\n            this.lastTargetForChange = undefined;\n        });\n\n        const value = this.items[\n            parseFloat(target.getAttribute('key') || '')\n        ] as Record<string, unknown>;\n        const selected: Record<string, unknown>[] = [...this.selected];\n        if (!selected.includes(value)) {\n            selected.push(value);\n        } else {\n            const index = selected.indexOf(value);\n            if (index > -1) {\n                selected.splice(index, 1);\n            }\n        }\n        this.selected = selected;\n    }\n\n    public override createRenderRoot(): this {\n        const renderRoot =\n            this.shadowRoot ??\n            this.attachShadow(\n                (this.constructor as typeof ReactiveElement).shadowRootOptions\n            );\n        adoptStyles(\n            renderRoot,\n            (this.constructor as typeof ReactiveElement).elementStyles\n        );\n        return renderRoot as unknown as this;\n    }\n\n    public override render(): TemplateResult<1> {\n        return html`\n            <slot></slot>\n        `;\n    }\n\n    protected override update(changes: PropertyValues<this>): void {\n        if (\n            changes.has('itemSize') ||\n            changes.has('gap') ||\n            changes.has('padding') ||\n            changes.has('focusableSelector')\n        ) {\n            this.updateComplete.then(() => {\n                this.gridController.update({\n                    elements: () => [\n                        ...this.querySelectorAll<HTMLElement>(\n                            this.focusableSelector\n                        ),\n                    ],\n                    itemSize: () => this.itemSize,\n                    gap: () => this.gap,\n                    padding: () => this.padding || this.gap,\n                });\n            });\n\n            this.layout = grid({\n                itemSize: {\n                    width: `${this.itemSize.width}px`,\n                    height: `${this.itemSize.height}px`,\n                },\n                gap: this.gap,\n                padding: this.padding || this.gap,\n            });\n        }\n        if (changes.has('renderItem')) {\n            const fn = this.renderItem as unknown as (\n                item: unknown,\n                index: number,\n                selected: boolean\n            ) => TemplateResult;\n            this.renderItem = (item, index: number): TemplateResult => {\n                const selected = this.selected.includes(\n                    item as Record<string, unknown>\n                );\n                return fn(item, index, selected);\n            };\n        }\n\n        if (this.isConnected) {\n            this.__gridPart = render(super.render(), this);\n        }\n        super.update(changes);\n    }\n\n    override connectedCallback(): void {\n        super.connectedCallback();\n        this.__gridPart?.setConnected(true);\n        this.addEventListener('change', this.handleChange, { capture: true });\n    }\n\n    override disconnectedCallback(): void {\n        this.removeEventListener('change', this.handleChange, {\n            capture: true,\n        });\n        this.__gridPart?.setConnected(false);\n        if (this.animationFrameId) {\n            cancelAnimationFrame(this.animationFrameId);\n            this.animationFrameId = undefined;\n            this.lastTargetForChange = undefined;\n        }\n        super.disconnectedCallback();\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
