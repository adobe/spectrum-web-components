{
  "version": 3,
  "sources": ["grid.stories.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    css,\n    html,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\n\nimport '@spectrum-web-components/grid/sp-grid.js';\nimport '@spectrum-web-components/action-bar/sp-action-bar.js';\nimport '@spectrum-web-components/card/sp-card.js';\nimport '@spectrum-web-components/action-menu/sp-action-menu.js';\nimport '@spectrum-web-components/menu/sp-menu-item.js';\nimport '@spectrum-web-components/tooltip/sp-tooltip.js';\nimport '@spectrum-web-components/checkbox/sp-checkbox.js';\nimport '@spectrum-web-components/action-button/sp-action-button.js';\nimport '@spectrum-web-components/action-group/sp-action-group.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-edit.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-more.js';\nimport type { ActionBar } from '@spectrum-web-components/action-bar';\nimport type { Grid } from '@spectrum-web-components/grid';\nimport type { RenderItemFunction } from '@lit-labs/virtualizer/virtualize.js';\n\nexport default {\n    title: 'Grid',\n    component: 'sp-grid',\n};\n\ninterface Item extends Record<string, unknown> {\n    id: number;\n}\n\nfunction generateItems(count: number): Item[] {\n    const items: Item[] = [];\n    while (count) {\n        count -= 1;\n        items.unshift({ id: count });\n    }\n    return items;\n}\n\nconst renderItem = (\n    item: Item,\n    index: number,\n    selected: boolean\n): TemplateResult => {\n    return html`\n        <sp-card\n            toggles\n            variant=\"quiet\"\n            heading=\"Card Heading ${item.id}\"\n            subheading=\"JPG Photo\"\n            style=\"contain: strict; padding: 1px;\"\n            value=\"card-${item.id}\"\n            .selected=${selected}\n            key=${index}\n            draggable=\"true\"\n            role=\"row\"\n            aria-selected=${selected}\n            aria-rowindex=${index + 1}\n            label=\"Card Heading ${item.id}\"\n        >\n            <img\n                alt=\"\"\n                slot=\"preview\"\n                src=\"https://picsum.photos/id/${item.id}/200/300\"\n                decoding=\"async\"\n            />\n            <div slot=\"description\">10/15/18</div>\n            <div slot=\"footer\">Footer</div>\n            <sp-action-menu\n                label=\"File actions\"\n                slot=\"actions\"\n                placement=\"bottom-end\"\n                quiet\n            >\n                <sp-tooltip slot=\"tooltip\" self-managed placement=\"top\">\n                    Do stuff\n                </sp-tooltip>\n                <sp-menu-item>Deselect</sp-menu-item>\n                <sp-menu-item>Select Inverse</sp-menu-item>\n                <sp-menu-item>Feather...</sp-menu-item>\n                <sp-menu-item>Select and Mask...</sp-menu-item>\n                <sp-menu-divider></sp-menu-divider>\n                <sp-menu-item>Save Selection</sp-menu-item>\n                <sp-menu-item disabled>Make Work Path</sp-menu-item>\n            </sp-action-menu>\n        </sp-card>\n    `;\n};\n\nconst handleChange = (event: Event & { currentTarget: Grid }): void => {\n    const actionbar = document.querySelector('sp-action-bar') as ActionBar;\n    const selected = document.querySelector('.selected') as HTMLElement;\n    const ids = document.querySelector('.ids') as HTMLElement;\n    actionbar.open = !!event.currentTarget.selected.length;\n    actionbar.style.setProperty(\n        'display',\n        !!event.currentTarget.selected.length ? 'flex' : 'none'\n    );\n    selected.textContent = '' + event.currentTarget.selected.length;\n    ids.textContent = `[${\n        '' +\n        event.currentTarget.selected.map((selection) => selection.id).join(', ')\n    }]`;\n};\n\nconst handleActionBarChange = (event: Event): void => {\n    event.preventDefault();\n    const grid = document.querySelector('sp-grid') as Grid;\n    const actionbar = document.querySelector('sp-action-bar') as ActionBar;\n    actionbar.open = false;\n    grid.selected = [];\n};\n\nexport const Default = (): TemplateResult => {\n    const items = generateItems(40);\n\n    return html`\n        <h1>\n            <label for=\"first-input\">\n                Random before content that is focusable\n            </label>\n        </h1>\n        <input id=\"first-input\" />\n        <sp-grid\n            @change=${handleChange}\n            .items=${items}\n            .focusableSelector=${'sp-card'}\n            .renderItem=${renderItem as RenderItemFunction<Item>}\n            role=\"grid\"\n            aria-label=\"Select images\"\n            aria-multiselectable=\"true\"\n            aria-rowcount=${items.length}\n            aria-colcount=${1}\n        ></sp-grid>\n        <sp-action-bar variant=\"fixed\">\n            <sp-checkbox\n                style=\"margin-block-start: calc(var(--spectrum-checkbox-top-to-control-small) * -1);\"\n                @click=${handleActionBarChange}\n                checked\n            >\n                <span class=\"selected\"></span>\n                Selected\n                <span class=\"ids\"></span>\n            </sp-checkbox>\n            <sp-action-group quiet slot=\"buttons\">\n                <sp-action-button>\n                    <sp-icon-edit slot=\"icon\" label=\"Edit\"></sp-icon-edit>\n                </sp-action-button>\n                <sp-action-button>\n                    <sp-icon-more slot=\"icon\" label=\"More\"></sp-icon-more>\n                </sp-action-button>\n            </sp-action-group>\n        </sp-action-bar>\n        <h2>\n            <label for=\"last-input\">\n                Random after content that is focusable\n            </label>\n        </h2>\n        <input id=\"last-input\" />\n    `;\n};\n\nDefault.swc_vrt = {\n    skip: true,\n};\n\nDefault.parameters = {\n    // Disables Chromatic's snapshotting on a global level\n    chromatic: { disableSnapshot: true },\n};\n\nexport const sized = (\n    { gap, padding } = { gap: 10, padding: 10 }\n): TemplateResult => {\n    const items = generateItems(1000);\n\n    function handleMediaChange(): void {\n        let width = document.body.offsetWidth * 0.4;\n        const height = 300;\n        if (matchMedium.matches) {\n            width = 300;\n        } else if (matchLarge.matches) {\n            width = 400;\n        }\n        (document.querySelector('sp-grid') as Grid).itemSize = {\n            width,\n            height,\n        };\n    }\n\n    const matchSmall = window.matchMedia('(max-width: 600px)');\n    const matchMedium = window.matchMedia(\n        '(min-width: 601px) and (max-width: 1200px)'\n    );\n    const matchLarge = window.matchMedia('(min-width: 1201px)');\n\n    matchSmall.addEventListener('change', handleMediaChange);\n    matchMedium.addEventListener('change', handleMediaChange);\n    matchLarge.addEventListener('change', handleMediaChange);\n\n    return html`\n        <h1>Random before content that is focusable</h1>\n        <input id=\"first-input\" />\n        <sp-grid\n            @change=${handleChange}\n            .items=${items}\n            .focusableSelector=${'sp-card'}\n            .renderItem=${renderItem as RenderItemFunction<Item>}\n            .itemSize=${{\n                width: 200,\n                height: 300,\n            }}\n            .gap=${`${gap}px`}\n            .padding=${`${padding}px`}\n        ></sp-grid>\n        <sp-action-bar variant=\"fixed\" style=\"display: none\">\n            <sp-checkbox @click=${handleActionBarChange} checked>\n                <span class=\"selected\"></span>\n                Selected\n                <span class=\"ids\"></span>\n            </sp-checkbox>\n            <sp-action-group quiet>\n                <sp-action-button>\n                    <sp-icon-edit slot=\"icon\" label=\"Edit\"></sp-icon-edit>\n                </sp-action-button>\n                <sp-action-button>\n                    <sp-icon-more slot=\"icon\" label=\"More\"></sp-icon-more>\n                </sp-action-button>\n            </sp-action-group>\n        </sp-action-bar>\n        <h2>Random after content that is focusable</h2>\n        <input id=\"last-input\" />\n    `;\n};\n\nsized.args = {\n    gap: 10,\n    padding: 10,\n};\n\nsized.argTypes = {\n    gap: {\n        name: 'gap',\n        type: { name: 'number', required: false },\n        description: 'Spacing between items.',\n        table: {\n            type: { summary: 'number' },\n        },\n        control: {\n            type: 'number',\n        },\n    },\n    padding: {\n        name: 'padding',\n        type: { name: 'number', required: false },\n        description: 'Spacing around all items.',\n        table: {\n            type: { summary: 'number' },\n        },\n        control: {\n            type: 'number',\n        },\n    },\n};\n\nsized.swc_vrt = {\n    skip: true,\n};\n\nsized.parameters = {\n    // Disables Chromatic's snapshotting on a global level\n    chromatic: { disableSnapshot: true },\n};\n\nclass MyParent extends SpectrumElement {\n    static override styles = [\n        css`\n            :host {\n                display: block;\n                height: 100vh;\n                overflow: hidden;\n            }\n\n            .child {\n                height: 100%;\n                overflow: scroll;\n            }\n        `,\n    ];\n\n    override render(): TemplateResult {\n        return html`\n            <div class=\"child\"><slot></slot></div>\n        `;\n    }\n}\n\ncustomElements.define('my-parent', MyParent);\n\nexport const scrollParentInAssignedSlot = (): TemplateResult => {\n    const items = generateItems(1000);\n\n    return html`\n        <my-parent>\n            <sp-grid\n                .items=${items}\n                .focusableSelector=${'sp-card'}\n                .renderItem=${renderItem as RenderItemFunction<Item>}\n            ></sp-grid>\n        </my-parent>\n    `;\n};\n\nscrollParentInAssignedSlot.swc_vrt = {\n    skip: true,\n};\n\nscrollParentInAssignedSlot.parameters = {\n    // Disables Chromatic's snapshotting on a global level\n    chromatic: { disableSnapshot: true },\n};\n"],
  "mappings": "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",
  "names": []
}
