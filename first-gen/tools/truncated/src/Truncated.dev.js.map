{
  "version": 3,
  "sources": ["Truncated.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport type { Overlay, Placement } from '@spectrum-web-components/overlay';\nimport '@spectrum-web-components/overlay/sp-overlay.js';\nimport '@spectrum-web-components/tooltip/sp-tooltip.js';\nimport {\n    property,\n    query,\n    queryAssignedElements,\n    queryAssignedNodes,\n    state,\n} from '@spectrum-web-components/base/src/decorators.js';\n\nimport styles from './truncated.css.js';\n\n/**\n * @element sp-truncated\n */\nexport class Truncated extends SpectrumElement {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    /**\n     * @type {\"top\" | \"top-start\" | \"top-end\" | \"right\" | \"right-start\" | \"right-end\" | \"bottom\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"left-start\" | \"left-end\"}\n     */\n    @property()\n    placement: Placement = 'top-start';\n\n    /*\n     * @type {String}\n     * @attr success-message\n     * @description The message to display when the text is copied to the clipboard after clicking on the truncated text\n     */\n    @property({ type: String, attribute: 'success-message' })\n    successMessage = 'Copied to clipboard';\n\n    @state()\n    hasCopied = false;\n\n    @state()\n    private fullText = '';\n\n    @state()\n    private overflowing = false;\n\n    @query('#content')\n    private content!: HTMLElement;\n\n    @query('#overlay')\n    private overlayEl?: Overlay;\n\n    @queryAssignedNodes({ flatten: true })\n    private slottedContent!: Node[];\n\n    // elements instead of nodes because, according to spec,\n    // flattened assignedNodes will return a slot's *children* if there are no assigned nodes.\n    // \u00AF\\_(\u30C4)_/\u00AF\n    @queryAssignedElements({ slot: 'overflow', flatten: true })\n    private slottedOverflow!: HTMLElement[];\n\n    get hasCustomOverflow(): boolean {\n        return this.slottedOverflow.length > 0;\n    }\n\n    private resizeObserver = new ResizeObserver(() => {\n        this.measureOverflow();\n    });\n\n    private mutationObserver = new MutationObserver(() => {\n        this.copyText();\n    });\n\n    override render(): TemplateResult {\n        /* eslint-disable lit-a11y/click-events-have-key-events */\n        return html`\n            <span id=\"content\" @click=${this.handleClick}>\n                <slot></slot>\n            </span>\n            ${this.renderTooltip()}\n        `;\n        /* eslint-enable lit-a11y/click-events-have-key-events */\n    }\n\n    private renderTooltip(): TemplateResult | undefined {\n        if (!this.overflowing) {\n            return html`\n                <slot\n                    name=\"overflow\"\n                    style=\"display: none\"\n                    @slotchange=${this.handleOverflowSlotchange}\n                ></slot>\n            `;\n        }\n        return html`\n            <sp-overlay\n                id=\"overlay\"\n                .triggerElement=${this as HTMLElement}\n                .triggerInteraction=${'hover'}\n                type=\"hint\"\n                placement=${this.placement}\n            >\n                <sp-tooltip name=\"tooltip\">\n                    ${!this.hasCopied\n                        ? html`\n                              <slot\n                                  name=\"overflow\"\n                                  @slotchange=${this.handleOverflowSlotchange}\n                              >\n                                  ${this.fullText}\n                              </slot>\n                          `\n                        : this.successMessage}\n                </sp-tooltip>\n            </sp-overlay>\n        `;\n    }\n\n    protected override firstUpdated(\n        _changedProperties: PropertyValues<this>\n    ): void {\n        this.resizeObserver.observe(this);\n        this.resizeObserver.observe(this.content);\n        this.copyText();\n        this.measureOverflow();\n    }\n\n    protected override updated(changedProperties: PropertyValues<this>): void {\n        super.updated(changedProperties);\n        if (\n            changedProperties.has('hasCopied') &&\n            this.hasCopied &&\n            this.overlayEl\n        ) {\n            // we know overlayEl exists because it couldn't copy the text otherwise\n            this.overlayEl.open = true;\n        }\n    }\n\n    private handleOverflowSlotchange(): void {\n        this.mutationObserver.disconnect();\n        if (!this.hasCustomOverflow) {\n            /* c8 ignore next 5 */\n            this.mutationObserver.observe(this.content, {\n                subtree: true,\n                childList: true,\n                characterData: true,\n            });\n        }\n    }\n\n    private handleClick(): void {\n        if (!this.overflowing) return;\n\n        const textToCopy = this.slottedContent\n            .map((node) => node.textContent ?? '')\n            .join('')\n            .trim();\n        navigator.clipboard.writeText(textToCopy);\n        this.hasCopied = true;\n        /* c8 ignore next 3 */\n        setTimeout(() => {\n            this.hasCopied = false;\n        }, 6000);\n    }\n\n    private measureOverflow(): void {\n        // Add 1 because Safari sometimes rounds by 1px, breaking the calculation otherwise\n        this.overflowing = this.content.offsetWidth > this.clientWidth + 1;\n    }\n\n    // Copies just the textContent of slotted nodes into the tooltip to avoid duplicating the user's DOM\n    private copyText(): void {\n        if (this.hasCustomOverflow) return;\n        this.fullText = this.slottedContent\n            .map((node) => node.textContent ?? '')\n            .join('');\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
