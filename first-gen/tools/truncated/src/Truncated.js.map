{
  "version": 3,
  "sources": ["Truncated.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport type { Overlay, Placement } from '@spectrum-web-components/overlay';\nimport '@spectrum-web-components/overlay/sp-overlay.js';\nimport '@spectrum-web-components/tooltip/sp-tooltip.js';\nimport {\n    property,\n    query,\n    queryAssignedElements,\n    queryAssignedNodes,\n    state,\n} from '@spectrum-web-components/base/src/decorators.js';\n\nimport styles from './truncated.css.js';\n\n/**\n * @element sp-truncated\n */\nexport class Truncated extends SpectrumElement {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    /**\n     * @type {\"top\" | \"top-start\" | \"top-end\" | \"right\" | \"right-start\" | \"right-end\" | \"bottom\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"left-start\" | \"left-end\"}\n     */\n    @property()\n    placement: Placement = 'top-start';\n\n    /*\n     * @type {String}\n     * @attr success-message\n     * @description The message to display when the text is copied to the clipboard after clicking on the truncated text\n     */\n    @property({ type: String, attribute: 'success-message' })\n    successMessage = 'Copied to clipboard';\n\n    @state()\n    hasCopied = false;\n\n    @state()\n    private fullText = '';\n\n    @state()\n    private overflowing = false;\n\n    @query('#content')\n    private content!: HTMLElement;\n\n    @query('#overlay')\n    private overlayEl?: Overlay;\n\n    @queryAssignedNodes({ flatten: true })\n    private slottedContent!: Node[];\n\n    // elements instead of nodes because, according to spec,\n    // flattened assignedNodes will return a slot's *children* if there are no assigned nodes.\n    // \u00AF\\_(\u30C4)_/\u00AF\n    @queryAssignedElements({ slot: 'overflow', flatten: true })\n    private slottedOverflow!: HTMLElement[];\n\n    get hasCustomOverflow(): boolean {\n        return this.slottedOverflow.length > 0;\n    }\n\n    private resizeObserver = new ResizeObserver(() => {\n        this.measureOverflow();\n    });\n\n    private mutationObserver = new MutationObserver(() => {\n        this.copyText();\n    });\n\n    override render(): TemplateResult {\n        /* eslint-disable lit-a11y/click-events-have-key-events */\n        return html`\n            <span id=\"content\" @click=${this.handleClick}>\n                <slot></slot>\n            </span>\n            ${this.renderTooltip()}\n        `;\n        /* eslint-enable lit-a11y/click-events-have-key-events */\n    }\n\n    private renderTooltip(): TemplateResult | undefined {\n        if (!this.overflowing) {\n            return html`\n                <slot\n                    name=\"overflow\"\n                    style=\"display: none\"\n                    @slotchange=${this.handleOverflowSlotchange}\n                ></slot>\n            `;\n        }\n        return html`\n            <sp-overlay\n                id=\"overlay\"\n                .triggerElement=${this as HTMLElement}\n                .triggerInteraction=${'hover'}\n                type=\"hint\"\n                placement=${this.placement}\n            >\n                <sp-tooltip name=\"tooltip\">\n                    ${!this.hasCopied\n                        ? html`\n                              <slot\n                                  name=\"overflow\"\n                                  @slotchange=${this.handleOverflowSlotchange}\n                              >\n                                  ${this.fullText}\n                              </slot>\n                          `\n                        : this.successMessage}\n                </sp-tooltip>\n            </sp-overlay>\n        `;\n    }\n\n    protected override firstUpdated(\n        _changedProperties: PropertyValues<this>\n    ): void {\n        this.resizeObserver.observe(this);\n        this.resizeObserver.observe(this.content);\n        this.copyText();\n        this.measureOverflow();\n    }\n\n    protected override updated(changedProperties: PropertyValues<this>): void {\n        super.updated(changedProperties);\n        if (\n            changedProperties.has('hasCopied') &&\n            this.hasCopied &&\n            this.overlayEl\n        ) {\n            // we know overlayEl exists because it couldn't copy the text otherwise\n            this.overlayEl.open = true;\n        }\n    }\n\n    private handleOverflowSlotchange(): void {\n        this.mutationObserver.disconnect();\n        if (!this.hasCustomOverflow) {\n            /* c8 ignore next 5 */\n            this.mutationObserver.observe(this.content, {\n                subtree: true,\n                childList: true,\n                characterData: true,\n            });\n        }\n    }\n\n    private handleClick(): void {\n        if (!this.overflowing) return;\n\n        const textToCopy = this.slottedContent\n            .map((node) => node.textContent ?? '')\n            .join('')\n            .trim();\n        navigator.clipboard.writeText(textToCopy);\n        this.hasCopied = true;\n        /* c8 ignore next 3 */\n        setTimeout(() => {\n            this.hasCopied = false;\n        }, 6000);\n    }\n\n    private measureOverflow(): void {\n        // Add 1 because Safari sometimes rounds by 1px, breaking the calculation otherwise\n        this.overflowing = this.content.offsetWidth > this.clientWidth + 1;\n    }\n\n    // Copies just the textContent of slotted nodes into the tooltip to avoid duplicating the user's DOM\n    private copyText(): void {\n        if (this.hasCustomOverflow) return;\n        this.fullText = this.slottedContent\n            .map((node) => node.textContent ?? '')\n            .join('');\n    }\n}\n"],
  "mappings": "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",
  "names": ["html", "SpectrumElement", "property", "query", "queryAssignedElements", "queryAssignedNodes", "state", "styles", "_changedProperties", "changedProperties", "textToCopy", "node", "_a", "__decorateClass"]
}
