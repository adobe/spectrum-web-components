{
  "version": 3,
  "sources": ["color-controller.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { expect } from '@open-wc/testing';\nimport { ReactiveElement } from 'lit';\nimport Color from 'colorjs.io';\nimport {\n    ColorController,\n    ColorTypes,\n} from '@spectrum-web-components/reactive-controllers/src/ColorController.js';\n\ndescribe('ColorController', () => {\n    let host: ReactiveElement;\n    let colorController: ColorController;\n\n    beforeEach(() => {\n        host = {} as ReactiveElement;\n        host.requestUpdate = () => {};\n        colorController = new ColorController(host);\n    });\n\n    it('should initialize correctly', () => {\n        expect(colorController).to.exist;\n        expect(colorController.color).to.be.instanceOf(Color);\n    });\n\n    it('should validate color strings correctly', () => {\n        const validRgba = 'rgba(255, 0, 0, 1)';\n        const validHsla = 'hsla(120, 100%, 50%, 0.5)';\n        const validHsva = 'hsva(240, 100%, 100%, 0.75)';\n        const invalidColor = 'invalidColor';\n\n        expect(colorController.validateColorString(validRgba).isValid).to.be\n            .true;\n        expect(colorController.validateColorString(validHsla).isValid).to.be\n            .true;\n        expect(colorController.validateColorString(validHsva).isValid).to.be\n            .true;\n        expect(colorController.validateColorString(invalidColor).isValid).to.be\n            .false;\n    });\n\n    it('should process RGB values in percentage correctly', () => {\n        const colorString = 'rgb(50%, 25%, 75%)';\n        const result = colorController.validateColorString(colorString);\n        expect(result.isValid).to.be.true;\n        expect(result.coords).to.deep.equal([0.5, 0.25, 0.75]);\n        expect(result.spaceId).to.equal('srgb');\n    });\n\n    it('should default alpha to 1 when alpha is undefined in RGBA', () => {\n        const colorString = 'rgb(255, 0, 0)';\n        const result = colorController.validateColorString(colorString);\n\n        expect(result.alpha).to.equal(1);\n        expect(result.isValid).to.be.true;\n        expect(result.coords).to.deep.equal([1, 0, 0]);\n        expect(result.spaceId).to.equal('srgb');\n    });\n\n    it('should handle invalid color strings by trying to create a new Color object with a prefixed #', () => {\n        const invalidColorString = 'invalidColor';\n        const validHexColorString = 'ff0000'; // Equivalent to #ff0000\n\n        // Set the invalid color string\n        colorController.color = invalidColorString;\n\n        // Expect the color to be unchanged (default color)\n        expect(colorController.color.toString()).to.equal(\n            new Color('hsv', [0, 100, 100], 1).toString()\n        );\n\n        // Set the valid hex color string without #\n        colorController.color = validHexColorString;\n\n        // Expect the color to be set correctly\n        expect(colorController.color.toString()).to.equal(\n            new Color(`#${validHexColorString}`).toString()\n        );\n    });\n\n    it('should set color correctly with string input', () => {\n        const colorString = 'rgba(255, 0, 0, 1)';\n        colorController.color = colorString;\n        expect(colorController.color.toString()).to.equal(\n            new Color(colorString).toString()\n        );\n    });\n\n    it('should set color correctly with object input', () => {\n        const colorObject: ColorTypes = { r: 255, g: 0, b: 0, a: 1 };\n        colorController.color = colorObject;\n        //expect(colorController.color.toString()).to.equal(new Color(colorObject).toString());\n    });\n\n    it('should get color value correctly', () => {\n        let colorString = 'rgba(255, 0, 0, 0.7)';\n        colorController.color = colorString;\n        expect(colorController.colorValue).to.equal(colorString);\n        colorString = 'hsla(120, 100%, 50%, 0.5)';\n        colorController.color = colorString;\n        expect(colorController.colorValue).to.equal(colorString);\n    });\n\n    it('should get and set hue correctly', () => {\n        colorController.hue = 180;\n        expect(colorController.hue).to.equal(180);\n    });\n\n    it('should convert color correctly', () => {\n        const colorString = 'rgba(255, 0, 0, 1)';\n        colorController.color = colorString;\n        expect(colorController.getColor('hsl')).to.be.an('object');\n    });\n\n    it('should get HSL string correctly', () => {\n        const colorString = 'rgba(255, 0, 0, 1)';\n        colorController.color = colorString;\n        expect(colorController.getHslString()).to.equal(\n            new Color(colorString).to('hsl').toString()\n        );\n    });\n\n    it('should process hex color values correctly when alpha is defined', () => {\n        const colorString = '#ff573380'; // Equivalent to rgba(255, 87, 51, 0.5)\n        colorController.color = colorString;\n        expect(colorController.color.toString()).to.equal(\n            new Color(colorString).toString()\n        );\n    });\n\n    it('should process hex color values correctly when alpha is not defined', () => {\n        const colorString = '#ff5733'; // Equivalent to rgba(255, 87, 51, 1)\n        colorController.color = colorString;\n        expect(colorController.color.toString()).to.equal(\n            new Color(colorString).toString()\n        );\n    });\n\n    it('should save and restore previous color correctly', () => {\n        const colorString = 'rgba(255, 0, 0, 1)';\n        colorController.color = colorString;\n        colorController.savePreviousColor();\n        colorController.color = 'rgba(0, 255, 0, 1)';\n        colorController.restorePreviousColor();\n        expect(colorController.color.toString()).to.equal(\n            new Color(colorString).toString()\n        );\n    });\n    it('should return correct color value for hsv spaceId', () => {\n        colorController.color = 'hsv(120, 100%, 50%)';\n        const result = colorController.colorValue;\n        expect(result).to.equal('hsv(120, 100%, 50%)');\n    });\n\n    it('should return correct color value for hsva spaceId', () => {\n        colorController.color = 'hsva(120, 100%, 50%, 0.5)';\n        const result = colorController.colorValue;\n        expect(result).to.equal('hsva(120, 100%, 50%, 0.5)');\n    });\n\n    it('should return correct color value for hsl spaceId', () => {\n        colorController.color = 'hsl(120, 100%, 50%)';\n        const result = colorController.colorValue;\n        expect(result).to.equal('hsl(120, 100%, 50%)');\n    });\n\n    it('should return correct color value for hsla spaceId', () => {\n        colorController.color = 'hsla(120, 100%, 50%, 0.5)';\n        const result = colorController.colorValue;\n        expect(result).to.equal('hsla(120, 100%, 50%, 0.5)');\n    });\n\n    it('should return correct color value for hex string spaceId', () => {\n        colorController.color = '#ff5733';\n        const result = colorController.colorValue;\n        expect(result).to.equal('#ff5733');\n    });\n\n    it('should return correct color value for hex string spaceId with alpha', () => {\n        colorController.color = '#ff573380'; // Equivalent to rgba(255, 87, 51, 0.5)\n        const result = colorController.colorValue;\n        expect(result).to.equal('#ff573380');\n    });\n\n    it('should return correct color value for default spaceId with hex origin', () => {\n        colorController.color = '#ff5733';\n        const result = colorController.colorValue;\n        expect(result).to.equal('#ff5733');\n    });\n\n    it('should return correct color value for default spaceId with hex origin and alpha', () => {\n        colorController.color = '#ff573380'; // Equivalent to rgba(255, 87, 51, 0.5)\n        const result = colorController.colorValue;\n        expect(result).to.equal('#ff573380');\n    });\n\n    it('should return correct color value for default spaceId with percentage origin', () => {\n        colorController.color = 'rgb(50%, 25%, 75%)';\n        const result = colorController.colorValue;\n        expect(result).to.equal('rgb(50%, 25%, 75%)');\n    });\n\n    it('should return correct color value for default spaceId with rgba origin', () => {\n        colorController.color = 'rgba(255, 87, 51, 0.5)';\n        const result = colorController.colorValue;\n        expect(result).to.equal('rgba(255, 87, 51, 0.5)');\n    });\n\n    it('should return correct color values for hsv spaceId', () => {\n        colorController.color = new Color('hsv', [120, 100, 50]);\n        const result = colorController.colorValue;\n        expect(result).to.deep.equal({\n            h: 120,\n            s: 1,\n            v: 0.5,\n            a: 1,\n        });\n    });\n\n    it('should return correct color values for hsl spaceId', () => {\n        colorController.color = new Color('hsl', [120, 100, 50]);\n        const result = colorController.colorValue;\n        expect(result).to.deep.equal({\n            h: 120,\n            s: 1,\n            l: 0.5,\n            a: 1,\n        });\n    });\n\n    it('should return correct color values for srgb spaceId', () => {\n        colorController.color = new Color('srgb', [0.5, 0.25, 0.75]);\n        const result = colorController.colorValue;\n        expect(result).to.deep.equal({\n            r: 128,\n            g: 64,\n            b: 191,\n            a: 1,\n        });\n    });\n\n    it('should return correct color values for srgb spaceId with percentage origin', () => {\n        colorController.color = new Color('srgb', [0.5, 0.25, 0.75]);\n        colorController.colorOrigin = { r: '50%', g: '25%', b: '75%' };\n        const result = colorController.colorValue;\n        expect(result).to.deep.equal({\n            r: '128%',\n            g: '64%',\n            b: '191%',\n            a: 1,\n        });\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
