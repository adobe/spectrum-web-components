{
  "version": 3,
  "sources": ["Accordion.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    SizedMixin,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    queryAssignedNodes,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { FocusGroupController } from '@spectrum-web-components/reactive-controllers/src/FocusGroup.js';\n\nimport { AccordionItem } from './AccordionItem.dev.js'\n\nimport styles from './accordion.css.js';\n\n/**\n * @element sp-accordion\n * @slot - The sp-accordion-item children to display.\n */\nexport class Accordion extends SizedMixin(SpectrumElement, {\n    noDefaultSize: true,\n}) {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    /**\n     * Allows multiple accordion items to be opened at the same time\n     */\n    @property({ type: Boolean, reflect: true, attribute: 'allow-multiple' })\n    public allowMultiple = false;\n\n    /**\n     * Sets the spacing between the content to borders of an accordion item\n     */\n    @property({ type: String, reflect: true })\n    public density?: 'compact' | 'spacious';\n\n    @queryAssignedNodes()\n    private defaultNodes!: NodeListOf<AccordionItem>;\n\n    private get items(): AccordionItem[] {\n        return [...(this.defaultNodes || [])].filter(\n            (node: HTMLElement) => typeof node.tagName !== 'undefined'\n        ) as AccordionItem[];\n    }\n\n    focusGroupController = new FocusGroupController<AccordionItem>(this, {\n        direction: 'vertical',\n        elements: () => this.items,\n        isFocusableElement: (el: AccordionItem) => !el.disabled,\n    });\n\n    public override focus(): void {\n        this.focusGroupController.focus();\n    }\n\n    private async onToggle(event: Event): Promise<void> {\n        const target = event.target as AccordionItem;\n        // Let the event pass through the DOM so that it can be\n        // prevented from the outside if a user so desires.\n        await 0;\n        if (this.allowMultiple || event.defaultPrevented) {\n            // No toggling when `allowMultiple` or the user prevents it.\n            return;\n        }\n        const items = [...this.items] as AccordionItem[];\n        /* c8 ignore next 3 */\n        if (items && !items.length) {\n            // no toggling when there aren't items.\n            return;\n        }\n        items.forEach((item) => {\n            if (item !== target) {\n                // Close all the items that didn't dispatch the event.\n                item.open = false;\n            }\n        });\n    }\n\n    private handleSlotchange(): void {\n        this.focusGroupController.clearElementCache();\n        this.items.forEach((item) => {\n            item.size = this.size;\n        });\n    }\n\n    protected override updated(changed: PropertyValues<this>): void {\n        super.updated(changed);\n        if (\n            changed.has('size') &&\n            (!!changed.get('size') || this.size !== 'm')\n        ) {\n            this.items.forEach((item) => {\n                item.size = this.size;\n            });\n        }\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <slot\n                @slotchange=${this.handleSlotchange}\n                @sp-accordion-item-toggle=${this.onToggle}\n            ></slot>\n        `;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;AAYA;AAAA,EAEI;AAAA,EAEA;AAAA,EACA;AAAA,OAEG;AACP;AAAA,EACI;AAAA,EACA;AAAA,OACG;AACP,SAAS,4BAA4B;AAIrC,OAAO,YAAY;AAMZ,aAAM,kBAAkB,WAAW,iBAAiB;AAAA,EACvD,eAAe;AACnB,CAAC,EAAE;AAAA,EAFI;AAAA;AAWH,SAAO,gBAAgB;AAiBvB,gCAAuB,IAAI,qBAAoC,MAAM;AAAA,MACjE,WAAW;AAAA,MACX,UAAU,MAAM,KAAK;AAAA,MACrB,oBAAoB,CAAC,OAAsB,CAAC,GAAG;AAAA,IACnD,CAAC;AAAA;AAAA,EA7BD,WAA2B,SAAyB;AAChD,WAAO,CAAC,MAAM;AAAA,EAClB;AAAA,EAiBA,IAAY,QAAyB;AACjC,WAAO,CAAC,GAAI,KAAK,gBAAgB,CAAC,CAAE,EAAE;AAAA,MAClC,CAAC,SAAsB,OAAO,KAAK,YAAY;AAAA,IACnD;AAAA,EACJ;AAAA,EAQgB,QAAc;AAC1B,SAAK,qBAAqB,MAAM;AAAA,EACpC;AAAA,EAEA,MAAc,SAAS,OAA6B;AAChD,UAAM,SAAS,MAAM;AAGrB,UAAM;AACN,QAAI,KAAK,iBAAiB,MAAM,kBAAkB;AAE9C;AAAA,IACJ;AACA,UAAM,QAAQ,CAAC,GAAG,KAAK,KAAK;AAE5B,QAAI,SAAS,CAAC,MAAM,QAAQ;AAExB;AAAA,IACJ;AACA,UAAM,QAAQ,CAAC,SAAS;AACpB,UAAI,SAAS,QAAQ;AAEjB,aAAK,OAAO;AAAA,MAChB;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEQ,mBAAyB;AAC7B,SAAK,qBAAqB,kBAAkB;AAC5C,SAAK,MAAM,QAAQ,CAAC,SAAS;AACzB,WAAK,OAAO,KAAK;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EAEmB,QAAQ,SAAqC;AAC5D,UAAM,QAAQ,OAAO;AACrB,QACI,QAAQ,IAAI,MAAM,MACjB,CAAC,CAAC,QAAQ,IAAI,MAAM,KAAK,KAAK,SAAS,MAC1C;AACE,WAAK,MAAM,QAAQ,CAAC,SAAS;AACzB,aAAK,OAAO,KAAK;AAAA,MACrB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEmB,SAAyB;AACxC,WAAO;AAAA;AAAA,8BAEe,KAAK,gBAAgB;AAAA,4CACP,KAAK,QAAQ;AAAA;AAAA;AAAA,EAGrD;AACJ;AA7EW;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,MAAM,WAAW,iBAAiB,CAAC;AAAA,GAV9D,UAWF;AAMA;AAAA,EADN,SAAS,EAAE,MAAM,QAAQ,SAAS,KAAK,CAAC;AAAA,GAhBhC,UAiBF;AAGC;AAAA,EADP,mBAAmB;AAAA,GAnBX,UAoBD;",
  "names": []
}
