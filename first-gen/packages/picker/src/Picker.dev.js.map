{
  "version": 3,
  "sources": ["Picker.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    DefaultElementSize,\n    html,\n    nothing,\n    PropertyValues,\n    render,\n    SizedMixin,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    classMap,\n    ifDefined,\n    StyleInfo,\n    styleMap,\n} from '@spectrum-web-components/base/src/directives.js';\nimport {\n    property,\n    query,\n    state,\n} from '@spectrum-web-components/base/src/decorators.js';\n\nimport pickerStyles from './picker.css.js';\nimport chevronStyles from '@spectrum-web-components/icon/src/spectrum-icon-chevron.css.js';\n\nimport type { Tooltip } from '@spectrum-web-components/tooltip';\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-chevron100.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js';\nimport '@spectrum-web-components/menu/sp-menu.js';\nimport type {\n    Menu,\n    MenuItem,\n    MenuItemChildren,\n} from '@spectrum-web-components/menu';\n\nimport type { MenuItemKeydownEvent } from '@spectrum-web-components/menu';\nimport { Placement } from '@spectrum-web-components/overlay';\nimport {\n    IS_MOBILE,\n    MatchMediaController,\n} from '@spectrum-web-components/reactive-controllers/src/MatchMedia.js';\nimport { DependencyManagerController } from '@spectrum-web-components/reactive-controllers/src/DependencyManger.js';\nimport { PendingStateController } from '@spectrum-web-components/reactive-controllers/src/PendingState.js';\nimport { Overlay } from '@spectrum-web-components/overlay/src/Overlay.js';\nimport type { SlottableRequestEvent } from '@spectrum-web-components/overlay/src/slottable-request-event.js';\nimport type { FieldLabel } from '@spectrum-web-components/field-label';\n\nimport { DesktopController } from './DesktopController.dev.js'\nimport { MobileController } from './MobileController.dev.js'\nimport { strategies } from './strategies.dev.js'\n\nconst chevronClass = {\n    s: 'spectrum-UIIcon-ChevronDown75',\n    m: 'spectrum-UIIcon-ChevronDown100',\n    l: 'spectrum-UIIcon-ChevronDown200',\n    xl: 'spectrum-UIIcon-ChevronDown300',\n};\n\nexport const DESCRIPTION_ID = 'option-picker';\n\n/**\n * @element sp-picker\n * @slot label - The placeholder content for the Picker\n * @slot description - The description content for the Picker\n * @slot tooltip - Tooltip to to be applied to the the Picker Button\n * @slot - menu items to be listed in the Picker\n * @fires change - Announces that the `value` of the element has changed\n * @fires sp-opened - Announces that the overlay has been opened\n */\nexport class PickerBase extends SizedMixin(SpectrumElement, {\n    noDefaultSize: true,\n}) {\n    static override shadowRootOptions = {\n        ...SpectrumElement.shadowRootOptions,\n        delegatesFocus: true,\n    };\n\n    public isMobile = new MatchMediaController(this, IS_MOBILE);\n\n    public strategy!: DesktopController | MobileController;\n\n    @state()\n    appliedLabel?: string;\n\n    @query('#button')\n    public button!: HTMLButtonElement;\n\n    public dependencyManager = new DependencyManagerController(this);\n\n    private deprecatedMenu: Menu | null = null;\n\n    @property({ type: Boolean, reflect: true })\n    public disabled = false;\n\n    @property({ type: Boolean, reflect: true })\n    public focused = false;\n\n    @property({ type: String, reflect: true })\n    public icons?: 'only' | 'none';\n\n    @property({ type: Boolean, reflect: true })\n    public invalid = false;\n\n    /**\n     * Forces the Picker to render as a popover on mobile instead of a tray.\n     *\n     * @memberof PickerBase\n     */\n    @property({ type: Boolean, reflect: true, attribute: 'force-popover' })\n    public forcePopover = false;\n\n    /** Whether the items are currently loading. */\n    @property({ type: Boolean, reflect: true })\n    public pending = false;\n\n    /** Defines a string value that labels the Picker while it is in pending state. */\n    @property({ type: String, attribute: 'pending-label' })\n    public pendingLabel = 'Pending';\n\n    @property()\n    public label?: string;\n\n    @property({ type: Boolean, reflect: true })\n    public open = false;\n\n    @property({ type: Boolean, reflect: true })\n    public readonly = false;\n\n    public selects: undefined | 'single' = 'single';\n\n    @state()\n    public labelAlignment?: 'inline';\n\n    protected get menuItems(): MenuItem[] {\n        return this.optionsMenu.childItems;\n    }\n\n    @query('sp-menu')\n    public optionsMenu!: Menu;\n\n    /**\n     * @deprecated\n     * */\n    public get selfManageFocusElement(): boolean {\n        return true;\n    }\n\n    @query('sp-overlay')\n    public overlayElement!: Overlay;\n\n    protected tooltipEl?: Tooltip;\n\n    /**\n     * @type {\"top\" | \"top-start\" | \"top-end\" | \"right\" | \"right-start\" | \"right-end\" | \"bottom\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"left-start\" | \"left-end\"}\n     * @attr\n     */\n\n    @property()\n    public placement: Placement = 'bottom-start';\n\n    @property({ type: Boolean, reflect: true })\n    public quiet = false;\n\n    @property({ type: String })\n    public value = '';\n\n    @property({ attribute: false })\n    public get selectedItem(): MenuItem | undefined {\n        return this._selectedItem;\n    }\n\n    public pendingStateController: PendingStateController<this>;\n\n    /**\n     * Initializes the `PendingStateController` for the Picker component.\n     * The `PendingStateController` manages the pending state of the Picker.\n     */\n    constructor() {\n        super();\n        this.pendingStateController = new PendingStateController(this);\n    }\n\n    public set selectedItem(selectedItem: MenuItem | undefined) {\n        this.selectedItemContent = selectedItem\n            ? selectedItem.itemChildren\n            : undefined;\n\n        if (selectedItem === this.selectedItem) return;\n        const oldSelectedItem = this.selectedItem;\n        this._selectedItem = selectedItem;\n        this.requestUpdate('selectedItem', oldSelectedItem);\n    }\n\n    _selectedItem?: MenuItem;\n\n    protected listRole: 'listbox' | 'menu' = 'listbox';\n    protected itemRole = 'option';\n\n    public get focusElement(): HTMLElement {\n        if (this.open) {\n            return this.optionsMenu;\n        }\n        return this.button;\n    }\n\n    public forceFocusVisible(): void {\n        if (this.disabled) {\n            return;\n        }\n\n        this.focused = true;\n    }\n\n    // handled by interaction controller, desktop or mobile; this is only called with a programmatic this.click()\n    public override click(): void {\n        this.toggle();\n    }\n\n    // pointer events handled by interaction controller, desktop or mobile; this is only called with a programmatic this.button.click()\n    public handleButtonClick(): void {\n        if (this.disabled) {\n            return;\n        }\n        this.toggle();\n    }\n\n    public handleButtonBlur(): void {\n        this.focused = false;\n    }\n\n    public override focus(options?: FocusOptions): void {\n        this.focusElement?.focus(options);\n    }\n    /**\n     * @deprecated - Use `focus` instead.\n     */\n    public handleHelperFocus(): void {\n        // set focused to true here instead of handleButtonFocus so clicks don't flash a focus outline\n        this.focused = true;\n        this.button.focus();\n    }\n\n    public handleFocus(): void {\n        if (!this.disabled && this.focusElement) {\n            this.focused = this.hasVisibleFocusInTree();\n        }\n    }\n\n    public handleChange(event: Event): void {\n        if (this.strategy) {\n            this.strategy.preventNextToggle = 'no';\n        }\n        const target = event.target as Menu;\n        const [selected] = target.selectedItems;\n        event.stopPropagation();\n        if (event.cancelable) {\n            this.setValueFromItem(selected, event);\n        } else {\n            // Non-cancelable \"change\" events announce a selection with no value\n            // change that should close the Picker element.\n            this.open = false;\n            if (this.strategy) {\n                this.strategy.open = false;\n            }\n        }\n    }\n\n    public handleButtonFocus(event: FocusEvent): void {\n        this.strategy?.handleButtonFocus(event);\n    }\n\n    protected handleEscape = (\n        event: MenuItemKeydownEvent | KeyboardEvent\n    ): void => {\n        if (event.key === 'Escape') {\n            event.stopPropagation();\n            event.preventDefault();\n            this.toggle(false);\n        }\n    };\n\n    protected handleKeydown = (event: KeyboardEvent): void => {\n        this.focused = true;\n        if (\n            !['ArrowUp', 'ArrowDown', 'Enter', ' ', 'Escape'].includes(\n                event.key\n            )\n        ) {\n            return;\n        }\n        if (event.key === 'Escape') {\n            this.handleEscape(event);\n            return;\n        }\n        event.stopPropagation();\n        event.preventDefault();\n        this.keyboardOpen();\n    };\n\n    protected async keyboardOpen(): Promise<void> {\n        // if the menu is not open, we need to toggle it and wait for it to open to focus on the first selected item\n        if (!this.open || !this.strategy.open) {\n            this.addEventListener(\n                'sp-opened',\n                () => this.optionsMenu?.focusOnFirstSelectedItem(),\n                {\n                    once: true,\n                }\n            );\n            this.toggle(true);\n        } else {\n            // if the menu is already open, we need to focus on the first selected item\n            this.optionsMenu?.focusOnFirstSelectedItem();\n        }\n    }\n\n    protected async setValueFromItem(\n        item: MenuItem,\n        menuChangeEvent?: Event\n    ): Promise<void> {\n        this.open = false;\n        // should always close when \"setting\" a value\n        const oldSelectedItem = this.selectedItem;\n        const oldValue = this.value;\n\n        // Set a value.\n        this.selectedItem = item;\n        this.value = item?.value ?? '';\n        await this.updateComplete;\n        const applyDefault = this.dispatchEvent(\n            new Event('change', {\n                bubbles: true,\n                // Allow it to be prevented.\n                cancelable: true,\n                composed: true,\n            })\n        );\n        if (!applyDefault && this.selects) {\n            if (menuChangeEvent) {\n                menuChangeEvent.preventDefault();\n            }\n            this.setMenuItemSelected(this.selectedItem as MenuItem, false);\n            if (oldSelectedItem) {\n                this.setMenuItemSelected(oldSelectedItem, true);\n            }\n            this.selectedItem = oldSelectedItem;\n            this.value = oldValue;\n            this.open = true;\n            if (this.strategy) {\n                this.strategy.open = true;\n            }\n            return;\n        } else if (!this.selects) {\n            // Unset the value if not carrying a selection\n            this.selectedItem = oldSelectedItem;\n            this.value = oldValue;\n            return;\n        }\n        if (oldSelectedItem) {\n            this.setMenuItemSelected(oldSelectedItem, false);\n        }\n        this.setMenuItemSelected(item, !!this.selects);\n    }\n\n    protected setMenuItemSelected(item: MenuItem, value: boolean): void {\n        // matches null | undefined\n        if (this.selects == null) return;\n        item.selected = value;\n    }\n\n    public toggle(target?: boolean): void {\n        if (this.readonly || this.pending || this.disabled) {\n            return;\n        }\n        const open = typeof target !== 'undefined' ? target : !this.open;\n\n        this.open = open;\n        if (this.strategy) {\n            this.strategy.open = this.open;\n        }\n    }\n\n    public close(): void {\n        if (this.readonly) {\n            return;\n        }\n        if (this.strategy) {\n            this.open = false;\n            this.strategy.open = false;\n        }\n    }\n\n    protected get containerStyles(): StyleInfo {\n        // @todo: test in mobile\n        /* c8 ignore next 5 */\n        if (this.isMobile.matches) {\n            return {\n                '--swc-menu-width': '100%',\n            };\n        }\n        return {};\n    }\n\n    @state()\n    protected get selectedItemContent(): MenuItemChildren {\n        return this._selectedItemContent || { icon: [], content: [] };\n    }\n\n    protected set selectedItemContent(\n        selectedItemContent: MenuItemChildren | undefined\n    ) {\n        if (selectedItemContent === this.selectedItemContent) return;\n\n        const oldContent = this.selectedItemContent;\n        this._selectedItemContent = selectedItemContent;\n        this.requestUpdate('selectedItemContent', oldContent);\n    }\n\n    _selectedItemContent?: MenuItemChildren;\n\n    protected handleTooltipSlotchange(\n        event: Event & { target: HTMLSlotElement }\n    ): void {\n        this.tooltipEl = event.target.assignedElements()[0] as\n            | Tooltip\n            | undefined;\n    }\n\n    public handleSlottableRequest = (_event: SlottableRequestEvent): void => {};\n\n    protected renderLabelContent(content: Node[]): TemplateResult | Node[] {\n        if (this.value && this.selectedItem) {\n            return content;\n        }\n        return html`\n            <slot name=\"label\" id=\"label\">\n                <span\n                    aria-hidden=${ifDefined(\n                        this.appliedLabel ? undefined : 'true'\n                    )}\n                >\n                    ${this.label}\n                </span>\n            </slot>\n        `;\n    }\n\n    protected get buttonContent(): TemplateResult[] {\n        const labelClasses = {\n            'visually-hidden': this.icons === 'only' && !!this.value,\n            placeholder: !this.value,\n            label: true,\n        };\n        const appliedLabel = this.appliedLabel || this.label;\n        return [\n            html`\n                <span id=\"icon\" ?hidden=${this.icons === 'none'}>\n                    ${this.selectedItemContent.icon}\n                </span>\n                <span\n                    id=${ifDefined(\n                        this.value && this.selectedItem ? 'label' : undefined\n                    )}\n                    class=${classMap(labelClasses)}\n                >\n                    ${this.renderLabelContent(this.selectedItemContent.content)}\n                </span>\n                ${this.value && this.selectedItem\n                    ? html`\n                          <span\n                              aria-hidden=\"true\"\n                              class=\"visually-hidden\"\n                              id=\"applied-label\"\n                          >\n                              ${appliedLabel}\n                              <slot name=\"label\"></slot>\n                          </span>\n                      `\n                    : html`\n                          <span hidden id=\"applied-label\">${appliedLabel}</span>\n                      `}\n                ${this.invalid && !this.pending\n                    ? html`\n                          <sp-icon-alert\n                              class=\"validation-icon\"\n                          ></sp-icon-alert>\n                      `\n                    : nothing}\n                ${this.pendingStateController.renderPendingState()}\n                <sp-icon-chevron100\n                    class=\"picker ${chevronClass[\n                        this.size as DefaultElementSize\n                    ]}\"\n                ></sp-icon-chevron100>\n            `,\n        ];\n    }\n\n    applyFocusElementLabel = (\n        value: string,\n        labelElement: FieldLabel\n    ): void => {\n        this.appliedLabel = value;\n        this.labelAlignment = labelElement.sideAligned ? 'inline' : undefined;\n    };\n\n    protected hasAccessibleLabel(): boolean {\n        const slotContent =\n            this.querySelector('[slot=\"label\"]')?.textContent &&\n            this.querySelector('[slot=\"label\"]')?.textContent?.trim() !== '';\n        const slotAlt =\n            this.querySelector('[slot=\"label\"]')?.getAttribute('alt')?.trim() &&\n            this.querySelector('[slot=\"label\"]')\n                ?.getAttribute('alt')\n                ?.trim() !== '';\n        return (\n            !!this.label ||\n            !!this.getAttribute('aria-label') ||\n            !!this.getAttribute('aria-labelledby') ||\n            !!this.appliedLabel ||\n            !!slotContent ||\n            !!slotAlt\n        );\n    }\n\n    protected warnNoLabel(): void {\n        window.__swc.warn(\n            this,\n            `<${this.localName}> needs one of the following to be accessible:`,\n            'https://opensource.adobe.com/spectrum-web-components/components/picker/#accessibility',\n            {\n                type: 'accessibility',\n                issues: [\n                    `an <sp-field-label> element with a \\`for\\` attribute referencing the \\`id\\` of the \\`<${this.localName}>\\`, or`,\n                    'value supplied to the \"label\" attribute, which will be displayed visually as placeholder text, or',\n                    'text content supplied in a <span> with slot=\"label\", which will also be displayed visually as placeholder text.',\n                ],\n            }\n        );\n    }\n\n    protected renderOverlay(menu: TemplateResult): TemplateResult {\n        if (this.strategy?.overlay === undefined) {\n            return menu;\n        }\n        const container = this.renderContainer(menu);\n        render(container, this.strategy?.overlay as unknown as HTMLElement, {\n            host: this,\n        });\n        return this.strategy?.overlay as unknown as TemplateResult;\n    }\n\n    protected get renderDescriptionSlot(): TemplateResult {\n        return html`\n            <div id=${DESCRIPTION_ID}>\n                <slot name=\"description\"></slot>\n            </div>\n        `;\n    }\n    // a helper to throw focus to the button is needed because Safari\n    // won't include buttons in the tab order even with tabindex=\"0\"\n    protected override render(): TemplateResult {\n        if (this.tooltipEl) {\n            this.tooltipEl.disabled = this.open;\n        }\n        return html`\n            <button\n                aria-controls=${ifDefined(this.open ? 'menu' : undefined)}\n                aria-describedby=\"tooltip ${DESCRIPTION_ID}\"\n                aria-expanded=${this.open ? 'true' : 'false'}\n                aria-haspopup=\"true\"\n                aria-labelledby=\"loader icon label applied-label\"\n                id=\"button\"\n                class=${ifDefined(\n                    this.labelAlignment\n                        ? `label-${this.labelAlignment}`\n                        : undefined\n                )}\n                @focus=${this.handleButtonFocus}\n                @blur=${this.handleButtonBlur}\n                @keydown=${{\n                    handleEvent: this.handleEnterKeydown,\n                    capture: true,\n                }}\n                ?disabled=${this.disabled}\n            >\n                ${this.buttonContent}\n            </button>\n            <slot\n                aria-hidden=\"true\"\n                name=\"tooltip\"\n                id=\"tooltip\"\n                @keydown=${this.handleKeydown}\n                @slotchange=${this.handleTooltipSlotchange}\n            ></slot>\n            ${this.renderMenu} ${this.renderDescriptionSlot}\n        `;\n    }\n\n    protected override willUpdate(changes: PropertyValues<this>): void {\n        super.willUpdate(changes);\n        if (changes.has('tabIndex') && !!this.tabIndex) {\n            this.button.tabIndex = this.tabIndex;\n            this.removeAttribute('tabindex');\n        }\n    }\n\n    protected override update(changes: PropertyValues<this>): void {\n        if (this.selects) {\n            /**\n             * Always force `selects` to \"single\" when set.\n             *\n             * @todo: Add support functionally and visually for \"multiple\"\n             */\n            this.selects = 'single';\n        }\n        if (changes.has('disabled') && this.disabled) {\n            this.close();\n        }\n        if (changes.has('pending') && this.pending) {\n            this.close();\n        }\n        if (changes.has('value')) {\n            // MenuItems update a frame late for <slot> management,\n            // await the same here.\n            this.shouldScheduleManageSelection();\n        }\n        // Maybe it's finally time to remove this support?s\n        if (!this.hasUpdated) {\n            this.deprecatedMenu = this.querySelector(':scope > sp-menu');\n            this.deprecatedMenu?.toggleAttribute('ignore', true);\n            this.deprecatedMenu?.setAttribute('selects', 'inherit');\n        }\n        if (window.__swc.DEBUG) {\n            if (!this.hasUpdated && this.querySelector(':scope > sp-menu')) {\n                const { localName } = this;\n                window.__swc.warn(\n                    this,\n                    `You no longer need to provide an <sp-menu> child to ${localName}. Any styling or attributes on the <sp-menu> will be ignored.`,\n                    'https://opensource.adobe.com/spectrum-web-components/components/picker/#sizes',\n                    { level: 'deprecation' }\n                );\n            }\n            this.updateComplete.then(async () => {\n                // Attributes should be user supplied, making them available before first update.\n                // However, `appliesLabel` is applied by external elements that must be update complete as well to be bound appropriately.\n                await new Promise((res) => requestAnimationFrame(res));\n                await new Promise((res) => requestAnimationFrame(res));\n                if (!this.hasAccessibleLabel()) {\n                    this.warnNoLabel();\n                }\n            });\n        }\n        super.update(changes);\n    }\n\n    protected bindButtonKeydownListener(): void {\n        this.button.addEventListener('keydown', this.handleKeydown);\n    }\n\n    protected override updated(changes: PropertyValues<this>): void {\n        super.updated(changes);\n        if (changes.has('open')) {\n            this.strategy.open = this.open;\n        }\n    }\n\n    protected override firstUpdated(changes: PropertyValues<this>): void {\n        super.firstUpdated(changes);\n        this.bindButtonKeydownListener();\n        this.bindEvents();\n    }\n\n    protected get dismissHelper(): TemplateResult {\n        return html`\n            <div class=\"visually-hidden\">\n                <button\n                    tabindex=\"-1\"\n                    aria-label=\"Dismiss\"\n                    @click=${this.close}\n                ></button>\n            </div>\n        `;\n    }\n\n    protected renderContainer(menu: TemplateResult): TemplateResult {\n        const accessibleMenu = html`\n            ${this.dismissHelper} ${menu} ${this.dismissHelper}\n        `;\n        // @todo: test in mobile\n        if (this.isMobile.matches && !this.forcePopover) {\n            this.dependencyManager.add('sp-tray');\n            import('@spectrum-web-components/tray/sp-tray.js');\n            return html`\n                <sp-tray\n                    id=\"popover\"\n                    role=\"presentation\"\n                    style=${styleMap(this.containerStyles)}\n                >\n                    ${accessibleMenu}\n                </sp-tray>\n            `;\n        }\n        this.dependencyManager.add('sp-popover');\n        import('@spectrum-web-components/popover/sp-popover.js');\n        return html`\n            <sp-popover\n                id=\"popover\"\n                role=\"presentation\"\n                style=${styleMap(this.containerStyles)}\n                placement=${this.placement}\n            >\n                ${accessibleMenu}\n            </sp-popover>\n        `;\n    }\n\n    protected hasRenderedOverlay = false;\n\n    private onScroll(): void {\n        this.dispatchEvent(\n            new Event('scroll', {\n                cancelable: true,\n                composed: true,\n            })\n        );\n    }\n\n    protected get renderMenu(): TemplateResult {\n        const menu = html`\n            <sp-menu\n                aria-labelledby=\"applied-label\"\n                @change=${this.handleChange}\n                id=\"menu\"\n                @keydown=${{\n                    handleEvent: this.handleEnterKeydown,\n                    capture: true,\n                }}\n                @scroll=${this.onScroll}\n                role=${this.listRole}\n                .selects=${this.selects}\n                .selected=${this.value ? [this.value] : []}\n                size=${this.size}\n                @sp-menu-item-keydown=${this.handleEscape}\n                @sp-menu-item-added-or-updated=${this.shouldManageSelection}\n            >\n                <slot @slotchange=${this.shouldScheduleManageSelection}></slot>\n            </sp-menu>\n        `;\n        this.hasRenderedOverlay =\n            this.hasRenderedOverlay ||\n            this.focused ||\n            this.open ||\n            !!this.deprecatedMenu;\n        if (this.hasRenderedOverlay) {\n            if (this.dependencyManager.loaded) {\n                this.dependencyManager.add('sp-overlay');\n            }\n            return this.renderOverlay(menu);\n        }\n        return menu;\n    }\n\n    /**\n     * whether a selection change is already scheduled\n     */\n    public willManageSelection = false;\n\n    /**\n     * when the value changes or the menu slot changes, manage the selection on the next frame, if not already scheduled\n     * @param event\n     */\n    protected shouldScheduleManageSelection(event?: Event): void {\n        if (\n            !this.willManageSelection &&\n            (!event ||\n                ((event.target as HTMLElement).getRootNode() as ShadowRoot)\n                    .host === this)\n        ) {\n            //s set a flag to manage selection on the next frame\n            this.willManageSelection = true;\n            requestAnimationFrame(() => {\n                requestAnimationFrame(() => {\n                    this.manageSelection();\n                });\n            });\n        }\n    }\n\n    /**\n     * when an item is added or updated, manage the selection, if it's not already scheduled\n     */\n    protected shouldManageSelection(): void {\n        if (this.willManageSelection) {\n            return;\n        }\n        this.willManageSelection = true;\n        this.manageSelection();\n    }\n\n    /**\n     * updates menu selection based on value\n     */\n    protected async manageSelection(): Promise<void> {\n        if (this.selects == null) return;\n\n        this.selectionPromise = new Promise(\n            (res) => (this.selectionResolver = res)\n        );\n        let selectedItem: MenuItem | undefined;\n        await this.optionsMenu.updateComplete;\n        if (this.recentlyConnected) {\n            // Work around for attach timing differences in Safari and Firefox.\n            // Remove when refactoring to Menu passthrough wrapper.\n            await new Promise((res) => requestAnimationFrame(() => res(true)));\n            this.recentlyConnected = false;\n        }\n        this.menuItems.forEach((item) => {\n            if (this.value === item.value && !item.disabled) {\n                selectedItem = item;\n            } else {\n                item.selected = false;\n            }\n        });\n        if (selectedItem) {\n            selectedItem.selected = !!this.selects;\n            this.selectedItem = selectedItem;\n        } else {\n            this.value = '';\n            this.selectedItem = undefined;\n        }\n        if (this.open) {\n            await this.optionsMenu.updateComplete;\n            this.optionsMenu.updateSelectedItemIndex();\n        }\n        this.selectionResolver();\n        this.willManageSelection = false;\n    }\n\n    private selectionPromise = Promise.resolve();\n    private selectionResolver!: () => void;\n\n    protected override async getUpdateComplete(): Promise<boolean> {\n        const complete = (await super.getUpdateComplete()) as boolean;\n        await this.selectionPromise;\n        // if (this.overlayElement) {\n        //     await this.overlayElement.updateComplete;\n        // }\n        return complete;\n    }\n\n    private recentlyConnected = false;\n\n    private enterKeydownOn: EventTarget | null = null;\n\n    protected handleEnterKeydown = (event: KeyboardEvent): void => {\n        if (event.key !== 'Enter') {\n            return;\n        }\n        const target = event?.target as MenuItem;\n        if (!target.open && target.hasSubmenu) {\n            event.preventDefault();\n            return;\n        }\n\n        if (this.enterKeydownOn) {\n            event.preventDefault();\n            return;\n        }\n        this.enterKeydownOn = event.target;\n        this.addEventListener(\n            'keyup',\n            async (keyupEvent: KeyboardEvent) => {\n                if (keyupEvent.key !== 'Enter') {\n                    return;\n                }\n                this.enterKeydownOn = null;\n            },\n            { once: true }\n        );\n    };\n\n    public bindEvents(): void {\n        this.strategy?.abort();\n        if (this.isMobile.matches) {\n            this.strategy = new strategies['mobile'](this.button, this);\n        } else {\n            this.strategy = new strategies['desktop'](this.button, this);\n        }\n    }\n\n    public override connectedCallback(): void {\n        super.connectedCallback();\n        this.updateComplete.then(() => {\n            if (!this.tooltipEl?.selfManaged) {\n                return;\n            }\n            const overlayElement = this.tooltipEl.overlayElement;\n            if (overlayElement) {\n                overlayElement.triggerElement = this.button;\n            }\n        });\n\n        this.recentlyConnected = this.hasUpdated;\n        this.addEventListener('focus', this.handleFocus);\n    }\n\n    public override disconnectedCallback(): void {\n        this.close();\n        this.strategy?.releaseDescription();\n        super.disconnectedCallback();\n    }\n}\n\n/**\n * @element sp-picker\n *\n * @slot label - The placeholder content for the Picker\n * @slot description - The description content for the Picker\n * @slot tooltip - Tooltip to to be applied to the the Picker Button\n * @slot - menu items to be listed in the Picker\n * @fires change - Announces that the `value` of the element has changed\n * @fires sp-opened - Announces that the overlay has been opened\n * @fires sp-closed - Announces that the overlay has been closed\n */\nexport class Picker extends PickerBase {\n    public static override get styles(): CSSResultArray {\n        return [pickerStyles, chevronStyles];\n    }\n\n    protected override get containerStyles(): StyleInfo {\n        const styles = super.containerStyles;\n        if (!this.quiet) {\n            styles['min-width'] = `${this.offsetWidth}px`;\n        }\n        return styles;\n    }\n\n    protected override handleKeydown = (event: KeyboardEvent): void => {\n        const { key } = event;\n        const handledKeys = [\n            'ArrowUp',\n            'ArrowDown',\n            'ArrowLeft',\n            'ArrowRight',\n            'Enter',\n            ' ',\n            'Escape',\n        ].includes(key);\n        const openKeys = ['ArrowUp', 'ArrowDown', 'Enter', ' '].includes(key);\n        this.focused = true;\n        if ('Escape' === key) {\n            this.handleEscape(event);\n            return;\n        }\n        if (!handledKeys || this.readonly || this.pending) {\n            return;\n        }\n        if (openKeys) {\n            this.keyboardOpen();\n            event.preventDefault();\n            return;\n        }\n        event.preventDefault();\n        const nextItem = this.optionsMenu?.getNeighboringFocusableElement(\n            this.selectedItem,\n            key === 'ArrowLeft'\n        );\n        if (!this.value || nextItem !== this.selectedItem) {\n            // updates picker text but does not fire change event until action is completed\n            if (!!nextItem) this.setValueFromItem(nextItem as MenuItem);\n        }\n    };\n}\n"],
  "mappings": "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",
  "names": ["_a"]
}
