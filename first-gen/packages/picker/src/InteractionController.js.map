{
  "version": 3,
  "sources": ["InteractionController.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    ReactiveController,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { AbstractOverlay } from '@spectrum-web-components/overlay/src/AbstractOverlay';\nimport { Overlay } from '@spectrum-web-components/overlay/src/Overlay.js';\nimport { PickerBase } from './Picker.js';\n\nexport enum InteractionTypes {\n    'desktop',\n    'mobile',\n}\nexport const SAFARI_FOCUS_RING_CLASS = 'remove-focus-ring-safari-hack';\n\nexport class InteractionController implements ReactiveController {\n    abortController!: AbortController;\n\n    public preventNextToggle: 'no' | 'maybe' | 'yes' = 'no';\n    public pointerdownState = false;\n    public enterKeydownOn: EventTarget | null = null;\n\n    public container!: TemplateResult;\n\n    get activelyOpening(): boolean {\n        return false;\n    }\n\n    private _open = false;\n\n    public get open(): boolean {\n        return this._open;\n    }\n\n    /**\n     * Set `open`\n     */\n    public set open(open: boolean) {\n        if (this._open === open) return;\n        this._open = open;\n\n        if (this.overlay) {\n            this.host.open = open;\n            return;\n        }\n\n        // When there is no Overlay and `open` is moving to `true`, lazily import/create\n        // an Overlay and apply that state to it.\n        customElements\n            .whenDefined('sp-overlay')\n            .then(async (): Promise<void> => {\n                const { Overlay } = await import(\n                    '@spectrum-web-components/overlay/src/Overlay.js'\n                );\n                this.overlay = new Overlay();\n                this.host.open = true;\n                this.host.requestUpdate();\n            });\n        import('@spectrum-web-components/overlay/sp-overlay.js');\n    }\n\n    private _overlay!: AbstractOverlay;\n\n    public get overlay(): AbstractOverlay {\n        return this._overlay;\n    }\n\n    public set overlay(overlay: AbstractOverlay | undefined) {\n        if (!overlay) return;\n        if (this.overlay === overlay) return;\n        this._overlay = overlay;\n        this.initOverlay();\n    }\n\n    type!: InteractionTypes;\n\n    constructor(\n        public target: HTMLElement,\n        public host: PickerBase\n    ) {\n        this.target = target;\n        this.host = host;\n        this.host.addController(this);\n        this.init();\n    }\n\n    releaseDescription(): void {}\n\n    protected handleBeforetoggle(\n        event: Event & {\n            target: Overlay;\n            newState: 'open' | 'closed';\n        }\n    ): void {\n        if (event.composedPath()[0] !== event.target) {\n            return;\n        }\n        if (event.newState === 'closed') {\n            if (this.preventNextToggle === 'no') {\n                this.open = false;\n            } else if (!this.pointerdownState) {\n                // Prevent browser driven closure while opening the Picker\n                // and the expected event series has not completed.\n                this.overlay?.manuallyKeepOpen();\n            }\n        }\n        if (!this.open) {\n            this.host.optionsMenu.updateSelectedItemIndex();\n            this.host.optionsMenu.closeDescendentOverlays();\n        }\n    }\n\n    initOverlay(): void {\n        if (this.overlay) {\n            this.overlay.addEventListener('beforetoggle', (event: Event) => {\n                this.handleBeforetoggle(\n                    event as Event & {\n                        target: Overlay;\n                        newState: 'open' | 'closed';\n                    }\n                );\n            });\n            this.overlay.type =\n                this.host.isMobile.matches && !this.host.forcePopover\n                    ? 'modal'\n                    : 'auto';\n            this.overlay.triggerElement = this.host as HTMLElement;\n            this.overlay.placement =\n                this.host.isMobile.matches && !this.host.forcePopover\n                    ? undefined\n                    : this.host.placement;\n            // We should not be applying open is set programmatically via the picker's open.property.\n            // Focus should only be applied if a user action causes the menu to open. Otherwise,\n            // we could be pulling focus from a user when an picker with an open menu loads.\n            this.overlay.receivesFocus = 'false';\n            this.overlay.willPreventClose =\n                this.preventNextToggle !== 'no' && this.open;\n            this.overlay.addEventListener(\n                'slottable-request',\n                this.host.handleSlottableRequest\n            );\n        }\n    }\n\n    public handlePointerdown(_event: PointerEvent): void {}\n\n    public handleButtonFocus(event: FocusEvent): void {\n        // When focus comes from a pointer event, and the related target is the Menu,\n        // we don't want to reopen the Menu.\n        if (\n            this.preventNextToggle === 'maybe' &&\n            event.relatedTarget === this.host.optionsMenu\n        ) {\n            this.preventNextToggle = 'yes';\n        }\n        if (this.preventNextToggle === 'no') this.host.close();\n    }\n\n    public handleActivate(_event: Event): void {}\n\n    /* c8 ignore next 3 */\n    init(): void {}\n\n    abort(): void {\n        this.releaseDescription();\n        this.abortController?.abort();\n    }\n\n    hostConnected(): void {\n        this.init();\n        this.host.addEventListener('sp-opened', () => {\n            /**\n             * set shouldSupportDragAndSelect to false for mobile\n             * to prevent click event being captured behind the menu-tray\n             * we do this here because the menu gets reinitialized on overlay open\n             */\n            this.host.optionsMenu.shouldSupportDragAndSelect =\n                !this.host.isMobile.matches;\n        });\n        this.host.addEventListener('sp-closed', () => {\n            if (\n                !this.open &&\n                this.host.optionsMenu.matches(':focus-within') &&\n                !this.host.button.matches(':focus')\n            ) {\n                this.host.button.focus();\n            }\n        });\n    }\n\n    hostDisconnected(): void {\n        this.abortController?.abort();\n    }\n\n    public hostUpdated(): void {\n        if (\n            this.overlay &&\n            this.host.dependencyManager.loaded &&\n            this.host.open !== this.overlay.open\n        ) {\n            this.overlay.willPreventClose = this.preventNextToggle !== 'no';\n            this.overlay.open = this.host.open;\n        }\n    }\n}\n"],
  "mappings": "aAoBO,WAAK,kBAAAA,IACRA,IAAA,qBACAA,IAAA,mBAFQA,IAAA,sBAIL,aAAM,wBAA0B,gCAEhC,aAAM,qBAAoD,CA6D7D,YACWC,EACAC,EACT,CAFS,YAAAD,EACA,UAAAC,EA5DX,KAAO,kBAA4C,KACnD,KAAO,iBAAmB,GAC1B,KAAO,eAAqC,KAQ5C,KAAQ,MAAQ,GAoDZ,KAAK,OAASD,EACd,KAAK,KAAOC,EACZ,KAAK,KAAK,cAAc,IAAI,EAC5B,KAAK,KAAK,CACd,CA5DA,IAAI,iBAA2B,CAC3B,MAAO,EACX,CAIA,IAAW,MAAgB,CACvB,OAAO,KAAK,KAChB,CAKA,IAAW,KAAKC,EAAe,CAC3B,GAAI,KAAK,QAAUA,EAGnB,IAFA,KAAK,MAAQA,EAET,KAAK,QAAS,CACd,KAAK,KAAK,KAAOA,EACjB,MACJ,CAIA,eACK,YAAY,YAAY,EACxB,KAAK,SAA2B,CAC7B,KAAM,CAAE,QAAAC,CAAQ,EAAI,KAAM,QACtB,iDACJ,EACA,KAAK,QAAU,IAAIA,EACnB,KAAK,KAAK,KAAO,GACjB,KAAK,KAAK,cAAc,CAC5B,CAAC,EACL,OAAO,gDAAgD,EAC3D,CAIA,IAAW,SAA2B,CAClC,OAAO,KAAK,QAChB,CAEA,IAAW,QAAQC,EAAsC,CAChDA,GACD,KAAK,UAAYA,IACrB,KAAK,SAAWA,EAChB,KAAK,YAAY,EACrB,CAcA,oBAA2B,CAAC,CAElB,mBACNC,EAII,CAxGZ,IAAAC,EAyGYD,EAAM,aAAa,EAAE,CAAC,IAAMA,EAAM,SAGlCA,EAAM,WAAa,WACf,KAAK,oBAAsB,KAC3B,KAAK,KAAO,GACJ,KAAK,mBAGbC,EAAA,KAAK,UAAL,MAAAA,EAAc,oBAGjB,KAAK,OACN,KAAK,KAAK,YAAY,wBAAwB,EAC9C,KAAK,KAAK,YAAY,wBAAwB,GAEtD,CAEA,aAAoB,CACZ,KAAK,UACL,KAAK,QAAQ,iBAAiB,eAAiBD,GAAiB,CAC5D,KAAK,mBACDA,CAIJ,CACJ,CAAC,EACD,KAAK,QAAQ,KACT,KAAK,KAAK,SAAS,SAAW,CAAC,KAAK,KAAK,aACnC,QACA,OACV,KAAK,QAAQ,eAAiB,KAAK,KACnC,KAAK,QAAQ,UACT,KAAK,KAAK,SAAS,SAAW,CAAC,KAAK,KAAK,aACnC,OACA,KAAK,KAAK,UAIpB,KAAK,QAAQ,cAAgB,QAC7B,KAAK,QAAQ,iBACT,KAAK,oBAAsB,MAAQ,KAAK,KAC5C,KAAK,QAAQ,iBACT,oBACA,KAAK,KAAK,sBACd,EAER,CAEO,kBAAkBE,EAA4B,CAAC,CAE/C,kBAAkBF,EAAyB,CAI1C,KAAK,oBAAsB,SAC3BA,EAAM,gBAAkB,KAAK,KAAK,cAElC,KAAK,kBAAoB,OAEzB,KAAK,oBAAsB,MAAM,KAAK,KAAK,MAAM,CACzD,CAEO,eAAeE,EAAqB,CAAC,CAG5C,MAAa,CAAC,CAEd,OAAc,CA9KlB,IAAAD,EA+KQ,KAAK,mBAAmB,GACxBA,EAAA,KAAK,kBAAL,MAAAA,EAAsB,OAC1B,CAEA,eAAsB,CAClB,KAAK,KAAK,EACV,KAAK,KAAK,iBAAiB,YAAa,IAAM,CAM1C,KAAK,KAAK,YAAY,2BAClB,CAAC,KAAK,KAAK,SAAS,OAC5B,CAAC,EACD,KAAK,KAAK,iBAAiB,YAAa,IAAM,CAEtC,CAAC,KAAK,MACN,KAAK,KAAK,YAAY,QAAQ,eAAe,GAC7C,CAAC,KAAK,KAAK,OAAO,QAAQ,QAAQ,GAElC,KAAK,KAAK,OAAO,MAAM,CAE/B,CAAC,CACL,CAEA,kBAAyB,CAzM7B,IAAAA,GA0MQA,EAAA,KAAK,kBAAL,MAAAA,EAAsB,OAC1B,CAEO,aAAoB,CAEnB,KAAK,SACL,KAAK,KAAK,kBAAkB,QAC5B,KAAK,KAAK,OAAS,KAAK,QAAQ,OAEhC,KAAK,QAAQ,iBAAmB,KAAK,oBAAsB,KAC3D,KAAK,QAAQ,KAAO,KAAK,KAAK,KAEtC,CACJ",
  "names": ["InteractionTypes", "target", "host", "open", "Overlay", "overlay", "event", "_a", "_event"]
}
