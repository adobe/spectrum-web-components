{
  "version": 3,
  "sources": ["CheckboxMixin.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    html,\n    ReactiveElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { ifDefined } from '@spectrum-web-components/base/src/directives.js';\n\ntype Constructor<T = Record<string, unknown>> = {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    new (...args: any[]): T;\n    prototype: T;\n};\n\nexport interface CheckboxElement {\n    checked: boolean;\n    handleChange(): void;\n    inputElement: HTMLInputElement;\n    name?: string;\n    readonly?: boolean;\n}\n\nexport function CheckboxMixin<T extends Constructor<ReactiveElement>>(\n    constructor: T\n): T & Constructor<CheckboxElement> {\n    class MixedElement extends constructor {\n        @property({ type: Boolean, reflect: true })\n        public checked = false;\n\n        @property({ type: String, reflect: true })\n        public name: string | undefined;\n\n        @property({ type: Boolean, reflect: true })\n        public readonly = false;\n\n        @query('#input')\n        inputElement!: HTMLInputElement;\n\n        public handleChange(): void {\n            if (this.readonly) {\n                this.inputElement.checked = this.checked;\n                return;\n            }\n            this.checked = this.inputElement.checked;\n\n            const changeEvent = new CustomEvent('change', {\n                bubbles: true,\n                cancelable: true,\n                composed: true,\n            });\n            const applyDefault = this.dispatchEvent(changeEvent);\n\n            if (!applyDefault) {\n                this.checked = !this.inputElement.checked;\n                this.inputElement.checked = this.checked;\n            }\n        }\n\n        protected render(): TemplateResult {\n            return html`\n                <input\n                    id=\"input\"\n                    name=${ifDefined(this.name || undefined)}\n                    type=\"checkbox\"\n                    .checked=${this.checked}\n                    ?disabled=${this.readonly}\n                    @change=${this.handleChange}\n                />\n            `;\n        }\n    }\n    return MixedElement;\n}\n"],
  "mappings": "qNAYA,OACI,QAAAA,MAGG,gCACP,OACI,YAAAC,EACA,SAAAC,MACG,kDACP,OAAS,aAAAC,MAAiB,kDAgBnB,gBAAS,cACZC,EACgC,CAChC,MAAMC,UAAqBD,CAAY,CAAvC,kCAEI,KAAO,QAAU,GAMjB,KAAO,SAAW,GAKX,cAAqB,CACxB,GAAI,KAAK,SAAU,CACf,KAAK,aAAa,QAAU,KAAK,QACjC,MACJ,CACA,KAAK,QAAU,KAAK,aAAa,QAEjC,MAAME,EAAc,IAAI,YAAY,SAAU,CAC1C,QAAS,GACT,WAAY,GACZ,SAAU,EACd,CAAC,EACoB,KAAK,cAAcA,CAAW,IAG/C,KAAK,QAAU,CAAC,KAAK,aAAa,QAClC,KAAK,aAAa,QAAU,KAAK,QAEzC,CAEU,QAAyB,CAC/B,OAAON;AAAA;AAAA;AAAA,2BAGQG,EAAU,KAAK,MAAQ,MAAS,CAAC;AAAA;AAAA,+BAE7B,KAAK,OAAO;AAAA,gCACX,KAAK,QAAQ;AAAA,8BACf,KAAK,YAAY;AAAA;AAAA,aAGvC,CACJ,CA3CW,OAAAI,EAAA,CADNN,EAAS,CAAE,KAAM,QAAS,QAAS,EAAK,CAAC,GADxCI,EAEK,uBAGAE,EAAA,CADNN,EAAS,CAAE,KAAM,OAAQ,QAAS,EAAK,CAAC,GAJvCI,EAKK,oBAGAE,EAAA,CADNN,EAAS,CAAE,KAAM,QAAS,QAAS,EAAK,CAAC,GAPxCI,EAQK,wBAGPE,EAAA,CADCL,EAAM,QAAQ,GAVbG,EAWF,4BAmCGA,CACX",
  "names": ["html", "property", "query", "ifDefined", "constructor", "MixedElement", "changeEvent", "__decorateClass"]
}
