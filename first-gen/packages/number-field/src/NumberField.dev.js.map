{
  "version": 3,
  "sources": ["NumberField.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { NumberFormatter, NumberParser } from '@internationalized/number';\nimport {\n    CSSResultArray,\n    html,\n    nothing,\n    PropertyValues,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { streamingListener } from '@spectrum-web-components/base/src/streaming-listener.js';\nimport {\n    LanguageResolutionController,\n    languageResolverUpdatedSymbol,\n} from '@spectrum-web-components/reactive-controllers/src/LanguageResolution.js';\n\nimport chevronStyles from '@spectrum-web-components/icon/src/spectrum-icon-chevron.css.js';\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-chevron100.js';\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-chevron200.js';\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-chevron50.js';\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-chevron75.js';\nimport '@spectrum-web-components/infield-button/sp-infield-button.js';\nimport { TextfieldBase } from '@spectrum-web-components/textfield';\nimport styles from './number-field.css.js';\nimport { isAndroid, isIOS, isIPhone } from '@spectrum-web-components/shared';\n\nexport const FRAMES_PER_CHANGE = 5;\n// Debounce duration for inserting a `change` event after a batch of `wheel` originating `input` events.\nexport const CHANGE_DEBOUNCE_MS = 100;\nexport const indeterminatePlaceholder = '-';\nexport const remapMultiByteCharacters: Record<string, string> = {\n    '\uFF11': '1',\n    '\uFF12': '2',\n    '\uFF13': '3',\n    '\uFF14': '4',\n    '\uFF15': '5',\n    '\uFF16': '6',\n    '\uFF17': '7',\n    '\uFF18': '8',\n    '\uFF19': '9',\n    '\uFF10': '0',\n    '\u3001': ',',\n    '\uFF0C': ',',\n    '\u3002': '.',\n    '\uFF0E': '.',\n    '\uFF05': '%',\n    '\uFF0B': '+',\n    \u30FC: '-',\n    \u4E00: '1',\n    \u4E8C: '2',\n    \u4E09: '3',\n    \u56DB: '4',\n    \u4E94: '5',\n    \u516D: '6',\n    \u4E03: '7',\n    \u516B: '8',\n    \u4E5D: '9',\n    \u96F6: '0',\n};\nconst chevronIcon: Record<string, (dir: 'Down' | 'Up') => TemplateResult> = {\n    s: (dir) => html`\n        <sp-icon-chevron50\n            class=\"stepper-icon spectrum-UIIcon-Chevron${dir}50\"\n        ></sp-icon-chevron50>\n    `,\n    m: (dir) => html`\n        <sp-icon-chevron75\n            class=\"stepper-icon spectrum-UIIcon-Chevron${dir}75\"\n        ></sp-icon-chevron75>\n    `,\n    l: (dir) => html`\n        <sp-icon-chevron100\n            class=\"stepper-icon spectrum-UIIcon-Chevron${dir}100\"\n        ></sp-icon-chevron100>\n    `,\n    xl: (dir) => html`\n        <sp-icon-chevron200\n            class=\"stepper-icon spectrum-UIIcon-Chevron${dir}200\"\n        ></sp-icon-chevron200>\n    `,\n};\n\n/**\n * @element sp-number-field\n * @slot help-text - default or non-negative help text to associate to your form element\n * @slot negative-help-text - negative help text to associate to your form element when `invalid`\n */\nexport class NumberField extends TextfieldBase {\n    public static override get styles(): CSSResultArray {\n        return [...super.styles, styles, chevronStyles];\n    }\n\n    @query('.buttons')\n    private buttons!: HTMLDivElement;\n\n    @property({ type: Boolean, reflect: true })\n    public override focused = false;\n\n    _forcedUnit = '';\n\n    /**\n     * An `&lt;sp-number-field&gt;` element will process its numeric value with\n     * `new Intl.NumberFormat(this.resolvedLanguage, this.formatOptions).format(this.valueAsNumber)`\n     * in order to prepare it for visual delivery in the input. In order to customize this\n     * processing supply your own `Intl.NumberFormatOptions` object here.\n     *\n     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat\n     */\n    @property({ type: Object, attribute: 'format-options' })\n    public formatOptions: Intl.NumberFormatOptions = {};\n\n    /**\n     * Whether the stepper UI is hidden or not.\n     */\n    @property({ type: Boolean, reflect: true, attribute: 'hide-stepper' })\n    public hideStepper = false;\n\n    @property({ type: Boolean, reflect: true })\n    public indeterminate = false;\n\n    @property({ type: Boolean, reflect: true, attribute: 'keyboard-focused' })\n    public keyboardFocused = false;\n\n    @property({ type: Number })\n    public max?: number;\n\n    @property({ type: Number })\n    public min?: number;\n\n    /**\n     * The distance by which to alter the value of the element when taking a \"step\".\n     *\n     * When `this.formatOptions.style === 'percentage'` the default step will be\n     * set to 0.01 unless otherwise supplied to the element.\n     */\n    @property({ type: Number })\n    public step?: number;\n\n    public managedInput = false;\n\n    @property({ type: Number, reflect: true, attribute: 'step-modifier' })\n    public stepModifier = 10;\n\n    @property({ type: Number })\n    public override set value(rawValue: number) {\n        const value = this.validateInput(rawValue);\n        if (value === this.value) {\n            return;\n        }\n        this.lastCommitedValue = value;\n        const oldValue = this._value;\n        this._value = value;\n        this.requestUpdate('value', oldValue);\n    }\n\n    public override get value(): number {\n        return this._value;\n    }\n\n    private get inputValue(): string {\n        return this.indeterminate\n            ? this.formattedValue\n            : this.inputElement.value;\n    }\n\n    public override _value = NaN;\n    private _trackingValue = '';\n    private lastCommitedValue?: number;\n\n    private setValue(newValue: number = this.value): void {\n        // Capture previous value for accurate IME change detection\n        const previousValue = this.lastCommitedValue;\n\n        this.value = newValue;\n\n        if (\n            typeof previousValue === 'undefined' ||\n            previousValue === this.value\n        ) {\n            // Do not announce when the value is unchanged.\n            return;\n        }\n\n        this.lastCommitedValue = this.value;\n\n        this.dispatchEvent(\n            new Event('change', { bubbles: true, composed: true })\n        );\n    }\n\n    /**\n     * Retreive the value of the element parsed to a Number.\n     */\n    public get valueAsString(): string {\n        return this._value.toString();\n    }\n\n    public set valueAsString(value: string) {\n        this.value = this.numberParser.parse(value);\n    }\n\n    public get formattedValue(): string {\n        if (isNaN(this.value)) return '';\n        return (\n            this.numberFormatter.format(this.value) +\n            (this.focused ? '' : this._forcedUnit)\n        );\n    }\n\n    private decimalsChars = new Set(['.', ',']);\n    private valueBeforeFocus: string = '';\n    private isIntentDecimal: boolean = false;\n\n    private convertValueToNumber(inputValue: string): number {\n        // Normalize full-width characters to their ASCII equivalents\n        let normalizedValue = inputValue\n            .split('')\n            .map((char) => remapMultiByteCharacters[char] || char)\n            .join('');\n\n        const separators = this.valueBeforeFocus\n            .split('')\n            .filter((char) => this.decimalsChars.has(char));\n        const uniqueSeparators = new Set(separators);\n\n        if (\n            isIOS() &&\n            this.inputElement.inputMode === 'decimal' &&\n            normalizedValue !== this.valueBeforeFocus\n        ) {\n            const parts = this.numberFormatter.formatToParts(1000.1);\n\n            const replacementDecimal = parts.find(\n                (part) => part.type === 'decimal'\n            )!.value;\n\n            for (const separator of uniqueSeparators) {\n                const isDecimalSeparator = separator === replacementDecimal;\n                if (!isDecimalSeparator && !this.isIntentDecimal) {\n                    normalizedValue = normalizedValue.replace(\n                        new RegExp(separator, 'g'),\n                        ''\n                    );\n                }\n            }\n\n            let hasReplacedDecimal = false;\n            const valueChars = normalizedValue.split('');\n            for (let index = valueChars.length - 1; index >= 0; index--) {\n                const char = valueChars[index];\n                if (this.decimalsChars.has(char)) {\n                    if (!hasReplacedDecimal) {\n                        valueChars[index] = replacementDecimal;\n                        hasReplacedDecimal = true;\n                    } else valueChars[index] = '';\n                }\n            }\n            normalizedValue = valueChars.join('');\n        }\n        return this.numberParser.parse(normalizedValue);\n    }\n    private get _step(): number {\n        if (typeof this.step !== 'undefined') {\n            return this.step;\n        }\n        if (this.formatOptions?.style === 'percent') {\n            return 0.01;\n        }\n        return 1;\n    }\n\n    private nextChange!: number;\n    private changeCount = 0;\n    private findChange!: (event: PointerEvent) => void;\n    private change!: (event: PointerEvent) => void;\n    private safty!: number;\n    private languageResolver = new LanguageResolutionController(this);\n\n    private handlePointerdown(event: PointerEvent): void {\n        if (event.button !== 0) {\n            event.preventDefault();\n            return;\n        }\n        this.managedInput = true;\n        this.buttons.setPointerCapture(event.pointerId);\n        const stepUpRect = this.buttons.children[0].getBoundingClientRect();\n        const stepDownRect = this.buttons.children[1].getBoundingClientRect();\n        this.findChange = (event: PointerEvent) => {\n            if (\n                event.clientX >= stepUpRect.x &&\n                event.clientY >= stepUpRect.y &&\n                event.clientX <= stepUpRect.x + stepUpRect.width &&\n                event.clientY <= stepUpRect.y + stepUpRect.height\n            ) {\n                this.change = (event: PointerEvent) =>\n                    this.increment(event.shiftKey ? this.stepModifier : 1);\n            } else if (\n                event.clientX >= stepDownRect.x &&\n                event.clientY >= stepDownRect.y &&\n                event.clientX <= stepDownRect.x + stepDownRect.width &&\n                event.clientY <= stepDownRect.y + stepDownRect.height\n            ) {\n                this.change = (event: PointerEvent) =>\n                    this.decrement(event.shiftKey ? this.stepModifier : 1);\n            }\n        };\n        this.findChange(event);\n        this.startChange(event);\n    }\n\n    private startChange(event: PointerEvent): void {\n        this.changeCount = 0;\n        this.doChange(event);\n        this.safty = setTimeout(() => {\n            this.doNextChange(event);\n        }, 400) as unknown as number;\n    }\n\n    private doChange(event: PointerEvent): void {\n        this.change(event);\n    }\n\n    private handlePointermove(event: PointerEvent): void {\n        this.findChange(event);\n    }\n\n    private handlePointerup(event: PointerEvent): void {\n        this.buttons.releasePointerCapture(event.pointerId);\n        cancelAnimationFrame(this.nextChange);\n        clearTimeout(this.safty);\n        this.managedInput = false;\n        this.setValue();\n    }\n\n    private doNextChange(event: PointerEvent): number {\n        this.changeCount += 1;\n        if (this.changeCount % FRAMES_PER_CHANGE === 0) {\n            this.doChange(event);\n        }\n        return requestAnimationFrame(() => {\n            this.nextChange = this.doNextChange(event);\n        });\n    }\n\n    private stepBy(count: number): void {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        const min = typeof this.min !== 'undefined' ? this.min : 0;\n        let value = this.value;\n        value += count * this._step;\n        if (isNaN(this.value)) {\n            value = min;\n        }\n        value = this.valueWithLimits(value);\n\n        this.requestUpdate();\n        this._value = this.validateInput(value);\n        this.inputElement.value = this.numberFormatter.format(value);\n\n        const inputEvent = new Event('input', {\n            bubbles: true,\n            composed: true,\n        });\n        this.inputElement.readOnly = true;\n        this.inputElement.dispatchEvent(inputEvent);\n        this.indeterminate = false;\n        this.focus();\n        this.inputElement.readOnly = false;\n    }\n\n    private increment(factor = 1): void {\n        this.stepBy(1 * factor);\n    }\n\n    private decrement(factor = 1): void {\n        this.stepBy(-1 * factor);\n    }\n\n    private handleKeydown(event: KeyboardEvent): void {\n        if (this.isComposing) return;\n        switch (event.code) {\n            case 'ArrowUp':\n                event.preventDefault();\n                this.increment(event.shiftKey ? this.stepModifier : 1);\n                this.setValue();\n                break;\n            case 'ArrowDown':\n                event.preventDefault();\n                this.decrement(event.shiftKey ? this.stepModifier : 1);\n                this.setValue();\n                break;\n        }\n    }\n\n    private queuedChangeEvent!: number;\n\n    protected onScroll(event: WheelEvent): void {\n        event.preventDefault();\n        this.managedInput = true;\n        const direction = event.shiftKey\n            ? event.deltaX / Math.abs(event.deltaX)\n            : event.deltaY / Math.abs(event.deltaY);\n        if (direction !== 0 && !isNaN(direction)) {\n            this.stepBy(direction * (event.shiftKey ? this.stepModifier : 1));\n            clearTimeout(this.queuedChangeEvent);\n            this.queuedChangeEvent = setTimeout(() => {\n                this.setValue();\n            }, CHANGE_DEBOUNCE_MS) as unknown as number;\n        }\n        this.managedInput = false;\n    }\n\n    protected override onFocus(): void {\n        super.onFocus();\n        this._trackingValue = this.inputValue;\n        this.keyboardFocused = !this.readonly && true;\n        this.addEventListener('wheel', this.onScroll, { passive: false });\n        this.valueBeforeFocus = this.inputElement.value;\n    }\n\n    protected override onBlur(_event: FocusEvent): void {\n        super.onBlur(_event);\n        this.keyboardFocused = !this.readonly && false;\n        this.removeEventListener('wheel', this.onScroll);\n        this.isIntentDecimal = false;\n    }\n\n    private handleFocusin(): void {\n        this.focused = !this.readonly && true;\n        this.keyboardFocused = !this.readonly && true;\n    }\n\n    private handleFocusout(): void {\n        this.focused = !this.readonly && false;\n        this.keyboardFocused = !this.readonly && false;\n    }\n\n    private wasIndeterminate = false;\n    private indeterminateValue?: number;\n\n    protected override handleChange(): void {\n        const value = this.convertValueToNumber(this.inputValue);\n        if (this.wasIndeterminate) {\n            this.wasIndeterminate = false;\n            this.indeterminateValue = undefined;\n            if (isNaN(value)) {\n                this.indeterminate = true;\n                return;\n            }\n        }\n        this.setValue(value);\n        this.inputElement.value = this.formattedValue;\n    }\n\n    protected handleCompositionStart(): void {\n        this.isComposing = true;\n    }\n\n    protected handleCompositionEnd(): void {\n        this.isComposing = false;\n        requestAnimationFrame(() => {\n            this.inputElement.dispatchEvent(\n                new Event('input', {\n                    composed: true,\n                    bubbles: true,\n                })\n            );\n        });\n    }\n\n    private hasRecentlyReceivedPointerDown = false;\n\n    protected override handleInputElementPointerdown(): void {\n        this.hasRecentlyReceivedPointerDown = true;\n        this.updateComplete.then(() => {\n            requestAnimationFrame(() => {\n                this.hasRecentlyReceivedPointerDown = false;\n            });\n        });\n    }\n\n    protected override handleInput(event: InputEvent): void {\n        if (this.isComposing) {\n            // If user actually types a new character.\n            if (event.data) {\n                // Don't allow non-numeric characters even in composing mode.\n                const partialValue = this.convertValueToNumber(event.data);\n\n                if (Number.isNaN(partialValue)) {\n                    this.inputElement.value = this.indeterminate\n                        ? indeterminatePlaceholder\n                        : this._trackingValue;\n\n                    this.isComposing = false;\n                }\n            }\n\n            event.stopPropagation();\n            return;\n        }\n        if (this.indeterminate) {\n            this.wasIndeterminate = true;\n            this.indeterminateValue = this.value;\n            this.inputElement.value = this.inputElement.value.replace(\n                indeterminatePlaceholder,\n                ''\n            );\n        }\n        if (event.data && this.decimalsChars.has(event.data))\n            this.isIntentDecimal = true;\n\n        const { value: originalValue, selectionStart } = this.inputElement;\n        const value = originalValue\n            .split('')\n            .map((char) => remapMultiByteCharacters[char] || char)\n            .join('');\n\n        if (this.numberParser.isValidPartialNumber(value)) {\n            // Use starting value as this.value is the `input` value.\n            this.lastCommitedValue = this.lastCommitedValue ?? this.value;\n            const valueAsNumber = this.convertValueToNumber(value);\n            if (!value && this.indeterminateValue) {\n                this.indeterminate = true;\n                this._value = this.indeterminateValue;\n            } else {\n                this.indeterminate = false;\n                this._value = this.validateInput(valueAsNumber);\n            }\n            this._trackingValue = value;\n            this.inputElement.value = value;\n            this.inputElement.setSelectionRange(selectionStart, selectionStart);\n            return;\n        } else {\n            this.inputElement.value = this.indeterminate\n                ? indeterminatePlaceholder\n                : this._trackingValue;\n\n            // Don't emit input event when the character is invalid.\n            event.stopPropagation();\n        }\n        const currentLength = value.length;\n        const previousLength = this._trackingValue.length;\n        const nextSelectStart =\n            (selectionStart || currentLength) -\n            (currentLength - previousLength);\n        this.inputElement.setSelectionRange(nextSelectStart, nextSelectStart);\n    }\n\n    private valueWithLimits(nextValue: number): number {\n        let value = nextValue;\n        if (typeof this.min !== 'undefined') {\n            value = Math.max(this.min, value);\n        }\n        if (typeof this.max !== 'undefined') {\n            value = Math.min(this.max, value);\n        }\n        return value;\n    }\n\n    private validateInput(value: number): number {\n        value = this.valueWithLimits(value);\n        const signMultiplier = value < 0 ? -1 : 1; // 'signMultiplier' adjusts 'value' for 'validateInput' and reverts it before returning.\n        value *= signMultiplier;\n\n        // Step shouldn't validate when 0...\n        if (this.step) {\n            const min = typeof this.min !== 'undefined' ? this.min : 0;\n            const moduloStep = parseFloat(\n                this.valueFormatter.format((value - min) % this.step)\n            );\n            const fallsOnStep = moduloStep === 0;\n            if (!fallsOnStep) {\n                const overUnder = Math.round(moduloStep / this.step);\n                if (overUnder === 1) {\n                    value += this.step - moduloStep;\n                } else {\n                    value -= moduloStep;\n                }\n            }\n            if (typeof this.max !== 'undefined') {\n                while (value > this.max) {\n                    value -= this.step;\n                }\n            }\n            value = parseFloat(this.valueFormatter.format(value));\n        }\n        value *= signMultiplier;\n        return value;\n    }\n\n    protected override get displayValue(): string {\n        const indeterminateValue = this.focused ? '' : indeterminatePlaceholder;\n        return this.indeterminate ? indeterminateValue : this.formattedValue;\n    }\n\n    protected clearNumberFormatterCache(): void {\n        this._numberFormatter = undefined;\n        this._numberParser = undefined;\n    }\n\n    protected get numberFormatter(): NumberFormatter {\n        if (!this._numberFormatter || !this._numberFormatterFocused) {\n            const {\n                style,\n                unit,\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                unitDisplay,\n                ...formatOptionsNoUnit\n            } = this.formatOptions;\n            if (style !== 'unit') {\n                (formatOptionsNoUnit as Intl.NumberFormatOptions).style = style;\n            }\n            this._numberFormatterFocused = new NumberFormatter(\n                this.languageResolver.language,\n                formatOptionsNoUnit\n            );\n            try {\n                this._numberFormatter = new NumberFormatter(\n                    this.languageResolver.language,\n                    this.formatOptions\n                );\n                this._forcedUnit = '';\n                this._numberFormatter.format(1);\n            } catch (error) {\n                if (style === 'unit') {\n                    this._forcedUnit = unit as string;\n                }\n                this._numberFormatter = this._numberFormatterFocused;\n            }\n        }\n        return this.focused\n            ? this._numberFormatterFocused\n            : this._numberFormatter;\n    }\n\n    protected clearValueFormatterCache(): void {\n        this._valueFormatter = undefined;\n    }\n    protected get valueFormatter(): NumberFormatter {\n        if (!this._valueFormatter) {\n            const digitsAfterDecimal = this.step\n                ? this.step != Math.floor(this.step)\n                    ? this.step.toString().split('.')[1].length\n                    : 0\n                : 0;\n            this._valueFormatter = new NumberFormatter('en', {\n                useGrouping: false,\n                maximumFractionDigits: digitsAfterDecimal,\n            });\n        }\n\n        return this._valueFormatter;\n    }\n    private _numberFormatter?: NumberFormatter;\n    private _numberFormatterFocused?: NumberFormatter;\n    private _valueFormatter?: NumberFormatter;\n    protected get numberParser(): NumberParser {\n        if (!this._numberParser || !this._numberParserFocused) {\n            const {\n                style,\n                unit,\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                unitDisplay,\n                ...formatOptionsNoUnit\n            } = this.formatOptions;\n            if (style !== 'unit') {\n                (formatOptionsNoUnit as Intl.NumberFormatOptions).style = style;\n            }\n            this._numberParserFocused = new NumberParser(\n                this.languageResolver.language,\n                formatOptionsNoUnit\n            );\n            try {\n                this._numberParser = new NumberParser(\n                    this.languageResolver.language,\n                    this.formatOptions\n                );\n                this._forcedUnit = '';\n                this._numberParser.parse('0');\n            } catch (error) {\n                if (style === 'unit') {\n                    this._forcedUnit = unit as string;\n                }\n                this._numberParser = this._numberParserFocused;\n            }\n        }\n        return this.focused ? this._numberParserFocused : this._numberParser;\n    }\n\n    applyFocusElementLabel = (value?: string): void => {\n        this.appliedLabel = value;\n    };\n\n    private _numberParser?: NumberParser;\n    private _numberParserFocused?: NumberParser;\n\n    protected override renderField(): TemplateResult {\n        this.autocomplete = 'off';\n        return html`\n            ${super.renderField()}\n            ${this.hideStepper\n                ? nothing\n                : html`\n                      <span\n                          class=\"buttons\"\n                          @focusin=${this.handleFocusin}\n                          @focusout=${this.handleFocusout}\n                          ${streamingListener({\n                              start: ['pointerdown', this.handlePointerdown],\n                              streamInside: [\n                                  [\n                                      'pointermove',\n                                      'pointerenter',\n                                      'pointerleave',\n                                      'pointerover',\n                                      'pointerout',\n                                  ],\n                                  this.handlePointermove,\n                              ],\n                              end: [\n                                  [\n                                      'pointerup',\n                                      'pointercancel',\n                                      'pointerleave',\n                                  ],\n                                  this.handlePointerup,\n                              ],\n                          })}\n                      >\n                          <sp-infield-button\n                              inline=\"end\"\n                              block=\"start\"\n                              class=\"button step-up\"\n                              aria-hidden=\"true\"\n                              label=${'Increase ' + this.appliedLabel}\n                              size=${this.size}\n                              tabindex=\"-1\"\n                              ?focused=${this.focused}\n                              ?disabled=${this.disabled ||\n                              this.readonly ||\n                              (typeof this.max !== 'undefined' &&\n                                  this.value === this.max)}\n                              ?quiet=${this.quiet}\n                          >\n                              ${chevronIcon[this.size]('Up')}\n                          </sp-infield-button>\n                          <sp-infield-button\n                              inline=\"end\"\n                              block=\"end\"\n                              class=\"button step-down\"\n                              aria-hidden=\"true\"\n                              label=${'Decrease ' + this.appliedLabel}\n                              size=${this.size}\n                              tabindex=\"-1\"\n                              ?focused=${this.focused}\n                              ?disabled=${this.disabled ||\n                              this.readonly ||\n                              (typeof this.min !== 'undefined' &&\n                                  this.value === this.min)}\n                              ?quiet=${this.quiet}\n                          >\n                              ${chevronIcon[this.size]('Down')}\n                          </sp-infield-button>\n                      </span>\n                  `}\n        `;\n    }\n\n    protected override update(changes: PropertyValues): void {\n        if (changes.has('formatOptions') || changes.has('resolvedLanguage')) {\n            this.clearNumberFormatterCache();\n        }\n        if (\n            changes.has('value') ||\n            changes.has('max') ||\n            changes.has('min') ||\n            changes.has('step')\n        ) {\n            const value = this.numberParser.parse(\n                this.formattedValue.replace(this._forcedUnit, '')\n            );\n            this.value = value;\n            this.clearValueFormatterCache();\n        }\n        super.update(changes);\n    }\n\n    public override willUpdate(changes: PropertyValues): void {\n        this.multiline = false;\n        if (changes.has(languageResolverUpdatedSymbol)) {\n            this.clearNumberFormatterCache();\n        }\n    }\n\n    private isComposing = false;\n\n    protected override firstUpdated(changes: PropertyValues): void {\n        super.firstUpdated(changes);\n        this.addEventListener('keydown', this.handleKeydown);\n        this.addEventListener('compositionstart', this.handleCompositionStart);\n        this.addEventListener('compositionend', this.handleCompositionEnd);\n    }\n\n    protected override updated(changes: PropertyValues<this>): void {\n        if (!this.inputElement || !this.isConnected) {\n            // Prevent race conditions if inputElement is removed from DOM while a queued update is still running.\n            return;\n        }\n\n        if (changes.has('min') || changes.has('formatOptions')) {\n            const hasOnlyPositives =\n                typeof this.min !== 'undefined' && this.min >= 0;\n\n            const { maximumFractionDigits } =\n                this.numberFormatter.resolvedOptions();\n            const hasDecimals =\n                maximumFractionDigits && maximumFractionDigits > 0;\n\n            let inputMode = 'numeric';\n            /* c8 ignore next 5 */\n            // iPhone doesn't have a minus sign in either numeric or decimal.\n            if (isIPhone() && !hasOnlyPositives) inputMode = 'text';\n            else if (isIOS() && hasDecimals) inputMode = 'decimal';\n            // Android numeric has both a decimal point and minus key. Decimal does not have a minus key.\n            else if (isAndroid() && hasDecimals && hasOnlyPositives)\n                inputMode = 'decimal';\n\n            this.inputElement.inputMode = inputMode;\n        }\n        if (\n            changes.has('focused') &&\n            this.focused &&\n            !this.hasRecentlyReceivedPointerDown &&\n            !!this.formatOptions.unit\n        ) {\n            // Normalize keyboard focus entry between unit and non-unit bearing Number Fields\n            this.setSelectionRange(0, this.displayValue.length);\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;AAYA,SAAS,iBAAiB,oBAAoB;AAC9C;AAAA,EAEI;AAAA,EACA;AAAA,OAGG;AACP;AAAA,EACI;AAAA,EACA;AAAA,OACG;AACP,SAAS,yBAAyB;AAClC;AAAA,EACI;AAAA,EACA;AAAA,OACG;AAEP,OAAO,mBAAmB;AAC1B,OAAO;AACP,OAAO;AACP,OAAO;AACP,OAAO;AACP,OAAO;AACP,SAAS,qBAAqB;AAC9B,OAAO,YAAY;AACnB,SAAS,WAAW,OAAO,gBAAgB;AAEpC,aAAM,oBAAoB;AAE1B,aAAM,qBAAqB;AAC3B,aAAM,2BAA2B;AACjC,aAAM,2BAAmD;AAAA,EAC5D,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AACP;AACA,MAAM,cAAsE;AAAA,EACxE,GAAG,CAAC,QAAQ;AAAA;AAAA,yDAEyC,GAAG;AAAA;AAAA;AAAA,EAGxD,GAAG,CAAC,QAAQ;AAAA;AAAA,yDAEyC,GAAG;AAAA;AAAA;AAAA,EAGxD,GAAG,CAAC,QAAQ;AAAA;AAAA,yDAEyC,GAAG;AAAA;AAAA;AAAA,EAGxD,IAAI,CAAC,QAAQ;AAAA;AAAA,yDAEwC,GAAG;AAAA;AAAA;AAG5D;AAOO,aAAM,oBAAoB,cAAc;AAAA,EAAxC;AAAA;AASH,SAAgB,UAAU;AAE1B,uBAAc;AAWd,SAAO,gBAA0C,CAAC;AAMlD,SAAO,cAAc;AAGrB,SAAO,gBAAgB;AAGvB,SAAO,kBAAkB;AAiBzB,SAAO,eAAe;AAGtB,SAAO,eAAe;AAwBtB,SAAgB,SAAS;AACzB,SAAQ,iBAAiB;AA2CzB,SAAQ,gBAAgB,oBAAI,IAAI,CAAC,KAAK,GAAG,CAAC;AAC1C,SAAQ,mBAA2B;AACnC,SAAQ,kBAA2B;AA6DnC,SAAQ,cAAc;AAItB,SAAQ,mBAAmB,IAAI,6BAA6B,IAAI;AAkKhE,SAAQ,mBAAmB;AAiC3B,SAAQ,iCAAiC;AA2NzC,kCAAyB,CAAC,UAAyB;AAC/C,WAAK,eAAe;AAAA,IACxB;AAuGA,SAAQ,cAAc;AAAA;AAAA,EAnsBtB,WAA2B,SAAyB;AAChD,WAAO,CAAC,GAAG,MAAM,QAAQ,QAAQ,aAAa;AAAA,EAClD;AAAA,EAsDA,IAAoB,MAAM,UAAkB;AACxC,UAAM,QAAQ,KAAK,cAAc,QAAQ;AACzC,QAAI,UAAU,KAAK,OAAO;AACtB;AAAA,IACJ;AACA,SAAK,oBAAoB;AACzB,UAAM,WAAW,KAAK;AACtB,SAAK,SAAS;AACd,SAAK,cAAc,SAAS,QAAQ;AAAA,EACxC;AAAA,EAEA,IAAoB,QAAgB;AAChC,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAY,aAAqB;AAC7B,WAAO,KAAK,gBACN,KAAK,iBACL,KAAK,aAAa;AAAA,EAC5B;AAAA,EAMQ,SAAS,WAAmB,KAAK,OAAa;AAElD,UAAM,gBAAgB,KAAK;AAE3B,SAAK,QAAQ;AAEb,QACI,OAAO,kBAAkB,eACzB,kBAAkB,KAAK,OACzB;AAEE;AAAA,IACJ;AAEA,SAAK,oBAAoB,KAAK;AAE9B,SAAK;AAAA,MACD,IAAI,MAAM,UAAU,EAAE,SAAS,MAAM,UAAU,KAAK,CAAC;AAAA,IACzD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,gBAAwB;AAC/B,WAAO,KAAK,OAAO,SAAS;AAAA,EAChC;AAAA,EAEA,IAAW,cAAc,OAAe;AACpC,SAAK,QAAQ,KAAK,aAAa,MAAM,KAAK;AAAA,EAC9C;AAAA,EAEA,IAAW,iBAAyB;AAChC,QAAI,MAAM,KAAK,KAAK,EAAG,QAAO;AAC9B,WACI,KAAK,gBAAgB,OAAO,KAAK,KAAK,KACrC,KAAK,UAAU,KAAK,KAAK;AAAA,EAElC;AAAA,EAMQ,qBAAqB,YAA4B;AAErD,QAAI,kBAAkB,WACjB,MAAM,EAAE,EACR,IAAI,CAAC,SAAS,yBAAyB,IAAI,KAAK,IAAI,EACpD,KAAK,EAAE;AAEZ,UAAM,aAAa,KAAK,iBACnB,MAAM,EAAE,EACR,OAAO,CAAC,SAAS,KAAK,cAAc,IAAI,IAAI,CAAC;AAClD,UAAM,mBAAmB,IAAI,IAAI,UAAU;AAE3C,QACI,MAAM,KACN,KAAK,aAAa,cAAc,aAChC,oBAAoB,KAAK,kBAC3B;AACE,YAAM,QAAQ,KAAK,gBAAgB,cAAc,MAAM;AAEvD,YAAM,qBAAqB,MAAM;AAAA,QAC7B,CAAC,SAAS,KAAK,SAAS;AAAA,MAC5B,EAAG;AAEH,iBAAW,aAAa,kBAAkB;AACtC,cAAM,qBAAqB,cAAc;AACzC,YAAI,CAAC,sBAAsB,CAAC,KAAK,iBAAiB;AAC9C,4BAAkB,gBAAgB;AAAA,YAC9B,IAAI,OAAO,WAAW,GAAG;AAAA,YACzB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,qBAAqB;AACzB,YAAM,aAAa,gBAAgB,MAAM,EAAE;AAC3C,eAAS,QAAQ,WAAW,SAAS,GAAG,SAAS,GAAG,SAAS;AACzD,cAAM,OAAO,WAAW,KAAK;AAC7B,YAAI,KAAK,cAAc,IAAI,IAAI,GAAG;AAC9B,cAAI,CAAC,oBAAoB;AACrB,uBAAW,KAAK,IAAI;AACpB,iCAAqB;AAAA,UACzB,MAAO,YAAW,KAAK,IAAI;AAAA,QAC/B;AAAA,MACJ;AACA,wBAAkB,WAAW,KAAK,EAAE;AAAA,IACxC;AACA,WAAO,KAAK,aAAa,MAAM,eAAe;AAAA,EAClD;AAAA,EACA,IAAY,QAAgB;AAnRhC;AAoRQ,QAAI,OAAO,KAAK,SAAS,aAAa;AAClC,aAAO,KAAK;AAAA,IAChB;AACA,UAAI,UAAK,kBAAL,mBAAoB,WAAU,WAAW;AACzC,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EASQ,kBAAkB,OAA2B;AACjD,QAAI,MAAM,WAAW,GAAG;AACpB,YAAM,eAAe;AACrB;AAAA,IACJ;AACA,SAAK,eAAe;AACpB,SAAK,QAAQ,kBAAkB,MAAM,SAAS;AAC9C,UAAM,aAAa,KAAK,QAAQ,SAAS,CAAC,EAAE,sBAAsB;AAClE,UAAM,eAAe,KAAK,QAAQ,SAAS,CAAC,EAAE,sBAAsB;AACpE,SAAK,aAAa,CAACA,WAAwB;AACvC,UACIA,OAAM,WAAW,WAAW,KAC5BA,OAAM,WAAW,WAAW,KAC5BA,OAAM,WAAW,WAAW,IAAI,WAAW,SAC3CA,OAAM,WAAW,WAAW,IAAI,WAAW,QAC7C;AACE,aAAK,SAAS,CAACA,WACX,KAAK,UAAUA,OAAM,WAAW,KAAK,eAAe,CAAC;AAAA,MAC7D,WACIA,OAAM,WAAW,aAAa,KAC9BA,OAAM,WAAW,aAAa,KAC9BA,OAAM,WAAW,aAAa,IAAI,aAAa,SAC/CA,OAAM,WAAW,aAAa,IAAI,aAAa,QACjD;AACE,aAAK,SAAS,CAACA,WACX,KAAK,UAAUA,OAAM,WAAW,KAAK,eAAe,CAAC;AAAA,MAC7D;AAAA,IACJ;AACA,SAAK,WAAW,KAAK;AACrB,SAAK,YAAY,KAAK;AAAA,EAC1B;AAAA,EAEQ,YAAY,OAA2B;AAC3C,SAAK,cAAc;AACnB,SAAK,SAAS,KAAK;AACnB,SAAK,QAAQ,WAAW,MAAM;AAC1B,WAAK,aAAa,KAAK;AAAA,IAC3B,GAAG,GAAG;AAAA,EACV;AAAA,EAEQ,SAAS,OAA2B;AACxC,SAAK,OAAO,KAAK;AAAA,EACrB;AAAA,EAEQ,kBAAkB,OAA2B;AACjD,SAAK,WAAW,KAAK;AAAA,EACzB;AAAA,EAEQ,gBAAgB,OAA2B;AAC/C,SAAK,QAAQ,sBAAsB,MAAM,SAAS;AAClD,yBAAqB,KAAK,UAAU;AACpC,iBAAa,KAAK,KAAK;AACvB,SAAK,eAAe;AACpB,SAAK,SAAS;AAAA,EAClB;AAAA,EAEQ,aAAa,OAA6B;AAC9C,SAAK,eAAe;AACpB,QAAI,KAAK,cAAc,sBAAsB,GAAG;AAC5C,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,WAAO,sBAAsB,MAAM;AAC/B,WAAK,aAAa,KAAK,aAAa,KAAK;AAAA,IAC7C,CAAC;AAAA,EACL;AAAA,EAEQ,OAAO,OAAqB;AAChC,QAAI,KAAK,YAAY,KAAK,UAAU;AAChC;AAAA,IACJ;AACA,UAAM,MAAM,OAAO,KAAK,QAAQ,cAAc,KAAK,MAAM;AACzD,QAAI,QAAQ,KAAK;AACjB,aAAS,QAAQ,KAAK;AACtB,QAAI,MAAM,KAAK,KAAK,GAAG;AACnB,cAAQ;AAAA,IACZ;AACA,YAAQ,KAAK,gBAAgB,KAAK;AAElC,SAAK,cAAc;AACnB,SAAK,SAAS,KAAK,cAAc,KAAK;AACtC,SAAK,aAAa,QAAQ,KAAK,gBAAgB,OAAO,KAAK;AAE3D,UAAM,aAAa,IAAI,MAAM,SAAS;AAAA,MAClC,SAAS;AAAA,MACT,UAAU;AAAA,IACd,CAAC;AACD,SAAK,aAAa,WAAW;AAC7B,SAAK,aAAa,cAAc,UAAU;AAC1C,SAAK,gBAAgB;AACrB,SAAK,MAAM;AACX,SAAK,aAAa,WAAW;AAAA,EACjC;AAAA,EAEQ,UAAU,SAAS,GAAS;AAChC,SAAK,OAAO,IAAI,MAAM;AAAA,EAC1B;AAAA,EAEQ,UAAU,SAAS,GAAS;AAChC,SAAK,OAAO,KAAK,MAAM;AAAA,EAC3B;AAAA,EAEQ,cAAc,OAA4B;AAC9C,QAAI,KAAK,YAAa;AACtB,YAAQ,MAAM,MAAM;AAAA,MAChB,KAAK;AACD,cAAM,eAAe;AACrB,aAAK,UAAU,MAAM,WAAW,KAAK,eAAe,CAAC;AACrD,aAAK,SAAS;AACd;AAAA,MACJ,KAAK;AACD,cAAM,eAAe;AACrB,aAAK,UAAU,MAAM,WAAW,KAAK,eAAe,CAAC;AACrD,aAAK,SAAS;AACd;AAAA,IACR;AAAA,EACJ;AAAA,EAIU,SAAS,OAAyB;AACxC,UAAM,eAAe;AACrB,SAAK,eAAe;AACpB,UAAM,YAAY,MAAM,WAClB,MAAM,SAAS,KAAK,IAAI,MAAM,MAAM,IACpC,MAAM,SAAS,KAAK,IAAI,MAAM,MAAM;AAC1C,QAAI,cAAc,KAAK,CAAC,MAAM,SAAS,GAAG;AACtC,WAAK,OAAO,aAAa,MAAM,WAAW,KAAK,eAAe,EAAE;AAChE,mBAAa,KAAK,iBAAiB;AACnC,WAAK,oBAAoB,WAAW,MAAM;AACtC,aAAK,SAAS;AAAA,MAClB,GAAG,kBAAkB;AAAA,IACzB;AACA,SAAK,eAAe;AAAA,EACxB;AAAA,EAEmB,UAAgB;AAC/B,UAAM,QAAQ;AACd,SAAK,iBAAiB,KAAK;AAC3B,SAAK,kBAAkB,CAAC,KAAK,YAAY;AACzC,SAAK,iBAAiB,SAAS,KAAK,UAAU,EAAE,SAAS,MAAM,CAAC;AAChE,SAAK,mBAAmB,KAAK,aAAa;AAAA,EAC9C;AAAA,EAEmB,OAAO,QAA0B;AAChD,UAAM,OAAO,MAAM;AACnB,SAAK,kBAAkB,CAAC,KAAK,YAAY;AACzC,SAAK,oBAAoB,SAAS,KAAK,QAAQ;AAC/C,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EAEQ,gBAAsB;AAC1B,SAAK,UAAU,CAAC,KAAK,YAAY;AACjC,SAAK,kBAAkB,CAAC,KAAK,YAAY;AAAA,EAC7C;AAAA,EAEQ,iBAAuB;AAC3B,SAAK,UAAU,CAAC,KAAK,YAAY;AACjC,SAAK,kBAAkB,CAAC,KAAK,YAAY;AAAA,EAC7C;AAAA,EAKmB,eAAqB;AACpC,UAAM,QAAQ,KAAK,qBAAqB,KAAK,UAAU;AACvD,QAAI,KAAK,kBAAkB;AACvB,WAAK,mBAAmB;AACxB,WAAK,qBAAqB;AAC1B,UAAI,MAAM,KAAK,GAAG;AACd,aAAK,gBAAgB;AACrB;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,SAAS,KAAK;AACnB,SAAK,aAAa,QAAQ,KAAK;AAAA,EACnC;AAAA,EAEU,yBAA+B;AACrC,SAAK,cAAc;AAAA,EACvB;AAAA,EAEU,uBAA6B;AACnC,SAAK,cAAc;AACnB,0BAAsB,MAAM;AACxB,WAAK,aAAa;AAAA,QACd,IAAI,MAAM,SAAS;AAAA,UACf,UAAU;AAAA,UACV,SAAS;AAAA,QACb,CAAC;AAAA,MACL;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAImB,gCAAsC;AACrD,SAAK,iCAAiC;AACtC,SAAK,eAAe,KAAK,MAAM;AAC3B,4BAAsB,MAAM;AACxB,aAAK,iCAAiC;AAAA,MAC1C,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA,EAEmB,YAAY,OAAyB;AAhf5D;AAifQ,QAAI,KAAK,aAAa;AAElB,UAAI,MAAM,MAAM;AAEZ,cAAM,eAAe,KAAK,qBAAqB,MAAM,IAAI;AAEzD,YAAI,OAAO,MAAM,YAAY,GAAG;AAC5B,eAAK,aAAa,QAAQ,KAAK,gBACzB,2BACA,KAAK;AAEX,eAAK,cAAc;AAAA,QACvB;AAAA,MACJ;AAEA,YAAM,gBAAgB;AACtB;AAAA,IACJ;AACA,QAAI,KAAK,eAAe;AACpB,WAAK,mBAAmB;AACxB,WAAK,qBAAqB,KAAK;AAC/B,WAAK,aAAa,QAAQ,KAAK,aAAa,MAAM;AAAA,QAC9C;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,MAAM,QAAQ,KAAK,cAAc,IAAI,MAAM,IAAI;AAC/C,WAAK,kBAAkB;AAE3B,UAAM,EAAE,OAAO,eAAe,eAAe,IAAI,KAAK;AACtD,UAAM,QAAQ,cACT,MAAM,EAAE,EACR,IAAI,CAAC,SAAS,yBAAyB,IAAI,KAAK,IAAI,EACpD,KAAK,EAAE;AAEZ,QAAI,KAAK,aAAa,qBAAqB,KAAK,GAAG;AAE/C,WAAK,qBAAoB,UAAK,sBAAL,YAA0B,KAAK;AACxD,YAAM,gBAAgB,KAAK,qBAAqB,KAAK;AACrD,UAAI,CAAC,SAAS,KAAK,oBAAoB;AACnC,aAAK,gBAAgB;AACrB,aAAK,SAAS,KAAK;AAAA,MACvB,OAAO;AACH,aAAK,gBAAgB;AACrB,aAAK,SAAS,KAAK,cAAc,aAAa;AAAA,MAClD;AACA,WAAK,iBAAiB;AACtB,WAAK,aAAa,QAAQ;AAC1B,WAAK,aAAa,kBAAkB,gBAAgB,cAAc;AAClE;AAAA,IACJ,OAAO;AACH,WAAK,aAAa,QAAQ,KAAK,gBACzB,2BACA,KAAK;AAGX,YAAM,gBAAgB;AAAA,IAC1B;AACA,UAAM,gBAAgB,MAAM;AAC5B,UAAM,iBAAiB,KAAK,eAAe;AAC3C,UAAM,mBACD,kBAAkB,kBAClB,gBAAgB;AACrB,SAAK,aAAa,kBAAkB,iBAAiB,eAAe;AAAA,EACxE;AAAA,EAEQ,gBAAgB,WAA2B;AAC/C,QAAI,QAAQ;AACZ,QAAI,OAAO,KAAK,QAAQ,aAAa;AACjC,cAAQ,KAAK,IAAI,KAAK,KAAK,KAAK;AAAA,IACpC;AACA,QAAI,OAAO,KAAK,QAAQ,aAAa;AACjC,cAAQ,KAAK,IAAI,KAAK,KAAK,KAAK;AAAA,IACpC;AACA,WAAO;AAAA,EACX;AAAA,EAEQ,cAAc,OAAuB;AACzC,YAAQ,KAAK,gBAAgB,KAAK;AAClC,UAAM,iBAAiB,QAAQ,IAAI,KAAK;AACxC,aAAS;AAGT,QAAI,KAAK,MAAM;AACX,YAAM,MAAM,OAAO,KAAK,QAAQ,cAAc,KAAK,MAAM;AACzD,YAAM,aAAa;AAAA,QACf,KAAK,eAAe,QAAQ,QAAQ,OAAO,KAAK,IAAI;AAAA,MACxD;AACA,YAAM,cAAc,eAAe;AACnC,UAAI,CAAC,aAAa;AACd,cAAM,YAAY,KAAK,MAAM,aAAa,KAAK,IAAI;AACnD,YAAI,cAAc,GAAG;AACjB,mBAAS,KAAK,OAAO;AAAA,QACzB,OAAO;AACH,mBAAS;AAAA,QACb;AAAA,MACJ;AACA,UAAI,OAAO,KAAK,QAAQ,aAAa;AACjC,eAAO,QAAQ,KAAK,KAAK;AACrB,mBAAS,KAAK;AAAA,QAClB;AAAA,MACJ;AACA,cAAQ,WAAW,KAAK,eAAe,OAAO,KAAK,CAAC;AAAA,IACxD;AACA,aAAS;AACT,WAAO;AAAA,EACX;AAAA,EAEA,IAAuB,eAAuB;AAC1C,UAAM,qBAAqB,KAAK,UAAU,KAAK;AAC/C,WAAO,KAAK,gBAAgB,qBAAqB,KAAK;AAAA,EAC1D;AAAA,EAEU,4BAAkC;AACxC,SAAK,mBAAmB;AACxB,SAAK,gBAAgB;AAAA,EACzB;AAAA,EAEA,IAAc,kBAAmC;AAC7C,QAAI,CAAC,KAAK,oBAAoB,CAAC,KAAK,yBAAyB;AACzD,YAAM;AAAA,QACF;AAAA,QACA;AAAA;AAAA,QAEA;AAAA,QACA,GAAG;AAAA,MACP,IAAI,KAAK;AACT,UAAI,UAAU,QAAQ;AAClB,QAAC,oBAAiD,QAAQ;AAAA,MAC9D;AACA,WAAK,0BAA0B,IAAI;AAAA,QAC/B,KAAK,iBAAiB;AAAA,QACtB;AAAA,MACJ;AACA,UAAI;AACA,aAAK,mBAAmB,IAAI;AAAA,UACxB,KAAK,iBAAiB;AAAA,UACtB,KAAK;AAAA,QACT;AACA,aAAK,cAAc;AACnB,aAAK,iBAAiB,OAAO,CAAC;AAAA,MAClC,SAAS,OAAO;AACZ,YAAI,UAAU,QAAQ;AAClB,eAAK,cAAc;AAAA,QACvB;AACA,aAAK,mBAAmB,KAAK;AAAA,MACjC;AAAA,IACJ;AACA,WAAO,KAAK,UACN,KAAK,0BACL,KAAK;AAAA,EACf;AAAA,EAEU,2BAAiC;AACvC,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EACA,IAAc,iBAAkC;AAC5C,QAAI,CAAC,KAAK,iBAAiB;AACvB,YAAM,qBAAqB,KAAK,OAC1B,KAAK,QAAQ,KAAK,MAAM,KAAK,IAAI,IAC7B,KAAK,KAAK,SAAS,EAAE,MAAM,GAAG,EAAE,CAAC,EAAE,SACnC,IACJ;AACN,WAAK,kBAAkB,IAAI,gBAAgB,MAAM;AAAA,QAC7C,aAAa;AAAA,QACb,uBAAuB;AAAA,MAC3B,CAAC;AAAA,IACL;AAEA,WAAO,KAAK;AAAA,EAChB;AAAA,EAIA,IAAc,eAA6B;AACvC,QAAI,CAAC,KAAK,iBAAiB,CAAC,KAAK,sBAAsB;AACnD,YAAM;AAAA,QACF;AAAA,QACA;AAAA;AAAA,QAEA;AAAA,QACA,GAAG;AAAA,MACP,IAAI,KAAK;AACT,UAAI,UAAU,QAAQ;AAClB,QAAC,oBAAiD,QAAQ;AAAA,MAC9D;AACA,WAAK,uBAAuB,IAAI;AAAA,QAC5B,KAAK,iBAAiB;AAAA,QACtB;AAAA,MACJ;AACA,UAAI;AACA,aAAK,gBAAgB,IAAI;AAAA,UACrB,KAAK,iBAAiB;AAAA,UACtB,KAAK;AAAA,QACT;AACA,aAAK,cAAc;AACnB,aAAK,cAAc,MAAM,GAAG;AAAA,MAChC,SAAS,OAAO;AACZ,YAAI,UAAU,QAAQ;AAClB,eAAK,cAAc;AAAA,QACvB;AACA,aAAK,gBAAgB,KAAK;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO,KAAK,UAAU,KAAK,uBAAuB,KAAK;AAAA,EAC3D;AAAA,EASmB,cAA8B;AAC7C,SAAK,eAAe;AACpB,WAAO;AAAA,cACD,MAAM,YAAY,CAAC;AAAA,cACnB,KAAK,cACD,UACA;AAAA;AAAA;AAAA,qCAGmB,KAAK,aAAa;AAAA,sCACjB,KAAK,cAAc;AAAA,4BAC7B,kBAAkB;AAAA,MAChB,OAAO,CAAC,eAAe,KAAK,iBAAiB;AAAA,MAC7C,cAAc;AAAA,QACV;AAAA,UACI;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AAAA,QACA,KAAK;AAAA,MACT;AAAA,MACA,KAAK;AAAA,QACD;AAAA,UACI;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AAAA,QACA,KAAK;AAAA,MACT;AAAA,IACJ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAOU,cAAc,KAAK,YAAY;AAAA,qCAChC,KAAK,IAAI;AAAA;AAAA,yCAEL,KAAK,OAAO;AAAA,0CACX,KAAK,YACjB,KAAK,YACJ,OAAO,KAAK,QAAQ,eACjB,KAAK,UAAU,KAAK,GAAI;AAAA,uCACnB,KAAK,KAAK;AAAA;AAAA,gCAEjB,YAAY,KAAK,IAAI,EAAE,IAAI,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAOtB,cAAc,KAAK,YAAY;AAAA,qCAChC,KAAK,IAAI;AAAA;AAAA,yCAEL,KAAK,OAAO;AAAA,0CACX,KAAK,YACjB,KAAK,YACJ,OAAO,KAAK,QAAQ,eACjB,KAAK,UAAU,KAAK,GAAI;AAAA,uCACnB,KAAK,KAAK;AAAA;AAAA,gCAEjB,YAAY,KAAK,IAAI,EAAE,MAAM,CAAC;AAAA;AAAA;AAAA,mBAG3C;AAAA;AAAA,EAEf;AAAA,EAEmB,OAAO,SAA+B;AACrD,QAAI,QAAQ,IAAI,eAAe,KAAK,QAAQ,IAAI,kBAAkB,GAAG;AACjE,WAAK,0BAA0B;AAAA,IACnC;AACA,QACI,QAAQ,IAAI,OAAO,KACnB,QAAQ,IAAI,KAAK,KACjB,QAAQ,IAAI,KAAK,KACjB,QAAQ,IAAI,MAAM,GACpB;AACE,YAAM,QAAQ,KAAK,aAAa;AAAA,QAC5B,KAAK,eAAe,QAAQ,KAAK,aAAa,EAAE;AAAA,MACpD;AACA,WAAK,QAAQ;AACb,WAAK,yBAAyB;AAAA,IAClC;AACA,UAAM,OAAO,OAAO;AAAA,EACxB;AAAA,EAEgB,WAAW,SAA+B;AACtD,SAAK,YAAY;AACjB,QAAI,QAAQ,IAAI,6BAA6B,GAAG;AAC5C,WAAK,0BAA0B;AAAA,IACnC;AAAA,EACJ;AAAA,EAImB,aAAa,SAA+B;AAC3D,UAAM,aAAa,OAAO;AAC1B,SAAK,iBAAiB,WAAW,KAAK,aAAa;AACnD,SAAK,iBAAiB,oBAAoB,KAAK,sBAAsB;AACrE,SAAK,iBAAiB,kBAAkB,KAAK,oBAAoB;AAAA,EACrE;AAAA,EAEmB,QAAQ,SAAqC;AAC5D,QAAI,CAAC,KAAK,gBAAgB,CAAC,KAAK,aAAa;AAEzC;AAAA,IACJ;AAEA,QAAI,QAAQ,IAAI,KAAK,KAAK,QAAQ,IAAI,eAAe,GAAG;AACpD,YAAM,mBACF,OAAO,KAAK,QAAQ,eAAe,KAAK,OAAO;AAEnD,YAAM,EAAE,sBAAsB,IAC1B,KAAK,gBAAgB,gBAAgB;AACzC,YAAM,cACF,yBAAyB,wBAAwB;AAErD,UAAI,YAAY;AAGhB,UAAI,SAAS,KAAK,CAAC,iBAAkB,aAAY;AAAA,eACxC,MAAM,KAAK,YAAa,aAAY;AAAA,eAEpC,UAAU,KAAK,eAAe;AACnC,oBAAY;AAEhB,WAAK,aAAa,YAAY;AAAA,IAClC;AACA,QACI,QAAQ,IAAI,SAAS,KACrB,KAAK,WACL,CAAC,KAAK,kCACN,CAAC,CAAC,KAAK,cAAc,MACvB;AAEE,WAAK,kBAAkB,GAAG,KAAK,aAAa,MAAM;AAAA,IACtD;AAAA,EACJ;AACJ;AA3uBY;AAAA,EADP,MAAM,UAAU;AAAA,GALR,YAMD;AAGQ;AAAA,EADf,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GARjC,YASO;AAaT;AAAA,EADN,SAAS,EAAE,MAAM,QAAQ,WAAW,iBAAiB,CAAC;AAAA,GArB9C,YAsBF;AAMA;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,MAAM,WAAW,eAAe,CAAC;AAAA,GA3B5D,YA4BF;AAGA;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GA9BjC,YA+BF;AAGA;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,MAAM,WAAW,mBAAmB,CAAC;AAAA,GAjChE,YAkCF;AAGA;AAAA,EADN,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GApCjB,YAqCF;AAGA;AAAA,EADN,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GAvCjB,YAwCF;AASA;AAAA,EADN,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GAhDjB,YAiDF;AAKA;AAAA,EADN,SAAS,EAAE,MAAM,QAAQ,SAAS,MAAM,WAAW,gBAAgB,CAAC;AAAA,GArD5D,YAsDF;AAGa;AAAA,EADnB,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GAxDjB,YAyDW;",
  "names": ["event"]
}
