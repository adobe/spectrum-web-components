{
  "version": 3,
  "sources": ["number-field.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { html } from '@spectrum-web-components/base';\nimport {\n    aTimeout,\n    elementUpdated,\n    expect,\n    nextFrame,\n    oneEvent,\n    waitUntil,\n} from '@open-wc/testing';\nimport { shouldPolyfill } from '@formatjs/intl-numberformat/should-polyfill.js';\n\nimport {\n    currency,\n    decimals,\n    Default,\n    germanDecimals,\n    indeterminate,\n    percents,\n    pixels,\n    units,\n} from '../stories/number-field.stories.js';\nimport '@spectrum-web-components/number-field/sp-number-field.js';\nimport {\n    CHANGE_DEBOUNCE_MS,\n    FRAMES_PER_CHANGE,\n    indeterminatePlaceholder,\n    NumberField,\n} from '@spectrum-web-components/number-field';\nimport {\n    a11ySnapshot,\n    findAccessibilityNode,\n    sendKeys,\n    setUserAgent,\n} from '@web/test-runner-commands';\nimport { spy } from 'sinon';\nimport { clickBySelector, getElFrom } from './helpers.js';\nimport { createLanguageContext } from '../../../tools/reactive-controllers/test/helpers.js';\nimport { sendMouse } from '../../../test/plugins/browser.js';\nimport {\n    fixture,\n    sendMouseTo,\n    testForLitDevWarnings,\n} from '../../../test/testing-helpers.js';\n\ndescribe('NumberField', () => {\n    before(async () => {\n        const shouldPolyfillEn = shouldPolyfill('en');\n        const shouldPolyfillFr = shouldPolyfill('fr');\n        if (shouldPolyfillEn || shouldPolyfillFr) {\n            await import('@formatjs/intl-numberformat/polyfill-force.js');\n        }\n        if (shouldPolyfillEn) {\n            await import('@formatjs/intl-numberformat/locale-data/en.js');\n        }\n        if (shouldPolyfillFr) {\n            await import('@formatjs/intl-numberformat/locale-data/fr.js');\n        }\n    });\n    testForLitDevWarnings(async () => await getElFrom(Default({})));\n    it('loads default number-field accessibly', async () => {\n        const el = await getElFrom(Default({}));\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    describe('receives input', () => {\n        it('without language context', async () => {\n            const el = await getElFrom(Default({ value: 1337 }));\n\n            el.size = 's';\n            expect(el.formattedValue).to.equal('1,337');\n            expect(el.valueAsString).to.equal('1337');\n            expect(el.value).to.equal(1337);\n            expect(el.focusElement.value).to.equal('1,337');\n            el.focus();\n            await sendKeys({ type: '7331' });\n            await elementUpdated(el);\n            await sendKeys({ press: 'Enter' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('13,377,331');\n            expect(el.valueAsString).to.equal('13377331');\n            expect(el.value).to.equal(13377331);\n            expect(el.focusElement.value).to.equal('13,377,331');\n        });\n        it('with language context', async () => {\n            const [languageContext] = createLanguageContext('fr');\n            const el = await getElFrom(html`\n                <div @sp-language-context=${languageContext}>\n                    ${Default({ value: 1337 })}\n                </div>\n            `);\n\n            el.size = 'l';\n            expect(el.formattedValue).to.equal('1\u202F337');\n            expect(el.valueAsString).to.equal('1337');\n            expect(el.value).to.equal(1337);\n            expect(el.focusElement.value).to.equal('1\u202F337');\n            el.focus();\n            await sendKeys({ type: '7331' });\n            await elementUpdated(el);\n            await sendKeys({ press: 'Enter' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('13\u202F377\u202F331');\n            expect(el.valueAsString).to.equal('13377331');\n            expect(el.value).to.equal(13377331);\n            expect(el.focusElement.value).to.equal('13\u202F377\u202F331');\n        });\n    });\n    xit('correctly interprets decimal point on iPhone', async () => {\n        // setUserAgent is not currently supported by Playwright\n        await setUserAgent(\n            'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1'\n        );\n        const el = await getElFrom(decimals({ value: 1234 }));\n        expect(el.formattedValue).to.equal('1,234');\n\n        el.focus();\n        await sendKeys({ press: 'Backspace' });\n        el.blur();\n        expect(el.formattedValue).to.equal('123');\n\n        el.focus();\n        await sendKeys({ type: '45' });\n        el.blur();\n        expect(el.formattedValue).to.equal('12,345');\n\n        el.focus();\n        await sendKeys({ type: ',6' });\n        el.blur();\n        expect(el.formattedValue).to.equal('12,345.6');\n\n        el.focus();\n        await sendKeys({ type: ',7' });\n        el.blur();\n        expect(el.formattedValue).to.equal('123,456.7');\n\n        el.focus();\n        await sendKeys({ press: 'Backspace' });\n        await sendKeys({ press: 'Backspace' });\n        el.blur();\n        expect(el.formattedValue).to.equal('123,456');\n    });\n    describe('Step', () => {\n        it('can be 0', async () => {\n            const el = await getElFrom(\n                Default({\n                    step: 0,\n                    min: 0,\n                    max: 10,\n                    value: 5,\n                })\n            );\n\n            el.size = 'xl';\n            expect(el.value).to.equal(5);\n            expect(el.formattedValue).to.equal('5');\n            expect(el.valueAsString).to.equal('5');\n            expect(el.focusElement.value).to.equal('5');\n        });\n        it('respects other locales', async () => {\n            const el = await getElFrom(\n                germanDecimals({\n                    step: 0.01,\n                })\n            );\n            el.value = 2.42;\n            await elementUpdated(el);\n            el.size = 'xl';\n            expect(el.value).to.equal(2.42);\n            expect(el.formattedValue).to.equal('+2,42');\n            expect(el.focusElement.value).to.equal('+2,42');\n\n            await clickBySelector(el, '.step-up');\n\n            expect(el.value).to.equal(2.43);\n            expect(el.formattedValue).to.equal('+2,43');\n            expect(el.focusElement.value).to.equal('+2,43');\n        });\n        it('supports both positive and negative decimal values', async () => {\n            const el = await getElFrom(\n                Default({\n                    step: 0.001,\n                    min: -10,\n                    max: 10,\n                    value: -2.4,\n                })\n            );\n\n            el.size = 'xl';\n            expect(el.value).to.equal(-2.4);\n            expect(el.valueAsString).to.equal('-2.4');\n            expect(el.focusElement.value).to.equal('-2.4');\n        });\n        it('correctly handles max values greater than 1000 with step=1', async () => {\n            const el = await getElFrom(\n                Default({\n                    step: 1,\n                    min: 0,\n                    max: 200000,\n                    value: 999,\n                })\n            );\n\n            await clickBySelector(el, '.step-up');\n\n            expect(el.value).to.equal(1000);\n            expect(el.valueAsString).to.equal('1000');\n            expect(el.formattedValue).to.equal('1,000');\n            expect(el.focusElement.value).to.equal('1,000');\n\n            el.value = 15000;\n            await elementUpdated(el);\n\n            expect(el.value).to.equal(15000);\n            expect(el.valueAsString).to.equal('15000');\n            expect(el.formattedValue).to.equal('15,000');\n            expect(el.focusElement.value).to.equal('15,000');\n        });\n    });\n    describe('Increments', () => {\n        let el: NumberField;\n\n        beforeEach(async () => {\n            el = await getElFrom(Default({}));\n            expect(el.value).to.be.NaN;\n            expect(el.formattedValue).to.equal('');\n            expect(el.valueAsString).to.equal('NaN');\n            expect(el.focusElement.value).to.equal('');\n        });\n        it('via pointer, only \"left\" button', async () => {\n            await clickBySelector(el, '.step-up', { button: 'middle' });\n            expect(el.formattedValue).to.equal('');\n            expect(el.valueAsString).to.equal('NaN');\n            expect(el.value).to.be.NaN;\n            expect(el.focusElement.value).to.equal('');\n        });\n\n        it('via pointer', async () => {\n            await clickBySelector(el, '.step-up');\n            expect(el.formattedValue).to.equal('0');\n            expect(el.valueAsString).to.equal('0');\n            expect(el.value).to.equal(0);\n            expect(el.focusElement.value).to.equal('0');\n            await clickBySelector(el, '.step-up');\n            expect(el.formattedValue).to.equal('1');\n            expect(el.valueAsString).to.equal('1');\n            expect(el.value).to.equal(1);\n            expect(el.focusElement.value).to.equal('1');\n        });\n        it('via arrow up', async () => {\n            el.focus();\n            await elementUpdated(el);\n            await sendKeys({ press: 'ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('0');\n            expect(el.valueAsString).to.equal('0');\n            expect(el.value).to.equal(0);\n            expect(el.focusElement.value).to.equal('0');\n            await sendKeys({ press: 'ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('1');\n            expect(el.valueAsString).to.equal('1');\n            expect(el.value).to.equal(1);\n            expect(el.focusElement.value).to.equal('1');\n        });\n        it('via arrow up (shift modified)', async () => {\n            el.focus();\n            await elementUpdated(el);\n            await sendKeys({ press: 'ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('0');\n            expect(el.valueAsString).to.equal('0');\n            expect(el.value).to.equal(0);\n            expect(el.focusElement.value).to.equal('0');\n            await sendKeys({ press: 'Shift+ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('10');\n            expect(el.valueAsString).to.equal('10');\n            expect(el.value).to.equal(10);\n            expect(el.focusElement.value).to.equal('10');\n        });\n        it('via arrow up (custom shift modified value)', async () => {\n            el.focus();\n            (el as NumberField).stepModifier = 5;\n            (el as NumberField).step = 3;\n            await elementUpdated(el);\n            await sendKeys({ press: 'ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('0');\n            expect(el.valueAsString).to.equal('0');\n            expect(el.value).to.equal(0);\n            expect(el.focusElement.value).to.equal('0');\n            await sendKeys({ press: 'Shift+ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('15');\n            expect(el.valueAsString).to.equal('15');\n            expect(el.value).to.equal(15);\n            expect(el.focusElement.value).to.equal('15');\n        });\n        it('via scroll', async () => {\n            el.focus();\n            await elementUpdated(el);\n            expect(el.focused).to.be.true;\n            el.dispatchEvent(new WheelEvent('wheel', { deltaY: 1 }));\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('0');\n            expect(el.valueAsString).to.equal('0');\n            expect(el.value).to.equal(0);\n            expect(el.focusElement.value).to.equal('0');\n            el.dispatchEvent(new WheelEvent('wheel', { deltaY: 100 }));\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('1');\n            expect(el.valueAsString).to.equal('1');\n            expect(el.value).to.equal(1);\n            expect(el.focusElement.value).to.equal('1');\n        });\n        it('via scroll (shift modified)', async () => {\n            el.focus();\n            await elementUpdated(el);\n            expect(el.focused).to.be.true;\n            el.dispatchEvent(\n                new WheelEvent('wheel', {\n                    deltaX: 1,\n                    shiftKey: true,\n                })\n            );\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('0');\n            expect(el.valueAsString).to.equal('0');\n            expect(el.value).to.equal(0);\n            expect(el.focusElement.value).to.equal('0');\n            el.dispatchEvent(\n                new WheelEvent('wheel', {\n                    deltaX: 100,\n                    shiftKey: true,\n                })\n            );\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('10');\n            expect(el.valueAsString).to.equal('10');\n            expect(el.value).to.equal(10);\n            expect(el.focusElement.value).to.equal('10');\n        });\n    });\n    describe('Decrements', () => {\n        let el: NumberField;\n\n        beforeEach(async () => {\n            el = await getElFrom(Default({}));\n            expect(el.value).to.be.NaN;\n            expect(el.formattedValue).to.equal('');\n            expect(el.valueAsString).to.equal('NaN');\n            expect(el.focusElement.value).to.equal('');\n        });\n        it('via pointer, only \"left\" button', async () => {\n            await clickBySelector(el, '.step-down', { button: 'middle' });\n            expect(el.formattedValue).to.equal('');\n            expect(el.valueAsString).to.equal('NaN');\n            expect(el.value).to.be.NaN;\n            expect(el.focusElement.value).to.equal('');\n        });\n        it('via pointer', async () => {\n            await clickBySelector(el, '.step-down');\n            expect(el.formattedValue).to.equal('0');\n            expect(el.valueAsString).to.equal('0');\n            expect(el.value).to.equal(0);\n            expect(el.focusElement.value).to.equal('0');\n            await clickBySelector(el, '.step-down');\n            expect(el.formattedValue).to.equal('-1');\n            expect(el.valueAsString).to.equal('-1');\n            expect(el.value).to.equal(-1);\n            expect(el.focusElement.value).to.equal('-1');\n        });\n        it('via arrow down', async () => {\n            el.focus();\n            await elementUpdated(el);\n            await sendKeys({ press: 'ArrowDown' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('0');\n            expect(el.valueAsString).to.equal('0');\n            expect(el.value).to.equal(0);\n            expect(el.focusElement.value).to.equal('0');\n            await sendKeys({ press: 'ArrowDown' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('-1');\n            expect(el.valueAsString).to.equal('-1');\n            expect(el.value).to.equal(-1);\n            expect(el.focusElement.value).to.equal('-1');\n        });\n        it('via arrow down (shift modified)', async () => {\n            el.focus();\n            await elementUpdated(el);\n            await sendKeys({ press: 'ArrowDown' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('0');\n            expect(el.valueAsString).to.equal('0');\n            expect(el.value).to.equal(0);\n            expect(el.focusElement.value).to.equal('0');\n            await sendKeys({ press: 'Shift+ArrowDown' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('-10');\n            expect(el.valueAsString).to.equal('-10');\n            expect(el.value).to.equal(-10);\n            expect(el.focusElement.value).to.equal('-10');\n        });\n        it('via arrow up (custom shift modified value)', async () => {\n            el.focus();\n            (el as NumberField).stepModifier = 5;\n            (el as NumberField).step = 3;\n            await elementUpdated(el);\n            await sendKeys({ press: 'ArrowDown' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('0');\n            expect(el.valueAsString).to.equal('0');\n            expect(el.value).to.equal(0);\n            expect(el.focusElement.value).to.equal('0');\n            await sendKeys({ press: 'Shift+ArrowDown' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('-15');\n            expect(el.valueAsString).to.equal('-15');\n            expect(el.value).to.equal(-15);\n            expect(el.focusElement.value).to.equal('-15');\n        });\n        it('via scroll', async () => {\n            el.focus();\n            await elementUpdated(el);\n            expect(el.focused).to.be.true;\n            el.dispatchEvent(new WheelEvent('wheel', { deltaY: -1 }));\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('0');\n            expect(el.valueAsString).to.equal('0');\n            expect(el.value).to.equal(0);\n            expect(el.focusElement.value).to.equal('0');\n            el.dispatchEvent(new WheelEvent('wheel', { deltaY: -100 }));\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('-1');\n            expect(el.valueAsString).to.equal('-1');\n            expect(el.value).to.equal(-1);\n            expect(el.focusElement.value).to.equal('-1');\n        });\n        it('via scroll (shift modified)', async () => {\n            el.focus();\n            await elementUpdated(el);\n            expect(el.focused).to.be.true;\n            el.dispatchEvent(\n                new WheelEvent('wheel', {\n                    deltaX: -1,\n                    shiftKey: true,\n                })\n            );\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('0');\n            expect(el.valueAsString).to.equal('0');\n            expect(el.value).to.equal(0);\n            expect(el.focusElement.value).to.equal('0');\n            el.dispatchEvent(\n                new WheelEvent('wheel', {\n                    deltaX: -100,\n                    shiftKey: true,\n                })\n            );\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('-10');\n            expect(el.valueAsString).to.equal('-10');\n            expect(el.value).to.equal(-10);\n            expect(el.focusElement.value).to.equal('-10');\n        });\n    });\n    describe('dispatched events', () => {\n        const inputSpy = spy();\n        const changeSpy = spy();\n        let el: NumberField;\n        beforeEach(async () => {\n            inputSpy.resetHistory();\n            changeSpy.resetHistory();\n            el = await getElFrom(Default({ value: 50 }));\n            el.addEventListener('input', (event: Event) => {\n                inputSpy((event.target as NumberField)?.value);\n            });\n            el.addEventListener('change', (event: Event) => {\n                changeSpy((event.target as NumberField)?.value);\n            });\n        });\n        it('except when changing `value` from the outside', async () => {\n            el.focus();\n            await elementUpdated(el);\n            expect(el.focused).to.be.true;\n            el.value = 51;\n            expect(changeSpy.callCount).to.equal(0);\n            await elementUpdated(el);\n            el.value = 52;\n            expect(changeSpy.callCount).to.equal(0);\n        });\n        it('handles IME input correctly and dispatches change event', async () => {\n            el.focus();\n            el.dispatchEvent(new CompositionEvent('compositionstart'));\n            // input multibyte characters\n            await sendKeys({ type: '\uFF11\uFF12\uFF13' });\n            await elementUpdated(el);\n            el.dispatchEvent(new CompositionEvent('compositionend'));\n            await elementUpdated(el);\n            await sendKeys({ press: 'Enter' });\n            expect(el.value).to.equal(50123);\n            expect(changeSpy.callCount).to.equal(1);\n        });\n        it('via scroll', async () => {\n            el.focus();\n            await elementUpdated(el);\n            expect(el.focused).to.be.true;\n            el.dispatchEvent(new WheelEvent('wheel', { deltaY: 1 }));\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('51');\n            expect(el.valueAsString).to.equal('51');\n            expect(el.value).to.equal(51);\n            expect(inputSpy.callCount).to.equal(1);\n            expect(changeSpy.callCount).to.equal(0);\n            el.dispatchEvent(new WheelEvent('wheel', { deltaY: 100 }));\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('52');\n            expect(el.valueAsString).to.equal('52');\n            expect(el.value).to.equal(52);\n            expect(inputSpy.callCount).to.equal(2);\n            expect(changeSpy.callCount).to.equal(0);\n            await aTimeout(CHANGE_DEBOUNCE_MS + 10);\n            expect(inputSpy.callCount).to.equal(2);\n            expect(changeSpy.callCount).to.equal(1);\n        });\n        it('has a useful `value`', async () => {\n            el.focus();\n            await sendKeys({ type: '7' });\n            await sendKeys({ press: 'Enter' });\n            expect(inputSpy.calledWith(507), 'input').to.be.true;\n            expect(changeSpy.calledWith(507), 'change').to.be.true;\n            await sendKeys({ type: ',00' });\n            await sendKeys({ press: 'Enter' });\n            expect(inputSpy.calledWith(5070), 'input').to.be.true;\n            expect(inputSpy.calledWith(50700), 'input').to.be.true;\n            expect(changeSpy.calledWith(50700), 'change').to.be.true;\n        });\n        it('has a useful `value` - percent', async () => {\n            el.formatOptions = { style: 'percent' };\n            el.value = 0.45;\n            expect(el.value).to.equal(0.45);\n            el.focus();\n            await sendKeys({ type: '7' }); // Visible text: 45%7\n            expect(inputSpy.calledWith(4.57), 'first input').to.be.true;\n            await sendKeys({ press: 'Backspace' }); // Visible text: 45%\n            await sendKeys({ press: 'Backspace' }); // Visible text: 45\n            await sendKeys({ press: 'Backspace' }); // Visible text: 4\n            await sendKeys({ press: 'Enter' });\n            expect(el.value).to.equal(0.04);\n            expect(inputSpy.calledWith(0.45), 'second input').to.be.true;\n            expect(inputSpy.calledWith(0.04), 'third input').to.be.true;\n            expect(changeSpy.calledWith(0.04), 'change').to.be.true;\n        });\n        it('has a useful `value` - currency', async () => {\n            el.formatOptions = {\n                style: 'currency',\n                currency: 'EUR',\n                currencyDisplay: 'code',\n                currencySign: 'accounting',\n            };\n            await elementUpdated(el);\n            el.value = 45;\n            expect(el.value).to.equal(45);\n            el.focus();\n            await sendKeys({ type: '7' }); // Visible text: EUR\u00A045.007\n            expect(el.value).to.equal(45.007);\n            expect(inputSpy.calledWith(el.value), 'first input').to.be.true;\n            await sendKeys({ press: 'ArrowLeft' }); // Visible text: EUR\u00A045.007\n            await sendKeys({ press: 'ArrowLeft' }); // Visible text: EUR\u00A045.007\n            await sendKeys({ press: 'ArrowLeft' }); // Visible text: EUR\u00A045.007\n            await sendKeys({ press: 'ArrowLeft' }); // Visible text: EUR\u00A045.007\n            await sendKeys({ press: 'ArrowLeft' }); // Visible text: EUR\u00A045.007\n            await sendKeys({ press: 'ArrowLeft' }); // Visible text: EUR\u00A045.007\n            await sendKeys({ press: 'ArrowLeft' }); // Visible text: EUR\u00A045.007\n            await sendKeys({ press: 'ArrowLeft' }); // Visible text: EUR\u00A045.007\n            await sendKeys({ press: 'ArrowLeft' }); // Visible text: EUR\u00A045.007\n            await sendKeys({ press: 'ArrowLeft' }); // Visible text: EUR\u00A045.007\n            await sendKeys({ type: '1' }); // Visible text: 1EUR\u00A045.007\n            await sendKeys({ press: 'Enter' }); // Visible text: EUR\u00A0145.01\n            expect(el.value).to.equal(145.007);\n            expect(inputSpy.calledWith(145.007), 'second input').to.be.true;\n            expect(changeSpy.calledWith(145.007), 'change').to.be.true;\n        });\n        it('one input/one change for each Arrow*', async () => {\n            el.focus();\n            await sendKeys({ press: 'ArrowUp' });\n            expect(inputSpy.callCount).to.equal(1);\n            expect(changeSpy.callCount).to.equal(1);\n            expect(el.value).to.equal(51);\n            await sendKeys({ press: 'ArrowDown' });\n            expect(inputSpy.callCount).to.equal(2);\n            expect(changeSpy.callCount).to.equal(2);\n            expect(el.value).to.equal(50);\n        });\n        it('one input/one change for each click', async () => {\n            await clickBySelector(el, '.step-up');\n            expect(inputSpy.callCount).to.equal(1);\n            expect(changeSpy.callCount).to.equal(1);\n            expect(el.value).to.equal(51);\n            await clickBySelector(el, '.step-down');\n            expect(inputSpy.callCount).to.equal(2);\n            expect(changeSpy.callCount).to.equal(2);\n            expect(el.value).to.equal(50);\n        });\n        it('click with modifier key', async () => {\n            let target = el.shadowRoot.querySelector('.step-up') as HTMLElement;\n            const stepUpRect = target.getBoundingClientRect();\n            const options = {\n                bubbles: true,\n                composed: true,\n                shiftKey: true,\n                clientX: stepUpRect.x + 1,\n                clientY: stepUpRect.y + 1,\n            };\n            (\n                el as unknown as {\n                    buttons: HTMLDivElement;\n                }\n            ).buttons.setPointerCapture = () => {\n                return;\n            };\n            (\n                el as unknown as {\n                    buttons: HTMLDivElement;\n                }\n            ).buttons.releasePointerCapture = () => {\n                return;\n            };\n            let input = oneEvent(el, 'input');\n            target.dispatchEvent(new PointerEvent('pointerdown', options));\n            await input;\n            target.dispatchEvent(new PointerEvent('pointerup', options));\n            expect(inputSpy.callCount).to.equal(1);\n            expect(changeSpy.callCount).to.equal(1);\n            expect(el.value).to.equal(60);\n            target = el.shadowRoot.querySelector('.step-down') as HTMLElement;\n            const stepDownRect = target.getBoundingClientRect();\n            options.clientX = stepDownRect.x + 1;\n            options.clientY = stepDownRect.y + 1;\n            input = oneEvent(el, 'input');\n            target.dispatchEvent(new PointerEvent('pointerdown', options));\n            await input;\n            target.dispatchEvent(new PointerEvent('pointerup', options));\n            expect(inputSpy.callCount).to.equal(2);\n            expect(changeSpy.callCount).to.equal(2);\n            expect(el.value).to.equal(50);\n        });\n        it('many input, but one change', async () => {\n            const buttonUp = el.shadowRoot.querySelector(\n                '.step-up'\n            ) as HTMLElement;\n            const buttonUpRect = buttonUp.getBoundingClientRect();\n            const buttonUpPosition: [number, number] = [\n                buttonUpRect.x + buttonUpRect.width / 2,\n                buttonUpRect.y + buttonUpRect.height / 2,\n            ];\n            const buttonDown = el.shadowRoot.querySelector(\n                '.step-down'\n            ) as HTMLElement;\n            const buttonDownRect = buttonDown.getBoundingClientRect();\n            const buttonDownPosition: [number, number] = [\n                buttonDownRect.x + buttonDownRect.width / 2,\n                buttonDownRect.y + buttonDownRect.height / 2,\n            ];\n            sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: buttonUpPosition,\n                    },\n                    {\n                        type: 'down',\n                    },\n                ],\n            });\n            await oneEvent(el, 'input');\n            expect(el.value).to.equal(51);\n            expect(inputSpy.callCount).to.equal(1);\n            expect(changeSpy.callCount).to.equal(0);\n            await oneEvent(el, 'input');\n            expect(el.value).to.equal(52);\n            expect(inputSpy.callCount).to.equal(2);\n            expect(changeSpy.callCount).to.equal(0);\n            await oneEvent(el, 'input');\n            expect(el.value).to.equal(53);\n            expect(inputSpy.callCount).to.equal(3);\n            expect(changeSpy.callCount).to.equal(0);\n            sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: buttonDownPosition,\n                    },\n                ],\n            });\n            let framesToWait = FRAMES_PER_CHANGE * 2;\n            while (framesToWait) {\n                // input is only processed onces per FRAMES_PER_CHANGE number of frames\n                framesToWait -= 1;\n                await nextFrame();\n            }\n            expect(inputSpy.callCount).to.equal(5);\n            expect(changeSpy.callCount).to.equal(0);\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'up',\n                    },\n                ],\n            });\n            expect(inputSpy.callCount).to.equal(5);\n            expect(changeSpy.callCount).to.equal(1);\n        });\n        it('no change in committed value - using buttons', async () => {\n            const buttonUp = el.shadowRoot.querySelector(\n                '.step-up'\n            ) as HTMLElement;\n            const buttonUpRect = buttonUp.getBoundingClientRect();\n            const buttonUpPosition: [number, number] = [\n                buttonUpRect.x + buttonUpRect.width / 2,\n                buttonUpRect.y + buttonUpRect.height / 2,\n            ];\n            const buttonDown = el.shadowRoot.querySelector(\n                '.step-down'\n            ) as HTMLElement;\n            const buttonDownRect = buttonDown.getBoundingClientRect();\n            const buttonDownPosition: [number, number] = [\n                buttonDownRect.x + buttonDownRect.width / 2,\n                buttonDownRect.y + buttonDownRect.height / 2,\n            ];\n            sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: buttonUpPosition,\n                    },\n                    {\n                        type: 'down',\n                    },\n                ],\n            });\n            await oneEvent(el, 'input');\n            expect(el.value).to.equal(51);\n            expect(inputSpy.callCount).to.equal(1);\n            expect(changeSpy.callCount).to.equal(0);\n            await oneEvent(el, 'input');\n            expect(el.value).to.equal(52);\n            expect(inputSpy.callCount).to.equal(2);\n            expect(changeSpy.callCount).to.equal(0);\n            sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: buttonDownPosition,\n                    },\n                ],\n            });\n            let framesToWait = FRAMES_PER_CHANGE * 2;\n            while (framesToWait) {\n                // input is only processed onces per FRAMES_PER_CHANGE number of frames\n                framesToWait -= 1;\n                await nextFrame();\n            }\n            expect(inputSpy.callCount).to.equal(4);\n            expect(changeSpy.callCount).to.equal(0);\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'up',\n                    },\n                ],\n            });\n            expect(inputSpy.callCount).to.equal(4);\n            expect(\n                changeSpy.callCount,\n                'value does not change from initial value so no \"change\" event is dispatched'\n            ).to.equal(0);\n        });\n    });\n    it('accepts pointer interactions with the stepper UI', async () => {\n        const inputSpy = spy();\n        const el = await getElFrom(Default({ value: 50 }));\n        el.addEventListener('input', () => inputSpy());\n        expect(el.formattedValue).to.equal('50');\n        expect(el.valueAsString).to.equal('50');\n        expect(el.value).to.equal(50);\n        const buttonUp = el.shadowRoot.querySelector('.step-up') as HTMLElement;\n        const buttonUpRect = buttonUp.getBoundingClientRect();\n        const buttonUpPosition: [number, number] = [\n            buttonUpRect.x + buttonUpRect.width / 2,\n            buttonUpRect.y + buttonUpRect.height / 2,\n        ];\n        const buttonDown = el.shadowRoot.querySelector(\n            '.step-down'\n        ) as HTMLElement;\n        const buttonDownRect = buttonDown.getBoundingClientRect();\n        const buttonDownPosition: [number, number] = [\n            buttonDownRect.x + buttonDownRect.width / 2,\n            buttonDownRect.y + buttonDownRect.height / 2,\n        ];\n        const outsidePosition: [number, number] = [\n            buttonDownRect.x + buttonDownRect.width + 5,\n            buttonDownRect.y + buttonDownRect.height + 5,\n        ];\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: buttonUpPosition,\n                },\n                {\n                    type: 'down',\n                },\n            ],\n        });\n        await oneEvent(el, 'input');\n        let value = 50 + inputSpy.callCount;\n        expect(el.formattedValue).to.equal(String(value));\n        expect(el.valueAsString).to.equal(String(value));\n        expect(el.value).to.equal(value);\n        inputSpy.resetHistory();\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: buttonDownPosition,\n                },\n            ],\n        });\n        value = value - inputSpy.callCount;\n        expect(el.formattedValue).to.equal(String(value));\n        expect(el.valueAsString).to.equal(String(value));\n        expect(el.value).to.equal(value);\n        inputSpy.resetHistory();\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: outsidePosition,\n                },\n            ],\n        });\n        value = value - inputSpy.callCount;\n        expect(el.formattedValue).to.equal(String(value));\n        expect(el.valueAsString).to.equal(String(value));\n        expect(el.value).to.equal(value);\n        inputSpy.resetHistory();\n        await oneEvent(el, 'input');\n        value = value - inputSpy.callCount;\n        expect(el.formattedValue).to.equal(String(value));\n        expect(el.valueAsString).to.equal(String(value));\n        expect(el.value).to.equal(value);\n        inputSpy.resetHistory();\n        await sendMouse({\n            steps: [\n                {\n                    type: 'up',\n                },\n            ],\n        });\n        let framesToWait = FRAMES_PER_CHANGE;\n        while (framesToWait) {\n            // input is only processed onces per FRAMES_PER_CHANGE number of frames\n            framesToWait -= 1;\n            await nextFrame();\n        }\n        await elementUpdated(el);\n        value = value - inputSpy.callCount;\n        expect(el.formattedValue).to.equal(String(value));\n        expect(el.valueAsString).to.equal(String(value));\n        expect(el.value).to.equal(value);\n    });\n    it('surfaces `valueAsNumber`', async () => {\n        const el = await getElFrom(Default({}));\n        el.value = 1000;\n        await elementUpdated(el);\n        expect(el.formattedValue).to.equal('1,000');\n        expect(el.valueAsString).to.equal('1000');\n        expect(el.value).to.equal(1000);\n        el.valueAsString = '2222';\n        await elementUpdated(el);\n        expect(el.formattedValue).to.equal('2,222');\n        expect(el.valueAsString).to.equal('2222');\n        expect(el.value).to.equal(2222);\n    });\n    describe('manages `value` with `formatOptions`', () => {\n        it('manages decimals', async () => {\n            const el = await getElFrom(decimals({ value: 1.333333 }));\n            expect(el.value).to.equal(1.33);\n            expect(el.formattedValue).to.equal('+1.33');\n            expect(el.valueAsString).to.equal('1.33');\n        });\n        it('manages precents', async () => {\n            const el = await getElFrom(percents({ value: 0.45 }));\n            expect(el.formattedValue).to.equal('45%');\n            expect(el.valueAsString).to.equal('0.45');\n            expect(el.value).to.equal(0.45);\n            await clickBySelector(el, '.step-down');\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('44%');\n            expect(el.valueAsString).to.equal('0.44');\n            expect(el.value).to.equal(0.44);\n            await clickBySelector(el, '.step-up');\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('45%');\n            expect(el.valueAsString).to.equal('0.45');\n            expect(el.value).to.equal(0.45);\n            el.focus();\n            el.value = 0;\n            await sendKeys({ type: '54' });\n            await sendKeys({ press: 'Enter' });\n            expect(el.formattedValue).to.equal('54%');\n            expect(el.valueAsString).to.equal('0.54');\n            expect(el.value).to.equal(0.54);\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('54%');\n            expect(el.valueAsString).to.equal('0.54');\n            expect(el.value).to.equal(0.54);\n        });\n        it('manages currency', async () => {\n            const el = await getElFrom(currency({ value: 234.21 }));\n            expect(el.formattedValue).to.equal('EUR\u00A0234.21');\n            expect(el.valueAsString).to.equal('234.21');\n            expect(el.value).to.equal(234.21);\n        });\n        it('manages units', async () => {\n            const el = await getElFrom(units({ value: 17 }));\n            expect(el.formattedValue).to.equal('17 inches');\n            expect(el.valueAsString).to.equal('17');\n            expect(el.value).to.equal(17);\n        });\n        it('does not select all on click based `focus`', async function () {\n            const el = await getElFrom(units({ value: 17 }));\n            expect(el.value).to.equal(17);\n\n            const inputElement = el.shadowRoot?.querySelector(\n                'input'\n            ) as HTMLInputElement;\n\n            await sendMouseTo(el.focusElement, 'click');\n            await elementUpdated(el);\n            expect(el.focused).to.be.true;\n\n            let length: number | null = null;\n            await waitUntil(\n                () => {\n                    if (\n                        inputElement.selectionStart !== null &&\n                        inputElement.selectionEnd !== null\n                    ) {\n                        length =\n                            inputElement.selectionEnd -\n                            inputElement.selectionStart;\n                        return true;\n                    }\n                    return false;\n                },\n                'selection changed',\n                { timeout: 400 }\n            );\n            expect(length, `selection length)`).to.equal(0);\n        });\n        it('selects all on `Tab` based `focus`', async function () {\n            const el = await getElFrom(units({ value: 17 }));\n            const input = document.createElement('input');\n            el.insertAdjacentElement('beforebegin', input);\n            input.focus();\n\n            const inputElement = el.shadowRoot?.querySelector(\n                'input'\n            ) as HTMLInputElement;\n\n            await sendKeys({\n                press: 'Tab',\n            });\n            await elementUpdated(el);\n            expect(el.focused).to.be.true;\n\n            let length: number | null = null;\n            await waitUntil(\n                () => {\n                    if (\n                        inputElement.selectionStart !== null &&\n                        inputElement.selectionEnd !== null\n                    ) {\n                        length =\n                            inputElement.selectionEnd -\n                            inputElement.selectionStart;\n                        return true;\n                    }\n                    return false;\n                },\n                'selection changed',\n                { timeout: 400 }\n            );\n\n            expect(length, `selection length`).to.equal(\n                el.valueAsString.length\n            );\n        });\n        it('manages units not supported by the browser', async () => {\n            const el = await getElFrom(pixels({ value: 17 }));\n            expect(el.formattedValue).to.equal('17px');\n            expect(el.valueAsString).to.equal('17');\n            expect(el.value).to.equal(17);\n        });\n    });\n    describe('max', () => {\n        let el: NumberField;\n        let lastInputValue = 0;\n        let lastChangeValue = 0;\n        const inputSpy = spy();\n        const changeSpy = spy();\n        beforeEach(async () => {\n            inputSpy.resetHistory();\n            changeSpy.resetHistory();\n            el = await getElFrom(\n                Default({\n                    max: 10,\n                    value: 10,\n                    onInput: (value: number) => {\n                        inputSpy(value);\n                        lastInputValue = value;\n                    },\n                    onChange: (value: number) => {\n                        changeSpy(value);\n                        lastChangeValue = value;\n                    },\n                })\n            );\n            expect(el.formattedValue).to.equal('10');\n            expect(el.valueAsString).to.equal('10');\n            expect(el.value).to.equal(10);\n        });\n        it('constrains input', async () => {\n            el.focus();\n            await sendKeys({ type: '15' });\n            await sendKeys({ press: 'Enter' });\n            await elementUpdated(el);\n            expect(lastInputValue, 'last input value').to.equal(10);\n            expect(lastChangeValue, 'last change value').to.equal(\n                0,\n                'value does not change from initial value so no \"change\" event is dispatched'\n            );\n            expect(el.formattedValue).to.equal('10');\n            expect(el.valueAsString).to.equal('10');\n            expect(el.value).to.equal(10);\n        });\n        it('constrains `value`', async () => {\n            el.value = 20;\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('10');\n            expect(el.valueAsString).to.equal('10');\n            expect(el.value).to.equal(10);\n        });\n        it('constrains ArrowUp usage', async () => {\n            expect(el.value).to.equal(10);\n            el.focus();\n            await sendKeys({ press: 'ArrowUp' });\n            expect(el.focusElement.value).to.equal('10');\n            await sendKeys({ press: 'Shift+ArrowUp' });\n            expect(el.focusElement.value).to.equal('10');\n        });\n        it('constrains pointer usage', async () => {\n            expect(el.value).to.equal(10);\n            const buttonUp = el.shadowRoot.querySelector(\n                '.step-up'\n            ) as HTMLElement;\n            const buttonUpRect = buttonUp.getBoundingClientRect();\n            const buttonUpPosition: [number, number] = [\n                buttonUpRect.x + buttonUpRect.width / 2,\n                buttonUpRect.y + buttonUpRect.height / 2,\n            ];\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'click',\n                        position: buttonUpPosition,\n                    },\n                ],\n            });\n            expect(el.value).to.equal(10);\n        });\n        it('validates on commit', async () => {\n            el.focus();\n            await sendKeys({ type: '15' });\n            await sendKeys({ press: 'Enter' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('10');\n            expect(el.valueAsString).to.equal('10');\n            expect(el.value).to.equal(10);\n        });\n        it('disabled `stepUp` button', async () => {\n            await clickBySelector(el, '.step-up');\n            expect(el.formattedValue).to.equal('10');\n            expect(el.valueAsString).to.equal('10');\n            expect(el.value).to.equal(10);\n        });\n        it('validates late', async () => {\n            el.max = 5;\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('5');\n            expect(el.valueAsString).to.equal('5');\n            expect(el.value).to.equal(5);\n        });\n        it('dispatches onchange on setting max value', async () => {\n            el.value = 5;\n            await elementUpdated(el);\n            expect(changeSpy.callCount).to.equal(0);\n            expect(el.value).to.equal(5);\n            el.focus();\n            await sendKeys({\n                press: 'Backspace',\n            });\n            await sendKeys({\n                press: '1',\n            });\n            await sendKeys({\n                press: '5',\n            });\n            await sendKeys({\n                press: 'Enter',\n            });\n            await elementUpdated(el);\n            expect(el.value).to.equal(10);\n            expect(inputSpy.callCount).to.equal(3);\n            expect(changeSpy.callCount).to.equal(1);\n            expect(lastChangeValue, 'last change value').to.equal(10);\n        });\n    });\n    describe('min', () => {\n        let el: NumberField;\n        let lastInputValue = 0;\n        let lastChangeValue = 0;\n        const inputSpy = spy();\n        const changeSpy = spy();\n        beforeEach(async () => {\n            inputSpy.resetHistory();\n            changeSpy.resetHistory();\n            el = await getElFrom(\n                Default({\n                    min: 10,\n                    value: 10,\n                    onInput: (value: number) => {\n                        inputSpy(value);\n                        lastInputValue = value;\n                    },\n                    onChange: (value: number) => {\n                        changeSpy(value);\n                        lastChangeValue = value;\n                    },\n                })\n            );\n            expect(el.formattedValue).to.equal('10');\n            expect(el.valueAsString).to.equal('10');\n            expect(el.value).to.equal(10);\n        });\n        it('constrains input', async () => {\n            el.focus();\n            await sendKeys({ press: 'Backspace' });\n            await sendKeys({ press: 'Backspace' });\n            await sendKeys({ type: '5' });\n            await sendKeys({ press: 'Enter' });\n            await elementUpdated(el);\n            expect(lastInputValue, 'last input value').to.equal(10);\n            expect(lastChangeValue, 'last change value').to.equal(\n                0,\n                'value does not change from initial value so no \"change\" event is dispatched'\n            );\n            expect(el.formattedValue).to.equal('10');\n            expect(el.valueAsString).to.equal('10');\n            expect(el.value).to.equal(10);\n            el.focus();\n            await sendKeys({ press: 'Backspace' });\n            await sendKeys({ press: 'Backspace' });\n            await sendKeys({ type: '-2000' });\n            await sendKeys({ press: 'Enter' });\n            expect(el.formattedValue).to.equal('10');\n            expect(el.valueAsString).to.equal('10');\n            expect(el.value).to.equal(10);\n        });\n        it('dispatches onchange on setting min value', async () => {\n            el.value = 15;\n            await elementUpdated(el);\n            expect(changeSpy.callCount).to.equal(0);\n            expect(el.value).to.equal(15);\n            el.focus();\n            await sendKeys({\n                press: 'Backspace',\n            });\n            await sendKeys({\n                press: 'Backspace',\n            });\n            await sendKeys({\n                press: '5',\n            });\n            await sendKeys({\n                press: 'Enter',\n            });\n            await elementUpdated(el);\n            expect(el.value).to.equal(10);\n            expect(inputSpy.callCount).to.equal(3);\n            expect(changeSpy.callCount).to.equal(1);\n            expect(lastChangeValue, 'last change value').to.equal(10);\n        });\n        xit('manages `inputMode` in iPad', async () => {\n            // setUserAgent is not currently supported by Playwright\n            await setUserAgent(\n                'Mozilla/5.0 (iPad; CPU OS 17_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile15E148 Safari/604.1'\n            );\n            el.min = 0;\n            await elementUpdated(el);\n            expect(el.focusElement.inputMode).to.equal('numeric');\n            el.min = -10;\n            await elementUpdated(el);\n            expect(el.focusElement.inputMode).to.equal('numeric');\n            el.min = undefined;\n            await elementUpdated(el);\n            expect(el.focusElement.inputMode).to.equal('numeric');\n            el.formatOptions = {\n                minimumFractionDigits: 1,\n                maximumFractionDigits: 2,\n            };\n            el.min = 0;\n            await elementUpdated(el);\n            expect(el.focusElement.inputMode).to.equal('decimal');\n        });\n        xit('manages `inputMode` in iPhone', async () => {\n            // setUserAgent is not currently supported by Playwright\n            await setUserAgent(\n                'Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148'\n            );\n            el.min = 0;\n            await elementUpdated(el);\n            expect(el.focusElement.inputMode).to.equal('numeric');\n            el.min = -10;\n            await elementUpdated(el);\n            expect(el.focusElement.inputMode).to.equal('text');\n            el.min = undefined;\n            await elementUpdated(el);\n            expect(el.focusElement.inputMode).to.equal('text');\n            el.formatOptions = {\n                minimumFractionDigits: 1,\n                maximumFractionDigits: 2,\n            };\n            el.min = 0;\n            await elementUpdated(el);\n            expect(el.focusElement.inputMode).to.equal('decimal');\n        });\n        xit('manages `inputMode` in Android', async () => {\n            // setUserAgent is not currently supported by Playwright\n            await setUserAgent(\n                'Mozilla/5.0 (Linux; Android 10; SM-A205U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.210 Mobile Safari/537.36'\n            );\n            el.min = 0;\n            await elementUpdated(el);\n            expect(el.focusElement.inputMode).to.equal('numeric');\n            el.min = -10;\n            await elementUpdated(el);\n            expect(el.focusElement.inputMode).to.equal('numeric');\n            el.min = undefined;\n            await elementUpdated(el);\n            expect(el.focusElement.inputMode).to.equal('numeric');\n            el.formatOptions = {\n                minimumFractionDigits: 1,\n                maximumFractionDigits: 2,\n            };\n            el.min = 0;\n            await elementUpdated(el);\n            expect(el.focusElement.inputMode).to.equal('decimal');\n            el.formatOptions = {\n                minimumFractionDigits: 1,\n                maximumFractionDigits: 2,\n            };\n            el.min = -10;\n            await elementUpdated(el);\n            expect(el.focusElement.inputMode).to.equal('numeric');\n        });\n        it('constrains `value`', async () => {\n            el.value = 0;\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('10');\n            expect(el.valueAsString).to.equal('10');\n            expect(el.value).to.equal(10);\n        });\n        it('constrains ArrowDown usage', async () => {\n            el.min = 0;\n            el.value = 0;\n            expect(el.value).to.equal(0);\n            el.focus();\n            await sendKeys({ press: 'ArrowDown' });\n            expect(el.formattedValue).to.equal('0');\n            expect(el.valueAsString).to.equal('0');\n            expect(el.value).to.equal(0);\n            await sendKeys({ press: 'Shift+ArrowDown' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('0');\n            expect(el.valueAsString).to.equal('0');\n            expect(el.value).to.equal(0);\n        });\n        it('constrains pointer usage', async () => {\n            el.min = 0;\n            el.value = 0;\n            await elementUpdated(el);\n            expect(el.value).to.equal(0);\n            const buttonDown = el.shadowRoot.querySelector(\n                '.step-down'\n            ) as HTMLElement;\n            const buttonDownRect = buttonDown.getBoundingClientRect();\n            const buttonDownPosition: [number, number] = [\n                buttonDownRect.x + buttonDownRect.width / 2,\n                buttonDownRect.y + buttonDownRect.height / 2,\n            ];\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'click',\n                        position: buttonDownPosition,\n                    },\n                ],\n            });\n            await elementUpdated(el);\n            expect(el.value).to.equal(0);\n        });\n        it('validates on commit', async () => {\n            el.focus();\n            await sendKeys({ press: '0' });\n            await sendKeys({ press: 'Enter' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('100');\n            expect(el.valueAsString).to.equal('100');\n            expect(el.value).to.equal(100);\n        });\n        it('disabled `stepDown` button', async () => {\n            await clickBySelector(el, '.step-down');\n            expect(el.formattedValue).to.equal('10');\n            expect(el.valueAsString).to.equal('10');\n            expect(el.value).to.equal(10);\n        });\n        it('validates late', async () => {\n            el.min = 15;\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('15');\n            expect(el.valueAsString).to.equal('15');\n            expect(el.value).to.equal(15);\n        });\n    });\n    describe('step', () => {\n        let el: NumberField;\n        beforeEach(async () => {\n            el = await getElFrom(Default({ value: 10, step: 5 }));\n            expect(el.formattedValue).to.equal('10');\n            expect(el.valueAsString).to.equal('10');\n            expect(el.value).to.equal(10);\n        });\n        it('via arrow up', async () => {\n            el.focus();\n            await elementUpdated(el);\n            await sendKeys({ press: 'ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('15');\n            expect(el.valueAsString).to.equal('15');\n            expect(el.value).to.equal(15);\n        });\n        it('via arrow down', async () => {\n            el.focus();\n            await elementUpdated(el);\n            await sendKeys({ press: 'ArrowDown' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('5');\n            expect(el.valueAsString).to.equal('5');\n            expect(el.value).to.equal(5);\n        });\n        it('step up via pointer', async () => {\n            await clickBySelector(el, '.step-up');\n            expect(el.formattedValue).to.equal('15');\n            expect(el.valueAsString).to.equal('15');\n            expect(el.value).to.equal(15);\n        });\n        it('step down via pointer', async () => {\n            await clickBySelector(el, '.step-down');\n            expect(el.formattedValue).to.equal('5');\n            expect(el.valueAsString).to.equal('5');\n            expect(el.value).to.equal(5);\n        });\n    });\n    describe('step + constraints', () => {\n        let el: NumberField;\n        beforeEach(async () => {\n            el = await getElFrom(Default({ step: 5 }));\n            expect(el.formattedValue).to.equal('');\n            expect(el.valueAsString).to.equal('NaN');\n            expect(el.value).to.be.NaN;\n        });\n        it('steps', async () => {\n            el.focus();\n            await elementUpdated(el);\n            await sendKeys({ press: 'ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('0');\n            expect(el.valueAsString).to.equal('0');\n            expect(el.value).to.equal(0);\n            await sendKeys({ press: 'ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('5');\n            expect(el.valueAsString).to.equal('5');\n            expect(el.value).to.equal(5);\n            await sendKeys({ press: 'ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('10');\n            expect(el.valueAsString).to.equal('10');\n            expect(el.value).to.equal(10);\n        });\n        it('steps from min', async () => {\n            el.min = 5;\n            await elementUpdated(el);\n            el.focus();\n            await elementUpdated(el);\n            await sendKeys({ press: 'ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('5');\n            expect(el.valueAsString).to.equal('5');\n            expect(el.value).to.equal(5);\n            await sendKeys({ press: 'ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('10');\n            expect(el.valueAsString).to.equal('10');\n            expect(el.value).to.equal(10);\n            await sendKeys({ press: 'ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('15');\n            expect(el.valueAsString).to.equal('15');\n            expect(el.value).to.equal(15);\n        });\n        it('steps from mismatched min', async () => {\n            el.min = 2;\n            await elementUpdated(el);\n            el.focus();\n            await elementUpdated(el);\n            await sendKeys({ press: 'ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('2');\n            expect(el.valueAsString).to.equal('2');\n            expect(el.value).to.equal(2);\n            await sendKeys({ press: 'ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('7');\n            expect(el.valueAsString).to.equal('7');\n            expect(el.value).to.equal(7);\n            await sendKeys({ press: 'ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('12');\n            expect(el.valueAsString).to.equal('12');\n            expect(el.value).to.equal(12);\n        });\n        it('steps to mismatched max', async () => {\n            el.min = 2;\n            el.max = 10;\n            await elementUpdated(el);\n            el.focus();\n            await elementUpdated(el);\n            await sendKeys({ press: 'ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('2');\n            expect(el.valueAsString).to.equal('2');\n            expect(el.value).to.equal(2);\n            await sendKeys({ press: 'ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('7');\n            expect(el.valueAsString).to.equal('7');\n            expect(el.value).to.equal(7);\n            await sendKeys({ press: 'ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('7');\n            expect(el.valueAsString).to.equal('7');\n            expect(el.value).to.equal(7);\n        });\n        it('validates max + step', async () => {\n            el.value = 2;\n            el.min = 2;\n            el.max = 10;\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('2');\n            expect(el.valueAsString).to.equal('2');\n            expect(el.value).to.equal(2);\n            el.value = 11;\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('7');\n            expect(el.valueAsString).to.equal('7');\n            expect(el.value).to.equal(7);\n            el.value = 27;\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('7');\n            expect(el.valueAsString).to.equal('7');\n            expect(el.value).to.equal(7);\n        });\n    });\n    describe('indeterminate', () => {\n        let el: NumberField;\n        beforeEach(async () => {\n            el = await getElFrom(indeterminate(indeterminate.args));\n            expect(el.formattedValue).to.equal('100');\n            expect(el.valueAsString).to.equal('100');\n            expect(el.value).to.equal(100);\n            expect(\n                (el as unknown as { displayValue: string }).displayValue\n            ).to.equal(indeterminatePlaceholder);\n        });\n        it('remove \"-\" on focus', async () => {\n            el.focus();\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('100');\n            expect(el.valueAsString).to.equal('100');\n            expect(el.value).to.equal(100);\n            expect(\n                (el as unknown as { displayValue: string }).displayValue\n            ).to.equal('');\n            el.blur();\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('100');\n            expect(el.valueAsString).to.equal('100');\n            expect(el.value).to.equal(100);\n            expect(\n                (el as unknown as { displayValue: string }).displayValue\n            ).to.equal(indeterminatePlaceholder);\n        });\n        it('return to \"-\" after suplied value is removed', async () => {\n            el.focus();\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('100');\n            expect(el.valueAsString).to.equal('100');\n            expect(el.value).to.equal(100);\n            expect(\n                (el as unknown as { displayValue: string }).displayValue\n            ).to.equal('');\n            await sendKeys({ type: '50' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('50');\n            expect(el.valueAsString).to.equal('50');\n            expect(el.value).to.equal(50);\n            expect(\n                (el as unknown as { displayValue: string }).displayValue\n            ).to.equal('50');\n            await sendKeys({ press: 'Backspace' });\n            await sendKeys({ press: 'Backspace' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('100');\n            expect(el.valueAsString).to.equal('100');\n            expect(el.value).to.equal(100);\n            expect(\n                (el as unknown as { displayValue: string }).displayValue\n            ).to.equal('');\n            el.blur();\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('100');\n            expect(el.valueAsString).to.equal('100');\n            expect(el.value).to.equal(100);\n            expect(\n                (el as unknown as { displayValue: string }).displayValue\n            ).to.equal(indeterminatePlaceholder);\n        });\n        it('starts from `value` on \"ArrowUp\" keypresses', async () => {\n            el.focus();\n            await elementUpdated(el);\n            await sendKeys({ press: 'ArrowUp' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('101');\n            expect(el.valueAsString).to.equal('101');\n            expect(el.value).to.equal(101);\n            expect(\n                (el as unknown as { displayValue: string }).displayValue\n            ).to.equal('101');\n            el.blur();\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('101');\n            expect(el.valueAsString).to.equal('101');\n            expect(el.value).to.equal(101);\n            expect(\n                (el as unknown as { displayValue: string }).displayValue\n            ).to.equal('101');\n        });\n        it('starts from `value` on click `.step-up`', async () => {\n            el.focus();\n            await elementUpdated(el);\n            await clickBySelector(el, '.step-up');\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('101');\n            expect(el.valueAsString).to.equal('101');\n            expect(el.value).to.equal(101);\n            expect(\n                (el as unknown as { displayValue: string }).displayValue\n            ).to.equal('101');\n            el.blur();\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('101');\n            expect(el.valueAsString).to.equal('101');\n            expect(el.value).to.equal(101);\n            expect(\n                (el as unknown as { displayValue: string }).displayValue\n            ).to.equal('101');\n        });\n        it('starts from `value` on \"ArrowDown\" keypresses', async () => {\n            el.focus();\n            await elementUpdated(el);\n            await sendKeys({ press: 'ArrowDown' });\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('99');\n            expect(el.valueAsString).to.equal('99');\n            expect(el.value).to.equal(99);\n            expect(\n                (el as unknown as { displayValue: string }).displayValue\n            ).to.equal('99');\n            el.blur();\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('99');\n            expect(el.valueAsString).to.equal('99');\n            expect(el.value).to.equal(99);\n            expect(\n                (el as unknown as { displayValue: string }).displayValue\n            ).to.equal('99');\n        });\n        it('starts from `value` on click `.step-down`', async () => {\n            el.focus();\n            await elementUpdated(el);\n            await clickBySelector(el, '.step-down');\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('99');\n            expect(el.valueAsString).to.equal('99');\n            expect(el.value).to.equal(99);\n            expect(\n                (el as unknown as { displayValue: string }).displayValue\n            ).to.equal('99');\n            el.blur();\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('99');\n            expect(el.valueAsString).to.equal('99');\n            expect(el.value).to.equal(99);\n            expect(\n                (el as unknown as { displayValue: string }).displayValue\n            ).to.equal('99');\n        });\n    });\n    it('removes the stepper UI with [hide-stepper]', async () => {\n        const el = await getElFrom(Default({ hideStepper: true }));\n        const stepUp = el.shadowRoot.querySelector('.step-up');\n        const stepDown = el.shadowRoot.querySelector('.step-down');\n        expect(stepUp).to.be.null;\n        expect(stepDown).to.be.null;\n    });\n    describe('Disabled', () => {\n        let el: NumberField;\n        beforeEach(async () => {\n            el = await getElFrom(Default({ disabled: true, value: 1337 }));\n            expect(el.formattedValue).to.equal('1,337');\n            expect(el.valueAsString).to.equal('1337');\n            expect(el.value).to.equal(1337);\n            el.focus();\n            await elementUpdated(el);\n        });\n        afterEach(async () => {\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('1,337');\n            expect(el.valueAsString).to.equal('1337');\n            expect(el.value).to.equal(1337);\n        });\n        it('presents as `disabled`', async () => {\n            await sendKeys({ type: '12345' });\n            await elementUpdated(el);\n            await sendKeys({ press: 'Enter' });\n        });\n        it('prevents increment via keyboard', async () => {\n            await sendKeys({ press: 'ArrowUp' });\n        });\n        it('prevents decrement via keyboard', async () => {\n            await sendKeys({ press: 'ArrowDown' });\n        });\n        it('prevents increment via scroll', async () => {\n            el.dispatchEvent(new WheelEvent('wheel', { deltaY: 1 }));\n        });\n        it('prevents decrement via scroll', async () => {\n            el.dispatchEvent(new WheelEvent('wheel', { deltaY: -1 }));\n        });\n        it('prevents increment via stepper button', async () => {\n            await clickBySelector(el, '.step-up');\n        });\n        it('prevents decrement via stepper button', async () => {\n            await clickBySelector(el, '.step-down');\n        });\n    });\n    describe('Readonly', () => {\n        let el: NumberField;\n        beforeEach(async () => {\n            el = await getElFrom(Default({ readonly: true, value: 1337 }));\n            expect(el.formattedValue).to.equal('1,337');\n            expect(el.valueAsString).to.equal('1337');\n            expect(el.value).to.equal(1337);\n            el.focus();\n            await elementUpdated(el);\n        });\n        afterEach(async () => {\n            await elementUpdated(el);\n            expect(el.formattedValue).to.equal('1,337');\n            expect(el.valueAsString).to.equal('1337');\n            expect(el.value).to.equal(1337);\n        });\n        it('presents as `readonly`', async () => {\n            await sendKeys({ type: '12345' });\n            await elementUpdated(el);\n            await sendKeys({ press: 'Enter' });\n        });\n        it('prevents increment via keyboard', async () => {\n            await sendKeys({ press: 'ArrowUp' });\n        });\n        it('prevents decrement via keyboard', async () => {\n            await sendKeys({ press: 'ArrowDown' });\n        });\n        it('prevents increment via scroll', async () => {\n            el.dispatchEvent(new WheelEvent('wheel', { deltaY: 1 }));\n        });\n        it('prevents decrement via scroll', async () => {\n            el.dispatchEvent(new WheelEvent('wheel', { deltaY: -1 }));\n        });\n        it('prevents increment via stepper button', async () => {\n            await clickBySelector(el, '.step-up');\n        });\n        it('prevents decrement via stepper button', async () => {\n            await clickBySelector(el, '.step-down');\n        });\n    });\n    describe('accessibility model', () => {\n        it('increment and decrement buttons cannot receive keyboard focus', async () => {\n            await fixture<HTMLDivElement>(html`\n                <div>\n                    ${Default({\n                        onChange: () => {\n                            return;\n                        },\n                    })}\n                </div>\n            `);\n\n            type NamedNode = { name: string };\n            const snapshot = (await a11ySnapshot(\n                {}\n            )) as unknown as NamedNode & {\n                children: NamedNode[];\n            };\n\n            expect(\n                findAccessibilityNode<NamedNode>(\n                    snapshot,\n                    (node) => node.name === 'Increase Enter a number'\n                ),\n                '`name` is the label text'\n            ).to.be.null;\n\n            expect(\n                findAccessibilityNode<NamedNode>(\n                    snapshot,\n                    (node) => node.name === 'Decrease Enter a number'\n                ),\n                '`name` is the label text'\n            ).to.be.null;\n        });\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
