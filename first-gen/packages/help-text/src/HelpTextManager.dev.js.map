{
  "version": 3,
  "sources": ["HelpTextManager.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { html, TemplateResult } from '@spectrum-web-components/base';\nimport { ifDefined } from '@spectrum-web-components/base/src/directives.js';\nimport { conditionAttributeWithId } from '@spectrum-web-components/base/src/condition-attribute-with-id.js';\nimport { randomID } from '@spectrum-web-components/shared/src/random-id.js';\nimport type { HelpText } from './HelpText';\n\nexport class HelpTextManager {\n    private conditionId?: () => void;\n    private host!: HTMLElement;\n    public id!: string;\n    private mode: 'internal' | 'external' = 'internal';\n    private previousTabindex?: -1 | 0 | undefined;\n    private helpTextElement!: Element;\n    private get isInternal(): boolean {\n        return this.mode === 'internal';\n    }\n\n    constructor(\n        host: HTMLElement,\n        { mode }: { mode: 'internal' | 'external' } = { mode: 'internal' }\n    ) {\n        this.host = host;\n        this.id = `sp-help-text-${randomID()}`;\n        this.mode = mode;\n    }\n\n    public render(negative?: boolean): TemplateResult {\n        // `pass-through-help-text-${this.instanceCount}` makes the slot effectively unreachable from\n        // the outside allowing the `help-text` slot to be preferred while `negative === false`.\n        return html`\n            <div\n                id=${ifDefined(this.isInternal ? this.id : undefined)}\n                aria-live=\"assertive\"\n            >\n                <slot\n                    name=${negative\n                        ? 'negative-help-text'\n                        : `pass-through-help-text-${randomID()}`}\n                    @slotchange=${this.handleSlotchange}\n                >\n                    <slot name=\"help-text\"></slot>\n                </slot>\n            </div>\n        `;\n    }\n\n    private addId(): void {\n        const id = this.helpTextElement ? this.helpTextElement.id : this.id;\n        this.conditionId = conditionAttributeWithId(\n            this.host,\n            'aria-describedby',\n            id\n        );\n        if (this.host.hasAttribute('tabindex')) {\n            this.previousTabindex = parseFloat(\n                this.host.getAttribute('tabindex') as string\n            ) as -1 | 0;\n        }\n        this.host.tabIndex = 0;\n    }\n\n    private removeId(): void {\n        if (this.conditionId) {\n            this.conditionId();\n            delete this.conditionId;\n        }\n        if (this.helpTextElement) return;\n        if (this.previousTabindex) {\n            this.host.tabIndex = this.previousTabindex;\n        } else {\n            this.host.removeAttribute('tabindex');\n        }\n    }\n\n    private handleSlotchange = ({\n        target,\n    }: Event & { target: HTMLSlotElement }): void => {\n        this.handleHelpText(target);\n        this.handleNegativeHelpText(target);\n    };\n\n    private handleHelpText(target: HTMLSlotElement): void {\n        if (this.isInternal) return;\n\n        if (this.helpTextElement && this.helpTextElement.id === this.id) {\n            this.helpTextElement.removeAttribute('id');\n        }\n        this.removeId();\n        const assignedElements = target.assignedElements();\n        const nextHelpTextElement = assignedElements[0];\n        this.helpTextElement = nextHelpTextElement;\n        if (nextHelpTextElement) {\n            if (!nextHelpTextElement.id) {\n                nextHelpTextElement.id = this.id;\n            }\n            this.addId();\n        }\n    }\n\n    private handleNegativeHelpText(target: HTMLSlotElement): void {\n        if (target.name !== 'negative-help-text') return;\n\n        const assignedElements = target.assignedElements();\n        assignedElements.forEach(\n            (el) => ((el as unknown as HelpText).variant = 'negative')\n        );\n    }\n}\n"],
  "mappings": ";AAYA,SAAS,YAA4B;AACrC,SAAS,iBAAiB;AAC1B,SAAS,gCAAgC;AACzC,SAAS,gBAAgB;AAGlB,aAAM,gBAAgB;AAAA,EAWzB,YACI,MACA,EAAE,KAAK,IAAuC,EAAE,MAAM,WAAW,GACnE;AAVF,SAAQ,OAAgC;AAgExC,SAAQ,mBAAmB,CAAC;AAAA,MACxB;AAAA,IACJ,MAAiD;AAC7C,WAAK,eAAe,MAAM;AAC1B,WAAK,uBAAuB,MAAM;AAAA,IACtC;AA1DI,SAAK,OAAO;AACZ,SAAK,KAAK,gBAAgB,SAAS,CAAC;AACpC,SAAK,OAAO;AAAA,EAChB;AAAA,EAXA,IAAY,aAAsB;AAC9B,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EAWO,OAAO,UAAoC;AAG9C,WAAO;AAAA;AAAA,qBAEM,UAAU,KAAK,aAAa,KAAK,KAAK,MAAS,CAAC;AAAA;AAAA;AAAA;AAAA,2BAI1C,WACD,uBACA,0BAA0B,SAAS,CAAC,EAAE;AAAA,kCAC9B,KAAK,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMnD;AAAA,EAEQ,QAAc;AAClB,UAAM,KAAK,KAAK,kBAAkB,KAAK,gBAAgB,KAAK,KAAK;AACjE,SAAK,cAAc;AAAA,MACf,KAAK;AAAA,MACL;AAAA,MACA;AAAA,IACJ;AACA,QAAI,KAAK,KAAK,aAAa,UAAU,GAAG;AACpC,WAAK,mBAAmB;AAAA,QACpB,KAAK,KAAK,aAAa,UAAU;AAAA,MACrC;AAAA,IACJ;AACA,SAAK,KAAK,WAAW;AAAA,EACzB;AAAA,EAEQ,WAAiB;AACrB,QAAI,KAAK,aAAa;AAClB,WAAK,YAAY;AACjB,aAAO,KAAK;AAAA,IAChB;AACA,QAAI,KAAK,gBAAiB;AAC1B,QAAI,KAAK,kBAAkB;AACvB,WAAK,KAAK,WAAW,KAAK;AAAA,IAC9B,OAAO;AACH,WAAK,KAAK,gBAAgB,UAAU;AAAA,IACxC;AAAA,EACJ;AAAA,EASQ,eAAe,QAA+B;AAClD,QAAI,KAAK,WAAY;AAErB,QAAI,KAAK,mBAAmB,KAAK,gBAAgB,OAAO,KAAK,IAAI;AAC7D,WAAK,gBAAgB,gBAAgB,IAAI;AAAA,IAC7C;AACA,SAAK,SAAS;AACd,UAAM,mBAAmB,OAAO,iBAAiB;AACjD,UAAM,sBAAsB,iBAAiB,CAAC;AAC9C,SAAK,kBAAkB;AACvB,QAAI,qBAAqB;AACrB,UAAI,CAAC,oBAAoB,IAAI;AACzB,4BAAoB,KAAK,KAAK;AAAA,MAClC;AACA,WAAK,MAAM;AAAA,IACf;AAAA,EACJ;AAAA,EAEQ,uBAAuB,QAA+B;AAC1D,QAAI,OAAO,SAAS,qBAAsB;AAE1C,UAAM,mBAAmB,OAAO,iBAAiB;AACjD,qBAAiB;AAAA,MACb,CAAC,OAAS,GAA2B,UAAU;AAAA,IACnD;AAAA,EACJ;AACJ;",
  "names": []
}
