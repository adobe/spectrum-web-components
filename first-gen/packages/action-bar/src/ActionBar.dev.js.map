{
  "version": 3,
  "sources": ["ActionBar.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    html,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport '@spectrum-web-components/action-group/sp-action-group.js';\nimport '@spectrum-web-components/button/sp-close-button.js';\nimport '@spectrum-web-components/field-label/sp-field-label.js';\nimport actionBarStyles from './action-bar.css.js';\nimport { ifDefined } from '@spectrum-web-components/base/src/directives.js';\nimport { FocusVisiblePolyfillMixin } from '@spectrum-web-components/shared/src/focus-visible.js';\nexport const actionBarVariants = ['sticky', 'fixed'];\n\n/**\n * @element sp-action-bar\n * @slot - Content to display with the Action Bar\n */\nexport class ActionBar extends FocusVisiblePolyfillMixin(SpectrumElement) {\n    public static override get styles(): CSSResultArray {\n        return [actionBarStyles];\n    }\n\n    /**\n     * Deliver the Action Bar with additional visual emphasis.\n     */\n    @property({ type: Boolean, reflect: true })\n    public emphasized = false;\n\n    /**\n     * When `flexible` the action bar sizes itself to its content\n     * rather than a specific width.\n     *\n     * @param {Boolean} flexible\n     */\n    @property({ type: Boolean, reflect: true })\n    public flexible = false;\n\n    @property({ type: Boolean, reflect: true })\n    public open = false;\n\n    /**\n     * The variant applies specific styling when set to `sticky` or `fixed`.\n     * `variant` attribute is removed when not matching one of the above.\n     *\n     * @param {String} variant\n     */\n    @property({ type: String })\n    public set variant(variant: string) {\n        if (variant === this.variant) {\n            return;\n        }\n        if (actionBarVariants.includes(variant)) {\n            this.setAttribute('variant', variant);\n            this._variant = variant;\n            return;\n        }\n        this.removeAttribute('variant');\n        this._variant = '';\n    }\n\n    public get variant(): string {\n        return this._variant;\n    }\n\n    private _variant = '';\n\n    private handleClick(): void {\n        this.open = false;\n\n        const applyDefault = this.dispatchEvent(\n            new Event('close', {\n                bubbles: true,\n                composed: true,\n                cancelable: true,\n            })\n        );\n\n        if (!applyDefault) {\n            this.open = true;\n        }\n    }\n\n    public override render(): TemplateResult {\n        return html`\n            <sp-popover ?open=${this.open} id=\"popover\">\n                <slot name=\"override\">\n                    <sp-close-button\n                        static-color=${ifDefined(\n                            this.emphasized ? 'white' : undefined\n                        )}\n                        class=\"close-button\"\n                        label=\"Clear selection\"\n                        @click=${this.handleClick}\n                    ></sp-close-button>\n                    <sp-field-label class=\"field-label\">\n                        <slot></slot>\n                    </sp-field-label>\n                    <sp-action-group\n                        class=\"action-group\"\n                        quiet\n                        static-color=${ifDefined(\n                            this.emphasized ? 'white' : undefined\n                        )}\n                    >\n                        <slot name=\"buttons\"></slot>\n                    </sp-action-group>\n                </slot>\n            </sp-popover>\n        `;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;AAYA;AAAA,EAEI;AAAA,EACA;AAAA,OAEG;AACP,SAAS,gBAAgB;AACzB,OAAO;AACP,OAAO;AACP,OAAO;AACP,OAAO;AACP,OAAO,qBAAqB;AAC5B,SAAS,iBAAiB;AAC1B,SAAS,iCAAiC;AACnC,aAAM,oBAAoB,CAAC,UAAU,OAAO;AAM5C,aAAM,kBAAkB,0BAA0B,eAAe,EAAE;AAAA,EAAnE;AAAA;AASH,SAAO,aAAa;AASpB,SAAO,WAAW;AAGlB,SAAO,OAAO;AA0Bd,SAAQ,WAAW;AAAA;AAAA,EA9CnB,WAA2B,SAAyB;AAChD,WAAO,CAAC,eAAe;AAAA,EAC3B;AAAA,EA2BA,IAAW,QAAQ,SAAiB;AAChC,QAAI,YAAY,KAAK,SAAS;AAC1B;AAAA,IACJ;AACA,QAAI,kBAAkB,SAAS,OAAO,GAAG;AACrC,WAAK,aAAa,WAAW,OAAO;AACpC,WAAK,WAAW;AAChB;AAAA,IACJ;AACA,SAAK,gBAAgB,SAAS;AAC9B,SAAK,WAAW;AAAA,EACpB;AAAA,EAEA,IAAW,UAAkB;AACzB,WAAO,KAAK;AAAA,EAChB;AAAA,EAIQ,cAAoB;AACxB,SAAK,OAAO;AAEZ,UAAM,eAAe,KAAK;AAAA,MACtB,IAAI,MAAM,SAAS;AAAA,QACf,SAAS;AAAA,QACT,UAAU;AAAA,QACV,YAAY;AAAA,MAChB,CAAC;AAAA,IACL;AAEA,QAAI,CAAC,cAAc;AACf,WAAK,OAAO;AAAA,IAChB;AAAA,EACJ;AAAA,EAEgB,SAAyB;AACrC,WAAO;AAAA,gCACiB,KAAK,IAAI;AAAA;AAAA;AAAA,uCAGF;AAAA,MACX,KAAK,aAAa,UAAU;AAAA,IAChC,CAAC;AAAA;AAAA;AAAA,iCAGQ,KAAK,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAQV;AAAA,MACX,KAAK,aAAa,UAAU;AAAA,IAChC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOrB;AACJ;AApFW;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GARjC,UASF;AASA;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GAjBjC,UAkBF;AAGA;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GApBjC,UAqBF;AASI;AAAA,EADV,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GA7BjB,UA8BE;",
  "names": []
}
