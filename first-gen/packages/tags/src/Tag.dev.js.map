{
  "version": 3,
  "sources": ["Tag.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    html,\n    nothing,\n    PropertyValues,\n    SizedMixin,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\n\nimport '@spectrum-web-components/button/sp-clear-button.js';\n\nimport styles from './tag.css.js';\n\n/**\n * @element sp-tag\n *\n * @slot - text content for labeling the tag\n * @slot avatar - an avatar element to display within the Tag\n * @slot icon - an icon element to display within the Tag\n */\nexport class Tag extends SizedMixin(SpectrumElement, {\n    validSizes: ['s', 'm', 'l'],\n    noDefaultSize: true,\n}) {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    @property({ type: Boolean, reflect: true })\n    public deletable = false;\n\n    @property({ type: Boolean, reflect: true })\n    public disabled = false;\n\n    @property({ type: Boolean, reflect: true })\n    public readonly = false;\n\n    constructor() {\n        super();\n        this.addEventListener('focusin', this.handleFocusin);\n    }\n\n    private handleFocusin = (): void => {\n        this.addEventListener('focusout', this.handleFocusout);\n        this.addEventListener('keydown', this.handleKeydown);\n    };\n\n    private handleFocusout = (): void => {\n        this.removeEventListener('keydown', this.handleKeydown);\n        this.removeEventListener('focusout', this.handleFocusout);\n    };\n\n    private handleKeydown = (event: KeyboardEvent): void => {\n        if (!this.deletable || this.disabled) {\n            return;\n        }\n        const { code } = event;\n\n        switch (code) {\n            case 'Backspace':\n            case 'Space':\n            case 'Delete':\n                this.delete();\n            default:\n                return;\n        }\n    };\n\n    private delete(): void {\n        if (this.readonly) {\n            return;\n        }\n        const applyDefault = this.dispatchEvent(\n            new Event('delete', {\n                bubbles: true,\n                cancelable: true,\n                composed: true,\n            })\n        );\n        if (!applyDefault) {\n            return;\n        }\n        this.remove();\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <slot name=\"avatar\"></slot>\n            <slot name=\"icon\"></slot>\n            <span class=\"label\"><slot></slot></span>\n            ${this.deletable\n                ? html`\n                      <sp-clear-button\n                          class=\"clear-button\"\n                          ?disabled=${this.disabled}\n                          label=\"Remove\"\n                          size=\"s\"\n                          tabindex=\"-1\"\n                          @click=${this.delete}\n                      ></sp-clear-button>\n                  `\n                : nothing}\n        `;\n    }\n\n    protected override firstUpdated(changes: PropertyValues): void {\n        super.firstUpdated(changes);\n        if (!this.hasAttribute('role')) {\n            this.setAttribute('role', 'listitem');\n        }\n        if (this.deletable) {\n            this.setAttribute('tabindex', '0');\n        }\n    }\n\n    protected override updated(changes: PropertyValues): void {\n        super.updated(changes);\n        if (changes.has('disabled')) {\n            if (this.disabled) {\n                this.setAttribute('aria-disabled', 'true');\n            } else {\n                this.removeAttribute('aria-disabled');\n            }\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;AAYA;AAAA,EAEI;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,OAEG;AACP,SAAS,gBAAgB;AAEzB,OAAO;AAEP,OAAO,YAAY;AASZ,aAAM,YAAY,WAAW,iBAAiB;AAAA,EACjD,YAAY,CAAC,KAAK,KAAK,GAAG;AAAA,EAC1B,eAAe;AACnB,CAAC,EAAE;AAAA,EAcC,cAAc;AACV,UAAM;AATV,SAAO,YAAY;AAGnB,SAAO,WAAW;AAGlB,SAAO,WAAW;AAOlB,SAAQ,gBAAgB,MAAY;AAChC,WAAK,iBAAiB,YAAY,KAAK,cAAc;AACrD,WAAK,iBAAiB,WAAW,KAAK,aAAa;AAAA,IACvD;AAEA,SAAQ,iBAAiB,MAAY;AACjC,WAAK,oBAAoB,WAAW,KAAK,aAAa;AACtD,WAAK,oBAAoB,YAAY,KAAK,cAAc;AAAA,IAC5D;AAEA,SAAQ,gBAAgB,CAAC,UAA+B;AACpD,UAAI,CAAC,KAAK,aAAa,KAAK,UAAU;AAClC;AAAA,MACJ;AACA,YAAM,EAAE,KAAK,IAAI;AAEjB,cAAQ,MAAM;AAAA,QACV,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACD,eAAK,OAAO;AAAA,QAChB;AACI;AAAA,MACR;AAAA,IACJ;AA3BI,SAAK,iBAAiB,WAAW,KAAK,aAAa;AAAA,EACvD;AAAA,EAhBA,WAA2B,SAAyB;AAChD,WAAO,CAAC,MAAM;AAAA,EAClB;AAAA,EA0CQ,SAAe;AACnB,QAAI,KAAK,UAAU;AACf;AAAA,IACJ;AACA,UAAM,eAAe,KAAK;AAAA,MACtB,IAAI,MAAM,UAAU;AAAA,QAChB,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,UAAU;AAAA,MACd,CAAC;AAAA,IACL;AACA,QAAI,CAAC,cAAc;AACf;AAAA,IACJ;AACA,SAAK,OAAO;AAAA,EAChB;AAAA,EAEmB,SAAyB;AACxC,WAAO;AAAA;AAAA;AAAA;AAAA,cAID,KAAK,YACD;AAAA;AAAA;AAAA,sCAGoB,KAAK,QAAQ;AAAA;AAAA;AAAA;AAAA,mCAIhB,KAAK,MAAM;AAAA;AAAA,sBAG5B,OAAO;AAAA;AAAA,EAErB;AAAA,EAEmB,aAAa,SAA+B;AAC3D,UAAM,aAAa,OAAO;AAC1B,QAAI,CAAC,KAAK,aAAa,MAAM,GAAG;AAC5B,WAAK,aAAa,QAAQ,UAAU;AAAA,IACxC;AACA,QAAI,KAAK,WAAW;AAChB,WAAK,aAAa,YAAY,GAAG;AAAA,IACrC;AAAA,EACJ;AAAA,EAEmB,QAAQ,SAA+B;AACtD,UAAM,QAAQ,OAAO;AACrB,QAAI,QAAQ,IAAI,UAAU,GAAG;AACzB,UAAI,KAAK,UAAU;AACf,aAAK,aAAa,iBAAiB,MAAM;AAAA,MAC7C,OAAO;AACH,aAAK,gBAAgB,eAAe;AAAA,MACxC;AAAA,IACJ;AAAA,EACJ;AACJ;AAhGW;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GARjC,IASF;AAGA;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GAXjC,IAYF;AAGA;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GAdjC,IAeF;",
  "names": []
}
