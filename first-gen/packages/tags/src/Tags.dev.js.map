{
  "version": 3,
  "sources": ["Tags.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    html,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { queryAssignedNodes } from '@spectrum-web-components/base/src/decorators.js';\nimport { FocusVisiblePolyfillMixin } from '@spectrum-web-components/shared/src/focus-visible.js';\nimport { RovingTabindexController } from '@spectrum-web-components/reactive-controllers/src/RovingTabindex.js';\n\nimport { Tag } from './Tag.dev.js'\n\nimport styles from './tags.css.js';\n\n/**\n * @element sp-tags\n *\n * @slot - Tag elements to manage as a group\n */\nexport class Tags extends FocusVisiblePolyfillMixin(SpectrumElement) {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    @queryAssignedNodes()\n    public defaultNodes!: Node[];\n\n    public get tags(): Tag[] {\n        return this.defaultNodes.filter(\n            (node) => (node as HTMLElement) instanceof Tag\n        ) as Tag[];\n    }\n\n    rovingTabindexController = new RovingTabindexController<Tag>(this, {\n        focusInIndex: (elements: Tag[]) => {\n            return elements.findIndex((el) => {\n                return !el.disabled && el.deletable;\n            });\n        },\n        elements: () => this.tags,\n        isFocusableElement: (el: Tag) => !el.disabled && el.deletable,\n    });\n\n    constructor() {\n        super();\n        this.addEventListener('focusin', this.handleFocusin);\n    }\n\n    public override focus(): void {\n        this.rovingTabindexController.focus();\n    }\n\n    private handleFocusin = (): void => {\n        this.addEventListener('focusout', this.handleFocusout);\n        this.addEventListener('keydown', this.handleKeydown);\n    };\n\n    private handleKeydown = (event: KeyboardEvent): void => {\n        const { code } = event;\n        if (code !== 'PageUp' && code !== 'PageDown') return;\n\n        const circularIndexedElement = <T extends HTMLElement>(\n            list: T[],\n            index: number\n        ): T => list[(list.length + index) % list.length];\n        const tagsSiblings = [\n            ...(this.getRootNode() as Document).querySelectorAll<Tags>(\n                'sp-tags'\n            ),\n        ];\n        if (tagsSiblings.length < 2) {\n            return;\n        }\n        event.preventDefault();\n        const currentIndex = tagsSiblings.indexOf(this);\n        const offset = code === 'PageUp' ? -1 : 1;\n        let nextTagsIndex = currentIndex + offset;\n        let nextTags = circularIndexedElement(tagsSiblings, nextTagsIndex);\n        while (!nextTags.tags.length) {\n            nextTagsIndex += offset;\n            nextTags = circularIndexedElement(tagsSiblings, nextTagsIndex);\n        }\n        nextTags.focus();\n    };\n\n    private handleFocusout = (): void => {\n        this.removeEventListener('keydown', this.handleKeydown);\n        this.removeEventListener('focusout', this.handleFocusout);\n    };\n\n    private handleSlotchange(): void {\n        this.rovingTabindexController.clearElementCache();\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <slot @slotchange=${this.handleSlotchange}></slot>\n        `;\n    }\n\n    protected override firstUpdated(): void {\n        if (!this.hasAttribute('role')) {\n            this.setAttribute('role', 'list');\n        }\n        if (!this.hasAttribute('aria-label')) {\n            this.setAttribute('aria-label', 'Tags');\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;AAYA;AAAA,EAEI;AAAA,EACA;AAAA,OAEG;AACP,SAAS,0BAA0B;AACnC,SAAS,iCAAiC;AAC1C,SAAS,gCAAgC;AAEzC,SAAS,WAAW;AAEpB,OAAO,YAAY;AAOZ,aAAM,aAAa,0BAA0B,eAAe,EAAE;AAAA,EAwBjE,cAAc;AACV,UAAM;AAXV,oCAA2B,IAAI,yBAA8B,MAAM;AAAA,MAC/D,cAAc,CAAC,aAAoB;AAC/B,eAAO,SAAS,UAAU,CAAC,OAAO;AAC9B,iBAAO,CAAC,GAAG,YAAY,GAAG;AAAA,QAC9B,CAAC;AAAA,MACL;AAAA,MACA,UAAU,MAAM,KAAK;AAAA,MACrB,oBAAoB,CAAC,OAAY,CAAC,GAAG,YAAY,GAAG;AAAA,IACxD,CAAC;AAWD,SAAQ,gBAAgB,MAAY;AAChC,WAAK,iBAAiB,YAAY,KAAK,cAAc;AACrD,WAAK,iBAAiB,WAAW,KAAK,aAAa;AAAA,IACvD;AAEA,SAAQ,gBAAgB,CAAC,UAA+B;AACpD,YAAM,EAAE,KAAK,IAAI;AACjB,UAAI,SAAS,YAAY,SAAS,WAAY;AAE9C,YAAM,yBAAyB,CAC3B,MACA,UACI,MAAM,KAAK,SAAS,SAAS,KAAK,MAAM;AAChD,YAAM,eAAe;AAAA,QACjB,GAAI,KAAK,YAAY,EAAe;AAAA,UAChC;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,aAAa,SAAS,GAAG;AACzB;AAAA,MACJ;AACA,YAAM,eAAe;AACrB,YAAM,eAAe,aAAa,QAAQ,IAAI;AAC9C,YAAM,SAAS,SAAS,WAAW,KAAK;AACxC,UAAI,gBAAgB,eAAe;AACnC,UAAI,WAAW,uBAAuB,cAAc,aAAa;AACjE,aAAO,CAAC,SAAS,KAAK,QAAQ;AAC1B,yBAAiB;AACjB,mBAAW,uBAAuB,cAAc,aAAa;AAAA,MACjE;AACA,eAAS,MAAM;AAAA,IACnB;AAEA,SAAQ,iBAAiB,MAAY;AACjC,WAAK,oBAAoB,WAAW,KAAK,aAAa;AACtD,WAAK,oBAAoB,YAAY,KAAK,cAAc;AAAA,IAC5D;AA3CI,SAAK,iBAAiB,WAAW,KAAK,aAAa;AAAA,EACvD;AAAA,EA1BA,WAA2B,SAAyB;AAChD,WAAO,CAAC,MAAM;AAAA,EAClB;AAAA,EAKA,IAAW,OAAc;AACrB,WAAO,KAAK,aAAa;AAAA,MACrB,CAAC,SAAU,gBAAgC;AAAA,IAC/C;AAAA,EACJ;AAAA,EAiBgB,QAAc;AAC1B,SAAK,yBAAyB,MAAM;AAAA,EACxC;AAAA,EAwCQ,mBAAyB;AAC7B,SAAK,yBAAyB,kBAAkB;AAAA,EACpD;AAAA,EAEmB,SAAyB;AACxC,WAAO;AAAA,gCACiB,KAAK,gBAAgB;AAAA;AAAA,EAEjD;AAAA,EAEmB,eAAqB;AACpC,QAAI,CAAC,KAAK,aAAa,MAAM,GAAG;AAC5B,WAAK,aAAa,QAAQ,MAAM;AAAA,IACpC;AACA,QAAI,CAAC,KAAK,aAAa,YAAY,GAAG;AAClC,WAAK,aAAa,cAAc,MAAM;AAAA,IAC1C;AAAA,EACJ;AACJ;AAnFW;AAAA,EADN,mBAAmB;AAAA,GALX,KAMF;",
  "names": []
}
