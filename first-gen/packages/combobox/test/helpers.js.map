{
  "version": 3,
  "sources": ["helpers.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { expect, fixture } from '@open-wc/testing';\nimport { html } from '@open-wc/testing';\nimport { ComboboxOption } from '@spectrum-web-components/combobox';\nimport '@spectrum-web-components/combobox/sp-combobox.js';\nimport { MenuItem } from '@spectrum-web-components/menu';\nimport { countries, fruits } from '../stories/index.js';\n\nexport type TestableCombobox = HTMLElement & {\n    activeDescendant: ComboboxOption;\n    autocomplete: 'none' | 'list';\n    availableOptions: ComboboxOption[];\n    focused: boolean;\n    focusElement: HTMLInputElement;\n    open: boolean;\n    optionEls: MenuItem[];\n    options: ComboboxOption[];\n    shadowRoot: ShadowRoot;\n    value: string;\n    pending: boolean;\n};\n\nexport type AccessibleNamedNode = {\n    description: string;\n    name: string;\n    role: string;\n    value?: string;\n};\n\nexport const comboboxFixture = async (): Promise<TestableCombobox> => {\n    const el = await fixture<TestableCombobox>(html`\n        <sp-combobox\n            .autocomplete=${'list'}\n            label=\"Combobox\"\n            .options=${fruits}\n        >\n            Combobox\n        </sp-combobox>\n    `);\n\n    return el;\n};\nexport const longComboboxFixture = async (): Promise<TestableCombobox> => {\n    const el = await fixture<TestableCombobox>(html`\n        <sp-combobox\n            .autocomplete=${'list'}\n            label=\"Combobox\"\n            .options=${countries}\n        >\n            Combobox\n        </sp-combobox>\n    `);\n\n    return el;\n};\nexport const withDisabledItemsFixture = async (): Promise<TestableCombobox> => {\n    const countriesWithDisabledItems = countries.map((country) => ({\n        ...country,\n        disabled: ['Albania', 'Azerbaijan', 'Solomon Islands'].includes(\n            country.itemText\n        ),\n    }));\n    const el = await fixture<TestableCombobox>(html`\n        <sp-combobox\n            .autocomplete=${'list'}\n            label=\"Combobox\"\n            .options=${countriesWithDisabledItems}\n        >\n            Combobox\n        </sp-combobox>\n    `);\n    return el;\n};\n\nexport const testActiveElement = (\n    el: TestableCombobox,\n    testId: string\n): void => {\n    expect(el.activeDescendant?.value, 'active descendant').to.equal(testId);\n    const activeElement = el.shadowRoot.querySelector(\n        `#${el.activeDescendant.value}`\n    ) as HTMLElement;\n    expect(\n        activeElement.getAttribute('aria-selected'),\n        'aria-selected'\n    ).to.equal('true');\n};\n"],
  "mappings": ";AAYA,SAAS,QAAQ,eAAe;AAChC,SAAS,YAAY;AAErB,OAAO;AAEP,SAAS,WAAW,cAAc;AAuB3B,aAAM,kBAAkB,YAAuC;AAClE,QAAM,KAAK,MAAM,QAA0B;AAAA;AAAA,4BAEnB,MAAM;AAAA;AAAA,uBAEX,MAAM;AAAA;AAAA;AAAA;AAAA,KAIxB;AAED,SAAO;AACX;AACO,aAAM,sBAAsB,YAAuC;AACtE,QAAM,KAAK,MAAM,QAA0B;AAAA;AAAA,4BAEnB,MAAM;AAAA;AAAA,uBAEX,SAAS;AAAA;AAAA;AAAA;AAAA,KAI3B;AAED,SAAO;AACX;AACO,aAAM,2BAA2B,YAAuC;AAC3E,QAAM,6BAA6B,UAAU,IAAI,CAAC,aAAa;AAAA,IAC3D,GAAG;AAAA,IACH,UAAU,CAAC,WAAW,cAAc,iBAAiB,EAAE;AAAA,MACnD,QAAQ;AAAA,IACZ;AAAA,EACJ,EAAE;AACF,QAAM,KAAK,MAAM,QAA0B;AAAA;AAAA,4BAEnB,MAAM;AAAA;AAAA,uBAEX,0BAA0B;AAAA;AAAA;AAAA;AAAA,KAI5C;AACD,SAAO;AACX;AAEO,aAAM,oBAAoB,CAC7B,IACA,WACO;AAxFX;AAyFI,UAAO,QAAG,qBAAH,mBAAqB,OAAO,mBAAmB,EAAE,GAAG,MAAM,MAAM;AACvE,QAAM,gBAAgB,GAAG,WAAW;AAAA,IAChC,IAAI,GAAG,iBAAiB,KAAK;AAAA,EACjC;AACA;AAAA,IACI,cAAc,aAAa,eAAe;AAAA,IAC1C;AAAA,EACJ,EAAE,GAAG,MAAM,MAAM;AACrB;",
  "names": []
}
