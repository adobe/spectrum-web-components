{
  "version": 3,
  "sources": ["Combobox.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    html,\n    nothing,\n    PropertyValues,\n    type SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n    state,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport {\n    ifDefined,\n    live,\n    repeat,\n} from '@spectrum-web-components/base/src/directives.js';\nimport '@spectrum-web-components/overlay/sp-overlay.js';\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-chevron100.js';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport '@spectrum-web-components/menu/sp-menu.js';\nimport '@spectrum-web-components/menu/sp-menu-item.js';\nimport { PendingStateController } from '@spectrum-web-components/reactive-controllers/src/PendingState.js';\nimport '@spectrum-web-components/picker-button/sp-picker-button.js';\nimport { Textfield } from '@spectrum-web-components/textfield';\nimport type { Tooltip } from '@spectrum-web-components/tooltip';\n\nimport styles from './combobox.css.js';\nimport chevronStyles from '@spectrum-web-components/icon/src/spectrum-icon-chevron.css.js';\nimport { Menu, MenuItem } from '@spectrum-web-components/menu';\n\nexport type ComboboxOption = {\n    value: string;\n    itemText: string;\n    disabled?: boolean;\n};\n\n/**\n * @element sp-combobox\n * @slot - Supply Menu Item elements to the default slot in order to populate the available options\n * @slot tooltip - Tooltip to to be applied to the the Picker Button\n */\nexport class Combobox extends Textfield {\n    public static override get styles(): CSSResultArray {\n        return [...super.styles, styles, chevronStyles];\n    }\n\n    /**\n     * The currently active ComboboxItem descendant, when available.\n     */\n    @state()\n    private activeDescendant?: ComboboxOption | MenuItem;\n\n    @property({ type: String })\n    public override autocomplete: 'list' | 'none' = 'none';\n\n    @state()\n    private availableOptions: (ComboboxOption | MenuItem)[] = [];\n\n    /**\n     * Whether the listbox is visible.\n     **/\n    @property({ type: Boolean, reflect: true })\n    public open = false;\n\n    /** Whether the items are currently loading. */\n    @property({ type: Boolean, reflect: true })\n    public pending = false;\n\n    /** Defines a string value that labels the Combobox while it is in pending state. */\n    @property({ type: String, attribute: 'pending-label' })\n    public pendingLabel = 'Pending';\n\n    public pendingStateController: PendingStateController<this>;\n\n    /**\n     * Initializes the `PendingStateController` for the Combobox component.\n     * When the pending state changes to `true`, the `open` property of the Combobox is set to `false`.\n     */\n    constructor() {\n        super();\n        this.pendingStateController = new PendingStateController(this);\n    }\n\n    @query('slot:not([name])')\n    private optionSlot!: HTMLSlotElement;\n\n    @state()\n    overlayOpen = false;\n\n    @query('#input')\n    private input!: HTMLInputElement;\n\n    private itemValue = '';\n\n    /**\n     * An array of options to present in the Menu provided while typing into the input\n     */\n    @property({ type: Array })\n    public options?: (ComboboxOption | MenuItem)[];\n\n    /**\n     * The array of the children of the combobox, ie ComboboxItems.\n     **/\n    @state()\n    protected optionEls: MenuItem[] = [];\n\n    private tooltipEl?: Tooltip;\n\n    private resizeObserver?: ResizeObserver | undefined;\n\n    @state()\n    private fieldWidth = 0;\n\n    public override focus(): void {\n        this.focusElement.focus();\n    }\n\n    public override click(): void {\n        this.focus();\n        this.focusElement.click();\n    }\n\n    private scrollToActiveDescendant(): void {\n        if (!this.activeDescendant) {\n            return;\n        }\n        const activeEl = this.shadowRoot.getElementById(\n            this.activeDescendant.value\n        );\n        if (activeEl) {\n            activeEl.scrollIntoView({ block: 'nearest' });\n        }\n    }\n\n    public handleComboboxKeydown(event: KeyboardEvent): void {\n        if (this.readonly || this.pending) {\n            return;\n        }\n        if (event.altKey && event.code === 'ArrowDown') {\n            this.open = true;\n        } else if (event.code === 'ArrowDown') {\n            event.preventDefault();\n            this.open = true;\n            this.activateNextDescendant();\n            this.scrollToActiveDescendant();\n        } else if (event.code === 'ArrowUp') {\n            event.preventDefault();\n            this.open = true;\n            this.activatePreviousDescendant();\n            this.scrollToActiveDescendant();\n        } else if (event.code === 'Escape') {\n            if (!this.open) {\n                this.value = '';\n            }\n            this.open = false;\n        } else if (event.code === 'Enter') {\n            this.selectDescendant();\n            this.open = false;\n        } else if (event.code === 'Home') {\n            this.focusElement.setSelectionRange(0, 0);\n            this.activeDescendant = undefined;\n        } else if (event.code === 'End') {\n            const { length } = this.value;\n            this.focusElement.setSelectionRange(length, length);\n            this.activeDescendant = undefined;\n        } else if (event.code === 'ArrowLeft') {\n            this.activeDescendant = undefined;\n        } else if (event.code === 'ArrowRight') {\n            this.activeDescendant = undefined;\n        }\n    }\n\n    /**\n     * Convert the flattened array of assigned elements of `slot[name='option']` to\n     * an array of `ComboboxOptions` for use in rendering options in the shadow DOM.s\n     **/\n    public handleSlotchange(): void {\n        this.setOptionsFromSlottedItems();\n        this.itemObserver.disconnect();\n        this.optionEls.map((item) => {\n            this.itemObserver.observe(item, {\n                attributes: true,\n                attributeFilter: ['id'],\n                childList: true,\n            });\n        });\n    }\n\n    protected handleTooltipSlotchange(\n        event: Event & { target: HTMLSlotElement }\n    ): void {\n        this.tooltipEl = event.target.assignedElements()[0] as\n            | Tooltip\n            | undefined;\n    }\n\n    public setOptionsFromSlottedItems(): void {\n        const elements = this.optionSlot.assignedElements({\n            flatten: true,\n        }) as MenuItem[];\n        // Element data\n        this.optionEls = elements;\n    }\n\n    public activateNextDescendant(): void {\n        const activeIndex = !this.activeDescendant\n            ? -1\n            : this.availableOptions.indexOf(this.activeDescendant);\n        let nextActiveIndex = activeIndex;\n        do {\n            nextActiveIndex =\n                (this.availableOptions.length + nextActiveIndex + 1) %\n                this.availableOptions.length;\n            // Break if we've checked all options to avoid infinite loop\n            if (nextActiveIndex === activeIndex) break;\n        } while (this.availableOptions[nextActiveIndex].disabled);\n\n        if (!this.availableOptions[nextActiveIndex].disabled) {\n            this.activeDescendant = this.availableOptions[nextActiveIndex];\n        }\n        this.optionEls.forEach((el) =>\n            el.setAttribute(\n                'aria-selected',\n                el.value === this.activeDescendant?.value ? 'true' : 'false'\n            )\n        );\n    }\n\n    public activatePreviousDescendant(): void {\n        const activeIndex = !this.activeDescendant\n            ? 0\n            : this.availableOptions.indexOf(this.activeDescendant);\n        let previousActiveIndex = activeIndex;\n        do {\n            previousActiveIndex =\n                (this.availableOptions.length + previousActiveIndex - 1) %\n                this.availableOptions.length;\n            // Break if we've checked all options to avoid infinite loop\n            if (previousActiveIndex === activeIndex) break;\n        } while (this.availableOptions[previousActiveIndex].disabled);\n\n        if (!this.availableOptions[previousActiveIndex].disabled) {\n            this.activeDescendant = this.availableOptions[previousActiveIndex];\n        }\n        this.optionEls.forEach((el) =>\n            el.setAttribute(\n                'aria-selected',\n                el.value === this.activeDescendant?.value ? 'true' : 'false'\n            )\n        );\n    }\n\n    public selectDescendant(): void {\n        if (!this.activeDescendant) {\n            return;\n        }\n\n        const activeEl = this.shadowRoot.getElementById(\n            this.activeDescendant.value\n        );\n        if (activeEl) {\n            activeEl.click();\n        }\n    }\n\n    public filterAvailableOptions(): void {\n        if (this.autocomplete === 'none' || this.pending) {\n            return;\n        }\n        const valueLowerCase = this.value.toLowerCase();\n        this.availableOptions = (this.options || this.optionEls).filter(\n            (descendant) => {\n                const itemTextLowerCase = descendant.itemText.toLowerCase();\n                return itemTextLowerCase.startsWith(valueLowerCase);\n            }\n        );\n    }\n\n    public override handleInput(event: Event): void {\n        super.handleInput(event);\n        if (!this.pending) {\n            this.activeDescendant = undefined;\n            this.open = true;\n        }\n    }\n\n    protected handleMenuChange(event: PointerEvent & { target: Menu }): void {\n        const { target } = event;\n        const selected = (this.options || this.optionEls).find(\n            (item) => item.value === target?.value\n        );\n        this.value = selected?.itemText || '';\n        event.preventDefault();\n        this.open = false;\n        this._returnItems();\n        this.focus();\n    }\n\n    public handleClosed(): void {\n        this.open = false;\n        this.overlayOpen = false;\n    }\n\n    public handleOpened(): void {\n        // Do stuff here?\n    }\n\n    public toggleOpen(): void {\n        if (this.readonly || this.pending) {\n            this.open = false;\n            return;\n        }\n        this.open = !this.open;\n        this.inputElement.focus();\n    }\n\n    protected override shouldUpdate(\n        changed: PropertyValues<this & { optionEls: MenuItem[] }>\n    ): boolean {\n        if (changed.has('open')) {\n            if (!this.open) {\n                this.activeDescendant = undefined;\n            } else {\n                this.overlayOpen = true;\n            }\n        }\n        if (changed.has('value')) {\n            this.filterAvailableOptions();\n            this.itemValue =\n                this.availableOptions.find(\n                    (option) => option.itemText === this.value\n                )?.value ?? '';\n        }\n        return super.shouldUpdate(changed);\n    }\n\n    protected override onBlur(event: FocusEvent): void {\n        if (\n            event.relatedTarget &&\n            (this.contains(event.relatedTarget as HTMLElement) ||\n                this.shadowRoot.contains(event.relatedTarget as HTMLElement))\n        ) {\n            return;\n        }\n        super.onBlur(event);\n    }\n\n    protected renderAppliedLabel(): TemplateResult {\n        /**\n         * appliedLabel corresponds to `<label for=\"...\">`, which is overriden\n         * if user adds the `label` attribute manually to `<sp-combobox>`.\n         **/\n        const appliedLabel = this.label || this.appliedLabel;\n\n        return html`\n            ${this.pending\n                ? html`\n                      <span\n                          aria-hidden=\"true\"\n                          class=\"visually-hidden\"\n                          id=\"pending-label\"\n                      >\n                          ${this.pendingLabel}\n                      </span>\n                  `\n                : nothing}\n            ${this.value\n                ? html`\n                      <span\n                          aria-hidden=\"true\"\n                          class=\"visually-hidden\"\n                          id=\"applied-label\"\n                      >\n                          ${appliedLabel}\n                      </span>\n                      <slot name=\"label\" id=\"label\">\n                          <span class=\"visually-hidden\" aria-hidden=\"true\">\n                              ${this.value}\n                          </span>\n                      </slot>\n                  `\n                : html`\n                      <span hidden id=\"applied-label\">${appliedLabel}</span>\n                  `}\n        `;\n    }\n\n    protected renderLoader(): TemplateResult {\n        import(\n            '@spectrum-web-components/progress-circle/sp-progress-circle.js'\n        );\n        return html`\n            <sp-progress-circle\n                size=\"s\"\n                indeterminate\n                aria-hidden=\"true\"\n                class=\"progress-circle\"\n            ></sp-progress-circle>\n        `;\n    }\n\n    protected override renderField(): TemplateResult {\n        return html`\n            ${this.renderStateIcons()}\n            <input\n                aria-activedescendant=${ifDefined(\n                    this.activeDescendant\n                        ? `${this.activeDescendant.value}`\n                        : undefined\n                )}\n                aria-autocomplete=${ifDefined(\n                    this.autocomplete as 'list' | 'none'\n                )}\n                aria-controls=${ifDefined(\n                    this.open ? 'listbox-menu' : undefined\n                )}\n                aria-describedby=\"${this.helpTextId} tooltip\"\n                aria-expanded=\"${this.open ? 'true' : 'false'}\"\n                aria-label=${ifDefined(this.label || this.appliedLabel)}\n                aria-labelledby=\"pending-label applied-label label\"\n                aria-invalid=${ifDefined(this.invalid || undefined)}\n                autocomplete=\"off\"\n                @click=${this.toggleOpen}\n                @keydown=${this.handleComboboxKeydown}\n                id=\"input\"\n                class=\"input\"\n                role=\"combobox\"\n                type=\"text\"\n                .value=${live(this.displayValue)}\n                tabindex=\"0\"\n                @sp-closed=${this.handleClosed}\n                @sp-opened=${this.handleOpened}\n                maxlength=${ifDefined(\n                    this.maxlength > -1 ? this.maxlength : undefined\n                )}\n                minlength=${ifDefined(\n                    this.minlength > -1 ? this.minlength : undefined\n                )}\n                pattern=${ifDefined(this.pattern)}\n                @change=${this.handleChange}\n                @input=${this.handleInput}\n                @focus=${this.onFocus}\n                @blur=${this.onBlur}\n                ?disabled=${this.disabled}\n                ?required=${this.required}\n                ?readonly=${this.readonly}\n            />\n            ${this.pendingStateController.renderPendingState()}\n        `;\n    }\n\n    protected override render(): TemplateResult {\n        if (this.tooltipEl) {\n            this.tooltipEl.disabled = this.open;\n        }\n\n        return html`\n            ${super.render()}\n            <sp-picker-button\n                aria-controls=\"listbox-menu\"\n                aria-describedby=\"${this.helpTextId} tooltip\"\n                aria-expanded=${this.open ? 'true' : 'false'}\n                aria-label=${ifDefined(this.label || this.appliedLabel)}\n                aria-labelledby=\"applied-label label\"\n                @click=${this.toggleOpen}\n                tabindex=\"-1\"\n                class=\"button ${this.focused\n                    ? 'focus-visible is-keyboardFocused'\n                    : ''}\"\n                ?disabled=${this.disabled}\n                ?focused=${this.focused}\n                ?quiet=${this.quiet}\n                size=${this.size}\n            ></sp-picker-button>\n            <sp-overlay\n                ?open=${this.open}\n                .triggerElement=${this.input}\n                offset=\"0\"\n                placement=\"bottom-start\"\n                .receivesFocus=${'false'}\n                role=\"presentation\"\n            >\n                <sp-popover\n                    id=\"listbox\"\n                    ?open=${this.open}\n                    role=\"presentation\"\n                    ?hidden=${this.availableOptions.length === 0}\n                >\n                    <sp-menu\n                        @change=${this.handleMenuChange}\n                        tabindex=\"-1\"\n                        aria-labelledby=\"label applied-label\"\n                        aria-label=${ifDefined(this.label || this.appliedLabel)}\n                        id=\"listbox-menu\"\n                        role=\"listbox\"\n                        selects=${ifDefined(\n                            this.autocomplete === 'none' ? 'single' : undefined\n                        )}\n                        .selected=${this.autocomplete === 'none' &&\n                        this.itemValue\n                            ? [this.itemValue]\n                            : []}\n                        style=\"min-width: ${this.fieldWidth}px;\"\n                        size=${this.size}\n                    >\n                        ${this.overlayOpen\n                            ? repeat(\n                                  this.availableOptions,\n                                  (option) => option.value,\n                                  (option) => {\n                                      return html`\n                                          <sp-menu-item\n                                              id=\"${option.value}\"\n                                              ?focused=${this.activeDescendant\n                                                  ?.value === option.value}\n                                              aria-selected=${this\n                                                  .activeDescendant?.value ===\n                                              option.value\n                                                  ? 'true'\n                                                  : 'false'}\n                                              .value=${option.value}\n                                              .selected=${option.value ===\n                                              this.itemValue}\n                                              ?disabled=${option.disabled}\n                                          >\n                                              ${option.itemText}\n                                          </sp-menu-item>\n                                      `;\n                                  }\n                              )\n                            : html``}\n                        <slot\n                            hidden\n                            @slotchange=${this.handleSlotchange}\n                        ></slot>\n                    </sp-menu>\n                </sp-popover>\n            </sp-overlay>\n            ${this.renderAppliedLabel()}\n            <slot\n                aria-hidden=\"true\"\n                name=\"tooltip\"\n                id=\"tooltip\"\n                @slotchange=${this.handleTooltipSlotchange}\n            ></slot>\n        `;\n    }\n\n    applyFocusElementLabel = (value?: string): void => {\n        this.appliedLabel = value;\n    };\n\n    protected override firstUpdated(\n        changed: PropertyValues<this & { optionEls: MenuItem[] }>\n    ): void {\n        super.firstUpdated(changed);\n        this.addEventListener('focusout', (event: FocusEvent) => {\n            const isMenuItem =\n                event.relatedTarget &&\n                this.contains(event.relatedTarget as Node);\n            if (event.target === this && !isMenuItem) {\n                this.focused = false;\n            }\n        });\n        this.resizeObserver = new ResizeObserver(\n            (entries: ResizeObserverEntry[]) => {\n                this.fieldWidth = entries[0].borderBoxSize[0].inlineSize;\n            }\n        );\n\n        this.resizeObserver.observe(this);\n    }\n\n    private _returnItems = (): void => {\n        return;\n    };\n\n    protected async manageListOverlay(): Promise<void> {\n        if (this.open) {\n            this.focused = true;\n            this.focus();\n        }\n    }\n\n    protected override updated(\n        changed: PropertyValues<\n            this & { optionEls: MenuItem[]; activeDescendant: MenuItem }\n        >\n    ): void {\n        if (changed.has('open') && !this.pending) {\n            this.manageListOverlay();\n        }\n        if (!this.focused && this.open) {\n            this.open = false;\n        }\n        if (changed.has('pending') && this.pending) {\n            this.open = false;\n        }\n        if (changed.has('activeDescendant')) {\n            const previouslyActiveDescendant = changed.get(\n                'activeDescendant'\n            ) as unknown as MenuItem;\n            if (previouslyActiveDescendant) {\n                previouslyActiveDescendant.focused = false;\n            }\n            if (\n                this.activeDescendant &&\n                typeof (this.activeDescendant as MenuItem).focused !==\n                    'undefined'\n            ) {\n                (this.activeDescendant as MenuItem).focused = true;\n            }\n        }\n        if (changed.has('options') || changed.has('optionEls')) {\n            // if all options are disabled, set combobox to disabled\n            if (this.options?.every((option) => option.disabled)) {\n                this.disabled = true;\n            }\n\n            this.availableOptions = this.options || this.optionEls;\n        }\n    }\n\n    protected override async getUpdateComplete(): Promise<boolean> {\n        const complete = await super.getUpdateComplete();\n        const list = this.shadowRoot.querySelector(\n            '#listbox'\n        ) as HTMLUListElement;\n        if (list) {\n            const descendants = [...list.children] as SpectrumElement[];\n            await Promise.all(\n                descendants.map((descendant) => descendant.updateComplete)\n            );\n        }\n        return complete;\n    }\n\n    public override connectedCallback(): void {\n        super.connectedCallback();\n        if (!this.itemObserver) {\n            this.itemObserver = new MutationObserver(\n                this.setOptionsFromSlottedItems.bind(this)\n            );\n        }\n    }\n\n    public override disconnectedCallback(): void {\n        this.itemObserver.disconnect();\n        this.open = false;\n        this.resizeObserver?.disconnect();\n        this.resizeObserver = undefined;\n        super.disconnectedCallback();\n    }\n\n    private itemObserver!: MutationObserver;\n}\n"],
  "mappings": "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",
  "names": []
}
