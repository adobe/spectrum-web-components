{
  "version": 3,
  "sources": ["Combobox.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    html,\n    nothing,\n    PropertyValues,\n    type SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n    state,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport {\n    ifDefined,\n    live,\n    repeat,\n} from '@spectrum-web-components/base/src/directives.js';\nimport '@spectrum-web-components/overlay/sp-overlay.js';\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-chevron100.js';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport '@spectrum-web-components/menu/sp-menu.js';\nimport '@spectrum-web-components/menu/sp-menu-item.js';\nimport { PendingStateController } from '@spectrum-web-components/reactive-controllers/src/PendingState.js';\nimport '@spectrum-web-components/picker-button/sp-picker-button.js';\nimport { Textfield } from '@spectrum-web-components/textfield';\nimport type { Tooltip } from '@spectrum-web-components/tooltip';\n\nimport styles from './combobox.css.js';\nimport chevronStyles from '@spectrum-web-components/icon/src/spectrum-icon-chevron.css.js';\nimport { Menu, MenuItem } from '@spectrum-web-components/menu';\n\nexport type ComboboxOption = {\n    value: string;\n    itemText: string;\n    disabled?: boolean;\n};\n\n/**\n * @element sp-combobox\n * @slot - Supply Menu Item elements to the default slot in order to populate the available options\n * @slot tooltip - Tooltip to to be applied to the the Picker Button\n */\nexport class Combobox extends Textfield {\n    public static override get styles(): CSSResultArray {\n        return [...super.styles, styles, chevronStyles];\n    }\n\n    /**\n     * The currently active ComboboxItem descendant, when available.\n     */\n    @state()\n    private activeDescendant?: ComboboxOption | MenuItem;\n\n    @property({ type: String })\n    public override autocomplete: 'list' | 'none' = 'none';\n\n    @state()\n    private availableOptions: (ComboboxOption | MenuItem)[] = [];\n\n    /**\n     * Whether the listbox is visible.\n     **/\n    @property({ type: Boolean, reflect: true })\n    public open = false;\n\n    /** Whether the items are currently loading. */\n    @property({ type: Boolean, reflect: true })\n    public pending = false;\n\n    /** Defines a string value that labels the Combobox while it is in pending state. */\n    @property({ type: String, attribute: 'pending-label' })\n    public pendingLabel = 'Pending';\n\n    public pendingStateController: PendingStateController<this>;\n\n    /**\n     * Initializes the `PendingStateController` for the Combobox component.\n     * When the pending state changes to `true`, the `open` property of the Combobox is set to `false`.\n     */\n    constructor() {\n        super();\n        this.pendingStateController = new PendingStateController(this);\n    }\n\n    @query('slot:not([name])')\n    private optionSlot!: HTMLSlotElement;\n\n    @state()\n    overlayOpen = false;\n\n    @query('#input')\n    private input!: HTMLInputElement;\n\n    private itemValue = '';\n\n    /**\n     * An array of options to present in the Menu provided while typing into the input\n     */\n    @property({ type: Array })\n    public options?: (ComboboxOption | MenuItem)[];\n\n    /**\n     * The array of the children of the combobox, ie ComboboxItems.\n     **/\n    @state()\n    protected optionEls: MenuItem[] = [];\n\n    private tooltipEl?: Tooltip;\n\n    private resizeObserver?: ResizeObserver | undefined;\n\n    @state()\n    private fieldWidth = 0;\n\n    public override focus(): void {\n        this.focusElement.focus();\n    }\n\n    public override click(): void {\n        this.focus();\n        this.focusElement.click();\n    }\n\n    private scrollToActiveDescendant(): void {\n        if (!this.activeDescendant) {\n            return;\n        }\n        const activeEl = this.shadowRoot.getElementById(\n            this.activeDescendant.value\n        );\n        if (activeEl) {\n            activeEl.scrollIntoView({ block: 'nearest' });\n        }\n    }\n\n    public handleComboboxKeydown(event: KeyboardEvent): void {\n        if (this.readonly || this.pending) {\n            return;\n        }\n        if (event.altKey && event.code === 'ArrowDown') {\n            this.open = true;\n        } else if (event.code === 'ArrowDown') {\n            event.preventDefault();\n            this.open = true;\n            this.activateNextDescendant();\n            this.scrollToActiveDescendant();\n        } else if (event.code === 'ArrowUp') {\n            event.preventDefault();\n            this.open = true;\n            this.activatePreviousDescendant();\n            this.scrollToActiveDescendant();\n        } else if (event.code === 'Escape') {\n            if (!this.open) {\n                this.value = '';\n            }\n            this.open = false;\n        } else if (event.code === 'Enter') {\n            this.selectDescendant();\n            this.open = false;\n        } else if (event.code === 'Home') {\n            this.focusElement.setSelectionRange(0, 0);\n            this.activeDescendant = undefined;\n        } else if (event.code === 'End') {\n            const { length } = this.value;\n            this.focusElement.setSelectionRange(length, length);\n            this.activeDescendant = undefined;\n        } else if (event.code === 'ArrowLeft') {\n            this.activeDescendant = undefined;\n        } else if (event.code === 'ArrowRight') {\n            this.activeDescendant = undefined;\n        }\n    }\n\n    /**\n     * Convert the flattened array of assigned elements of `slot[name='option']` to\n     * an array of `ComboboxOptions` for use in rendering options in the shadow DOM.s\n     **/\n    public handleSlotchange(): void {\n        this.setOptionsFromSlottedItems();\n        this.itemObserver.disconnect();\n        this.optionEls.map((item) => {\n            this.itemObserver.observe(item, {\n                attributes: true,\n                attributeFilter: ['id'],\n                childList: true,\n            });\n        });\n    }\n\n    protected handleTooltipSlotchange(\n        event: Event & { target: HTMLSlotElement }\n    ): void {\n        this.tooltipEl = event.target.assignedElements()[0] as\n            | Tooltip\n            | undefined;\n    }\n\n    public setOptionsFromSlottedItems(): void {\n        const elements = this.optionSlot.assignedElements({\n            flatten: true,\n        }) as MenuItem[];\n        // Element data\n        this.optionEls = elements;\n    }\n\n    public activateNextDescendant(): void {\n        const activeIndex = !this.activeDescendant\n            ? -1\n            : this.availableOptions.indexOf(this.activeDescendant);\n        let nextActiveIndex = activeIndex;\n        do {\n            nextActiveIndex =\n                (this.availableOptions.length + nextActiveIndex + 1) %\n                this.availableOptions.length;\n            // Break if we've checked all options to avoid infinite loop\n            if (nextActiveIndex === activeIndex) break;\n        } while (this.availableOptions[nextActiveIndex].disabled);\n\n        if (!this.availableOptions[nextActiveIndex].disabled) {\n            this.activeDescendant = this.availableOptions[nextActiveIndex];\n        }\n        this.optionEls.forEach((el) =>\n            el.setAttribute(\n                'aria-selected',\n                el.value === this.activeDescendant?.value ? 'true' : 'false'\n            )\n        );\n    }\n\n    public activatePreviousDescendant(): void {\n        const activeIndex = !this.activeDescendant\n            ? 0\n            : this.availableOptions.indexOf(this.activeDescendant);\n        let previousActiveIndex = activeIndex;\n        do {\n            previousActiveIndex =\n                (this.availableOptions.length + previousActiveIndex - 1) %\n                this.availableOptions.length;\n            // Break if we've checked all options to avoid infinite loop\n            if (previousActiveIndex === activeIndex) break;\n        } while (this.availableOptions[previousActiveIndex].disabled);\n\n        if (!this.availableOptions[previousActiveIndex].disabled) {\n            this.activeDescendant = this.availableOptions[previousActiveIndex];\n        }\n        this.optionEls.forEach((el) =>\n            el.setAttribute(\n                'aria-selected',\n                el.value === this.activeDescendant?.value ? 'true' : 'false'\n            )\n        );\n    }\n\n    public selectDescendant(): void {\n        if (!this.activeDescendant) {\n            return;\n        }\n\n        const activeEl = this.shadowRoot.getElementById(\n            this.activeDescendant.value\n        );\n        if (activeEl) {\n            activeEl.click();\n        }\n    }\n\n    public filterAvailableOptions(): void {\n        if (this.autocomplete === 'none' || this.pending) {\n            return;\n        }\n        const valueLowerCase = this.value.toLowerCase();\n        this.availableOptions = (this.options || this.optionEls).filter(\n            (descendant) => {\n                const itemTextLowerCase = descendant.itemText.toLowerCase();\n                return itemTextLowerCase.startsWith(valueLowerCase);\n            }\n        );\n    }\n\n    public override handleInput(event: Event): void {\n        super.handleInput(event);\n        if (!this.pending) {\n            this.activeDescendant = undefined;\n            this.open = true;\n        }\n    }\n\n    protected handleMenuChange(event: PointerEvent & { target: Menu }): void {\n        const { target } = event;\n        const selected = (this.options || this.optionEls).find(\n            (item) => item.value === target?.value\n        );\n        this.value = selected?.itemText || '';\n        event.preventDefault();\n        this.open = false;\n        this._returnItems();\n        this.focus();\n    }\n\n    public handleClosed(): void {\n        this.open = false;\n        this.overlayOpen = false;\n    }\n\n    public handleOpened(): void {\n        // Do stuff here?\n    }\n\n    public toggleOpen(): void {\n        if (this.readonly || this.pending) {\n            this.open = false;\n            return;\n        }\n        this.open = !this.open;\n        this.inputElement.focus();\n    }\n\n    protected override shouldUpdate(\n        changed: PropertyValues<this & { optionEls: MenuItem[] }>\n    ): boolean {\n        if (changed.has('open')) {\n            if (!this.open) {\n                this.activeDescendant = undefined;\n            } else {\n                this.overlayOpen = true;\n            }\n        }\n        if (changed.has('value')) {\n            this.filterAvailableOptions();\n            this.itemValue =\n                this.availableOptions.find(\n                    (option) => option.itemText === this.value\n                )?.value ?? '';\n        }\n        return super.shouldUpdate(changed);\n    }\n\n    protected override onBlur(event: FocusEvent): void {\n        if (\n            event.relatedTarget &&\n            (this.contains(event.relatedTarget as HTMLElement) ||\n                this.shadowRoot.contains(event.relatedTarget as HTMLElement))\n        ) {\n            return;\n        }\n        super.onBlur(event);\n    }\n\n    protected renderAppliedLabel(): TemplateResult {\n        /**\n         * appliedLabel corresponds to `<label for=\"...\">`, which is overriden\n         * if user adds the `label` attribute manually to `<sp-combobox>`.\n         **/\n        const appliedLabel = this.label || this.appliedLabel;\n\n        return html`\n            ${this.pending\n                ? html`\n                      <span\n                          aria-hidden=\"true\"\n                          class=\"visually-hidden\"\n                          id=\"pending-label\"\n                      >\n                          ${this.pendingLabel}\n                      </span>\n                  `\n                : nothing}\n            ${this.value\n                ? html`\n                      <span\n                          aria-hidden=\"true\"\n                          class=\"visually-hidden\"\n                          id=\"applied-label\"\n                      >\n                          ${appliedLabel}\n                      </span>\n                      <slot name=\"label\" id=\"label\">\n                          <span class=\"visually-hidden\" aria-hidden=\"true\">\n                              ${this.value}\n                          </span>\n                      </slot>\n                  `\n                : html`\n                      <span hidden id=\"applied-label\">${appliedLabel}</span>\n                  `}\n        `;\n    }\n\n    protected renderLoader(): TemplateResult {\n        import(\n            '@spectrum-web-components/progress-circle/sp-progress-circle.js'\n        );\n        return html`\n            <sp-progress-circle\n                size=\"s\"\n                indeterminate\n                aria-hidden=\"true\"\n                class=\"progress-circle\"\n            ></sp-progress-circle>\n        `;\n    }\n\n    protected override renderField(): TemplateResult {\n        return html`\n            ${this.renderStateIcons()}\n            <input\n                aria-activedescendant=${ifDefined(\n                    this.activeDescendant\n                        ? `${this.activeDescendant.value}`\n                        : undefined\n                )}\n                aria-autocomplete=${ifDefined(\n                    this.autocomplete as 'list' | 'none'\n                )}\n                aria-controls=${ifDefined(\n                    this.open ? 'listbox-menu' : undefined\n                )}\n                aria-describedby=\"${this.helpTextId} tooltip\"\n                aria-expanded=\"${this.open ? 'true' : 'false'}\"\n                aria-label=${ifDefined(this.label || this.appliedLabel)}\n                aria-labelledby=\"pending-label applied-label label\"\n                aria-invalid=${ifDefined(this.invalid || undefined)}\n                autocomplete=\"off\"\n                @click=${this.toggleOpen}\n                @keydown=${this.handleComboboxKeydown}\n                id=\"input\"\n                class=\"input\"\n                role=\"combobox\"\n                type=\"text\"\n                .value=${live(this.displayValue)}\n                tabindex=\"0\"\n                @sp-closed=${this.handleClosed}\n                @sp-opened=${this.handleOpened}\n                maxlength=${ifDefined(\n                    this.maxlength > -1 ? this.maxlength : undefined\n                )}\n                minlength=${ifDefined(\n                    this.minlength > -1 ? this.minlength : undefined\n                )}\n                pattern=${ifDefined(this.pattern)}\n                @change=${this.handleChange}\n                @input=${this.handleInput}\n                @focus=${this.onFocus}\n                @blur=${this.onBlur}\n                ?disabled=${this.disabled}\n                ?required=${this.required}\n                ?readonly=${this.readonly}\n            />\n            ${this.pendingStateController.renderPendingState()}\n        `;\n    }\n\n    protected override render(): TemplateResult {\n        if (this.tooltipEl) {\n            this.tooltipEl.disabled = this.open;\n        }\n\n        return html`\n            ${super.render()}\n            <sp-picker-button\n                aria-controls=\"listbox-menu\"\n                aria-describedby=\"${this.helpTextId} tooltip\"\n                aria-expanded=${this.open ? 'true' : 'false'}\n                aria-label=${ifDefined(this.label || this.appliedLabel)}\n                aria-labelledby=\"applied-label label\"\n                @click=${this.toggleOpen}\n                tabindex=\"-1\"\n                class=\"button ${this.focused\n                    ? 'focus-visible is-keyboardFocused'\n                    : ''}\"\n                ?disabled=${this.disabled}\n                ?focused=${this.focused}\n                ?quiet=${this.quiet}\n                size=${this.size}\n            ></sp-picker-button>\n            <sp-overlay\n                ?open=${this.open}\n                .triggerElement=${this.input}\n                offset=\"0\"\n                placement=\"bottom-start\"\n                .receivesFocus=${'false'}\n                role=\"presentation\"\n            >\n                <sp-popover\n                    id=\"listbox\"\n                    ?open=${this.open}\n                    role=\"presentation\"\n                    ?hidden=${this.availableOptions.length === 0}\n                >\n                    <sp-menu\n                        @change=${this.handleMenuChange}\n                        tabindex=\"-1\"\n                        aria-labelledby=\"label applied-label\"\n                        aria-label=${ifDefined(this.label || this.appliedLabel)}\n                        id=\"listbox-menu\"\n                        role=\"listbox\"\n                        selects=${ifDefined(\n                            this.autocomplete === 'none' ? 'single' : undefined\n                        )}\n                        .selected=${this.autocomplete === 'none' &&\n                        this.itemValue\n                            ? [this.itemValue]\n                            : []}\n                        style=\"min-width: ${this.fieldWidth}px;\"\n                        size=${this.size}\n                    >\n                        ${this.overlayOpen\n                            ? repeat(\n                                  this.availableOptions,\n                                  (option) => option.value,\n                                  (option) => {\n                                      return html`\n                                          <sp-menu-item\n                                              id=\"${option.value}\"\n                                              ?focused=${this.activeDescendant\n                                                  ?.value === option.value}\n                                              aria-selected=${this\n                                                  .activeDescendant?.value ===\n                                              option.value\n                                                  ? 'true'\n                                                  : 'false'}\n                                              .value=${option.value}\n                                              .selected=${option.value ===\n                                              this.itemValue}\n                                              ?disabled=${option.disabled}\n                                          >\n                                              ${option.itemText}\n                                          </sp-menu-item>\n                                      `;\n                                  }\n                              )\n                            : html``}\n                        <slot\n                            hidden\n                            @slotchange=${this.handleSlotchange}\n                        ></slot>\n                    </sp-menu>\n                </sp-popover>\n            </sp-overlay>\n            ${this.renderAppliedLabel()}\n            <slot\n                aria-hidden=\"true\"\n                name=\"tooltip\"\n                id=\"tooltip\"\n                @slotchange=${this.handleTooltipSlotchange}\n            ></slot>\n        `;\n    }\n\n    applyFocusElementLabel = (value?: string): void => {\n        this.appliedLabel = value;\n    };\n\n    protected override firstUpdated(\n        changed: PropertyValues<this & { optionEls: MenuItem[] }>\n    ): void {\n        super.firstUpdated(changed);\n        this.addEventListener('focusout', (event: FocusEvent) => {\n            const isMenuItem =\n                event.relatedTarget &&\n                this.contains(event.relatedTarget as Node);\n            if (event.target === this && !isMenuItem) {\n                this.focused = false;\n            }\n        });\n        this.resizeObserver = new ResizeObserver(\n            (entries: ResizeObserverEntry[]) => {\n                this.fieldWidth = entries[0].borderBoxSize[0].inlineSize;\n            }\n        );\n\n        this.resizeObserver.observe(this);\n    }\n\n    private _returnItems = (): void => {\n        return;\n    };\n\n    protected async manageListOverlay(): Promise<void> {\n        if (this.open) {\n            this.focused = true;\n            this.focus();\n        }\n    }\n\n    protected override updated(\n        changed: PropertyValues<\n            this & { optionEls: MenuItem[]; activeDescendant: MenuItem }\n        >\n    ): void {\n        if (changed.has('open') && !this.pending) {\n            this.manageListOverlay();\n        }\n        if (!this.focused && this.open) {\n            this.open = false;\n        }\n        if (changed.has('pending') && this.pending) {\n            this.open = false;\n        }\n        if (changed.has('activeDescendant')) {\n            const previouslyActiveDescendant = changed.get(\n                'activeDescendant'\n            ) as unknown as MenuItem;\n            if (previouslyActiveDescendant) {\n                previouslyActiveDescendant.focused = false;\n            }\n            if (\n                this.activeDescendant &&\n                typeof (this.activeDescendant as MenuItem).focused !==\n                    'undefined'\n            ) {\n                (this.activeDescendant as MenuItem).focused = true;\n            }\n        }\n        if (changed.has('options') || changed.has('optionEls')) {\n            // if all options are disabled, set combobox to disabled\n            if (this.options?.every((option) => option.disabled)) {\n                this.disabled = true;\n            }\n\n            this.availableOptions = this.options || this.optionEls;\n        }\n    }\n\n    protected override async getUpdateComplete(): Promise<boolean> {\n        const complete = await super.getUpdateComplete();\n        const list = this.shadowRoot.querySelector(\n            '#listbox'\n        ) as HTMLUListElement;\n        if (list) {\n            const descendants = [...list.children] as SpectrumElement[];\n            await Promise.all(\n                descendants.map((descendant) => descendant.updateComplete)\n            );\n        }\n        return complete;\n    }\n\n    public override connectedCallback(): void {\n        super.connectedCallback();\n        if (!this.itemObserver) {\n            this.itemObserver = new MutationObserver(\n                this.setOptionsFromSlottedItems.bind(this)\n            );\n        }\n    }\n\n    public override disconnectedCallback(): void {\n        this.itemObserver.disconnect();\n        this.open = false;\n        this.resizeObserver?.disconnect();\n        this.resizeObserver = undefined;\n        super.disconnectedCallback();\n    }\n\n    private itemObserver!: MutationObserver;\n}\n"],
  "mappings": "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",
  "names": ["html", "nothing", "property", "query", "state", "ifDefined", "live", "repeat", "PendingStateController", "Textfield", "styles", "chevronStyles", "value", "activeEl", "event", "length", "item", "elements", "activeIndex", "nextActiveIndex", "el", "_a", "previousActiveIndex", "valueLowerCase", "descendant", "target", "selected", "changed", "_b", "option", "appliedLabel", "isMenuItem", "entries", "previouslyActiveDescendant", "complete", "list", "descendants", "__decorateClass"]
}
