{
  "version": 3,
  "sources": ["contextual-help.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport { elementUpdated, expect, fixture, oneEvent } from '@open-wc/testing';\nimport { nextFrame } from '@spectrum-web-components/overlay/src/AbstractOverlay.js';\nimport { sendKeys } from '@web/test-runner-commands';\nimport { testForLitDevWarnings } from '../../../test/testing-helpers.js';\nimport { ContextualHelp } from '../src/ContextualHelp.js';\nimport { ContextualHelpMarkup } from '../stories';\nimport { render, TemplateResult } from 'lit';\n\ndescribe('ContextualHelp', () => {\n    testForLitDevWarnings(\n        async () => await fixture<ContextualHelp>(ContextualHelpMarkup())\n    );\n    it('loads default contextual-help accessibly', async () => {\n        const el = await fixture<ContextualHelp>(ContextualHelpMarkup());\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n\n        const button = document\n            .querySelector('sp-contextual-help')\n            ?.shadowRoot?.querySelector('sp-action-button');\n        expect(button).to.have.attribute('aria-label', 'Informations');\n\n        el.variant = 'help';\n\n        await elementUpdated(el);\n        expect(button).to.have.attribute('aria-label', 'Help');\n    });\n    it('is a popover on web', async () => {\n        const el = await fixture<ContextualHelp>(ContextualHelpMarkup());\n\n        await elementUpdated(el);\n        const trigger = el.shadowRoot?.querySelector('#trigger') as HTMLElement;\n\n        let popover = el.shadowRoot?.querySelector('sp-popover');\n        expect(popover).not.to.exist;\n\n        const opened = oneEvent(el, 'sp-opened');\n        trigger.click();\n        await opened;\n\n        popover = el.shadowRoot?.querySelector('sp-popover');\n        expect(popover).to.exist;\n        const headingSlot = popover?.querySelector(\n            'slot[name=\"heading\"]'\n        ) as HTMLSlotElement;\n        const heading = headingSlot.assignedElements()[0].textContent;\n        expect(heading).to.equal('Permission required');\n\n        const closed = oneEvent(el, 'sp-closed');\n        await sendKeys({\n            press: 'Escape',\n        });\n        await closed;\n        await nextFrame();\n        await nextFrame();\n\n        popover = el.shadowRoot?.querySelector('sp-popover');\n        expect(el.shadowRoot?.querySelector('sp-popover')).not.to.exist;\n    });\n    it('returns the label if set', async () => {\n        const el = await fixture<ContextualHelp>(ContextualHelpMarkup());\n        el.label = 'Custom Label';\n        expect(el.buttonAriaLabel).to.equal('Custom Label');\n    });\n\n    it('returns \"Help\" if variant is \"help\" and label is not set', async () => {\n        const el = await fixture<ContextualHelp>(ContextualHelpMarkup());\n        el.variant = 'help';\n        expect(el.buttonAriaLabel).to.equal('Help');\n    });\n\n    it('returns \"Informations\" if variant is not \"help\" and label is not set', async () => {\n        const el = await fixture<ContextualHelp>(ContextualHelpMarkup());\n        expect(el.buttonAriaLabel).to.equal('Informations');\n    });\n    it('renders correctly when actualPlacement is undefined', async () => {\n        const el = await fixture<ContextualHelp>(ContextualHelpMarkup());\n\n        el.isMobile.matches = true;\n\n        await elementUpdated(el);\n\n        const trigger = el.shadowRoot?.querySelector('#trigger') as HTMLElement;\n        expect(trigger).to.exist;\n        expect(trigger).to.have.attribute('aria-label', 'Informations');\n\n        const overlay = el.shadowRoot?.querySelector(\n            'sp-overlay'\n        ) as HTMLElement;\n        expect(overlay).to.exist;\n        expect(overlay).to.have.attribute('trigger', 'trigger@click');\n        expect(overlay).to.have.attribute('receives-focus', 'true');\n        expect(overlay).to.have.property('offset', el.offset);\n        expect(overlay).to.have.property('open', el.open);\n    });\n    it('renders dialog content when isMobile.matches is true', async () => {\n        const el = await fixture<ContextualHelp>(ContextualHelpMarkup());\n\n        el.isMobile.matches = true;\n\n        await elementUpdated(el);\n\n        const template: TemplateResult = el['renderOverlayContent']();\n\n        const container = document.createElement('div');\n        render(template, container);\n\n        const dialogBase = container.querySelector('sp-dialog-base');\n        const dialog = container.querySelector('sp-dialog');\n        const headingSlot = container.querySelector('slot[name=\"heading\"]');\n        const linkSlot = container.querySelector('slot[name=\"link\"]');\n\n        expect(dialogBase).to.exist;\n        expect(dialog).to.exist;\n        expect(dialog).to.have.attribute('dismissable');\n        expect(dialog).to.have.attribute('size', 's');\n        expect(headingSlot).to.exist;\n        expect(linkSlot).to.exist;\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
