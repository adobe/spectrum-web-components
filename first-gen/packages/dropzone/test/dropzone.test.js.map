{
  "version": 3,
  "sources": ["dropzone.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport '@spectrum-web-components/dropzone/sp-dropzone.js';\nimport { Dropzone } from '@spectrum-web-components/dropzone';\nimport { illustration } from './test-svg.js';\nimport { waitForPredicate } from '../../../test/testing-helpers.js';\nimport { elementUpdated, expect, fixture, html } from '@open-wc/testing';\n\ndescribe('Dropzone', () => {\n    it('loads', async () => {\n        const el = await fixture<Dropzone>(html`\n            <sp-dropzone id=\"dropzone\">\n                <sp-illustrated-message heading=\"Drag and Drop Your File\">\n                    ${illustration}\n                </sp-illustrated-message>\n\n                <div style=\"color: grey\">\n                    <div>\n                        <label for=\"file-input\">\n                            <sp-link>Select a File</sp-link>\n                            from your computer\n                        </label>\n                        <input\n                            type=\"file\"\n                            id=\"file-input\"\n                            style=\"display: none\"\n                        />\n                    </div>\n                    <div>\n                        or\n                        <sp-link href=\"http://stock.adobe.com\" target=\"blank\">\n                            Search Adobe Stock\n                        </sp-link>\n                    </div>\n                </div>\n            </sp-dropzone>\n        `);\n        expect(el).to.not.equal(undefined);\n        if (!el.shadowRoot) throw new Error('No shadowRoot');\n        const slot = el.shadowRoot.querySelector('slot') as HTMLSlotElement;\n        expect(slot).to.not.equal(undefined);\n        return true;\n    });\n    it('manages `dropEffects`', async () => {\n        const el = await fixture<Dropzone>(html`\n            <sp-dropzone id=\"dropzone\"></sp-dropzone>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.dropEffect).to.equal('copy');\n\n        el.dropEffect = 'move';\n\n        await elementUpdated(el);\n\n        expect(el.dropEffect).to.equal('move');\n    });\n    it('manages `dragover` events', async () => {\n        const el = await fixture<Dropzone>(html`\n            <sp-dropzone id=\"dropzone\"></sp-dropzone>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.isDragged).to.be.false;\n\n        el.dispatchEvent(new DragEvent('dragover'));\n\n        expect(el.isDragged).to.be.false;\n\n        let dataTransfer: DataTransfer | boolean = false;\n        try {\n            // Safari doesn't like this...\n            dataTransfer = new DataTransfer();\n        } catch (error) {}\n        if (dataTransfer) {\n            const dragOverEvent = new DragEvent('dragover', {\n                dataTransfer,\n            });\n\n            el.dispatchEvent(dragOverEvent);\n\n            expect(el.isDragged).to.be.true;\n            // We should be able to make the following test here:\n            // expect(dataTransfer.dropEffect).to.equal(el.dropEffect);\n            // However, Chrome doesn't like it in the context of a test...\n        }\n    });\n    it('allows `dragover` events to be canceled', async () => {\n        const canceledDrag = (event: DragEvent): void => {\n            event.preventDefault();\n        };\n        const el = await fixture<Dropzone>(html`\n            <sp-dropzone\n                id=\"dropzone\"\n                @sp-dropzone-should-accept=${canceledDrag}\n            ></sp-dropzone>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.isDragged).to.be.false;\n\n        let dataTransfer: DataTransfer | boolean = false;\n        try {\n            // Safari doesn't like this...\n            dataTransfer = new DataTransfer();\n        } catch (error) {}\n        if (dataTransfer) {\n            const dragOverEvent = new DragEvent('dragover', {\n                dataTransfer,\n            });\n\n            el.dispatchEvent(dragOverEvent);\n\n            expect(el.isDragged).to.be.false;\n            expect(dataTransfer.dropEffect).to.not.equal(el.dropEffect);\n            expect(dataTransfer.dropEffect).to.equal('none');\n        }\n    });\n    it('manages `dragleave` events via debounce', async () => {\n        let dragLeftCount = 0;\n        const onDragLeave = (): void => {\n            dragLeftCount += 1;\n        };\n        const el = await fixture<Dropzone>(html`\n            <sp-dropzone\n                id=\"dropzone\"\n                @sp-dropzone-dragleave=${onDragLeave}\n            ></sp-dropzone>\n        `);\n\n        await elementUpdated(el);\n\n        expect(dragLeftCount).to.equal(0);\n\n        el.dispatchEvent(new DragEvent('dragleave'));\n        el.dispatchEvent(new DragEvent('dragleave'));\n\n        await waitForPredicate(() => dragLeftCount === 1);\n\n        expect(dragLeftCount).to.equal(1);\n    });\n\n    it('manages `dragleave` events', async () => {\n        let dropped = false;\n        const onDrop = (): void => {\n            dropped = true;\n        };\n        const el = await fixture<Dropzone>(html`\n            <sp-dropzone\n                id=\"dropzone\"\n                @sp-dropzone-drop=${onDrop}\n            ></sp-dropzone>\n        `);\n\n        await elementUpdated(el);\n\n        expect(dropped).to.be.false;\n\n        el.dispatchEvent(new DragEvent('drop'));\n\n        expect(dropped).to.be.true;\n    });\n\n    it('sets `filled` attribute', async () => {\n        const el = await fixture<Dropzone>(html`\n            <sp-dropzone id=\"dropzone\" filled></sp-dropzone>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.isFilled).to.be.true;\n        expect(el.hasAttribute('filled')).to.be.true;\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
