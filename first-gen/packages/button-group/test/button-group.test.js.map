{
  "version": 3,
  "sources": ["button-group.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { elementUpdated, expect, fixture } from '@open-wc/testing';\n\nimport '@spectrum-web-components/button-group/sp-button-group.js';\nimport { ButtonGroup } from '..';\nimport { buttons, buttonsVertical } from '../stories/button-group.stories.js';\nimport { testForLitDevWarnings } from '../../../test/testing-helpers.js';\n\ndescribe('Buttongroup', () => {\n    testForLitDevWarnings(\n        async () => await fixture<ButtonGroup>(buttons(buttons.args))\n    );\n    it('loads default button-group accessibly with sp-button', async () => {\n        const el = await fixture<ButtonGroup>(buttons(buttons.args));\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('loads default button-group[vertial] accessibly with sp-button', async () => {\n        const el = await fixture<ButtonGroup>(\n            buttonsVertical(buttonsVertical.args)\n        );\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it(`manages its children's size`, async () => {\n        const el = await fixture<ButtonGroup>(buttons(buttons.args));\n        await elementUpdated(el);\n\n        let children = el.querySelectorAll('sp-button');\n        children.forEach((button) => {\n            expect(button.size).to.equal('m');\n        });\n\n        el.size = 's';\n        await elementUpdated(el);\n\n        children = el.querySelectorAll('sp-button');\n        children.forEach((button) => {\n            expect(button.size).to.equal('s');\n        });\n    });\n});\n"],
  "mappings": ";AAYA,SAAS,gBAAgB,QAAQ,eAAe;AAEhD,OAAO;AAEP,SAAS,SAAS,uBAAuB;AACzC,SAAS,6BAA6B;AAEtC,SAAS,eAAe,MAAM;AAC1B;AAAA,IACI,YAAY,MAAM,QAAqB,QAAQ,QAAQ,IAAI,CAAC;AAAA,EAChE;AACA,KAAG,wDAAwD,YAAY;AACnE,UAAM,KAAK,MAAM,QAAqB,QAAQ,QAAQ,IAAI,CAAC;AAE3D,UAAM,eAAe,EAAE;AAEvB,UAAM,OAAO,EAAE,EAAE,GAAG,GAAG,WAAW;AAAA,EACtC,CAAC;AACD,KAAG,iEAAiE,YAAY;AAC5E,UAAM,KAAK,MAAM;AAAA,MACb,gBAAgB,gBAAgB,IAAI;AAAA,IACxC;AAEA,UAAM,eAAe,EAAE;AAEvB,UAAM,OAAO,EAAE,EAAE,GAAG,GAAG,WAAW;AAAA,EACtC,CAAC;AACD,KAAG,+BAA+B,YAAY;AAC1C,UAAM,KAAK,MAAM,QAAqB,QAAQ,QAAQ,IAAI,CAAC;AAC3D,UAAM,eAAe,EAAE;AAEvB,QAAI,WAAW,GAAG,iBAAiB,WAAW;AAC9C,aAAS,QAAQ,CAAC,WAAW;AACzB,aAAO,OAAO,IAAI,EAAE,GAAG,MAAM,GAAG;AAAA,IACpC,CAAC;AAED,OAAG,OAAO;AACV,UAAM,eAAe,EAAE;AAEvB,eAAW,GAAG,iBAAiB,WAAW;AAC1C,aAAS,QAAQ,CAAC,WAAW;AACzB,aAAO,OAAO,IAAI,EAAE,GAAG,MAAM,GAAG;AAAA,IACpC,CAAC;AAAA,EACL,CAAC;AACL,CAAC;",
  "names": []
}
