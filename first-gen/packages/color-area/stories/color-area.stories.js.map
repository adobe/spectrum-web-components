{
  "version": 3,
  "sources": ["color-area.stories.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { html, TemplateResult } from '@spectrum-web-components/base';\n\nimport '@spectrum-web-components/color-slider/sp-color-slider.js';\nimport { ColorSlider } from '@spectrum-web-components/color-slider/src/ColorSlider';\nimport '@spectrum-web-components/color-area/sp-color-area.js';\nimport { ColorArea } from '@spectrum-web-components/color-area/src/ColorArea.js';\n\nexport default {\n    title: 'Color/Area',\n    component: 'sp-color-area',\n    argTypes: {\n        onInput: { action: 'input' },\n        onChange: { action: 'change' },\n        color: {\n            name: 'color',\n            type: { name: 'ColorTypes', required: 'true' },\n            description: 'The color displayed by the ColorArea.',\n            table: {\n                type: { summary: 'ColorTypes' },\n                defaultValue: { summary: '' },\n            },\n            control: 'text',\n        },\n    },\n};\n\ntype StoryArgs = {\n    onInput: (val: string) => void;\n    onChange: (val: string) => void;\n};\n\nexport const Default = ({ onChange, onInput }: StoryArgs): TemplateResult => {\n    return html`\n        <sp-color-area\n            color=\"#ff0000\"\n            @input=${({ target }: Event & { target: ColorArea }) => {\n                const next = target.nextElementSibling as HTMLElement;\n                next.textContent = target.color as string;\n                next.style.color = target.color as string;\n                onInput(target.value as string);\n            }}\n            @change=${({ target }: Event & { target: ColorArea }) => {\n                onChange(target.value as string);\n            }}\n        ></sp-color-area>\n        <div style=\"color: #ff0000\" aria-live=\"off\">#ff0000</div>\n    `;\n};\n\nexport const appliedValues = (): TemplateResult => {\n    return html`\n        <sp-color-area\n            .color=${{ space: 'hsv', coords: [250, 90, 80] }}\n        ></sp-color-area>\n        <sp-color-area color=\"hsv(250, 90%, 80%)\"></sp-color-area>\n        <sp-color-area hue=\"250\" x=\"0.1\" y=\"0.1\"></sp-color-area>\n    `;\n};\n\nexport const joint = (): TemplateResult => {\n    return html`\n        <div>\n            <sp-color-area\n                color=\"hsv (0 100% 100%)\"\n                @input=${({ target }: Event & { target: ColorArea }) => {\n                    const next = target.nextElementSibling as ColorSlider;\n                    const display = next.nextElementSibling as HTMLElement;\n                    display.textContent = target.color as string;\n                    display.style.color = target.color as string;\n                    next.color = target.color;\n                }}\n            ></sp-color-area>\n            <sp-color-slider\n                color=\"hsv(0 100% 100%)\"\n                @input=${({\n                    target: {\n                        color,\n                        previousElementSibling,\n                        nextElementSibling,\n                    },\n                }: Event & {\n                    target: ColorSlider & {\n                        previousElementSibling: ColorArea;\n                        nextElementSibling: HTMLDivElement;\n                    };\n                }): void => {\n                    previousElementSibling.color = color;\n                    nextElementSibling.textContent = color as string;\n                    nextElementSibling.style.color = color as string;\n                }}\n            ></sp-color-slider>\n            <div style=\"color: hsv(0, 100%, 100%)\">hsv(0, 100%, 100%)</div>\n        </div>\n    `;\n};\n\nexport const disabled = (): TemplateResult => {\n    return html`\n        <sp-color-area disabled></sp-color-area>\n    `;\n};\n\nexport const sized = (): TemplateResult => {\n    return html`\n        <sp-color-area style=\"width: 72px; height: 72px\"></sp-color-area>\n    `;\n};\n\nexport const canvas = (): TemplateResult => {\n    return html`\n        <sp-color-area>\n            <canvas slot=\"gradient\"></canvas>\n        </sp-color-area>\n    `;\n};\n\nclass CanvasWriter extends HTMLElement {\n    writeToCanvas(): void {\n        const { previousElementSibling } = this;\n        if (previousElementSibling) {\n            const canvas = previousElementSibling.querySelector(\n                'canvas[slot=\"gradient\"]'\n            ) as HTMLCanvasElement;\n\n            if (canvas) {\n                canvas.width = canvas.offsetWidth;\n                canvas.height = canvas.offsetHeight;\n                const context = canvas.getContext('2d');\n                if (context) {\n                    context.rect(0, 0, canvas.width, canvas.height);\n\n                    const gradB = context.createLinearGradient(\n                        0,\n                        0,\n                        0,\n                        canvas.height\n                    );\n                    gradB.addColorStop(0, 'white');\n                    gradB.addColorStop(1, 'black');\n                    const gradC = context.createLinearGradient(\n                        0,\n                        0,\n                        canvas.width,\n                        0\n                    );\n                    gradC.addColorStop(0, 'hsla(0,100%,50%,0)');\n                    gradC.addColorStop(1, 'hsla(0,100%,50%,1)');\n\n                    context.fillStyle = gradB;\n                    context.fillRect(0, 0, canvas.width, canvas.height);\n                    context.fillStyle = gradC;\n                    context.globalCompositeOperation = 'multiply';\n                    context.fillRect(0, 0, canvas.width, canvas.height);\n                    context.globalCompositeOperation = 'source-over';\n                }\n            }\n        }\n    }\n\n    constructor() {\n        super();\n        this.writeStatePromise = new Promise((res) => {\n            requestAnimationFrame(() => {\n                this.writeToCanvas();\n                res(true);\n            });\n        });\n    }\n\n    private writeStatePromise: Promise<boolean> = Promise.resolve(false);\n\n    get updateComplete(): Promise<boolean> {\n        return this.writeStatePromise;\n    }\n}\n\ncustomElements.define('area-canvas-writer', CanvasWriter);\n\ncanvas.decorators = [\n    (story: () => TemplateResult): TemplateResult => {\n        return html`\n            ${story()}\n            <area-canvas-writer></area-canvas-writer>\n        `;\n    },\n];\n"],
  "mappings": "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",
  "names": ["canvas"]
}
