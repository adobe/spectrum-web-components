{
  "version": 3,
  "sources": ["color-area.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    nextFrame,\n    oneEvent,\n} from '@open-wc/testing';\nimport { ColorTypes } from '@spectrum-web-components/reactive-controllers/src/ColorController.js';\n\nimport '@spectrum-web-components/color-area/sp-color-area.js';\nimport { ColorArea } from '@spectrum-web-components/color-area';\nimport { sendKeys } from '@web/test-runner-commands';\nimport { spy } from 'sinon';\nimport { ColorHandle } from '@spectrum-web-components/color-handle';\nimport { testForLitDevWarnings } from '../../../test/testing-helpers.js';\n\ndescribe('ColorArea', () => {\n    testForLitDevWarnings(\n        async () =>\n            await fixture<ColorArea>(html`\n                <sp-color-area></sp-color-area>\n            `)\n    );\n    it('loads default color-area accessibly', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area></sp-color-area>\n        `);\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('handleBlur returns early if _pointerDown is true', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area></sp-color-area>\n        `);\n\n        await sendKeys({ press: 'Tab' });\n        await el.updateComplete;\n\n        el._pointerDown = true;\n        await el.updateComplete;\n\n        el.handleBlur();\n        await el.updateComplete;\n\n        expect(el.focused).to.be.true;\n    });\n    it('updates color when x value changes', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area></sp-color-area>\n        `);\n\n        await el.updateComplete;\n\n        expect(el.x).to.equal(1);\n\n        el.x = 0.3;\n        await el.updateComplete;\n\n        expect(el.x).to.equal(0.3);\n\n        const handle = el.shadowRoot.querySelector('.handle') as ColorHandle;\n        expect(handle.color).to.equal('hsl(0 100% 85%)');\n    });\n    it('updates color when y value changes', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area></sp-color-area>\n        `);\n\n        await el.updateComplete;\n\n        expect(el.y).to.equal(1);\n\n        el.y = 0.5;\n        await el.updateComplete;\n\n        expect(el.y).to.equal(0.5);\n\n        const handle = el.shadowRoot.querySelector('.handle') as ColorHandle;\n        expect(handle.color).to.equal('hsl(0 100% 25%)');\n    });\n    it('manages a single tab stop', async () => {\n        const test = await fixture<HTMLDivElement>(html`\n            <div>\n                <input type=\"text\" />\n                <sp-color-area color=\"hsl(100, 50%, 50%)\"></sp-color-area>\n                <input type=\"text\" />\n            </div>\n        `);\n        const el = test.querySelector('sp-color-area') as ColorArea;\n        const input1 = test.querySelector(\n            'input:nth-of-type(1)'\n        ) as HTMLInputElement;\n        const input2 = test.querySelector(\n            'input:nth-of-type(2)'\n        ) as HTMLInputElement;\n\n        await elementUpdated(el);\n\n        input1.focus();\n\n        expect(document.activeElement, 'before input').to.equal(input1);\n\n        await sendKeys({\n            press: 'Tab',\n        });\n        await elementUpdated(el);\n\n        expect(document.activeElement, 'element').to.equal(el);\n        let value = el.value;\n        await sendKeys({\n            press: 'ArrowRight',\n        });\n        await elementUpdated(el);\n        expect(el.value).to.not.equal(value);\n        await sendKeys({\n            press: 'Tab',\n        });\n        await elementUpdated(el);\n\n        expect(document.activeElement, 'after input').to.equal(input2);\n\n        await sendKeys({\n            press: 'Shift+Tab',\n        });\n        await elementUpdated(el);\n\n        expect(document.activeElement, 'element again').to.equal(el);\n\n        value = el.value;\n        await sendKeys({\n            press: 'ArrowDown',\n        });\n        await sendKeys({\n            press: 'ArrowDown',\n        });\n        await elementUpdated(el);\n        expect(el.value).to.not.equal(value);\n        await sendKeys({\n            press: 'Shift+Tab',\n        });\n\n        expect(document.activeElement, 'before input again').to.equal(input1);\n    });\n    it('provides separate aria-labels for X and Y inputs', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area color=\"hsl(100, 50%, 50%)\"></sp-color-area>\n        `);\n        const inputX = el.shadowRoot.querySelector('input[name=\"x\"]');\n        const inputY = el.shadowRoot.querySelector('input[name=\"y\"]');\n\n        expect(inputX?.getAttribute('aria-label')).to.equal(\n            'saturation Color Picker'\n        );\n        expect(inputY?.getAttribute('aria-label')).to.equal(\n            'luminosity Color Picker'\n        );\n        expect(inputX?.getAttribute('aria-roledescription')).to.equal(\n            '2d slider'\n        );\n        expect(inputY?.getAttribute('aria-roledescription')).to.equal(\n            '2d slider'\n        );\n        expect(inputX?.getAttribute('aria-valuetext')).to.equal(\n            '67%, saturation, 75%, luminosity'\n        );\n        expect(inputY?.getAttribute('aria-valuetext')).to.equal(\n            '75%, luminosity, 67%, saturation'\n        );\n    });\n    it('overrides X and Y labels with provided \"labelX\" and \"labelY\" attributes', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area\n                color=\"hsl(100, 50%, 50%)\"\n                label-X=\"custom X label\"\n                label-Y=\"custom Y label\"\n            ></sp-color-area>\n        `);\n        const inputX = el.shadowRoot.querySelector('input[name=\"x\"]');\n        const inputY = el.shadowRoot.querySelector('input[name=\"y\"]');\n\n        expect(inputX?.getAttribute('aria-label')).to.equal(\n            'custom X label Color Picker'\n        );\n        expect(inputY?.getAttribute('aria-label')).to.equal(\n            'custom Y label Color Picker'\n        );\n    });\n    it('updates color when x value changes', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area></sp-color-area>\n        `);\n\n        await el.updateComplete;\n\n        const handle = el.shadowRoot.querySelector('.handle') as ColorHandle;\n\n        expect(handle.color).to.equal('hsl(0 100% 50%)');\n        el.x = 0.3;\n        await el.updateComplete;\n        expect(handle.color).to.equal('hsl(0 100% 85%)');\n    });\n    it('updates color when y value changes', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area></sp-color-area>\n        `);\n\n        await el.updateComplete;\n\n        const handle = el.shadowRoot.querySelector('.handle') as ColorHandle;\n        expect(handle.color).to.equal('hsl(0 100% 50%)');\n        el.y = 0.7;\n        await el.updateComplete;\n        expect(handle.color).to.equal('hsl(0 100% 35%)');\n    });\n    it('accepts `hue` values', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area></sp-color-area>\n        `);\n\n        await elementUpdated(el);\n\n        const { handle } = el as unknown as { handle: ColorHandle };\n\n        expect(handle.color).to.equal('hsl(0 100% 50%)');\n\n        el.hue = 125;\n\n        await elementUpdated(el);\n\n        expect(handle.color).to.equal('hsl(125 100% 50%)');\n    });\n    it('accepts \"color\" values as hsl', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area color=\"hsl(100, 50%, 50%)\"></sp-color-area>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.hue, 'hue').to.equal(100);\n        expect(el.x, 'x').to.equal(0.67);\n        expect(el.y, 'y').to.equal(0.75);\n    });\n    it('accepts \"color\" values as hsla', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area color=\"hsla(100, 50%, 50%, 1)\"></sp-color-area>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.hue, 'hugh').to.equal(100);\n        expect(el.x, 'ex').to.equal(0.67);\n        expect(el.y, 'why').to.equal(0.75);\n\n        el.color = 'hsla(120, 100%, 0, 1)';\n        await elementUpdated(el);\n\n        expect(el.hue, 'hue 2').to.equal(120);\n        expect(el.x, 'x 2').to.equal(0);\n        expect(el.y, 'y 2').to.equal(0);\n    });\n    it('accepts \"color\" values as rgb', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area color=\"rgb(0,255,0)\"></sp-color-area>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.hue).to.equal(120);\n        expect(el.x).to.equal(1);\n        expect(el.y).to.equal(1);\n    });\n    it('accepts \"color\" values as hex', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area color=\"#00ff00\"></sp-color-area>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.hue).to.equal(120);\n        expect(el.x).to.equal(1);\n        expect(el.y).to.equal(1);\n    });\n    it('accepts \"Arrow*\" keypresses', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area color=\"hsla(100, 50%, 50%, 1)\"></sp-color-area>\n        `);\n\n        expect(el.hue, 'hue').to.equal(100);\n        expect(el.x, 'x').to.equal(0.67);\n        expect(el.y, 'y').to.equal(0.75);\n\n        el.inputX.focus();\n        await nextFrame();\n\n        let changeEvent = oneEvent(el, 'change');\n        await sendKeys({\n            press: 'ArrowUp',\n        });\n        await changeEvent;\n        changeEvent = oneEvent(el, 'change');\n        await sendKeys({\n            press: 'ArrowUp',\n        });\n        await changeEvent;\n\n        expect(el.x).to.equal(0.67);\n        expect(el.y).to.equal(0.77);\n\n        changeEvent = oneEvent(el, 'change');\n        await sendKeys({\n            press: 'ArrowRight',\n        });\n        await changeEvent;\n        changeEvent = oneEvent(el, 'change');\n        await sendKeys({\n            press: 'ArrowRight',\n        });\n        await changeEvent;\n\n        expect(el.x).to.equal(0.69);\n        expect(el.y).to.equal(0.77);\n\n        changeEvent = oneEvent(el, 'change');\n        await sendKeys({\n            press: 'ArrowDown',\n        });\n        await changeEvent;\n        changeEvent = oneEvent(el, 'change');\n        await sendKeys({\n            press: 'ArrowDown',\n        });\n        await changeEvent;\n\n        expect(el.x).to.equal(0.69);\n        expect(el.y).to.equal(0.75);\n\n        changeEvent = oneEvent(el, 'change');\n        await sendKeys({\n            press: 'ArrowLeft',\n        });\n        await changeEvent;\n        changeEvent = oneEvent(el, 'change');\n        await sendKeys({\n            press: 'ArrowLeft',\n        });\n        await changeEvent;\n\n        expect(el.x).to.equal(0.67);\n        expect(el.y).to.equal(0.75);\n        el.setAttribute('dir', 'rtl');\n        changeEvent = oneEvent(el, 'change');\n        await sendKeys({\n            press: 'ArrowLeft',\n        });\n        await changeEvent;\n        changeEvent = oneEvent(el, 'change');\n        await sendKeys({\n            press: 'ArrowLeft',\n        });\n        await changeEvent;\n        expect(el.x).to.equal(0.69);\n        expect(el.y).to.equal(0.75);\n        changeEvent = oneEvent(el, 'change');\n        await sendKeys({\n            press: 'ArrowRight',\n        });\n        await changeEvent;\n        changeEvent = oneEvent(el, 'change');\n        await sendKeys({\n            press: 'ArrowRight',\n        });\n        await changeEvent;\n        expect(el.x).to.equal(0.67);\n        expect(el.y).to.equal(0.75);\n\n        await sendKeys({\n            press: 'Home',\n        });\n        await changeEvent;\n        expect(el.x).to.equal(0.77);\n        expect(el.y).to.equal(0.75);\n\n        await sendKeys({\n            press: 'End',\n        });\n        await changeEvent;\n        expect(el.x).to.equal(0.67);\n        expect(el.y).to.equal(0.75);\n\n        el.dir = 'ltr';\n\n        await sendKeys({\n            press: 'Home',\n        });\n        await changeEvent;\n        expect(el.x).to.equal(0.57);\n        expect(el.y).to.equal(0.75);\n\n        await sendKeys({\n            press: 'End',\n        });\n        await changeEvent;\n        expect(el.x).to.equal(0.67);\n        expect(el.y).to.equal(0.75);\n    });\n    it('accepts \"Arrow*\" keypresses with alteration', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area color=\"hsla(100, 50%, 50%, 1)\"></sp-color-area>\n        `);\n\n        await elementUpdated(el);\n        el.focus();\n        expect(el.hue, 'hue').to.equal(100);\n        expect(el.x, 'x').to.equal(0.67);\n        expect(el.y, 'y').to.equal(0.75);\n\n        await sendKeys({\n            down: 'Shift',\n        });\n        await elementUpdated(el);\n        await sendKeys({\n            press: 'ArrowUp',\n        });\n        // This ensures that all the keystrokes are processed seperately\n        await elementUpdated(el);\n        await sendKeys({\n            press: 'ArrowUp',\n        });\n\n        await elementUpdated(el);\n\n        expect(el.color).to.equal('hsla(100, 65%, 57%, 1)');\n        expect(el.x, 'first').to.equal(0.67);\n        expect(el.y).to.equal(0.85);\n\n        await sendKeys({\n            press: 'ArrowRight',\n        });\n        await elementUpdated(el);\n        await sendKeys({\n            press: 'ArrowRight',\n        });\n        await elementUpdated(el);\n\n        expect(el.color).to.equal('hsla(100, 66%, 56%, 1)');\n        expect(el.x).to.equal(0.69);\n        expect(el.y).to.equal(0.85);\n\n        await sendKeys({\n            press: 'ArrowDown',\n        });\n        await elementUpdated(el);\n        await sendKeys({\n            press: 'ArrowDown',\n        });\n\n        await elementUpdated(el);\n\n        expect(el.color).to.equal('hsla(100, 53%, 49%, 1)');\n        expect(el.x).to.equal(0.69);\n        expect(el.y).to.equal(0.75);\n\n        await sendKeys({\n            press: 'ArrowLeft',\n        });\n        await elementUpdated(el);\n        await sendKeys({\n            press: 'ArrowLeft',\n        });\n        await elementUpdated(el);\n        await sendKeys({\n            up: 'Shift',\n        });\n\n        await elementUpdated(el);\n\n        expect(el.color).to.equal('hsla(100, 50%, 50%, 1)');\n        expect(el.x, 'last').to.equal(0.67);\n        expect(el.y).to.equal(0.75);\n    });\n    it('accepts pointer events', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area\n                style=\"--mod-colorarea-height: 192px; --mod-colorarea-width: 192px;\"\n            ></sp-color-area>\n        `);\n\n        await elementUpdated(el);\n        await elementUpdated(el);\n\n        const { handle } = el as unknown as { handle: HTMLElement };\n\n        handle.setPointerCapture = () => {\n            return;\n        };\n        handle.releasePointerCapture = () => {\n            return;\n        };\n\n        expect(el.hue).to.equal(0);\n        expect(el.x).to.equal(1);\n        expect(el.y).to.equal(1);\n\n        handle.dispatchEvent(\n            new PointerEvent('pointerdown', {\n                button: 1,\n                pointerId: 1,\n                clientX: 100,\n                clientY: 100,\n                bubbles: true,\n                composed: true,\n                cancelable: true,\n            })\n        );\n\n        await elementUpdated(el);\n\n        expect(el.hue).to.equal(0);\n        expect(el.x).to.equal(1);\n        expect(el.y).to.equal(1);\n\n        const root = el.shadowRoot ? el.shadowRoot : el;\n        const gradient = root.querySelector('.gradient') as HTMLElement;\n        gradient.dispatchEvent(\n            new PointerEvent('pointerdown', {\n                button: 1,\n                pointerId: 1,\n                clientX: 100,\n                clientY: 100,\n                bubbles: true,\n                composed: true,\n                cancelable: true,\n            })\n        );\n\n        await elementUpdated(el);\n\n        expect(el.hue).to.equal(0);\n        expect(el.x).to.equal(1);\n        expect(el.y).to.equal(1);\n\n        gradient.dispatchEvent(\n            new PointerEvent('pointerdown', {\n                pointerId: 1,\n                clientX: 100,\n                clientY: 100,\n                bubbles: true,\n                composed: true,\n                cancelable: true,\n            })\n        );\n\n        await elementUpdated(el);\n\n        expect(el.hue).to.equal(0);\n        expect(el.x, 'pointerdown x').to.equal(0.48);\n        expect(el.y, 'pointerdown y').to.equal(0.52);\n\n        handle.dispatchEvent(\n            new PointerEvent('pointermove', {\n                pointerId: 1,\n                clientX: 110,\n                clientY: 110,\n                bubbles: true,\n                composed: true,\n                cancelable: true,\n            })\n        );\n        handle.dispatchEvent(\n            new PointerEvent('pointerup', {\n                pointerId: 1,\n                clientX: 110,\n                clientY: 110,\n                bubbles: true,\n                composed: true,\n                cancelable: true,\n            })\n        );\n\n        await elementUpdated(el);\n\n        expect(el.hue).to.equal(0);\n        expect(el.x).to.equal(0.53);\n        expect(el.y).to.equal(0.47);\n    });\n    it('responds to events on the internal input element', async () => {\n        const inputSpy = spy();\n        const changeSpy = spy();\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area\n                color=\"hsla(100, 50%, 50%, 1)\"\n                @change=${() => changeSpy()}\n                @input=${() => inputSpy()}\n            ></sp-color-area>\n        `);\n\n        await elementUpdated(el);\n\n        el.inputX.focus();\n\n        el.inputX.dispatchEvent(\n            new Event('input', {\n                bubbles: true,\n                composed: true,\n            })\n        );\n        el.inputX.dispatchEvent(\n            new Event('change', {\n                bubbles: true,\n                composed: false, // native change events do not compose themselves by default\n            })\n        );\n\n        expect(inputSpy.callCount).to.equal(1);\n        expect(changeSpy.callCount).to.equal(1);\n\n        el.inputY.focus();\n\n        el.inputY.dispatchEvent(\n            new Event('input', {\n                bubbles: true,\n                composed: true,\n            })\n        );\n        el.inputY.dispatchEvent(\n            new Event('change', {\n                bubbles: true,\n                composed: false, // native change events do not compose themselves by default\n            })\n        );\n\n        expect(inputSpy.callCount).to.equal(2);\n        expect(changeSpy.callCount).to.equal(2);\n    });\n    it('dispatches input and change events in response to \"Arrow*\" keypresses', async () => {\n        const inputSpy = spy();\n        const changeSpy = spy();\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area\n                color=\"hsla(100, 50%, 50%, 1)\"\n                @change=${() => changeSpy()}\n                @input=${() => inputSpy()}\n            ></sp-color-area>\n        `);\n\n        await elementUpdated(el);\n        const Xvalue = Number(Number(el.inputX.value).toFixed(2));\n        const Yvalue = Number(Number(el.inputY.value).toFixed(2));\n\n        el.inputX.focus();\n        inputSpy.resetHistory();\n        changeSpy.resetHistory();\n        await sendKeys({ press: 'ArrowRight' });\n        await sendKeys({ press: 'ArrowRight' });\n        await elementUpdated(el);\n        expect(inputSpy.callCount).to.equal(2);\n        expect(changeSpy.callCount).to.equal(2);\n        expect(parseFloat(el.inputX.value).toFixed(2)).to.equal(\n            (Xvalue + 0.02).toFixed(2)\n        );\n\n        el.inputY.focus();\n        inputSpy.resetHistory();\n        changeSpy.resetHistory();\n\n        await sendKeys({ press: 'ArrowUp' });\n        await sendKeys({ press: 'ArrowUp' });\n\n        await elementUpdated(el);\n\n        expect(inputSpy.callCount).to.equal(2);\n        expect(changeSpy.callCount).to.equal(2);\n        expect(parseFloat(el.inputY.value).toFixed(2)).to.equal(\n            (Yvalue + 0.02).toFixed(2)\n        );\n\n        el.inputY.focus();\n        inputSpy.resetHistory();\n        changeSpy.resetHistory();\n        await sendKeys({ press: 'ArrowDown' });\n        await sendKeys({ press: 'ArrowDown' });\n\n        await elementUpdated(el);\n\n        expect(inputSpy.callCount).to.equal(2);\n        expect(changeSpy.callCount).to.equal(2);\n        expect(parseFloat(el.inputY.value).toFixed(2)).to.equal(\n            Yvalue.toFixed(2)\n        );\n\n        el.inputX.focus();\n        inputSpy.resetHistory();\n        changeSpy.resetHistory();\n\n        await sendKeys({ press: 'ArrowLeft' });\n        await sendKeys({ press: 'ArrowLeft' });\n\n        await elementUpdated(el);\n        //expect(el.x).to.be.equal(0.98);\n        expect(inputSpy.callCount).to.equal(2);\n        expect(changeSpy.callCount).to.equal(2);\n        expect(parseFloat(el.inputX.value).toFixed(2)).to.equal(\n            Xvalue.toFixed(2)\n        );\n\n        el.inputX.focus();\n        inputSpy.resetHistory();\n        changeSpy.resetHistory();\n        await sendKeys({ press: 'End' });\n        await sendKeys({ press: 'End' });\n\n        await elementUpdated(el);\n        expect(inputSpy.callCount).to.equal(2);\n        expect(changeSpy.callCount).to.equal(2);\n        expect(parseFloat(el.inputX.value).toFixed(2)).to.equal(\n            (Xvalue + 0.2).toFixed(2)\n        );\n\n        el.inputX.focus();\n        inputSpy.resetHistory();\n        changeSpy.resetHistory();\n        await sendKeys({ press: 'Home' });\n        await sendKeys({ press: 'Home' });\n\n        await elementUpdated(el);\n        expect(inputSpy.callCount).to.equal(2);\n        expect(changeSpy.callCount).to.equal(2);\n        expect(parseFloat(el.inputX.value).toFixed(2)).to.equal(\n            Xvalue.toFixed(2)\n        );\n\n        el.inputY.focus();\n        inputSpy.resetHistory();\n        changeSpy.resetHistory();\n        await sendKeys({ press: 'PageUp' });\n        await sendKeys({ press: 'PageUp' });\n\n        await elementUpdated(el);\n\n        expect(inputSpy.callCount).to.equal(2);\n        expect(changeSpy.callCount).to.equal(2);\n        expect(parseFloat(el.inputY.value).toFixed(2)).to.equal(\n            (Yvalue + 0.2).toFixed(2)\n        );\n\n        el.inputY.focus();\n        inputSpy.resetHistory();\n        changeSpy.resetHistory();\n        await sendKeys({ press: 'PageDown' });\n        await sendKeys({ press: 'PageDown' });\n\n        await elementUpdated(el);\n\n        expect(inputSpy.callCount).to.equal(2);\n        expect(changeSpy.callCount).to.equal(2);\n        expect(parseFloat(el.inputY.value).toFixed(2)).to.equal(\n            Yvalue.toFixed(2)\n        );\n    });\n    it('retains `hue` value when s = 0 in HSL string format', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area color=\"hsl(100, 50%, 50%)\"></sp-color-area>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.hue, 'hue').to.equal(100);\n        expect(el.x, 'x').to.equal(0.67);\n        expect(el.y, 'y').to.equal(0.75);\n        expect(el.color).to.equal('hsl(100, 50%, 50%)');\n\n        el.color = 'hsl(100, 0%, 50%)';\n        await elementUpdated(el);\n\n        expect(el.hue, 'new hue').to.equal(100);\n        expect(el.x, 'new x').to.equal(0);\n        expect(el.y, 'new y').to.equal(0.5);\n        expect(el.color).to.equal('hsl(100, 0%, 50%)');\n    });\n    it('retains `hue` value when s = 0 in HSL object format', async () => {\n        let inputColor = { h: 100, s: 0.5, l: 0.5 };\n\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area .color=${inputColor}></sp-color-area>\n        `);\n\n        await elementUpdated(el);\n\n        let outputColor = el.color as { h: number; s: number; l: number };\n        const variance = 0.004;\n\n        expect(el.hue).to.equal(100);\n        expect(el.x, 'x').to.equal(0.67);\n        expect(el.y, 'y').to.equal(0.75);\n\n        expect(Math.abs(outputColor.h - inputColor.h)).to.be.lessThan(variance);\n        expect(Math.abs(outputColor.s - inputColor.s)).to.be.lessThan(variance);\n        expect(Math.abs(outputColor.l - inputColor.l)).to.be.lessThan(variance);\n\n        inputColor = { h: 100, s: 0, l: 0.5 };\n        el.color = inputColor;\n\n        await elementUpdated(el);\n        outputColor = el.color as { h: number; s: number; l: number };\n\n        expect(el.hue).to.equal(100);\n        expect(el.x, 'x').to.equal(0);\n        expect(el.y, 'y').to.equal(0.5);\n\n        expect(Math.abs(outputColor.h - inputColor.h)).to.be.lessThan(variance);\n        expect(Math.abs(outputColor.s - inputColor.s)).to.be.lessThan(variance);\n        expect(Math.abs(outputColor.l - inputColor.l)).to.be.lessThan(variance);\n    });\n    it('retains `hue` value when s = 0 in HSV string format', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area color=\"hsv(100, 50%, 50%)\"></sp-color-area>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.hue, 'hue').to.equal(100);\n        expect(el.x, 'x').to.equal(0.5);\n        expect(el.y, 'y').to.equal(0.5);\n        expect(el.color).to.equal('hsv(100, 50%, 50%)');\n\n        el.color = 'hsv(100, 0%, 50%)';\n        await elementUpdated(el);\n\n        expect(el.hue, 'new hue').to.equal(100);\n        expect(el.x, 'new x').to.equal(0);\n        expect(el.y, 'new y').to.equal(0.5);\n        expect(el.color).to.equal('hsv(100, 0%, 50%)');\n    });\n    it('updates gradient when hue value changes', async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area hue=\"100\"></sp-color-area>\n        `);\n\n        await elementUpdated(el);\n\n        const gradient = el.shadowRoot.querySelector(\n            '.gradient'\n        ) as HTMLElement;\n        const initialBackground = gradient.style.background;\n\n        // Change the hue value\n        el.hue = 200;\n        await elementUpdated(el);\n\n        const updatedBackground = gradient.style.background;\n\n        // Verify that the gradient background has been updated\n        expect(initialBackground).to.not.equal(updatedBackground);\n    });\n    it('retains `hue` value when s = 0 in HSV object format', async () => {\n        let inputColor = { h: 100, s: 0.5, v: 0.5 };\n\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area .color=${inputColor}></sp-color-area>\n        `);\n\n        await elementUpdated(el);\n\n        let outputColor = el.color as { h: number; s: number; v: number };\n        const variance = 0.00005;\n\n        expect(el.hue).to.equal(100);\n        expect(el.x, 'x').to.equal(0.5);\n        expect(el.y, 'y').to.equal(0.5);\n\n        expect(Math.abs(outputColor.h - inputColor.h)).to.be.lessThan(variance);\n        expect(Math.abs(outputColor.s - inputColor.s)).to.be.lessThan(variance);\n        expect(Math.abs(outputColor.v - inputColor.v)).to.be.lessThan(variance);\n\n        inputColor = { h: 100, s: 0, v: 0.5 };\n        el.color = inputColor;\n\n        await elementUpdated(el);\n        outputColor = el.color as { h: number; s: number; v: number };\n\n        expect(el.hue).to.equal(100);\n        expect(el.x, 'x').to.equal(0);\n        expect(el.y, 'y').to.equal(0.5);\n\n        expect(Math.abs(outputColor.h - inputColor.h)).to.be.lessThan(variance);\n        expect(Math.abs(outputColor.s - inputColor.s)).to.be.lessThan(variance);\n        expect(Math.abs(outputColor.v - inputColor.v)).to.be.lessThan(variance);\n    });\n    const colorFormats: {\n        name: string;\n        color: ColorTypes;\n        test?: string;\n    }[] = [\n        //rgb\n        { name: 'RGB String', color: 'rgb(204, 51, 204)' },\n        { name: 'RGB', color: { r: 204, g: 51, b: 204, a: 1 } },\n        //prgb\n        { name: 'PRGB String', color: 'rgb(80%, 20%, 80%)' },\n        { name: 'PRGB', color: { r: '80%', g: '20%', b: '80%', a: 1 } },\n        // hex\n        { name: 'Hex', color: 'cc33cc' },\n        { name: 'Hex String', color: '#cc33cc' },\n        // hex8\n        { name: 'Hex8', color: 'cc33ccff' },\n        { name: 'Hex8 String', color: '#cc33ccff' },\n        // name\n        { name: 'string', color: 'red', test: 'ff0000' },\n        // hsl\n        { name: 'HSL String', color: 'hsl(300, 60%, 50%)' },\n        { name: 'HSL', color: { h: 300, s: 0.6000000000000001, l: 0.5, a: 1 } },\n        // hsv\n        { name: 'HSV String', color: 'hsv(300, 75%, 100%)' },\n        { name: 'HSV', color: { h: 300, s: 0.75, v: 1, a: 1 } },\n    ];\n    colorFormats.map((format) => {\n        it(`maintains \\`color\\` format as ${format.name}`, async () => {\n            const el = await fixture<ColorArea>(html`\n                <sp-color-area></sp-color-area>\n            `);\n\n            if (typeof format.color === 'string') {\n                el.color = format.color;\n            } else {\n                el.color = { ...format.color } as ColorTypes;\n            }\n            if (format.name.startsWith('Hex')) {\n                expect(el.color).to.equal(format.color);\n            } else if (format.name == 'string') {\n                expect(el.color).to.equal(format.test);\n            } else {\n                expect(el.color).to.deep.equal(format.color);\n            }\n        });\n    });\n\n    it(`resolves Hex3 format to Hex6 format`, async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area></sp-color-area>\n        `);\n        el.color = '0f0';\n        expect(el.color).to.equal('00ff00');\n\n        el.color = '#1e0';\n        expect(el.color).to.equal('#11ee00');\n    });\n    it(`resolves Hex4 format to Hex8 format`, async () => {\n        const el = await fixture<ColorArea>(html`\n            <sp-color-area></sp-color-area>\n        `);\n        el.color = 'f3af';\n        expect(el.color).to.equal('ff33aaff');\n\n        el.color = '#f3af';\n        expect(el.color).to.equal('#ff33aaff');\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
