{
  "version": 3,
  "sources": ["overlay-story-components.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {\n    css,\n    CSSResultGroup,\n    html,\n    LitElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\n\nimport {\n    Overlay,\n    OverlayTrigger,\n    Placement,\n} from '@spectrum-web-components/overlay';\nimport { RadioGroup } from '@spectrum-web-components/radio';\nimport '@spectrum-web-components/button/sp-button.js';\nimport { Button } from '@spectrum-web-components/button';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport '@spectrum-web-components/radio/sp-radio.js';\nimport '@spectrum-web-components/radio/sp-radio-group.js';\nimport '@spectrum-web-components/overlay/overlay-trigger.js';\n\n// Prevent infinite recursion in browser\nconst MAX_DEPTH = 7;\n\nclass OverlayTargetIcon extends LitElement {\n    static override get styles(): CSSResultGroup {\n        return css`\n            :host {\n                position: absolute;\n                display: block;\n                color: var(--spectrum-magenta-900);\n                width: 64px;\n                height: 64px;\n                top: 0;\n                left: 0;\n            }\n        `;\n    }\n\n    public override render(): TemplateResult {\n        return html`\n            <svg\n                aria-hidden=\"true\"\n                focusable=\"false\"\n                data-prefix=\"fas\"\n                data-icon=\"bullseye\"\n                class=\"svg-inline--fa fa-bullseye fa-w-16\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 496 512\"\n            >\n                <path\n                    fill=\"currentColor\"\n                    d=\"M248 8C111.03 8 0 119.03 0 256s111.03 248 248 248 248-111.03 248-248S384.97 8 248 8zm0 432c-101.69 0-184-82.29-184-184 0-101.69 82.29-184 184-184 101.69 0 184 82.29 184 184 0 101.69-82.29 184-184 184zm0-312c-70.69 0-128 57.31-128 128s57.31 128 128 128 128-57.31 128-128-57.31-128-128-128zm0 192c-35.29 0-64-28.71-64-64s28.71-64 64-64 64 28.71 64 64-28.71 64-64 64z\"\n                ></path>\n            </svg>\n        `;\n    }\n}\ncustomElements.define('overlay-target-icon', OverlayTargetIcon);\n\nclass OverlayDrag extends LitElement {\n    @property({ type: Number })\n    private top = 100;\n    @property({ type: Number })\n    private left = 100;\n\n    private targetElement: HTMLElement | undefined | null;\n\n    static override get styles(): CSSResultGroup {\n        return css`\n            :host {\n                display: block;\n                width: 100%;\n                height: 100%;\n                position: relative;\n            }\n\n            ::slotted(*) {\n                display: block;\n                width: 100%;\n                height: 100%;\n            }\n        `;\n    }\n\n    private onSlotChange(event: Event & { target: HTMLSlotElement }): void {\n        const slot = event.target as HTMLSlotElement;\n        this.targetElement = undefined;\n\n        const nodes = slot.assignedNodes();\n        const slotElement = nodes.find(\n            (node) => node instanceof HTMLElement\n        ) as HTMLElement;\n        if (!slotElement) return;\n\n        this.targetElement = slotElement.querySelector(\n            '[slot=\"trigger\"]'\n        ) as HTMLElement;\n        if (!this.targetElement) return;\n\n        this.targetElement.addEventListener(\n            'pointerdown',\n            (event: PointerEvent) => this.onMouseDown(event)\n        );\n\n        this.resetTargetPosition();\n    }\n\n    private onMouseDown(event: PointerEvent): void {\n        const target = event.target as HTMLElement;\n        const parent = target.parentElement;\n        if (!parent) return;\n        target.setPointerCapture(event.pointerId);\n\n        const max = {\n            x: parent.offsetWidth - target.offsetWidth,\n            y: parent.offsetHeight - target.offsetHeight,\n        };\n        const dragStart = {\n            x: event.clientX,\n            y: event.clientY,\n        };\n        const originalPos = {\n            x: this.left,\n            y: this.top,\n        };\n\n        const onMouseMove = (event: MouseEvent): void => {\n            const dragDelta = {\n                x: event.clientX - dragStart.x,\n                y: event.clientY - dragStart.y,\n            };\n            const newPosition = {\n                x: dragDelta.x + originalPos.x,\n                y: dragDelta.y + originalPos.y,\n            };\n            this.left = Math.min(Math.max(newPosition.x, 0), max.x);\n            this.top = Math.min(Math.max(newPosition.y, 0), max.y);\n            Overlay.update();\n        };\n\n        const onMouseUp = (event: PointerEvent): void => {\n            target.setPointerCapture(event.pointerId);\n            document.removeEventListener('pointermove', onMouseMove);\n            document.removeEventListener('pointerup', onMouseUp);\n        };\n\n        document.addEventListener('pointermove', onMouseMove);\n        document.addEventListener('pointerup', onMouseUp);\n    }\n\n    public resetTargetPosition(): void {\n        if (!this.targetElement) return;\n        const target = this.targetElement as HTMLElement;\n        const parent = target.parentElement;\n        if (!parent) return;\n\n        this.left = (parent.offsetWidth - target.offsetWidth) / 2;\n        this.top = (parent.offsetHeight - target.offsetHeight) / 2;\n    }\n\n    public override updated(): void {\n        if (this.targetElement) {\n            this.targetElement.style.transform = `translate(${this.left}px, ${this.top}px)`;\n        }\n    }\n\n    public override render(): TemplateResult {\n        return html`\n            <slot @slotchange=${this.onSlotChange}></slot>\n        `;\n    }\n}\ncustomElements.define('overlay-drag', OverlayDrag);\n\nclass RecursivePopover extends LitElement {\n    @property({ type: String })\n    private placement: Placement;\n\n    @property({ type: Number })\n    private depth = 0;\n\n    @query('[slot=\"trigger\"]')\n    private trigger!: Button;\n\n    protected isShiftTabbing = false;\n\n    public override shadowRoot!: ShadowRoot;\n\n    public static override get styles(): CSSResultGroup {\n        return [\n            css`\n                :host {\n                    display: block;\n                    text-align: center;\n                }\n\n                overlay-trigger {\n                    display: inline-flex;\n                    margin-top: 11px;\n                }\n            `,\n        ];\n    }\n\n    public constructor() {\n        super();\n        this.placement = 'right';\n        this.depth = 0;\n        this.addEventListener('keydown', (event: KeyboardEvent) => {\n            const { code } = event;\n            if (code === 'Enter') {\n                this.trigger.click();\n            }\n        });\n        this.addEventListener('focusin', this.handleFocusin);\n    }\n\n    private handleFocusin(): void {\n        this.focus();\n    }\n\n    public override focus(): void {\n        if (this.shadowRoot.activeElement !== null) {\n            return;\n        }\n        const firstFocusable = this.shadowRoot.querySelector(\n            'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        ) as LitElement;\n        if (firstFocusable) {\n            if (firstFocusable.updateComplete) {\n                firstFocusable.updateComplete.then(() =>\n                    firstFocusable.focus()\n                );\n            } else {\n                firstFocusable.focus();\n            }\n            return;\n        }\n        super.focus();\n    }\n\n    public onRadioChange(event: Event): void {\n        const target = event.target as RadioGroup;\n        this.placement = target.selected as Placement;\n    }\n\n    private captureEnter(event: KeyboardEvent): void {\n        const { code } = event;\n        if (code === 'Enter') {\n            event.stopPropagation();\n        }\n    }\n\n    public override render(): TemplateResult {\n        return html`\n            <sp-radio-group\n                horizontal\n                @change=${this.onRadioChange}\n                selected=\"${this.placement}\"\n                name=\"group-example\"\n            >\n                <sp-radio value=\"top\">Top</sp-radio>\n                <sp-radio value=\"right\">Right</sp-radio>\n                <sp-radio value=\"bottom\">Bottom</sp-radio>\n                <sp-radio value=\"left\">Left</sp-radio>\n            </sp-radio-group>\n            <overlay-trigger placement=\"${this.placement}\" type=\"modal\">\n                <sp-button\n                    slot=\"trigger\"\n                    variant=\"accent\"\n                    @keydown=${this.captureEnter}\n                >\n                    Open Popover\n                </sp-button>\n                <sp-popover\n                    slot=\"click-content\"\n                    direction=\"${this.placement}\"\n                    tip\n                >\n                    <sp-dialog size=\"s\" no-divider>\n                        ${this.depth < MAX_DEPTH\n                            ? html`\n                                  <recursive-popover\n                                      position=\"${this.placement}\"\n                                      depth=\"${this.depth + 1}\"\n                                      tabindex=\"0\"\n                                  ></recursive-popover>\n                              `\n                            : html`\n                                  <div>Maximum Depth</div>\n                              `}\n                    </sp-dialog>\n                </sp-popover>\n            </overlay-trigger>\n        `;\n    }\n}\ncustomElements.define('recursive-popover', RecursivePopover);\n\nexport class PopoverContent extends LitElement {\n    @query('[slot=\"trigger\"]')\n    public button!: Button;\n\n    @query('overlay-trigger')\n    public trigger!: OverlayTrigger;\n\n    override render(): TemplateResult {\n        return html`\n            <overlay-trigger type=\"modal\" placement=\"bottom\">\n                <sp-button slot=\"trigger\">Open me</sp-button>\n                <sp-popover slot=\"click-content\" direction=\"bottom\">\n                    <sp-dialog no-divider>\n                        <p>This is all the content.</p>\n                        <p>This is all the content.</p>\n                        <p>This is all the content.</p>\n                        <p>This is all the content.</p>\n                    </sp-dialog>\n                </sp-popover>\n            </overlay-trigger>\n        `;\n    }\n}\n\ncustomElements.define('popover-content', PopoverContent);\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'popover-content': PopoverContent;\n    }\n}\n\nexport default class TransientHover extends LitElement {\n    @property()\n    open = false;\n\n    protected override render(): TemplateResult {\n        return html`\n            <sp-button variant=\"primary\" id=\"triggerButton\">\n                Button popover\n            </sp-button>\n            <sp-overlay\n                type=\"auto\"\n                trigger=\"triggerButton@click\"\n                @sp-opened=${() => {\n                    this.open = true;\n                }}\n            >\n                <sp-popover>My Popover</sp-popover>\n            </sp-overlay>\n\n            ${!this.open\n                ? html`\n                      <sp-overlay trigger=\"triggerButton@hover\" type=\"hint\">\n                          <sp-tooltip placement=\"right\">My tooltip</sp-tooltip>\n                      </sp-overlay>\n                  `\n                : html``}\n        `;\n    }\n}\n\ncustomElements.define('transient-hover', TransientHover);\n"],
  "mappings": "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",
  "names": ["event"]
}
