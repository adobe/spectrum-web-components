{
  "version": 3,
  "sources": ["overlay-trigger-optimization.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { elementUpdated, expect, html } from '@open-wc/testing';\nimport { OverlayTrigger } from '../src/OverlayTrigger.js';\nimport { stub } from 'sinon';\nimport {\n    fixture,\n    testForLitDevWarnings,\n} from '../../../test/testing-helpers.js';\nimport '@spectrum-web-components/button/sp-button.js';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport '@spectrum-web-components/tooltip/sp-tooltip.js';\nimport '@spectrum-web-components/overlay/sp-overlay.js';\nimport '@spectrum-web-components/overlay/sync/overlay-trigger.js';\n\ndescribe('Overlay Trigger - Trigger Interactions', () => {\n    it('accepts valid trigger interaction combinations', async () => {\n        const el = await fixture<OverlayTrigger>(html`\n            <overlay-trigger>\n                <sp-button slot=\"trigger\">Test Button</sp-button>\n                <sp-popover slot=\"click-content\">Click Content</sp-popover>\n                <sp-tooltip slot=\"hover-content\">Hover Content</sp-tooltip>\n                <sp-popover slot=\"longpress-content\">\n                    Longpress Content\n                </sp-popover>\n            </overlay-trigger>\n        `);\n\n        // Test single interaction types\n        el.triggeredBy = 'click';\n        await elementUpdated(el);\n        expect(el.triggeredBy).to.equal('click');\n\n        el.triggeredBy = 'hover';\n        await elementUpdated(el);\n        expect(el.triggeredBy).to.equal('hover');\n\n        el.triggeredBy = 'longpress';\n        await elementUpdated(el);\n        expect(el.triggeredBy).to.equal('longpress');\n\n        // Test valid combinations\n        el.triggeredBy = 'click hover';\n        await elementUpdated(el);\n        expect(el.triggeredBy).to.equal('click hover');\n\n        el.triggeredBy = 'click longpress';\n        await elementUpdated(el);\n        expect(el.triggeredBy).to.equal('click longpress');\n\n        el.triggeredBy = 'hover longpress';\n        await elementUpdated(el);\n        expect(el.triggeredBy).to.equal('hover longpress');\n\n        el.triggeredBy = 'click hover longpress';\n        await elementUpdated(el);\n        expect(el.triggeredBy).to.equal('click hover longpress');\n    });\n\n    it('optimizes rendering based on trigger interactions', async () => {\n        const el = await fixture<OverlayTrigger>(html`\n            <overlay-trigger triggered-by=\"click\">\n                <sp-button slot=\"trigger\">Test Button</sp-button>\n            </overlay-trigger>\n        `);\n\n        let overlays = el.shadowRoot!.querySelectorAll('sp-overlay');\n        expect(overlays.length).to.equal(1);\n        expect(overlays[0].id).to.equal('click-overlay');\n\n        el.triggeredBy = 'click hover';\n        await elementUpdated(el);\n        await el.updateComplete;\n\n        overlays = el.shadowRoot!.querySelectorAll('sp-overlay');\n        expect(overlays.length).to.equal(2);\n        expect(overlays[0].id).to.equal('click-overlay');\n        expect(overlays[1].id).to.equal('hover-overlay');\n\n        el.triggeredBy = 'click hover longpress';\n        await elementUpdated(el);\n        await el.updateComplete;\n\n        overlays = el.shadowRoot!.querySelectorAll('sp-overlay');\n        expect(overlays.length).to.equal(3);\n        expect(overlays[0].id).to.equal('click-overlay');\n        expect(overlays[1].id).to.equal('hover-overlay');\n        expect(overlays[2].id).to.equal('longpress-overlay');\n    });\n\n    it('handles backwards compatible slot assigned content', async () => {\n        const el = await fixture<OverlayTrigger>(html`\n            <overlay-trigger triggered-by=\"click\">\n                <sp-button slot=\"trigger\">Test Button</sp-button>\n                <sp-popover slot=\"click-content\">Click Content</sp-popover>\n                <sp-tooltip slot=\"hover-content\">Hover Content</sp-tooltip>\n            </overlay-trigger>\n        `);\n\n        // Even though only \"click\" is specified, both overlays are created\n        const overlays = el.shadowRoot!.querySelectorAll('sp-overlay');\n        expect(overlays.length).to.equal(2);\n        expect(overlays[0].id).to.equal('click-overlay');\n        expect(overlays[1].id).to.equal('hover-overlay');\n    });\n});\n\ndescribe('Overlay Trigger', () => {\n    testForLitDevWarnings(async () => {\n        const el = await fixture<OverlayTrigger>(html`\n            <overlay-trigger>\n                <sp-button slot=\"trigger\">Test Button</sp-button>\n                <sp-popover slot=\"click-content\">Click Content</sp-popover>\n                <sp-tooltip slot=\"hover-content\">Hover Content</sp-tooltip>\n                <sp-popover slot=\"longpress-content\">\n                    Longpress Content\n                </sp-popover>\n            </overlay-trigger>\n        `);\n        return el;\n    });\n\n    describe('Dev Mode', () => {\n        let consoleWarnStub!: ReturnType<typeof stub>;\n\n        before(() => {\n            window.__swc.verbose = true;\n            consoleWarnStub = stub(console, 'warn');\n        });\n        afterEach(() => {\n            consoleWarnStub.resetHistory();\n        });\n        after(() => {\n            window.__swc.verbose = false;\n            consoleWarnStub.restore();\n        });\n\n        it('warns in Dev Mode when no attributes or fragments', async () => {\n            const el = await fixture<OverlayTrigger>(html`\n                <overlay-trigger></overlay-trigger>\n            `);\n\n            await elementUpdated(el);\n\n            expect(consoleWarnStub.called).to.be.true;\n            const spyCall = consoleWarnStub.getCall(0);\n            expect(\n                (spyCall.args.at(0) as string).includes('performance'),\n                'Performance optimization available'\n            ).to.be.true;\n            expect(spyCall.args.at(-1), 'confirm `data` shape').to.deep.equal({\n                data: {\n                    localName: 'overlay-trigger',\n                    type: 'api',\n                    level: 'default',\n                },\n            });\n        });\n    });\n});\n"],
  "mappings": ";AAYA,SAAS,gBAAgB,QAAQ,YAAY;AAE7C,SAAS,YAAY;AACrB;AAAA,EACI;AAAA,EACA;AAAA,OACG;AACP,OAAO;AACP,OAAO;AACP,OAAO;AACP,OAAO;AACP,OAAO;AAEP,SAAS,0CAA0C,MAAM;AACrD,KAAG,kDAAkD,YAAY;AAC7D,UAAM,KAAK,MAAM,QAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASxC;AAGD,OAAG,cAAc;AACjB,UAAM,eAAe,EAAE;AACvB,WAAO,GAAG,WAAW,EAAE,GAAG,MAAM,OAAO;AAEvC,OAAG,cAAc;AACjB,UAAM,eAAe,EAAE;AACvB,WAAO,GAAG,WAAW,EAAE,GAAG,MAAM,OAAO;AAEvC,OAAG,cAAc;AACjB,UAAM,eAAe,EAAE;AACvB,WAAO,GAAG,WAAW,EAAE,GAAG,MAAM,WAAW;AAG3C,OAAG,cAAc;AACjB,UAAM,eAAe,EAAE;AACvB,WAAO,GAAG,WAAW,EAAE,GAAG,MAAM,aAAa;AAE7C,OAAG,cAAc;AACjB,UAAM,eAAe,EAAE;AACvB,WAAO,GAAG,WAAW,EAAE,GAAG,MAAM,iBAAiB;AAEjD,OAAG,cAAc;AACjB,UAAM,eAAe,EAAE;AACvB,WAAO,GAAG,WAAW,EAAE,GAAG,MAAM,iBAAiB;AAEjD,OAAG,cAAc;AACjB,UAAM,eAAe,EAAE;AACvB,WAAO,GAAG,WAAW,EAAE,GAAG,MAAM,uBAAuB;AAAA,EAC3D,CAAC;AAED,KAAG,qDAAqD,YAAY;AAChE,UAAM,KAAK,MAAM,QAAwB;AAAA;AAAA;AAAA;AAAA,SAIxC;AAED,QAAI,WAAW,GAAG,WAAY,iBAAiB,YAAY;AAC3D,WAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAClC,WAAO,SAAS,CAAC,EAAE,EAAE,EAAE,GAAG,MAAM,eAAe;AAE/C,OAAG,cAAc;AACjB,UAAM,eAAe,EAAE;AACvB,UAAM,GAAG;AAET,eAAW,GAAG,WAAY,iBAAiB,YAAY;AACvD,WAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAClC,WAAO,SAAS,CAAC,EAAE,EAAE,EAAE,GAAG,MAAM,eAAe;AAC/C,WAAO,SAAS,CAAC,EAAE,EAAE,EAAE,GAAG,MAAM,eAAe;AAE/C,OAAG,cAAc;AACjB,UAAM,eAAe,EAAE;AACvB,UAAM,GAAG;AAET,eAAW,GAAG,WAAY,iBAAiB,YAAY;AACvD,WAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAClC,WAAO,SAAS,CAAC,EAAE,EAAE,EAAE,GAAG,MAAM,eAAe;AAC/C,WAAO,SAAS,CAAC,EAAE,EAAE,EAAE,GAAG,MAAM,eAAe;AAC/C,WAAO,SAAS,CAAC,EAAE,EAAE,EAAE,GAAG,MAAM,mBAAmB;AAAA,EACvD,CAAC;AAED,KAAG,sDAAsD,YAAY;AACjE,UAAM,KAAK,MAAM,QAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMxC;AAGD,UAAM,WAAW,GAAG,WAAY,iBAAiB,YAAY;AAC7D,WAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAClC,WAAO,SAAS,CAAC,EAAE,EAAE,EAAE,GAAG,MAAM,eAAe;AAC/C,WAAO,SAAS,CAAC,EAAE,EAAE,EAAE,GAAG,MAAM,eAAe;AAAA,EACnD,CAAC;AACL,CAAC;AAED,SAAS,mBAAmB,MAAM;AAC9B,wBAAsB,YAAY;AAC9B,UAAM,KAAK,MAAM,QAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASxC;AACD,WAAO;AAAA,EACX,CAAC;AAED,WAAS,YAAY,MAAM;AACvB,QAAI;AAEJ,WAAO,MAAM;AACT,aAAO,MAAM,UAAU;AACvB,wBAAkB,KAAK,SAAS,MAAM;AAAA,IAC1C,CAAC;AACD,cAAU,MAAM;AACZ,sBAAgB,aAAa;AAAA,IACjC,CAAC;AACD,UAAM,MAAM;AACR,aAAO,MAAM,UAAU;AACvB,sBAAgB,QAAQ;AAAA,IAC5B,CAAC;AAED,OAAG,qDAAqD,YAAY;AAChE,YAAM,KAAK,MAAM,QAAwB;AAAA;AAAA,aAExC;AAED,YAAM,eAAe,EAAE;AAEvB,aAAO,gBAAgB,MAAM,EAAE,GAAG,GAAG;AACrC,YAAM,UAAU,gBAAgB,QAAQ,CAAC;AACzC;AAAA,QACK,QAAQ,KAAK,GAAG,CAAC,EAAa,SAAS,aAAa;AAAA,QACrD;AAAA,MACJ,EAAE,GAAG,GAAG;AACR,aAAO,QAAQ,KAAK,GAAG,EAAE,GAAG,sBAAsB,EAAE,GAAG,KAAK,MAAM;AAAA,QAC9D,MAAM;AAAA,UACF,WAAW;AAAA,UACX,MAAM;AAAA,UACN,OAAO;AAAA,QACX;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AAAA,EACL,CAAC;AACL,CAAC;",
  "names": []
}
