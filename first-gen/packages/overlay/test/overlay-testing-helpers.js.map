{
  "version": 3,
  "sources": ["overlay-testing-helpers.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { oneEvent, waitUntil } from '@open-wc/testing';\nimport { Overlay } from '../src/Overlay';\n\n// make sure overlay state is about to change, and wait until overlay state changes to 'opened'\nexport const overlayOpened = async (\n    overlay: Overlay,\n    timeout: number = 100,\n    messagePrefix?: string\n): Promise<unknown> => {\n    if (overlay?.state === 'opened') {\n        return Promise.resolve();\n    }\n\n    return await Promise.race([\n        waitUntil(\n            () => overlay?.state === 'opened',\n            `${messagePrefix ? `${messagePrefix}: ` : ''}open timeout (still ${overlay?.state})`,\n            { timeout: timeout }\n        ),\n        oneEvent(overlay, 'sp-opened'),\n    ]);\n};\n\nexport const overlayClosed = async (\n    overlay: Overlay,\n    timeout: number = 100,\n    messagePrefix?: string\n): Promise<unknown> => {\n    if (overlay?.state === 'closed') {\n        return Promise.resolve();\n    }\n\n    return await Promise.race([\n        waitUntil(\n            () => overlay?.state === 'closed',\n            `${messagePrefix ? `${messagePrefix}: ` : ''}closed timeout (still ${overlay?.state})`,\n            { timeout: timeout }\n        ),\n        oneEvent(overlay, 'sp-closed'),\n    ]);\n};\n"],
  "mappings": ";AAYA,SAAS,UAAU,iBAAiB;AAI7B,aAAM,gBAAgB,OACzB,SACA,UAAkB,KAClB,kBACmB;AACnB,OAAI,mCAAS,WAAU,UAAU;AAC7B,WAAO,QAAQ,QAAQ;AAAA,EAC3B;AAEA,SAAO,MAAM,QAAQ,KAAK;AAAA,IACtB;AAAA,MACI,OAAM,mCAAS,WAAU;AAAA,MACzB,GAAG,gBAAgB,GAAG,aAAa,OAAO,EAAE,uBAAuB,mCAAS,KAAK;AAAA,MACjF,EAAE,QAAiB;AAAA,IACvB;AAAA,IACA,SAAS,SAAS,WAAW;AAAA,EACjC,CAAC;AACL;AAEO,aAAM,gBAAgB,OACzB,SACA,UAAkB,KAClB,kBACmB;AACnB,OAAI,mCAAS,WAAU,UAAU;AAC7B,WAAO,QAAQ,QAAQ;AAAA,EAC3B;AAEA,SAAO,MAAM,QAAQ,KAAK;AAAA,IACtB;AAAA,MACI,OAAM,mCAAS,WAAU;AAAA,MACzB,GAAG,gBAAgB,GAAG,aAAa,OAAO,EAAE,yBAAyB,mCAAS,KAAK;AAAA,MACnF,EAAE,QAAiB;AAAA,IACvB;AAAA,IACA,SAAS,SAAS,WAAW;AAAA,EACjC,CAAC;AACL;",
  "names": []
}
