{
  "version": 3,
  "sources": ["overlay-trigger-hover.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {\n    elementUpdated,\n    expect,\n    html,\n    nextFrame,\n    oneEvent,\n    waitUntil,\n} from '@open-wc/testing';\nimport '@spectrum-web-components/overlay/overlay-trigger.js';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport '@spectrum-web-components/button/sp-button.js';\nimport '@spectrum-web-components/tooltip/sp-tooltip.js';\nimport '@spectrum-web-components/dialog/sp-dialog-wrapper.js';\nimport '@spectrum-web-components/action-button/sp-action-button.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-magnify.js';\nimport { OverlayTrigger } from '@spectrum-web-components/overlay';\nimport { spy } from 'sinon';\nimport { ActionButton } from '@spectrum-web-components/action-button';\nimport { sendKeys } from '@web/test-runner-commands';\nimport { Button } from '@spectrum-web-components/button';\nimport '@spectrum-web-components/theme/sp-theme.js';\nimport '@spectrum-web-components/theme/src/themes.js';\nimport { TemplateResult } from '@spectrum-web-components/base';\nimport { Theme } from '@spectrum-web-components/theme';\nimport { Tooltip } from '@spectrum-web-components/tooltip';\nimport {\n    fixture,\n    ignoreResizeObserverLoopError,\n} from '../../../test/testing-helpers.js';\n\nignoreResizeObserverLoopError(before, after);\n\nasync function styledFixture<T extends Element>(\n    story: TemplateResult\n): Promise<T> {\n    const test = await fixture<Theme>(html`\n        <sp-theme system=\"spectrum\" scale=\"medium\" color=\"light\">\n            ${story}\n        </sp-theme>\n    `);\n    return test.children[0] as T;\n}\n\ndescribe('Overlay Trigger - Hover', () => {\n    it('displays `hover` declaratively', async () => {\n        const openedSpy = spy();\n        const closedSpy = spy();\n        const el = await fixture<OverlayTrigger>(\n            (() => html`\n                <overlay-trigger\n                    placement=\"right-start\"\n                    open=\"hover\"\n                    @sp-opened=${() => openedSpy()}\n                    @sp-closed=${() => closedSpy()}\n                >\n                    <sp-action-button slot=\"trigger\">\n                        <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                    </sp-action-button>\n                    <sp-popover slot=\"hover-content\" tip></sp-popover>\n                </overlay-trigger>\n            `)()\n        );\n        await elementUpdated(el);\n\n        await waitUntil(\n            () => openedSpy.calledOnce,\n            'hover content projected to overlay',\n            { timeout: 2000 }\n        );\n\n        el.removeAttribute('open');\n        await elementUpdated(el);\n\n        await waitUntil(() => closedSpy.calledOnce, 'hover content returned', {\n            timeout: 2000,\n        });\n    });\n    describe('\"tooltip\" mouse interactions', () => {\n        let el: OverlayTrigger;\n        let button: ActionButton;\n        let tooltip: Tooltip;\n        beforeEach(async () => {\n            el = await fixture<OverlayTrigger>(\n                (() => html`\n                    <overlay-trigger placement=\"right-start\">\n                        <sp-action-button slot=\"trigger\">\n                            <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                        </sp-action-button>\n                        <sp-tooltip slot=\"hover-content\" tip>\n                            Magnify\n                        </sp-tooltip>\n                    </overlay-trigger>\n                `)()\n            );\n            await elementUpdated(el);\n            button = el.querySelector('sp-action-button') as ActionButton;\n            tooltip = el.querySelector('sp-tooltip') as Tooltip;\n        });\n        it('allows pointer to enter the \"tooltip\" without closing the \"tooltip\"', async () => {\n            const opened = oneEvent(button, 'sp-opened');\n            button.dispatchEvent(\n                new MouseEvent('pointerenter', {\n                    bubbles: true,\n                    composed: true,\n                })\n            );\n            await nextFrame();\n            await nextFrame();\n            await nextFrame();\n            await nextFrame();\n            expect(tooltip.open).to.be.true;\n\n            button.dispatchEvent(\n                new MouseEvent('pointerleave', {\n                    bubbles: true,\n                    composed: true,\n                })\n            );\n            await nextFrame();\n\n            button.dispatchEvent(\n                new MouseEvent('pointerenter', {\n                    bubbles: true,\n                    composed: true,\n                })\n            );\n            await nextFrame();\n\n            tooltip.dispatchEvent(\n                new MouseEvent('pointerleave', {\n                    bubbles: true,\n                    composed: true,\n                })\n            );\n            await nextFrame();\n\n            button.dispatchEvent(\n                new MouseEvent('pointerenter', {\n                    bubbles: true,\n                    composed: true,\n                })\n            );\n            await opened;\n\n            expect(el.open).to.equal('hover');\n\n            const closed = oneEvent(button, 'sp-closed');\n            button.dispatchEvent(\n                new MouseEvent('pointerleave', {\n                    relatedTarget: null,\n                    bubbles: true,\n                    composed: true,\n                })\n            );\n            await closed;\n\n            expect(el.open).to.be.undefined;\n        });\n        it('closes the \"tooltip\" when leaving the \"tooltip\"', async () => {\n            const opened = oneEvent(button, 'sp-opened');\n            button.dispatchEvent(\n                new MouseEvent('pointerenter', {\n                    bubbles: true,\n                    composed: true,\n                })\n            );\n            await nextFrame();\n            button.dispatchEvent(\n                new MouseEvent('pointerleave', {\n                    relatedTarget: tooltip,\n                    bubbles: true,\n                    composed: true,\n                })\n            );\n            await opened;\n\n            expect(el.open).to.equal('hover');\n\n            const closed = oneEvent(button, 'sp-closed');\n            tooltip.dispatchEvent(\n                new MouseEvent('pointerleave', {\n                    relatedTarget: null,\n                    bubbles: true,\n                    composed: true,\n                })\n            );\n            await closed;\n\n            expect(el.open).to.be.undefined;\n        });\n    });\n    it('persists hover content', async () => {\n        const el = await fixture<OverlayTrigger>(\n            (() => html`\n                <overlay-trigger placement=\"right-start\">\n                    <sp-action-button slot=\"trigger\">\n                        <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                    </sp-action-button>\n                    <sp-popover slot=\"hover-content\" tip></sp-popover>\n                </overlay-trigger>\n            `)()\n        );\n        await elementUpdated(el);\n\n        expect(el.open).to.be.undefined;\n\n        const trigger = el.querySelector('[slot=\"trigger\"]') as ActionButton;\n        const opened = oneEvent(trigger, 'sp-opened');\n        trigger.dispatchEvent(\n            new Event('pointerenter', {\n                bubbles: true,\n                composed: true,\n            })\n        );\n        await opened;\n\n        expect(el.open).to.equal('hover');\n\n        trigger.click();\n\n        await elementUpdated(el);\n\n        expect(el.open).to.equal('hover');\n    });\n    it('closes persistent hover content on `longpress`', async () => {\n        const el = await fixture<OverlayTrigger>(\n            (() => html`\n                <overlay-trigger placement=\"right-start\">\n                    <sp-action-button slot=\"trigger\">\n                        <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                    </sp-action-button>\n                    <sp-popover slot=\"hover-content\" tip></sp-popover>\n                    <sp-popover slot=\"longpress-content\" tip></sp-popover>\n                </overlay-trigger>\n            `)()\n        );\n        await elementUpdated(el);\n\n        expect(el.open).to.be.undefined;\n\n        const trigger = el.querySelector('[slot=\"trigger\"]') as ActionButton;\n        let opened = oneEvent(trigger, 'sp-opened');\n        trigger.dispatchEvent(\n            new Event('pointerenter', {\n                bubbles: true,\n            })\n        );\n        await opened;\n\n        expect(el.open).to.equal('hover');\n\n        opened = oneEvent(trigger, 'sp-opened');\n        trigger.dispatchEvent(\n            new Event('longpress', {\n                bubbles: true,\n            })\n        );\n        await opened;\n\n        expect(el.open).to.equal('longpress');\n    });\n    it('closes `hover` overlay when [type=\"modal\"]', async () => {\n        const el = await fixture<OverlayTrigger>(\n            (() => html`\n                <overlay-trigger placement=\"right-start\" type=\"modal\">\n                    <sp-action-button slot=\"trigger\">\n                        <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                    </sp-action-button>\n                    <sp-popover slot=\"hover-content\" tip></sp-popover>\n                </overlay-trigger>\n            `)()\n        );\n        await elementUpdated(el);\n        const input = document.createElement('input');\n        el.insertAdjacentElement('beforebegin', input);\n\n        expect(el.open).to.be.undefined;\n\n        const trigger = el.querySelector('[slot=\"trigger\"]') as ActionButton;\n        const opened = oneEvent(el, 'sp-opened');\n        input.focus();\n        await sendKeys({\n            press: 'Tab',\n        });\n        await opened;\n\n        expect(el.open).to.equal('hover');\n\n        const closed = oneEvent(el, 'sp-closed');\n        trigger.blur();\n        await closed;\n\n        expect(el.open).to.be.undefined;\n    });\n    it('will not return focus to a \"modal\" parent', async () => {\n        const el = await styledFixture<OverlayTrigger>(html`\n            <overlay-trigger type=\"modal\">\n                <sp-button slot=\"trigger\">Toggle Dialog</sp-button>\n                <sp-dialog-wrapper\n                    slot=\"click-content\"\n                    headline=\"Dialog title\"\n                    size=\"s\"\n                >\n                    ${[1, 2, 3, 4].map(\n                        (index) => html`\n                            <overlay-trigger>\n                                <sp-button slot=\"trigger\" id=\"button-${index}\">\n                                    Button with Tooltip ${index}\n                                </sp-button>\n                                <sp-tooltip slot=\"hover-content\">\n                                    Tooltip ${index}\n                                </sp-tooltip>\n                            </overlay-trigger>\n                        `\n                    )}\n                </sp-dialog-wrapper>\n            </overlay-trigger>\n        `);\n        await elementUpdated(el);\n\n        const button = el.querySelector('sp-button') as Button;\n        const dialog = el.querySelector('sp-dialog-wrapper') as HTMLElement;\n        const button1 = dialog.querySelector('#button-1') as Button;\n        const button2 = dialog.querySelector('#button-2') as Button;\n        const button3 = dialog.querySelector('#button-3') as Button;\n        await elementUpdated(button);\n        await elementUpdated(dialog);\n\n        let opened = oneEvent(button, 'sp-opened');\n        const openedHint = oneEvent(button1, 'sp-opened');\n        button.dispatchEvent(new Event('click', { bubbles: true }));\n        await opened;\n        await openedHint;\n\n        expect(button1 === document.activeElement).to.be.true;\n\n        opened = oneEvent(button2, 'sp-opened');\n        sendKeys({\n            press: 'Tab',\n        });\n        await opened;\n\n        expect(button2 === document.activeElement).to.be.true;\n\n        opened = oneEvent(button3, 'sp-opened');\n        sendKeys({\n            press: 'Tab',\n        });\n        await opened;\n\n        expect(button3 === document.activeElement).to.be.true;\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
