{
  "version": 3,
  "sources": ["overlay-trigger-extended.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    aTimeout,\n    elementUpdated,\n    expect,\n    html,\n    nextFrame,\n    waitUntil,\n} from '@open-wc/testing';\nimport { Button } from '@spectrum-web-components/button';\nimport '@spectrum-web-components/button/sp-button.js';\nimport '@spectrum-web-components/dialog/sp-dialog.js';\nimport { OverlayTrigger } from '@spectrum-web-components/overlay';\nimport '@spectrum-web-components/overlay/overlay-trigger.js';\nimport { Popover } from '@spectrum-web-components/popover';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport { sendMouse } from '../../../test/plugins/browser.js';\nimport { fixture, sendMouseTo } from '../../../test/testing-helpers.js';\nimport { overlayClosed, overlayOpened } from './overlay-testing-helpers.js';\n\nconst initTest = async (\n    styles = html``\n): Promise<{\n    overlayTrigger: OverlayTrigger;\n    button: Button;\n    popover: Popover;\n}> => {\n    const test = await fixture<HTMLDivElement>(html`\n        <div class=\"container\">\n            <style>\n                .container {\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    flex-direction: column;\n                }\n            </style>\n            ${styles}\n            <overlay-trigger type=\"modal\" id=\"trigger\" placement=\"top\">\n                <sp-button id=\"outer-button\" variant=\"primary\" slot=\"trigger\">\n                    Show Popover\n                </sp-button>\n                <sp-popover\n                    id=\"outer-popover\"\n                    slot=\"click-content\"\n                    direction=\"bottom\"\n                    tip\n                    tabindex=\"0\"\n                    placement=\"top\"\n                >\n                    <sp-dialog no-divider>\n                        This is the overlay content.\n                    </sp-dialog>\n                </sp-popover>\n            </overlay-trigger>\n        </div>\n    `);\n\n    await waitUntil(\n        () => {\n            return (\n                !!test.querySelector('overlay-trigger') &&\n                !!test.querySelector('sp-button') &&\n                !!test.querySelector('sp-popover')\n            );\n        },\n        'overlay-trigger, button, and popover appeared',\n        { timeout: 300 }\n    );\n\n    return {\n        overlayTrigger: test.querySelector('overlay-trigger') as OverlayTrigger,\n        button: test.querySelector('sp-button') as Button,\n        popover: test.querySelector('sp-popover') as Popover,\n    };\n};\n\ndescribe('Overlay Trigger - extended', () => {\n    let overlayTrigger!: OverlayTrigger;\n    let button!: Button;\n    let popover!: Popover;\n\n    it('manages `placement` on open', async () => {\n        ({ overlayTrigger, button, popover } = await initTest());\n\n        expect(popover.placement).to.equal('top');\n\n        button.click();\n\n        await elementUpdated(overlayTrigger);\n\n        await overlayOpened(overlayTrigger.clickOverlayElement, 300);\n\n        expect(popover.placement).to.equal('bottom');\n\n        overlayTrigger.open = undefined;\n\n        await elementUpdated(overlayTrigger);\n\n        expect(\n            overlayTrigger.clickOverlayElement.state,\n            'overlay state after closing'\n        ).to.equal('closing');\n\n        await overlayClosed(overlayTrigger.clickOverlayElement, 300);\n\n        expect(popover.placement).to.equal('top');\n    });\n\n    it('manages `placement` on scroll', async () => {\n        ({ overlayTrigger, button, popover } = await initTest(html`\n            <style>\n                .container {\n                    padding: 100vh 0;\n                }\n            </style>\n        `));\n        expect(!!overlayTrigger, `overlayTrigger is ready`).to.be.true;\n        expect(!!button.isConnected, 'button is ready').to.be.true;\n        expect(!!overlayTrigger.isConnected, 'overlayTrigger is ready').to.be\n            .true;\n        expect(popover.placement, 'initial placement').to.equal('top');\n\n        // scroll until button is at the top of the viewport\n        button.scrollIntoView({\n            behavior: 'instant' as ScrollBehavior,\n            block: 'end',\n        });\n\n        overlayTrigger.open = 'click';\n\n        // wait until ready; if button is at the bottom of the viewport, the popover should be above it\n        await waitUntil(\n            () =>\n                popover.placement === 'top' &&\n                popover.getBoundingClientRect().height > 0,\n            `popover placement is top`,\n            { timeout: 100 }\n        );\n\n        expect(overlayTrigger.open).to.equal('click');\n\n        expect(popover.placement, `placement after clicking`).to.equal('top');\n\n        // scroll until button is at the bottom of the viewport\n        button.scrollIntoView({\n            behavior: 'instant' as ScrollBehavior,\n            block: 'start',\n        });\n\n        // wait; if button is at the top of the viewport, the popover should be below it\n        await waitUntil(\n            () => popover.placement === 'bottom',\n            `popover placement is top`,\n            { timeout: 100 }\n        );\n\n        expect(popover.placement, `placement after scrolling`).to.equal(\n            'bottom'\n        );\n    });\n    // TODO: skipping this test because its flaky in most browsers in CI. Will review in the migration to Spectrum 2.\n    it.skip('occludes content behind the overlay', async () => {\n        const el = await fixture<HTMLDivElement>(html`\n            <div class=\"container\">\n                <style>\n                    .container {\n                        display: flex;\n                        align-items: center;\n                        justify-content: center;\n                        flex-direction: column;\n                    }\n                </style>\n                <overlay-trigger\n                    type=\"modal\"\n                    id=\"trigger\"\n                    placement=\"top\"\n                    triggered-by=\"click\"\n                >\n                    <sp-button\n                        id=\"outer-button\"\n                        variant=\"primary\"\n                        slot=\"trigger\"\n                    >\n                        Show Popover\n                    </sp-button>\n                    <sp-popover\n                        id=\"outer-popover\"\n                        slot=\"click-content\"\n                        tip\n                        tabindex=\"0\"\n                        placement=\"bottom\"\n                    >\n                        <sp-dialog no-divider>\n                            This is the overlay content.\n                        </sp-dialog>\n                    </sp-popover>\n                </overlay-trigger>\n                <input\n                    type=\"text\"\n                    id=\"textfield\"\n                    style=\"position: relative; z-index: 1;\"\n                />\n            </div>\n        `);\n\n        // Get a reference to the textfield element\n        const textfield = el.querySelector('#textfield') as HTMLInputElement;\n\n        // Get a reference to the overlay trigger\n        const overlayTrigger = el.querySelector(\n            'overlay-trigger'\n        ) as OverlayTrigger;\n\n        // Get a reference to the button element\n        const button = el.querySelector('sp-button') as Button;\n\n        // Get a reference to the popover element\n        const popover = el.querySelector('sp-popover') as Popover;\n\n        // Wait for the textfield to be connected and rendered\n        await elementUpdated(el);\n\n        // Get a reference to the overlay element that will be opened\n        const overlay = overlayTrigger.clickOverlayElement;\n\n        // Verify the overlay is initially closed\n        expect(overlay.state, `overlay state`).to.equal('closed');\n\n        // Ensure the textfield is visible and can be focused\n        expect(textfield.offsetParent, 'textfield is visible').to.not.be.null;\n        expect(textfield.tabIndex, 'textfield is focusable').to.be.equal(0);\n\n        // Focus the textfield by clicking it (simulates user interaction)\n        await sendMouseTo(textfield, 'click');\n\n        await waitUntil(\n            () => document.activeElement === textfield,\n            `textfield focused`,\n            { timeout: 500 }\n        );\n\n        expect(document.activeElement, `textfield focused`).to.equal(textfield);\n\n        // Confirm the popover is positioned above the button\n        expect(popover.placement).to.equal('bottom');\n\n        // Focus the button to prepare for opening the overlay\n        button.focus();\n        await elementUpdated(button);\n        expect(document.activeElement, `button focused`).to.equal(button);\n\n        // Confirm the overlay is still closed and not triggered\n        expect(overlayTrigger.open, `overlayTrigger.open`).to.equal(undefined);\n        expect(overlay.state, `overlay.state`).to.equal('closed');\n\n        // Open the overlay by setting the open property\n        overlayTrigger.open = 'click';\n\n        // Wait for the overlay trigger to update\n        await elementUpdated(overlayTrigger);\n\n        // Confirm the overlay is in the process of opening\n        expect(\n            overlayTrigger.clickOverlayElement.state,\n            'overlay state after clicking'\n        ).to.equal('opening');\n\n        // Wait for the overlay to be fully opened (allow extra time for Firefox)\n        await overlayOpened(overlayTrigger.clickOverlayElement, 400);\n\n        // Attempt to click the textfield while the overlay is open\n        await sendMouseTo(textfield, 'click');\n\n        // Give the click action time to process\n        await aTimeout(100);\n\n        // Verify that the textfield cannot be focused (is occluded by the overlay)\n        expect(\n            document.activeElement,\n            `textfield cannot be clicked`\n        ).to.not.equal(textfield);\n\n        // Close the overlay\n        overlayTrigger.open = undefined;\n\n        // Wait for the overlay to be fully closed\n        await overlayClosed(overlayTrigger.clickOverlayElement, 300);\n\n        // Confirm the textfield is still not focused after closing the overlay\n        expect(document.activeElement, 'textfield is not focused').to.not.equal(\n            textfield\n        );\n\n        // Try clicking the textfield again after the overlay is closed\n        await sendMouseTo(textfield, 'click');\n\n        await waitUntil(\n            () => document.activeElement === textfield,\n            `textfield focused after overlay closed`,\n            { timeout: 500 }\n        );\n\n        // Verify that the textfield can now be focused (no longer occluded)\n        expect(document.activeElement, `textfield focused`).to.equal(textfield);\n    });\n\n    // TODO: skipping this test because it hasn't worked ever. Will review in the migration to Spectrum 2.\n    it.skip('occludes wheel interactions behind the overlay', async () => {\n        // currently fails for no reason in Firefox locally, and most browsers in CI.\n        ({ overlayTrigger, button, popover } = await initTest());\n        const scrollingArea = document.createElement('div');\n        Object.assign(scrollingArea.style, {\n            width: '100px',\n            height: '100px',\n            overflow: 'auto',\n        });\n        const content = Array(100).fill(\n            'This is content within my box that will scroll.'\n        );\n        scrollingArea.textContent = content.join(' ');\n        document.body.append(scrollingArea);\n        await nextFrame();\n\n        expect(scrollingArea.scrollTop).to.equal(0);\n        const distance = 1;\n        await sendMouseTo(scrollingArea, 'move');\n        await sendMouse({\n            steps: [\n                {\n                    type: 'wheel',\n                    position: [0, distance],\n                },\n            ],\n        });\n\n        // wait for scroll to complete\n        await waitUntil(\n            () => scrollingArea.scrollTop === distance,\n            `scroll went to ${distance}`,\n            { timeout: 200 }\n        );\n\n        expect(scrollingArea.scrollTop).to.equal(distance);\n\n        expect(popover.placement).to.equal('top');\n\n        button.click();\n\n        expect(overlayTrigger.open, 'overlay open').to.equal('click');\n\n        expect(\n            overlayTrigger.clickOverlayElement.state,\n            'overlay state after clicking'\n        ).to.equal('opening');\n\n        await overlayOpened(overlayTrigger.clickOverlayElement, 300);\n\n        expect(overlayTrigger.open).to.equal('click');\n        expect(popover.placement).to.equal('bottom');\n        expect(scrollingArea.scrollTop).to.equal(distance);\n        await sendMouse({\n            steps: [\n                {\n                    type: 'wheel',\n                    position: [0, -distance],\n                },\n            ],\n        });\n\n        await aTimeout(50);\n\n        expect(\n            scrollingArea.scrollTop,\n            `scrollTop should be ${distance}.`\n        ).to.equal(distance);\n        scrollingArea.remove();\n    });\n});\n"],
  "mappings": "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",
  "names": ["overlayTrigger", "button", "popover"]
}
