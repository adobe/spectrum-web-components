{
  "version": 3,
  "sources": ["overlay.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport '@spectrum-web-components/button/sp-button.js';\nimport '@spectrum-web-components/dialog/sp-dialog.js';\nimport '@spectrum-web-components/overlay/sp-overlay.js';\nimport '@spectrum-web-components/overlay/overlay-trigger.js';\nimport '@spectrum-web-components/tooltip/sp-tooltip.js';\nimport { Dialog } from '@spectrum-web-components/dialog';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport { Popover } from '@spectrum-web-components/popover';\nimport { setViewport } from '@web/test-runner-commands';\nimport {\n    Overlay,\n    OverlayTrigger,\n    Placement,\n    VirtualTrigger,\n} from '@spectrum-web-components/overlay';\n\nimport {\n    elementUpdated,\n    expect,\n    html,\n    nextFrame,\n    oneEvent,\n} from '@open-wc/testing';\nimport { sendKeys } from '@web/test-runner-commands';\nimport {\n    clickAndHoverTarget,\n    definedOverlayElement,\n    virtualElement,\n} from '../stories/overlay.stories';\nimport { PopoverContent } from '../stories/overlay-story-components.js';\nimport { sendMouse } from '../../../test/plugins/browser.js';\nimport { spy } from 'sinon';\nimport '@spectrum-web-components/theme/sp-theme.js';\nimport '@spectrum-web-components/theme/src/themes.js';\nimport { Theme } from '@spectrum-web-components/theme';\nimport { render, TemplateResult } from '@spectrum-web-components/base';\nimport {\n    fixture,\n    isInteractive,\n    isOnTopLayer,\n} from '../../../test/testing-helpers.js';\nimport { Menu } from '@spectrum-web-components/menu';\nimport { Button } from '@spectrum-web-components/button';\n// import { isWebKit } from '@spectrum-web-components/shared';\n\nasync function styledFixture<T extends Element>(\n    story: TemplateResult\n): Promise<T> {\n    const test = await fixture<Theme>(html`\n        <sp-theme system=\"spectrum\" scale=\"medium\" color=\"dark\">\n            ${story}\n        </sp-theme>\n    `);\n    return test.children[0] as T;\n}\n\ndescribe('Overlays', () => {\n    let testDiv!: HTMLDivElement;\n    let openOverlays: Overlay[] = [];\n\n    describe('shared fixture', () => {\n        beforeEach(async () => {\n            testDiv = await styledFixture<HTMLDivElement>(html`\n                <div id=\"top\">\n                    <style>\n                        body {\n                            display: flex;\n                            align-items: center;\n                            justify-content: center;\n                        }\n\n                        #top {\n                            margin: 100px;\n                        }\n\n                        sp-button {\n                            flex: none;\n                        }\n\n                        #overlay-content {\n                            display: none;\n                        }\n                    </style>\n                    <sp-button id=\"first-button\" variant=\"primary\">\n                        Show Popover\n                    </sp-button>\n                    <div id=\"overlay-content\">\n                        <sp-popover id=\"outer-popover\" direction=\"bottom\" tip>\n                            <sp-dialog no-divider>\n                                <div class=\"options-popover-content\">\n                                    A popover message\n                                </div>\n                                <sp-button id=\"outer-focus-target\">\n                                    Test 1\n                                </sp-button>\n                                <sp-button>Test 2</sp-button>\n                                <sp-button>Test 3</sp-button>\n                            </sp-dialog>\n                        </sp-popover>\n                        <sp-tooltip id=\"hover-1\" class=\"hover-content\">\n                            Hover message\n                        </sp-tooltip>\n                        <sp-tooltip id=\"hover-2\" class=\"hover-content\">\n                            Other hover message\n                        </sp-tooltip>\n                    </div>\n                </div>\n            `);\n            await elementUpdated(testDiv);\n        });\n\n        afterEach(() => {\n            openOverlays.map((overlay) => (overlay.open = false));\n            openOverlays = [];\n        });\n\n        [\n            'bottom',\n            'bottom-start',\n            'bottom-end',\n            'top',\n            'top-start',\n            'top-end',\n            'left',\n            'left-start',\n            'left-end',\n            'right',\n            'right-start',\n            'right-end',\n        ].map((direction) => {\n            const placement = direction as Placement;\n            it(`opens a popover - ${placement}`, async () => {\n                const clickSpy = spy();\n                const button = testDiv.querySelector(\n                    '#first-button'\n                ) as HTMLElement;\n                const outerPopover = testDiv.querySelector(\n                    '#outer-popover'\n                ) as Popover;\n                outerPopover.addEventListener('click', () => {\n                    clickSpy();\n                });\n\n                expect(await isInteractive(outerPopover)).to.be.false;\n                expect(button).to.exist;\n\n                const opened = oneEvent(outerPopover, 'sp-opened');\n                openOverlays.push(\n                    await Overlay.open(outerPopover, {\n                        trigger: button,\n                        type: 'auto',\n                        delayed: false,\n                        placement,\n                        offset: 10,\n                    })\n                );\n                button.insertAdjacentElement(\n                    'afterend',\n                    openOverlays.at(-1) as HTMLElement\n                );\n                await opened;\n                expect(await isInteractive(outerPopover)).to.be.true;\n            });\n        });\n\n        it(`opens a modal dialog`, async () => {\n            const button = testDiv.querySelector(\n                '#first-button'\n            ) as HTMLElement;\n            const outerPopover = testDiv.querySelector(\n                '#outer-popover'\n            ) as Popover;\n\n            expect(await isInteractive(outerPopover)).to.be.false;\n\n            expect(button).to.exist;\n\n            const opened = oneEvent(outerPopover, 'sp-opened');\n            openOverlays.push(\n                await Overlay.open(outerPopover, {\n                    trigger: button,\n                })\n            );\n            button.insertAdjacentElement(\n                'afterend',\n                openOverlays.at(-1) as HTMLElement\n            );\n            await opened;\n\n            const firstFocused = outerPopover.querySelector(\n                '#outer-focus-target'\n            ) as HTMLElement;\n            expect(document.activeElement === firstFocused).to.be.true;\n\n            /**\n             * Tab cycle is awkward in the headless browser, forward tab to just before the known end of the page\n             * and the backward tab past the known beginning of the page. Test that you never focused the button\n             * that triggered the dialog and is outside of the modal. A test that was able to cycle would be better.\n             */\n\n            await sendKeys({\n                press: 'Tab',\n            });\n\n            expect(document.activeElement === button).to.be.false;\n            await sendKeys({\n                press: 'Tab',\n            });\n\n            expect(document.activeElement === button).to.be.false;\n\n            await sendKeys({\n                press: 'Shift+Tab',\n            });\n\n            expect(document.activeElement === button).to.be.false;\n\n            await sendKeys({\n                press: 'Shift+Tab',\n            });\n\n            expect(document.activeElement === button).to.be.false;\n\n            await sendKeys({\n                press: 'Shift+Tab',\n            });\n\n            expect(document.activeElement === button).to.be.false;\n        });\n\n        it(`updates a popover`, async () => {\n            const button = testDiv.querySelector(\n                '#first-button'\n            ) as HTMLElement;\n            const outerPopover = testDiv.querySelector(\n                '#outer-popover'\n            ) as Popover;\n\n            expect(await isInteractive(outerPopover)).to.be.false;\n\n            expect(button).to.exist;\n\n            const opened = oneEvent(outerPopover, 'sp-opened');\n            openOverlays.push(\n                await Overlay.open(outerPopover, {\n                    trigger: button,\n                    type: 'auto',\n                    offset: 10,\n                })\n            );\n            button.insertAdjacentElement(\n                'afterend',\n                openOverlays.at(-1) as HTMLElement\n            );\n            await opened;\n\n            expect(await isInteractive(outerPopover)).to.be.true;\n\n            Overlay.update();\n\n            expect(await isInteractive(outerPopover)).to.be.true;\n        });\n\n        it(`opens a popover w/ delay`, async () => {\n            const button = testDiv.querySelector(\n                '#first-button'\n            ) as HTMLElement;\n            const outerPopover = testDiv.querySelector(\n                '#outer-popover'\n            ) as Popover;\n\n            expect(await isInteractive(outerPopover)).to.be.false;\n            expect(button).to.exist;\n\n            const opened = oneEvent(outerPopover, 'sp-opened');\n            const start = performance.now();\n            openOverlays.push(\n                await Overlay.open(outerPopover, {\n                    trigger: button,\n                    type: 'auto',\n                    delayed: true,\n                    offset: 10,\n                })\n            );\n            button.insertAdjacentElement(\n                'afterend',\n                openOverlays.at(-1) as HTMLElement\n            );\n            await opened;\n            const end = performance.now();\n            expect(await isInteractive(outerPopover)).to.be.true;\n            expect(end - start).to.be.greaterThan(1000);\n        });\n\n        it('opens hover overlay', async () => {\n            const button = testDiv.querySelector(\n                '#first-button'\n            ) as HTMLElement;\n            const hoverOverlay = testDiv.querySelector(\n                '#hover-1'\n            ) as HTMLElement;\n            const clickOverlay = testDiv.querySelector(\n                '#outer-popover'\n            ) as HTMLElement;\n\n            expect(await isOnTopLayer(hoverOverlay)).to.be.false;\n            expect(await isOnTopLayer(clickOverlay)).to.be.false;\n\n            let opened = oneEvent(hoverOverlay, 'sp-opened');\n            openOverlays.push(\n                await Overlay.open(hoverOverlay, {\n                    trigger: button,\n                    type: 'hint',\n                    placement: 'top',\n                    offset: 10,\n                })\n            );\n            button.insertAdjacentElement(\n                'afterend',\n                openOverlays.at(-1) as HTMLElement\n            );\n            await opened;\n            expect(await isOnTopLayer(hoverOverlay)).to.be.true;\n\n            opened = oneEvent(clickOverlay, 'sp-opened');\n            const closed = oneEvent(hoverOverlay, 'sp-closed');\n            // Opening click overlay should close the hover overlay\n            openOverlays.push(\n                await Overlay.open(clickOverlay, {\n                    trigger: button,\n                    type: 'auto',\n                    placement: 'bottom',\n                    offset: 10,\n                })\n            );\n            button.insertAdjacentElement(\n                'afterend',\n                openOverlays.at(-1) as HTMLElement\n            );\n            await opened;\n            await closed;\n            expect(\n                await isInteractive(clickOverlay),\n                'click overlay not interactive'\n            ).to.be.true;\n            expect(\n                await isOnTopLayer(hoverOverlay),\n                'hover overlay interactive'\n            ).to.be.false;\n        });\n\n        it('opens custom overlay', async () => {\n            const button = testDiv.querySelector(\n                '#first-button'\n            ) as HTMLElement;\n            const customOverlay = testDiv.querySelector(\n                '#hover-1'\n            ) as HTMLElement;\n            const clickOverlay = testDiv.querySelector(\n                '#outer-popover'\n            ) as HTMLElement;\n\n            expect(button).to.exist;\n            expect(customOverlay).to.exist;\n\n            expect(await isOnTopLayer(customOverlay)).to.be.false;\n            expect(await isOnTopLayer(clickOverlay)).to.be.false;\n\n            let opened = oneEvent(customOverlay, 'sp-opened');\n            openOverlays.push(\n                await Overlay.open(customOverlay, {\n                    trigger: button,\n                    type: 'auto',\n                    placement: 'top',\n                    offset: 10,\n                })\n            );\n            button.insertAdjacentElement(\n                'afterend',\n                openOverlays.at(-1) as HTMLElement\n            );\n            await opened;\n            expect(await isOnTopLayer(customOverlay)).to.be.true;\n\n            opened = oneEvent(clickOverlay, 'sp-opened');\n            openOverlays.push(\n                await Overlay.open(clickOverlay, {\n                    trigger: button,\n                    type: 'auto',\n                    placement: 'bottom',\n                    offset: 10,\n                })\n            );\n            button.insertAdjacentElement(\n                'afterend',\n                openOverlays.at(-1) as HTMLElement\n            );\n            await opened;\n            expect(await isOnTopLayer(clickOverlay), 'click content open').to.be\n                .true;\n        });\n    });\n\n    it('closes via events', async () => {\n        const test = await fixture<HTMLDivElement>(html`\n            <div>\n                <sp-popover id=\"root\">\n                    <sp-dialog dismissable>\n                        Some Content for the Dialog.\n                    </sp-dialog>\n                </sp-popover>\n            </div>\n        `);\n\n        const el = test.querySelector('sp-popover') as Popover;\n        const dialog = el.querySelector('sp-dialog') as Dialog;\n\n        const opened = oneEvent(el, 'sp-opened');\n        openOverlays.push(\n            await Overlay.open(el, {\n                trigger: test,\n                type: 'auto',\n                placement: 'bottom',\n                offset: 10,\n            })\n        );\n        test.insertAdjacentElement(\n            'afterend',\n            openOverlays.at(-1) as HTMLElement\n        );\n        await opened;\n        expect(await isInteractive(el)).to.be.true;\n\n        const closed = oneEvent(el, 'sp-closed');\n        dialog.close();\n        await closed;\n        expect(await isInteractive(el)).to.be.false;\n    });\n\n    it('positions with a VirtualTrigger', async () => {\n        const test = await fixture<HTMLDivElement>(html`\n            <div>\n                <sp-popover id=\"root\" placement=\"right\">\n                    <sp-dialog dismissable>\n                        Some Content for the Dialog.\n                    </sp-dialog>\n                </sp-popover>\n            </div>\n        `);\n\n        const el = test.querySelector('sp-popover') as Popover;\n        const trigger = new VirtualTrigger(100, 100);\n\n        const opened = oneEvent(el, 'sp-opened');\n        openOverlays.push(\n            await Overlay.open(el, {\n                trigger,\n                type: 'auto',\n                placement: 'right',\n                offset: 10,\n            })\n        );\n        test.insertAdjacentElement(\n            'afterend',\n            openOverlays.at(-1) as HTMLElement\n        );\n        await opened;\n        expect(await isInteractive(el)).to.be.true;\n\n        const initial = el.getBoundingClientRect();\n        trigger.updateBoundingClientRect(500, 500);\n        await nextFrame();\n        await nextFrame();\n        const final = el.getBoundingClientRect();\n        expect(initial.x).to.not.equal(8);\n        expect(initial.y).to.not.equal(8);\n        expect(initial.x).to.not.equal(final.x);\n        expect(initial.y).to.not.equal(final.y);\n    });\n\n    it('closes an inline overlay when tabbing past the content', async () => {\n        const el = await fixture<HTMLDivElement>(html`\n            <div>\n                <sp-button class=\"trigger\">Trigger</sp-button>\n                <sp-popover class=\"content\">\n                    <input />\n                </sp-popover>\n                <input value=\"After\" id=\"after\" />\n            </div>\n        `);\n\n        const trigger = el.querySelector('.trigger') as HTMLElement;\n        const content = el.querySelector('.content') as HTMLElement;\n        const input = el.querySelector('input') as HTMLInputElement;\n        const after = el.querySelector('#after') as HTMLAnchorElement;\n\n        const opened = oneEvent(content, 'sp-opened');\n        openOverlays.push(\n            await Overlay.open(content, {\n                trigger,\n                type: 'auto',\n                receivesFocus: 'auto',\n            })\n        );\n        trigger.insertAdjacentElement(\n            'afterend',\n            openOverlays.at(-1) as HTMLElement\n        );\n        await opened;\n\n        expect(await isInteractive(content)).to.be.true;\n        expect(document.activeElement).to.equal(input);\n\n        const closed = oneEvent(content, 'sp-closed');\n        await sendKeys({\n            press: 'Shift+Tab',\n        });\n        await closed;\n\n        expect(document.activeElement).to.equal(trigger);\n\n        await sendKeys({\n            press: 'Tab',\n        });\n        expect(document.activeElement).to.equal(after);\n        expect(await isInteractive(content)).to.be.false;\n    });\n\n    it('closes an inline overlay when tabbing before the trigger', async () => {\n        const el = await fixture<HTMLDivElement>(html`\n            <div>\n                <input value=\"Before\" id=\"before\" />\n                <sp-button class=\"trigger\">Trigger</sp-button>\n                <div class=\"content\">\n                    <label>\n                        Content in an inline overlay.\n                        <input />\n                    </label>\n                </div>\n            </div>\n        `);\n\n        const trigger = el.querySelector('.trigger') as HTMLElement;\n        const content = el.querySelector('.content') as HTMLElement;\n        const input = el.querySelector('.content input') as HTMLInputElement;\n        const before = el.querySelector('#before') as HTMLAnchorElement;\n\n        const open = oneEvent(trigger, 'sp-opened');\n        openOverlays.push(\n            await Overlay.open(content, {\n                trigger,\n                type: 'auto',\n            })\n        );\n        trigger.insertAdjacentElement(\n            'afterend',\n            openOverlays.at(-1) as HTMLElement\n        );\n        await open;\n\n        expect(document.activeElement).to.equal(input);\n\n        await sendKeys({\n            press: 'Shift+Tab',\n        });\n\n        expect(document.activeElement).to.equal(trigger);\n\n        await sendKeys({\n            press: 'Shift+Tab',\n        });\n\n        expect(document.activeElement).to.equal(before);\n    });\n\n    it('opens detached content', async () => {\n        const textContent = 'This is a detached element that has been overlaid';\n        const el = await fixture<HTMLButtonElement>(html`\n            <button>Trigger</button>\n        `);\n\n        const content = document.createElement('sp-popover');\n        content.textContent = textContent;\n\n        const opened = oneEvent(content, 'sp-opened');\n        const overlay = await Overlay.open(content, {\n            trigger: el,\n            type: 'auto',\n            placement: 'bottom',\n        });\n        el.insertAdjacentElement('afterend', overlay);\n        await opened;\n\n        expect(await isInteractive(content)).to.be.true;\n\n        const closed = oneEvent(content, 'sp-closed');\n        overlay.open = false;\n        await closed;\n\n        expect(await isInteractive(content)).to.be.false;\n\n        content.remove();\n    });\n});\ndescribe('Overlay - type=\"modal\"', () => {\n    describe('handle multiple separate `contextmenu` events', async () => {\n        let width = 0;\n        let height = 0;\n        let firstMenu: Popover;\n        let firstRect: DOMRect;\n        let secondMenu: Popover;\n        let secondRect: DOMRect;\n        before(async () => {\n            render(\n                html`\n                    <sp-theme color=\"light\" scale=\"large\">\n                        ${virtualElement({\n                            ...virtualElement.args,\n                            offset: 6,\n                        })}\n                    </sp-theme>\n                `,\n                document.body\n            );\n\n            width = window.innerWidth;\n            height = window.innerHeight;\n        });\n        after(() => {\n            document.querySelector('sp-theme')?.remove();\n        });\n        it('opens the first \"contextmenu\" overlay', async () => {\n            const opened = oneEvent(document, 'sp-opened');\n            // Right click to open \"context menu\" overlay.\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: [width / 2 + 50, height / 2],\n                    },\n                    {\n                        type: 'click',\n                        options: {\n                            button: 'right',\n                        },\n                        position: [width / 2 + 50, height / 2],\n                    },\n                ],\n            });\n            await opened;\n            firstMenu = document.querySelector('sp-popover') as Popover;\n            expect(firstMenu.textContent).to.include('Menu source: end');\n            firstRect = firstMenu.getBoundingClientRect();\n            expect(firstMenu).to.not.be.null;\n        });\n        it('closes the first \"contextmenu\" when opening a second', async () => {\n            const closed = oneEvent(document, 'sp-closed');\n            const opened = oneEvent(document, 'sp-opened');\n            /**\n             * Right click out of the \"context menu\" overlay to both close\n             * the first overlay and have the event passed to the surfacing page\n             * in order to open a subsequent \"context menu\" overlay.\n             *\n             * Using `sendMouse` here triggers the light dismiss for some reason while\n             * manual interacting in this way does not...\n             */\n            const trigger = document.querySelector(\n                'start-end-contextmenu'\n            ) as HTMLElement;\n            trigger.shadowRoot?.querySelector('#start')?.dispatchEvent(\n                new Event('contextmenu', {\n                    composed: true,\n                })\n            );\n            await nextFrame();\n            trigger.shadowRoot?.querySelector('#start')?.dispatchEvent(\n                new Event('pointerup', {\n                    composed: true,\n                    bubbles: true,\n                })\n            );\n            await closed;\n            await opened;\n            secondMenu = document.querySelector('sp-popover') as Popover;\n            expect(secondMenu.textContent).to.include('Menu source: start');\n            secondRect = secondMenu.getBoundingClientRect();\n            expect(secondMenu).to.not.be.null;\n        });\n        it('closes the second \"contextmenu\" when clicking away', async () => {\n            const closed = oneEvent(document, 'sp-closed');\n            sendMouse({\n                steps: [\n                    {\n                        type: 'click',\n                        position: [width - width / 8, height - height / 8],\n                    },\n                ],\n            });\n            await closed;\n            expect(firstRect.top).to.not.equal(secondRect.top);\n            expect(firstRect.left).to.not.equal(secondRect.left);\n        });\n    });\n\n    it('does not open content off of the viewport', async () => {\n        before(async () => {\n            await setViewport({ width: 360, height: 640 });\n            // Allow viewport update to propagate.\n            await nextFrame();\n        });\n        after(async () => {\n            await setViewport({ width: 800, height: 600 });\n            // Allow viewport update to propagate.\n            await nextFrame();\n        });\n\n        await fixture<HTMLDivElement>(html`\n            ${virtualElement({\n                ...virtualElement.args,\n                offset: 6,\n            })}\n        `);\n\n        const opened = oneEvent(document, 'sp-opened');\n        // Right click to open \"context menu\" overlay.\n        sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [270, 10],\n                },\n                {\n                    type: 'click',\n                    options: {\n                        button: 'right',\n                    },\n                    position: [270, 10],\n                },\n            ],\n        });\n        await opened;\n\n        const firstMenu = document.querySelector('sp-menu') as Menu;\n        expect(firstMenu).to.not.be.null;\n        expect(await isInteractive(firstMenu)).to.be.true;\n\n        const closed = oneEvent(document, 'sp-closed');\n        sendKeys({\n            press: 'Escape',\n        });\n        await closed;\n\n        expect(await isInteractive(firstMenu)).to.be.false;\n    });\n\n    it('opens children in the modal stack through shadow roots', async () => {\n        const el = await fixture<OverlayTrigger>(definedOverlayElement());\n        const trigger = el.querySelector(\n            '[slot=\"trigger\"]'\n        ) as HTMLButtonElement;\n        let open = oneEvent(el, 'sp-opened');\n        trigger.click();\n        await open;\n        expect(el.open).to.equal('click');\n        const content = document.querySelector(\n            'popover-content'\n        ) as PopoverContent;\n        open = oneEvent(content, 'sp-opened');\n        content.button.click();\n        await open;\n        expect(content.trigger.open).to.equal('click');\n        let close = oneEvent(content, 'sp-closed');\n        content.trigger.removeAttribute('open');\n        await close;\n        expect(content.trigger.open).to.be.null;\n        close = oneEvent(el, 'sp-closed');\n        el.removeAttribute('open');\n        await close;\n        expect(el.open).to.be.null;\n    });\n\n    it('should not open hover overlay right after closing the click overlay using the mouse', async () => {\n        const overlayTrigger = await fixture<OverlayTrigger>(\n            clickAndHoverTarget()\n        );\n\n        await elementUpdated(overlayTrigger);\n        expect(overlayTrigger.open).to.be.undefined;\n\n        const trigger = overlayTrigger.querySelector(\n            'sp-button[slot=\"trigger\"]'\n        ) as Button;\n\n        const opened = oneEvent(trigger, 'sp-opened');\n        trigger.click();\n        await opened;\n\n        expect(overlayTrigger.open).to.equal('click');\n\n        const closed = oneEvent(trigger, 'sp-closed');\n        sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [1, 1],\n                },\n            ],\n        });\n        await closed;\n\n        expect(overlayTrigger.open).to.be.undefined;\n        expect(document.activeElement === trigger, 'trigger focused').to.be\n            .true;\n    });\n\n    it('should not open hover overlay right after closing the click overlay using the keyboard', async () => {\n        const overlayTrigger = await fixture<OverlayTrigger>(\n            clickAndHoverTarget()\n        );\n\n        const trigger = overlayTrigger.querySelector(\n            'sp-button[slot=\"trigger\"]'\n        ) as Button;\n\n        const opened = oneEvent(trigger, 'sp-opened');\n        trigger.click();\n        await opened;\n\n        expect(overlayTrigger.open).to.equal('click');\n\n        const closed = oneEvent(trigger, 'sp-closed');\n        sendKeys({\n            press: 'Escape',\n        });\n        await closed;\n\n        expect(overlayTrigger.open).to.be.undefined;\n        expect(document.activeElement === trigger, 'trigger focused').to.be\n            .true;\n    });\n});\ndescribe('Overlay - timing', () => {\n    it('manages multiple modals in a row without preventing them from closing', async () => {\n        const test = await fixture<HTMLDivElement>(html`\n            <div>\n                <overlay-trigger id=\"test-1\" placement=\"bottom\">\n                    <sp-button slot=\"trigger\">Trigger 1</sp-button>\n                    <sp-popover slot=\"hover-content\">\n                        <p>Hover contentent for \"Trigger 1\".</p>\n                    </sp-popover>\n                </overlay-trigger>\n                <overlay-trigger id=\"test-2\" placement=\"right\">\n                    <sp-button slot=\"trigger\">Trigger 2</sp-button>\n                    <sp-popover slot=\"click-content\">\n                        <p>Click contentent for \"Trigger 2\".</p>\n                    </sp-popover>\n                    <sp-popover slot=\"hover-content\">\n                        <p>Hover contentent for \"Trigger 2\".</p>\n                    </sp-popover>\n                </overlay-trigger>\n            </div>\n        `);\n\n        const overlayTrigger1 = test.querySelector('#test-1') as OverlayTrigger;\n        const overlayTrigger2 = test.querySelector('#test-2') as OverlayTrigger;\n        const trigger1 = overlayTrigger1.querySelector(\n            '[slot=\"trigger\"]'\n        ) as HTMLButtonElement;\n        const trigger2 = overlayTrigger2.querySelector(\n            '[slot=\"trigger\"]'\n        ) as HTMLButtonElement;\n\n        const boundingRectTrigger1 = trigger1.getBoundingClientRect();\n        const boundingRectTrigger2 = trigger2.getBoundingClientRect();\n        const trigger1Position: [number, number] = [\n            boundingRectTrigger1.left + boundingRectTrigger1.width / 2,\n            boundingRectTrigger1.top + boundingRectTrigger1.height / 2,\n        ];\n        const outsideTriggers: [number, number] = [\n            boundingRectTrigger1.left + boundingRectTrigger1.width / 2,\n            300,\n        ];\n        const trigger2Position: [number, number] = [\n            boundingRectTrigger2.left + boundingRectTrigger2.width / 2,\n            boundingRectTrigger2.top + boundingRectTrigger2.height / 4,\n        ];\n\n        // Move pointer over \"Trigger 1\", should _start_ to open \"hover\" content.\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: trigger1Position,\n                },\n            ],\n        });\n        await nextFrame();\n        await nextFrame();\n\n        // Move pointer out of \"Trigger 1\", should _start_ to close \"hover\" content.\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: outsideTriggers,\n                },\n            ],\n        });\n        await nextFrame();\n        await nextFrame();\n        // Move pointer over \"Trigger 2\", should _start_ to open \"hover\" content.\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: trigger2Position,\n                },\n            ],\n        });\n        await nextFrame();\n        await nextFrame();\n\n        const opened = oneEvent(trigger2, 'sp-opened');\n        // Click \"Trigger 2\", should _start_ to open \"click\" content and _start_ to close \"hover\" content.\n        await sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: trigger2Position,\n                },\n            ],\n        });\n        await opened;\n        await nextFrame();\n        await nextFrame();\n\n        // \"click\" content for \"Trigger 2\", _only_, open.\n        expect(overlayTrigger1.hasAttribute('open')).to.be.false;\n        expect(overlayTrigger2.hasAttribute('open')).to.be.true;\n        expect(overlayTrigger2.getAttribute('open')).to.equal('click');\n\n        const closed = oneEvent(overlayTrigger2, 'sp-closed');\n        await sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: outsideTriggers,\n                },\n            ],\n        });\n        await closed;\n\n        // Both overlays are closed.\n        // Neither trigger received \"focus\" because the pointer \"clicked\" away, redirecting focus to <body>\n        expect(overlayTrigger1.hasAttribute('open')).to.be.false;\n        expect(overlayTrigger2.hasAttribute('open')).to.be.false;\n    });\n});\n\ndescribe('maintains focus consistency in all browsers', () => {\n    it('should not have a focus-visible on trigger when focus happens after click', async () => {\n        const overlayTrigger = await fixture<OverlayTrigger>(\n            clickAndHoverTarget()\n        );\n        await elementUpdated(overlayTrigger);\n        expect(overlayTrigger.open).to.be.undefined;\n        const trigger = overlayTrigger.querySelector(\n            'sp-button[slot=\"trigger\"]'\n        ) as Button;\n\n        const boundingRect = trigger.getBoundingClientRect();\n\n        const opened = oneEvent(trigger, 'sp-opened');\n        await sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [\n                        boundingRect.left + boundingRect.width / 2,\n                        boundingRect.top + boundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await opened;\n\n        expect(overlayTrigger.open).to.equal('click');\n\n        const closed = oneEvent(trigger, 'sp-closed');\n        await sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [0, 0],\n                },\n            ],\n        });\n        await closed;\n\n        expect(trigger.matches(':focus-visible')).to.be.false;\n    });\n});\n\ndescribe('Overlay - Interactive Content', () => {\n    it('stays open when interacting with elements inside', async () => {\n        const el = await fixture<HTMLDivElement>(html`\n            <div>\n                <sp-button id=\"trigger\">Open Overlay</sp-button>\n                <sp-overlay\n                    trigger=\"trigger@click\"\n                    type=\"auto\"\n                    placement=\"bottom\"\n                >\n                    <sp-popover dialog>\n                        <p>\n                            My slider in overlay element:\n                            <sp-slider\n                                label=\"Slider Label - Editable\"\n                                editable\n                            ></sp-slider>\n                        </p>\n                    </sp-popover>\n                </sp-overlay>\n            </div>\n        `);\n\n        const trigger = el.querySelector('#trigger') as HTMLElement;\n        const overlay = el.querySelector('sp-overlay') as Overlay;\n\n        await elementUpdated(overlay);\n\n        const opened = oneEvent(overlay, 'sp-opened');\n        trigger.click();\n        await opened;\n\n        expect(overlay.open).to.be.true;\n\n        await nextFrame();\n        await nextFrame();\n\n        const slider = el.querySelector('sp-slider') as HTMLElement;\n        expect(slider).to.exist;\n\n        slider.click();\n        await nextFrame();\n        await nextFrame();\n        expect(overlay.open).to.be.true;\n    });\n});\n\ndescribe('Overlay should correctly trap focus', () => {\n    it('should trap focus when the overlay type is modal', async () => {\n        const el = await fixture<HTMLDivElement>(html`\n            <div>\n                <sp-button id=\"trigger\">Open Overlay</sp-button>\n                <sp-overlay trigger=\"trigger@click\" type=\"modal\">\n                    <sp-dialog>\n                        <p>Overlay content</p>\n                        <sp-button id=\"button-1\">button 1</sp-button>\n                        <sp-button id=\"button-2\">button 2</sp-button>\n                    </sp-dialog>\n                </sp-overlay>\n            </div>\n        `);\n\n        const trigger = el.querySelector('#trigger') as HTMLElement;\n        const overlay = el.querySelector('sp-overlay') as Overlay;\n\n        await elementUpdated(overlay);\n\n        const opened = oneEvent(overlay, 'sp-opened');\n        // use keyboard to open the overlay\n        trigger.focus();\n        await sendKeys({\n            press: 'Enter',\n        });\n        await opened;\n\n        expect(overlay.open).to.be.true;\n\n        const button1 = el.querySelector('#button-1') as HTMLElement;\n        const button2 = el.querySelector('#button-2') as HTMLElement;\n\n        // expect button1 to be focused\n        expect(document.activeElement).to.equal(button1);\n\n        // press tab to focus on button2\n        await sendKeys({\n            press: 'Tab',\n        });\n        expect(document.activeElement).to.equal(button2);\n\n        // press tab to focus on button1\n        await sendKeys({\n            press: 'Tab',\n        });\n        expect(document.activeElement).to.equal(button1);\n\n        // press tab to focus on button2\n        await sendKeys({\n            press: 'Tab',\n        });\n        expect(document.activeElement).to.equal(button2);\n    });\n    it('should trap focus when the overlay type is page', async () => {\n        const el = await fixture<HTMLDivElement>(html`\n            <div>\n                <sp-button id=\"trigger\">Open Overlay</sp-button>\n                <sp-overlay trigger=\"trigger@click\" type=\"modal\">\n                    <sp-dialog>\n                        <p>Overlay content</p>\n                        <sp-button id=\"button-1\">button 1</sp-button>\n                        <sp-button id=\"button-2\">button 2</sp-button>\n                    </sp-dialog>\n                </sp-overlay>\n            </div>\n        `);\n\n        const trigger = el.querySelector('#trigger') as HTMLElement;\n        const overlay = el.querySelector('sp-overlay') as Overlay;\n\n        await elementUpdated(overlay);\n\n        const opened = oneEvent(overlay, 'sp-opened');\n        trigger.click();\n        await opened;\n\n        expect(overlay.open).to.be.true;\n\n        const button1 = el.querySelector('#button-1') as HTMLElement;\n        const button2 = el.querySelector('#button-2') as HTMLElement;\n\n        // expect button1 to be focused\n        expect(document.activeElement).to.equal(button1);\n\n        // press tab to focus on button2\n        await sendKeys({\n            press: 'Tab',\n        });\n        expect(document.activeElement).to.equal(button2);\n\n        // press tab to focus on button1\n        await sendKeys({\n            press: 'Tab',\n        });\n        expect(document.activeElement).to.equal(button1);\n\n        // press tab to focus on button2\n        await sendKeys({\n            press: 'Tab',\n        });\n        expect(document.activeElement).to.equal(button2);\n    });\n    it('should not trap focus when the overlay type is auto', async () => {\n        const el = await fixture<HTMLDivElement>(html`\n            <div>\n                <sp-button id=\"trigger\">Open Overlay</sp-button>\n                <sp-overlay trigger=\"trigger@click\" type=\"auto\">\n                    <sp-dialog>\n                        <p>Overlay content</p>\n                        <sp-button id=\"test\">test</sp-button>\n                    </sp-dialog>\n                </sp-overlay>\n                <input id=\"input\" />\n            </div>\n        `);\n\n        const trigger = el.querySelector('#trigger') as HTMLElement;\n        const overlay = el.querySelector('sp-overlay') as Overlay;\n\n        await elementUpdated(overlay);\n\n        const opened = oneEvent(overlay, 'sp-opened');\n        trigger.click();\n        await opened;\n\n        expect(overlay.open).to.be.true;\n\n        await sendKeys({\n            press: 'Tab',\n        });\n\n        const input = el.querySelector('#input') as HTMLInputElement;\n        expect(document.activeElement).to.equal(input);\n    });\n});\n"],
  "mappings": "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",
  "names": ["after", "before"]
}
