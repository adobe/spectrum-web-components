{
  "version": 3,
  "sources": ["OverlayTrigger.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n    state,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport type { Placement } from '@floating-ui/dom';\n\nimport type { BeforetoggleOpenEvent } from './events.dev.js'\nimport type { Overlay } from './Overlay.dev.js'\nimport type { OverlayTriggerInteractions } from './overlay-types';\nimport '@spectrum-web-components/overlay/sp-overlay.js';\n\nimport overlayTriggerStyles from './overlay-trigger.css.js';\n\nexport type OverlayContentTypes = 'click' | 'hover' | 'longpress';\n\n// Helper type to create all unique combinations of OverlayContentTypes\ntype Combinations<T extends string, U extends string = T> = T extends string\n    ? T | `${T} ${Combinations<Exclude<U, T>>}`\n    : never;\n\nexport type TriggeredByType = Combinations<OverlayContentTypes>;\n\n/**\n * @element overlay-trigger\n *\n * A component that manages overlay content triggered by different interactions.\n * Supports click, hover, and longpress triggered overlays with configurable\n * placement and behavior.\n *\n * @slot trigger - The content that will trigger the various overlays\n * @slot hover-content - The content that will be displayed on hover\n * @slot click-content - The content that will be displayed on click\n * @slot longpress-content - The content that will be displayed on longpress\n * @slot longpress-describedby-descriptor - Description for longpress content\n *\n * @fires sp-opened - Announces that the overlay has been opened\n * @fires sp-closed - Announces that the overlay has been closed\n *\n * @attr {string} placement - The placement of the overlay relative to the trigger\n * @attr {number} offset - The distance between the overlay and the trigger\n * @attr {boolean} disabled - Whether the overlay trigger is disabled\n * @attr {string} receives-focus - How focus should be handled ('true'|'false'|'auto')\n * @attr {string} triggered-by - The type of interaction that will trigger the overlay ('click'|'hover'|'longpress')\n */\nexport class OverlayTrigger extends SpectrumElement {\n    public static override get styles(): CSSResultArray {\n        return [overlayTriggerStyles];\n    }\n\n    /**\n     * Optional property to optimize performance and prevent race conditions.\n     *\n     * By explicitly declaring which content types are used (e.g. \"click\", \"longpress hover\"),\n     * we can avoid:\n     * 1. Extra renders from unnecessary slot reparenting\n     * 2. Potential infinite render loops during content detection\n     * 3. Race conditions during slot assignment\n     *\n     * By only returning overlay wrappers for explicitly declared content types,\n     * we minimize unecessary DOM nodes, operations and ensure a more stable rendering behavior.\n     */\n    @property({ attribute: 'triggered-by' })\n    public triggeredBy?: TriggeredByType;\n\n    /**\n     * @type {\"top\" | \"top-start\" | \"top-end\" | \"right\" | \"right-start\" | \"right-end\" | \"bottom\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"left-start\" | \"left-end\"}\n     * @attr\n     */\n    @property({ reflect: true })\n    public placement?: Placement;\n\n    @property()\n    public type?: OverlayTriggerInteractions;\n\n    @property({ type: Number })\n    public offset = 6;\n\n    @property({ reflect: true })\n    public open?: OverlayContentTypes;\n\n    @property({ type: Boolean, reflect: true })\n    public disabled = false;\n\n    @property({ attribute: 'receives-focus' })\n    public receivesFocus: 'true' | 'false' | 'auto' = 'auto';\n\n    @state()\n    private clickContent: HTMLElement[] = [];\n\n    private clickPlacement?: Placement;\n\n    @state()\n    private longpressContent: HTMLElement[] = [];\n\n    private longpressPlacement?: Placement;\n\n    @state()\n    private hoverContent: HTMLElement[] = [];\n\n    private hoverPlacement?: Placement;\n\n    @state()\n    private targetContent: HTMLElement[] = [];\n\n    @query('#click-overlay', true)\n    clickOverlayElement!: Overlay;\n\n    @query('#longpress-overlay', true)\n    longpressOverlayElement!: Overlay;\n\n    @query('#hover-overlay', true)\n    hoverOverlayElement!: Overlay;\n\n    private getAssignedElementsFromSlot(slot: HTMLSlotElement): HTMLElement[] {\n        return slot.assignedElements({ flatten: true }) as HTMLElement[];\n    }\n\n    private handleTriggerContent(\n        event: Event & { target: HTMLSlotElement }\n    ): void {\n        this.targetContent = this.getAssignedElementsFromSlot(event.target);\n    }\n\n    private handleSlotContent(\n        event: Event & { target: HTMLSlotElement }\n    ): void {\n        switch (event.target.name) {\n            case 'click-content':\n                this.clickContent = this.getAssignedElementsFromSlot(\n                    event.target\n                );\n                break;\n            case 'longpress-content':\n                this.longpressContent = this.getAssignedElementsFromSlot(\n                    event.target\n                );\n                break;\n            case 'hover-content':\n                this.hoverContent = this.getAssignedElementsFromSlot(\n                    event.target\n                );\n                break;\n        }\n    }\n\n    private handleBeforetoggle(event: BeforetoggleOpenEvent): void {\n        const { target } = event;\n        let type: OverlayContentTypes;\n        if (target === this.clickOverlayElement) {\n            type = 'click';\n        } else if (target === this.longpressOverlayElement) {\n            type = 'longpress';\n        } else if (target === this.hoverOverlayElement) {\n            type = 'hover';\n            /* c8 ignore next 3 */\n        } else {\n            return;\n        }\n        if (event.newState === 'open') {\n            this.open = type;\n        } else if (this.open === type) {\n            this.open = undefined;\n        }\n    }\n\n    protected override update(changes: PropertyValues): void {\n        if (changes.has('clickContent')) {\n            this.clickPlacement =\n                ((this.clickContent[0]?.getAttribute('placement') ||\n                    this.clickContent[0]?.getAttribute(\n                        'direction'\n                    )) as Placement) || undefined;\n        }\n        if (changes.has('hoverContent')) {\n            this.hoverPlacement =\n                ((this.hoverContent[0]?.getAttribute('placement') ||\n                    this.hoverContent[0]?.getAttribute(\n                        'direction'\n                    )) as Placement) || undefined;\n        }\n        if (changes.has('longpressContent')) {\n            this.longpressPlacement =\n                ((this.longpressContent[0]?.getAttribute('placement') ||\n                    this.longpressContent[0]?.getAttribute(\n                        'direction'\n                    )) as Placement) || undefined;\n        }\n        super.update(changes);\n    }\n\n    protected renderSlot(name: string): TemplateResult {\n        return html`\n            <slot name=${name} @slotchange=${this.handleSlotContent}></slot>\n        `;\n    }\n\n    protected renderClickOverlay(): TemplateResult {\n        const slot = this.renderSlot('click-content');\n        const clickOverlay = html`\n            <sp-overlay\n                id=\"click-overlay\"\n                ?disabled=${this.disabled || !this.clickContent.length}\n                ?open=${this.open === 'click' && !!this.clickContent.length}\n                .offset=${this.offset}\n                .placement=${this.clickPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${'click'}\n                .type=${this.type !== 'modal' ? 'auto' : 'modal'}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n        `;\n\n        // If click interactions are explicitly enabled by customers, always return the overlay\n        if (this.triggeredBy?.includes('click')) {\n            return clickOverlay;\n        }\n\n        if (!this.clickContent.length) {\n            return slot;\n        } else {\n            return clickOverlay;\n        }\n    }\n\n    protected renderHoverOverlay(): TemplateResult {\n        const slot = this.renderSlot('hover-content');\n        const hoverOverlay = html`\n            <sp-overlay\n                id=\"hover-overlay\"\n                ?open=${this.open === 'hover' && !!this.hoverContent.length}\n                ?disabled=${this.disabled ||\n                !this.hoverContent.length ||\n                (!!this.open && this.open !== 'hover')}\n                .offset=${this.offset}\n                .placement=${this.hoverPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${'hover'}\n                .type=${'hint'}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n        `;\n\n        // If hover interactions are explicitly enabled by customers, always return the overlay\n        if (this.triggeredBy?.includes('hover')) {\n            return hoverOverlay;\n        }\n\n        if (!this.hoverContent.length) {\n            return slot;\n        } else {\n            return hoverOverlay;\n        }\n    }\n\n    protected renderLongpressOverlay(): TemplateResult {\n        const slot = this.renderSlot('longpress-content');\n        const longpressOverlay = html`\n            <sp-overlay\n                id=\"longpress-overlay\"\n                ?disabled=${this.disabled || !this.longpressContent.length}\n                ?open=${this.open === 'longpress' &&\n                !!this.longpressContent.length}\n                .offset=${this.offset}\n                .placement=${this.longpressPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${'longpress'}\n                .type=${'auto'}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n            <slot name=\"longpress-describedby-descriptor\"></slot>\n        `;\n\n        // If click interactions are explicitly enabled by customers, always return the overlay\n        if (this.triggeredBy?.includes('longpress')) {\n            return longpressOverlay;\n        }\n\n        if (!this.longpressContent.length) {\n            return slot;\n        } else {\n            return longpressOverlay;\n        }\n    }\n\n    protected override render(): TemplateResult {\n        // Keyboard event availability documented in README.md\n        return html`\n            <slot\n                id=\"trigger\"\n                name=\"trigger\"\n                @slotchange=${this.handleTriggerContent}\n            ></slot>\n            ${[\n                this.renderClickOverlay(),\n                this.renderHoverOverlay(),\n                this.renderLongpressOverlay(),\n            ]}\n        `;\n    }\n\n    protected override updated(changedProperties: PropertyValues): void {\n        super.updated(changedProperties);\n\n        if (window.__swc?.DEBUG && !this.triggeredBy) {\n            const issues = [\n                'You have not specified the `triggeredBy` property. For optimal performance, consider explicitly declaring which overlay types you plan to use.',\n                'Example: triggered-by=\"click hover\"',\n                'This helps avoid unnecessary DOM operations and potential race conditions.',\n            ];\n\n            window.__swc.warn(\n                this,\n                'Performance optimization available for <overlay-trigger>:',\n                'https://opensource.adobe.com/spectrum-web-components/components/overlay-trigger/#performance-optimization',\n                { issues }\n            );\n        }\n\n        if (this.disabled && changedProperties.has('disabled')) {\n            this.open = undefined;\n            return;\n        }\n    }\n\n    protected override async getUpdateComplete(): Promise<boolean> {\n        const complete = (await super.getUpdateComplete()) as boolean;\n        return complete;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
