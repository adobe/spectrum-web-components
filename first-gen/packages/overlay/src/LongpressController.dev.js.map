{
  "version": 3,
  "sources": ["LongpressController.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    isAndroid,\n    isIOS,\n} from '@spectrum-web-components/shared/src/platform.js';\nimport { conditionAttributeWithId } from '@spectrum-web-components/base/src/condition-attribute-with-id.js';\nimport { randomID } from '@spectrum-web-components/shared/src/random-id.js';\n\nimport { noop } from './AbstractOverlay.dev.js'\nimport {\n    InteractionController,\n    InteractionTypes,\n} from './InteractionController.dev.js'\n\nconst LONGPRESS_DURATION = 300;\nexport const LONGPRESS_INSTRUCTIONS = {\n    touch: 'Double tap and long press for additional options',\n    keyboard: 'Press Space or Alt+Down Arrow for additional options',\n    mouse: 'Click and hold for additional options',\n};\n\ntype LongpressEvent = {\n    source: 'pointer' | 'keyboard';\n};\n\nexport class LongpressController extends InteractionController {\n    override type = InteractionTypes.longpress;\n\n    override get activelyOpening(): boolean {\n        return (\n            this.longpressState === 'opening' ||\n            this.longpressState === 'pressed'\n        );\n    }\n\n    protected longpressState: null | 'potential' | 'opening' | 'pressed' = null;\n\n    override releaseDescription = noop;\n\n    private timeout!: ReturnType<typeof setTimeout>;\n\n    handleLongpress(): void {\n        this.open = true;\n        this.longpressState =\n            this.longpressState === 'potential' ? 'opening' : 'pressed';\n    }\n\n    handlePointerdown(event: PointerEvent): void {\n        if (!this.target) return;\n        if (event.button !== 0) return;\n        this.longpressState = 'potential';\n        document.addEventListener('pointerup', this.handlePointerup);\n        document.addEventListener('pointercancel', this.handlePointerup);\n        // Only dispatch longpress event if the trigger element isn't doing it for us.\n        const triggerHandlesLongpress = 'holdAffordance' in this.target;\n        if (triggerHandlesLongpress) return;\n        this.timeout = setTimeout(() => {\n            if (!this.target) return;\n            this.target.dispatchEvent(\n                new CustomEvent<LongpressEvent>('longpress', {\n                    bubbles: true,\n                    composed: true,\n                    detail: {\n                        source: 'pointer',\n                    },\n                })\n            );\n        }, LONGPRESS_DURATION);\n    }\n\n    private handlePointerup = (): void => {\n        clearTimeout(this.timeout);\n        if (!this.target) return;\n        // When triggered by the pointer, the last of `opened`\n        // or `pointerup` should move the `longpressState` to\n        // `null` so that the earlier event can void the \"light\n        // dismiss\" and keep the Overlay open.\n        this.longpressState =\n            this.overlay?.state === 'opening' ? 'pressed' : null;\n        document.removeEventListener('pointerup', this.handlePointerup);\n        document.removeEventListener('pointercancel', this.handlePointerup);\n    };\n\n    private handleKeydown(event: KeyboardEvent): void {\n        const { code, altKey } = event;\n        if (altKey && code === 'ArrowDown') {\n            event.stopPropagation();\n            event.stopImmediatePropagation();\n        }\n    }\n\n    private handleKeyup(event: KeyboardEvent): void {\n        const { code, altKey } = event;\n        if (code === 'Space' || (altKey && code === 'ArrowDown')) {\n            if (!this.target) {\n                return;\n            }\n            event.stopPropagation();\n            this.target.dispatchEvent(\n                new CustomEvent<LongpressEvent>('longpress', {\n                    bubbles: true,\n                    composed: true,\n                    detail: {\n                        source: 'keyboard',\n                    },\n                })\n            );\n            setTimeout(() => {\n                this.longpressState = null;\n            });\n        }\n    }\n\n    override prepareDescription(trigger: HTMLElement): void {\n        if (\n            // do not reapply until target is recycled\n            this.releaseDescription !== noop ||\n            // require \"longpress content\" to apply relationship\n            !this.overlay.elements.length\n        ) {\n            return;\n        }\n\n        const longpressDescription = document.createElement('div');\n        longpressDescription.id = `longpress-describedby-descriptor-${randomID()}`;\n        const messageType = isIOS() || isAndroid() ? 'touch' : 'keyboard';\n        longpressDescription.textContent = LONGPRESS_INSTRUCTIONS[messageType];\n        longpressDescription.slot = 'longpress-describedby-descriptor';\n        const triggerParent = trigger.getRootNode() as HTMLElement;\n        const overlayParent = this.overlay.getRootNode() as HTMLElement;\n        // Manage the placement of the helper element in an accessible place with\n        // the lowest chance of negatively affecting the layout of the page.\n        if (triggerParent === overlayParent) {\n            // Trigger and Overlay in same DOM tree...\n            // Append helper element to Overlay.\n            this.overlay.append(longpressDescription);\n        } else {\n            // If Trigger in <body>, hide helper\n            longpressDescription.hidden = !('host' in triggerParent);\n            // Trigger and Overlay in different DOM tree, Trigger in shadow tree...\n            // Insert helper element after Trigger.\n            trigger.insertAdjacentElement('afterend', longpressDescription);\n        }\n\n        const releaseDescription = conditionAttributeWithId(\n            trigger,\n            'aria-describedby',\n            [longpressDescription.id]\n        );\n        this.releaseDescription = () => {\n            releaseDescription();\n            longpressDescription.remove();\n            this.releaseDescription = noop;\n        };\n    }\n\n    override shouldCompleteOpen(): void {\n        // When triggered by the pointer, the last of `opened`\n        // or `pointerup` should move the `longpressState` to\n        // `null` so that the earlier event can void the \"light\n        // dismiss\" and keep the Overlay open.\n        this.longpressState =\n            this.longpressState === 'pressed' ? null : this.longpressState;\n    }\n\n    override init(): void {\n        // Clean up listeners if they've already been bound\n        this.abortController?.abort();\n        this.abortController = new AbortController();\n        const { signal } = this.abortController;\n        this.target.addEventListener(\n            'longpress',\n            () => this.handleLongpress(),\n            { signal }\n        );\n        this.target.addEventListener(\n            'pointerdown',\n            (event: PointerEvent) => this.handlePointerdown(event),\n            { signal }\n        );\n\n        this.prepareDescription(this.target);\n        if (\n            (this.target as HTMLElement & { holdAffordance: boolean })\n                .holdAffordance\n        ) {\n            // Only bind keyboard events when the trigger element isn't doing it for us.\n            return;\n        }\n        this.target.addEventListener(\n            'keydown',\n            (event: KeyboardEvent) => this.handleKeydown(event),\n            { signal }\n        );\n        this.target.addEventListener(\n            'keyup',\n            (event: KeyboardEvent) => this.handleKeyup(event),\n            { signal }\n        );\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
