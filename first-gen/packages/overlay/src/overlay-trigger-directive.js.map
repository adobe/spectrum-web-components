{
  "version": 3,
  "sources": ["overlay-trigger-directive.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {\n    type ElementPart,\n    nothing,\n    render,\n    type RenderOptions,\n    type TemplateResult,\n} from '@spectrum-web-components/base';\nimport { directive } from '@spectrum-web-components/base/src/async-directive.js';\nimport { strategies } from './strategies.js';\nimport type { OverlayOptions, TriggerInteraction } from './overlay-types.js';\nimport type { ClickController } from './ClickController.js';\nimport type { HoverController } from './HoverController.js';\nimport type { LongpressController } from './LongpressController.js';\nimport {\n    removeSlottableRequest,\n    type SlottableRequestEvent,\n} from './slottable-request-event.js';\nimport { SlottableRequestDirective } from './slottable-request-directive.js';\nimport { AbstractOverlay } from './AbstractOverlay.js';\nimport { InteractionTypes } from './InteractionController.js';\n\nexport type InsertionOptions = {\n    el: HTMLElement | (() => HTMLElement);\n    where: InsertPosition;\n};\n\nexport type OverlayTriggerOptions = {\n    open?: boolean;\n    triggerInteraction: TriggerInteraction;\n    overlayOptions: OverlayOptions;\n    insertionOptions?: InsertionOptions;\n};\n\nexport class OverlayTriggerDirective extends SlottableRequestDirective {\n    private host?: object;\n    private overlay!: AbstractOverlay;\n    private strategy!: ClickController | HoverController | LongpressController;\n\n    protected defaultOptions: OverlayTriggerOptions = {\n        triggerInteraction: 'click',\n        overlayOptions: {\n            type: 'auto',\n            offset: 0,\n        },\n    };\n    protected options: OverlayOptions = {\n        ...this.defaultOptions.overlayOptions,\n    };\n    protected insertionOptions?: InsertionOptions;\n\n    /* c8 ignore next 9 */\n    override render(\n        _template: () => TemplateResult,\n        _options?: Partial<OverlayTriggerOptions>\n    ): unknown {\n        // render function here just defines the interface to the update call later\n        // we don't have anything to render since this is intended to be an ElementPart directive\n        // so will be used on an element and is not itself rendered\n        return nothing;\n    }\n\n    override update(\n        part: ElementPart,\n        [template, options]: Parameters<this['render']>\n    ): void {\n        this.options = {\n            ...this.defaultOptions.overlayOptions,\n            ...options?.overlayOptions,\n        };\n        this.insertionOptions = options?.insertionOptions;\n        this.template = template;\n        this.host = part.options?.host;\n        let newTarget = false;\n        const triggerInteraction = (options?.triggerInteraction ||\n            this.defaultOptions.triggerInteraction) as TriggerInteraction;\n        const newStrategy =\n            InteractionTypes[this.strategy?.type] !== triggerInteraction;\n        if (this.target !== part.element) {\n            this.target = part.element as HTMLElement;\n            newTarget = true;\n        }\n        if (newTarget || newStrategy) {\n            this.strategy?.abort();\n            this.strategy = new strategies[\n                triggerInteraction as TriggerInteraction\n            ](this.target, {\n                isPersistent: true,\n                handleOverlayReady: (overlay: AbstractOverlay) => {\n                    this.listenerHost = this.overlay = overlay;\n                    this.init();\n                },\n            });\n        }\n        this.strategy.open = options?.open ?? false;\n    }\n\n    override handleSlottableRequest(event: SlottableRequestEvent): void {\n        /* c8 ignore next 1 */\n        if (event.target !== event.currentTarget) return;\n\n        const willRemoveSlottable = event.data === removeSlottableRequest;\n        const options = {} as RenderOptions;\n        if (this.host) {\n            options.host = this.host;\n        }\n        render(\n            willRemoveSlottable ? undefined : this.template(),\n            this.overlay,\n            options\n        );\n\n        if (willRemoveSlottable) {\n            this.overlay.remove();\n        } else {\n            AbstractOverlay.applyOptions(this.overlay, {\n                ...this.options,\n                trigger: this.target,\n            });\n            const insertionEl =\n                typeof this.insertionOptions?.el === 'function'\n                    ? this.insertionOptions.el()\n                    : this.insertionOptions?.el || this.target;\n            const { where = 'afterend' } = this.insertionOptions || {};\n            insertionEl.insertAdjacentElement(where, this.overlay);\n        }\n    }\n}\n\nexport const trigger = directive(OverlayTriggerDirective);\n"],
  "mappings": "aAWA,OAEI,WAAAA,EACA,UAAAC,MAGG,gCACP,OAAS,aAAAC,MAAiB,uDAC1B,OAAS,cAAAC,MAAkB,kBAK3B,OACI,0BAAAC,MAEG,+BACP,OAAS,6BAAAC,MAAiC,mCAC1C,OAAS,mBAAAC,MAAuB,uBAChC,OAAS,oBAAAC,MAAwB,6BAc1B,aAAM,gCAAgCF,CAA0B,CAAhE,kCAKH,KAAU,eAAwC,CAC9C,mBAAoB,QACpB,eAAgB,CACZ,KAAM,OACN,OAAQ,CACZ,CACJ,EACA,KAAU,QAA0B,CAChC,GAAG,KAAK,eAAe,cAC3B,EAIS,OACLG,EACAC,EACO,CAIP,OAAOT,CACX,CAES,OACLU,EACA,CAACC,EAAUC,CAAO,EACd,CA3EZ,IAAAC,EAAAC,EAAAC,EAAAC,EA4EQ,KAAK,QAAU,CACX,GAAG,KAAK,eAAe,eACvB,GAAGJ,GAAA,YAAAA,EAAS,cAChB,EACA,KAAK,iBAAmBA,GAAA,YAAAA,EAAS,iBACjC,KAAK,SAAWD,EAChB,KAAK,MAAOE,EAAAH,EAAK,UAAL,YAAAG,EAAc,KAC1B,IAAII,EAAY,GAChB,MAAMC,GAAsBN,GAAA,YAAAA,EAAS,qBACjC,KAAK,eAAe,mBAClBO,EACFZ,GAAiBO,EAAA,KAAK,WAAL,YAAAA,EAAe,IAAI,IAAMI,EAC1C,KAAK,SAAWR,EAAK,UACrB,KAAK,OAASA,EAAK,QACnBO,EAAY,KAEZA,GAAaE,MACbJ,EAAA,KAAK,WAAL,MAAAA,EAAe,QACf,KAAK,SAAW,IAAIZ,EAChBe,CACJ,EAAE,KAAK,OAAQ,CACX,aAAc,GACd,mBAAqBE,GAA6B,CAC9C,KAAK,aAAe,KAAK,QAAUA,EACnC,KAAK,KAAK,CACd,CACJ,CAAC,GAEL,KAAK,SAAS,MAAOJ,EAAAJ,GAAA,YAAAA,EAAS,OAAT,KAAAI,EAAiB,EAC1C,CAES,uBAAuBK,EAAoC,CA3GxE,IAAAR,EAAAC,EA6GQ,GAAIO,EAAM,SAAWA,EAAM,cAAe,OAE1C,MAAMC,EAAsBD,EAAM,OAASjB,EACrCQ,EAAU,CAAC,EAUjB,GATI,KAAK,OACLA,EAAQ,KAAO,KAAK,MAExBX,EACIqB,EAAsB,OAAY,KAAK,SAAS,EAChD,KAAK,QACLV,CACJ,EAEIU,EACA,KAAK,QAAQ,OAAO,MACjB,CACHhB,EAAgB,aAAa,KAAK,QAAS,CACvC,GAAG,KAAK,QACR,QAAS,KAAK,MAClB,CAAC,EACD,MAAMiB,EACF,QAAOV,EAAA,KAAK,mBAAL,YAAAA,EAAuB,KAAO,WAC/B,KAAK,iBAAiB,GAAG,IACzBC,EAAA,KAAK,mBAAL,YAAAA,EAAuB,KAAM,KAAK,OACtC,CAAE,MAAAU,EAAQ,UAAW,EAAI,KAAK,kBAAoB,CAAC,EACzDD,EAAY,sBAAsBC,EAAO,KAAK,OAAO,CACzD,CACJ,CACJ,CAEO,aAAM,QAAUtB,EAAU,uBAAuB",
  "names": ["nothing", "render", "directive", "strategies", "removeSlottableRequest", "SlottableRequestDirective", "AbstractOverlay", "InteractionTypes", "_template", "_options", "part", "template", "options", "_a", "_b", "_c", "_d", "newTarget", "triggerInteraction", "newStrategy", "overlay", "event", "willRemoveSlottable", "insertionEl", "where"]
}
