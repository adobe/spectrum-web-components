{
  "version": 3,
  "sources": ["InteractionController.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type { ReactiveController } from '@spectrum-web-components/base';\nimport { AbstractOverlay } from './AbstractOverlay.dev.js'\n\nexport enum InteractionTypes {\n    click = 'click',\n    hover = 'hover',\n    longpress = 'longpress',\n}\n\nexport const lastInteractionType = Symbol('lastInteractionType');\n\nexport type ControllerOptions = {\n    overlay?: AbstractOverlay;\n    handleOverlayReady?: (overlay: AbstractOverlay) => void;\n    isPersistent?: boolean;\n};\n\ntype InteractionTarget = HTMLElement & {\n    [lastInteractionType]?: InteractionTypes;\n};\n\nexport class InteractionController implements ReactiveController {\n    abortController!: AbortController;\n\n    get activelyOpening(): boolean {\n        return false;\n    }\n\n    private handleOverlayReady?: (overlay: AbstractOverlay) => void;\n\n    // Holds optimistic open state when an Overlay is not yet present\n    private isLazilyOpen = false;\n\n    public get open(): boolean {\n        return this.overlay?.open ?? this.isLazilyOpen;\n    }\n\n    /**\n     * Set `open` against the associated Overlay lazily.\n     */\n    public set open(open: boolean) {\n        if (open === this.open) return;\n        this.isLazilyOpen = open;\n        if (this.overlay) {\n            // If there already is an Overlay, apply the value of `open` directly.\n            this.overlay.open = open;\n            this.target[lastInteractionType] = this.type;\n            return;\n        }\n        if (!open) {\n            // When `open` moves to `false` and there is not yet an Overlay,\n            // assume that no Overlay and a closed Overlay are the same and return early.\n            return;\n        }\n        // When there is no Overlay and `open` is moving to `true`, lazily import/create\n        // an Overlay and apply that state to it.\n        customElements\n            .whenDefined('sp-overlay')\n            .then(async (): Promise<void> => {\n                const { Overlay } = await import('./Overlay.dev.js');\n                this.overlay = new Overlay();\n                this.overlay.open = true;\n                this.target[lastInteractionType] = this.type;\n            });\n        import('@spectrum-web-components/overlay/sp-overlay.js');\n    }\n\n    public get overlay(): AbstractOverlay {\n        return this._overlay;\n    }\n\n    public set overlay(overlay: AbstractOverlay | undefined) {\n        if (!overlay) return;\n        if (this.overlay === overlay) return;\n        if (this.overlay) {\n            this.overlay.removeController(this);\n        }\n        this._overlay = overlay;\n        this.overlay.addController(this);\n        this.initOverlay();\n        this.prepareDescription(this.target);\n        this.handleOverlayReady?.(this.overlay);\n    }\n\n    private _overlay!: AbstractOverlay;\n\n    protected isPersistent = false;\n\n    type!: InteractionTypes;\n\n    constructor(\n        public target: InteractionTarget,\n        { overlay, isPersistent, handleOverlayReady }: ControllerOptions\n    ) {\n        this.isPersistent = !!isPersistent;\n        this.handleOverlayReady = handleOverlayReady;\n        if (this.isPersistent) {\n            this.init();\n        }\n        this.overlay = overlay;\n    }\n\n    prepareDescription(_: HTMLElement): void {}\n\n    releaseDescription(): void {}\n\n    shouldCompleteOpen(): void {}\n\n    /* c8 ignore next 3 */\n    init(): void {\n        // Abstract init() method.\n    }\n\n    /* c8 ignore next 3 */\n    initOverlay(): void {\n        // Abstract initOverlay() method.\n    }\n\n    abort(): void {\n        this.releaseDescription();\n        this.abortController?.abort();\n    }\n\n    hostConnected(): void {\n        this.init();\n    }\n\n    hostDisconnected(): void {\n        if (!this.isPersistent) {\n            this.abort();\n        }\n    }\n}\n"],
  "mappings": ";AAeO,WAAK,mBAAL,kBAAKA,sBAAL;AACH,EAAAA,kBAAA,WAAQ;AACR,EAAAA,kBAAA,WAAQ;AACR,EAAAA,kBAAA,eAAY;AAHJ,SAAAA;AAAA,GAAA;AAML,aAAM,sBAAsB,OAAO,qBAAqB;AAYxD,aAAM,sBAAoD;AAAA,EAqE7D,YACW,QACP,EAAE,SAAS,cAAc,mBAAmB,GAC9C;AAFS;AA5DX;AAAA,SAAQ,eAAe;AAuDvB,SAAU,eAAe;AAQrB,SAAK,eAAe,CAAC,CAAC;AACtB,SAAK,qBAAqB;AAC1B,QAAI,KAAK,cAAc;AACnB,WAAK,KAAK;AAAA,IACd;AACA,SAAK,UAAU;AAAA,EACnB;AAAA,EA5EA,IAAI,kBAA2B;AAC3B,WAAO;AAAA,EACX;AAAA,EAOA,IAAW,OAAgB;AA7C/B;AA8CQ,YAAO,gBAAK,YAAL,mBAAc,SAAd,YAAsB,KAAK;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,KAAK,MAAe;AAC3B,QAAI,SAAS,KAAK,KAAM;AACxB,SAAK,eAAe;AACpB,QAAI,KAAK,SAAS;AAEd,WAAK,QAAQ,OAAO;AACpB,WAAK,OAAO,mBAAmB,IAAI,KAAK;AACxC;AAAA,IACJ;AACA,QAAI,CAAC,MAAM;AAGP;AAAA,IACJ;AAGA,mBACK,YAAY,YAAY,EACxB,KAAK,YAA2B;AAC7B,YAAM,EAAE,QAAQ,IAAI,MAAM,OAAO,kBAAkB;AACnD,WAAK,UAAU,IAAI,QAAQ;AAC3B,WAAK,QAAQ,OAAO;AACpB,WAAK,OAAO,mBAAmB,IAAI,KAAK;AAAA,IAC5C,CAAC;AACL,WAAO,gDAAgD;AAAA,EAC3D;AAAA,EAEA,IAAW,UAA2B;AAClC,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAW,QAAQ,SAAsC;AAnF7D;AAoFQ,QAAI,CAAC,QAAS;AACd,QAAI,KAAK,YAAY,QAAS;AAC9B,QAAI,KAAK,SAAS;AACd,WAAK,QAAQ,iBAAiB,IAAI;AAAA,IACtC;AACA,SAAK,WAAW;AAChB,SAAK,QAAQ,cAAc,IAAI;AAC/B,SAAK,YAAY;AACjB,SAAK,mBAAmB,KAAK,MAAM;AACnC,eAAK,uBAAL,8BAA0B,KAAK;AAAA,EACnC;AAAA,EAoBA,mBAAmB,GAAsB;AAAA,EAAC;AAAA,EAE1C,qBAA2B;AAAA,EAAC;AAAA,EAE5B,qBAA2B;AAAA,EAAC;AAAA;AAAA,EAG5B,OAAa;AAAA,EAEb;AAAA;AAAA,EAGA,cAAoB;AAAA,EAEpB;AAAA,EAEA,QAAc;AAlIlB;AAmIQ,SAAK,mBAAmB;AACxB,eAAK,oBAAL,mBAAsB;AAAA,EAC1B;AAAA,EAEA,gBAAsB;AAClB,SAAK,KAAK;AAAA,EACd;AAAA,EAEA,mBAAyB;AACrB,QAAI,CAAC,KAAK,cAAc;AACpB,WAAK,MAAM;AAAA,IACf;AAAA,EACJ;AACJ;",
  "names": ["InteractionTypes"]
}
