{
  "version": 3,
  "sources": ["overlay-trigger-directive.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {\n    type ElementPart,\n    nothing,\n    render,\n    type RenderOptions,\n    type TemplateResult,\n} from '@spectrum-web-components/base';\nimport { directive } from '@spectrum-web-components/base/src/async-directive.js';\nimport { strategies } from './strategies.dev.js'\nimport type { OverlayOptions, TriggerInteraction } from './overlay-types.dev.js'\nimport type { ClickController } from './ClickController.dev.js'\nimport type { HoverController } from './HoverController.dev.js'\nimport type { LongpressController } from './LongpressController.dev.js'\nimport {\n    removeSlottableRequest,\n    type SlottableRequestEvent,\n} from './slottable-request-event.dev.js'\nimport { SlottableRequestDirective } from './slottable-request-directive.dev.js'\nimport { AbstractOverlay } from './AbstractOverlay.dev.js'\nimport { InteractionTypes } from './InteractionController.dev.js'\n\nexport type InsertionOptions = {\n    el: HTMLElement | (() => HTMLElement);\n    where: InsertPosition;\n};\n\nexport type OverlayTriggerOptions = {\n    open?: boolean;\n    triggerInteraction: TriggerInteraction;\n    overlayOptions: OverlayOptions;\n    insertionOptions?: InsertionOptions;\n};\n\nexport class OverlayTriggerDirective extends SlottableRequestDirective {\n    private host?: object;\n    private overlay!: AbstractOverlay;\n    private strategy!: ClickController | HoverController | LongpressController;\n\n    protected defaultOptions: OverlayTriggerOptions = {\n        triggerInteraction: 'click',\n        overlayOptions: {\n            type: 'auto',\n            offset: 0,\n        },\n    };\n    protected options: OverlayOptions = {\n        ...this.defaultOptions.overlayOptions,\n    };\n    protected insertionOptions?: InsertionOptions;\n\n    /* c8 ignore next 9 */\n    override render(\n        _template: () => TemplateResult,\n        _options?: Partial<OverlayTriggerOptions>\n    ): unknown {\n        // render function here just defines the interface to the update call later\n        // we don't have anything to render since this is intended to be an ElementPart directive\n        // so will be used on an element and is not itself rendered\n        return nothing;\n    }\n\n    override update(\n        part: ElementPart,\n        [template, options]: Parameters<this['render']>\n    ): void {\n        this.options = {\n            ...this.defaultOptions.overlayOptions,\n            ...options?.overlayOptions,\n        };\n        this.insertionOptions = options?.insertionOptions;\n        this.template = template;\n        this.host = part.options?.host;\n        let newTarget = false;\n        const triggerInteraction = (options?.triggerInteraction ||\n            this.defaultOptions.triggerInteraction) as TriggerInteraction;\n        const newStrategy =\n            InteractionTypes[this.strategy?.type] !== triggerInteraction;\n        if (this.target !== part.element) {\n            this.target = part.element as HTMLElement;\n            newTarget = true;\n        }\n        if (newTarget || newStrategy) {\n            this.strategy?.abort();\n            this.strategy = new strategies[\n                triggerInteraction as TriggerInteraction\n            ](this.target, {\n                isPersistent: true,\n                handleOverlayReady: (overlay: AbstractOverlay) => {\n                    this.listenerHost = this.overlay = overlay;\n                    this.init();\n                },\n            });\n        }\n        this.strategy.open = options?.open ?? false;\n    }\n\n    override handleSlottableRequest(event: SlottableRequestEvent): void {\n        /* c8 ignore next 1 */\n        if (event.target !== event.currentTarget) return;\n\n        const willRemoveSlottable = event.data === removeSlottableRequest;\n        const options = {} as RenderOptions;\n        if (this.host) {\n            options.host = this.host;\n        }\n        render(\n            willRemoveSlottable ? undefined : this.template(),\n            this.overlay,\n            options\n        );\n\n        if (willRemoveSlottable) {\n            this.overlay.remove();\n        } else {\n            AbstractOverlay.applyOptions(this.overlay, {\n                ...this.options,\n                trigger: this.target,\n            });\n            const insertionEl =\n                typeof this.insertionOptions?.el === 'function'\n                    ? this.insertionOptions.el()\n                    : this.insertionOptions?.el || this.target;\n            const { where = 'afterend' } = this.insertionOptions || {};\n            insertionEl.insertAdjacentElement(where, this.overlay);\n        }\n    }\n}\n\nexport const trigger = directive(OverlayTriggerDirective);\n"],
  "mappings": ";AAWA;AAAA,EAEI;AAAA,EACA;AAAA,OAGG;AACP,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAK3B;AAAA,EACI;AAAA,OAEG;AACP,SAAS,iCAAiC;AAC1C,SAAS,uBAAuB;AAChC,SAAS,wBAAwB;AAc1B,aAAM,gCAAgC,0BAA0B;AAAA,EAAhE;AAAA;AAKH,SAAU,iBAAwC;AAAA,MAC9C,oBAAoB;AAAA,MACpB,gBAAgB;AAAA,QACZ,MAAM;AAAA,QACN,QAAQ;AAAA,MACZ;AAAA,IACJ;AACA,SAAU,UAA0B;AAAA,MAChC,GAAG,KAAK,eAAe;AAAA,IAC3B;AAAA;AAAA;AAAA,EAIS,OACL,WACA,UACO;AAIP,WAAO;AAAA,EACX;AAAA,EAES,OACL,MACA,CAAC,UAAU,OAAO,GACd;AA3EZ;AA4EQ,SAAK,UAAU;AAAA,MACX,GAAG,KAAK,eAAe;AAAA,MACvB,GAAG,mCAAS;AAAA,IAChB;AACA,SAAK,mBAAmB,mCAAS;AACjC,SAAK,WAAW;AAChB,SAAK,QAAO,UAAK,YAAL,mBAAc;AAC1B,QAAI,YAAY;AAChB,UAAM,sBAAsB,mCAAS,uBACjC,KAAK,eAAe;AACxB,UAAM,cACF,kBAAiB,UAAK,aAAL,mBAAe,IAAI,MAAM;AAC9C,QAAI,KAAK,WAAW,KAAK,SAAS;AAC9B,WAAK,SAAS,KAAK;AACnB,kBAAY;AAAA,IAChB;AACA,QAAI,aAAa,aAAa;AAC1B,iBAAK,aAAL,mBAAe;AACf,WAAK,WAAW,IAAI,WAChB,kBACJ,EAAE,KAAK,QAAQ;AAAA,QACX,cAAc;AAAA,QACd,oBAAoB,CAAC,YAA6B;AAC9C,eAAK,eAAe,KAAK,UAAU;AACnC,eAAK,KAAK;AAAA,QACd;AAAA,MACJ,CAAC;AAAA,IACL;AACA,SAAK,SAAS,QAAO,wCAAS,SAAT,YAAiB;AAAA,EAC1C;AAAA,EAES,uBAAuB,OAAoC;AA3GxE;AA6GQ,QAAI,MAAM,WAAW,MAAM,cAAe;AAE1C,UAAM,sBAAsB,MAAM,SAAS;AAC3C,UAAM,UAAU,CAAC;AACjB,QAAI,KAAK,MAAM;AACX,cAAQ,OAAO,KAAK;AAAA,IACxB;AACA;AAAA,MACI,sBAAsB,SAAY,KAAK,SAAS;AAAA,MAChD,KAAK;AAAA,MACL;AAAA,IACJ;AAEA,QAAI,qBAAqB;AACrB,WAAK,QAAQ,OAAO;AAAA,IACxB,OAAO;AACH,sBAAgB,aAAa,KAAK,SAAS;AAAA,QACvC,GAAG,KAAK;AAAA,QACR,SAAS,KAAK;AAAA,MAClB,CAAC;AACD,YAAM,cACF,SAAO,UAAK,qBAAL,mBAAuB,QAAO,aAC/B,KAAK,iBAAiB,GAAG,MACzB,UAAK,qBAAL,mBAAuB,OAAM,KAAK;AAC5C,YAAM,EAAE,QAAQ,WAAW,IAAI,KAAK,oBAAoB,CAAC;AACzD,kBAAY,sBAAsB,OAAO,KAAK,OAAO;AAAA,IACzD;AAAA,EACJ;AACJ;AAEO,aAAM,UAAU,UAAU,uBAAuB;",
  "names": []
}
