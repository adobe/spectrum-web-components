{
  "version": 3,
  "sources": ["Badge.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    html,\n    nothing,\n    SizedMixin,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\n\nimport { ObserveSlotText } from '@spectrum-web-components/shared/src/observe-slot-text.js';\nimport { ObserveSlotPresence } from '@spectrum-web-components/shared/src/observe-slot-presence.js';\nimport styles from './badge.css.js';\n\nexport const BADGE_VARIANTS = [\n    'accent',\n    'neutral',\n    'informative',\n    'positive',\n    'negative',\n    'notice',\n    'fuchsia',\n    'indigo',\n    'magenta',\n    'purple',\n    'seafoam',\n    'yellow',\n    'gray',\n    'red',\n    'orange',\n    'chartreuse',\n    'celery',\n    'green',\n    'cyan',\n    'blue',\n] as const;\nexport type BadgeVariant = (typeof BADGE_VARIANTS)[number];\nexport const FIXED_VALUES = [\n    'inline-start',\n    'inline-end',\n    'block-start',\n    'block-end',\n] as const;\nexport type FixedValues = (typeof FIXED_VALUES)[number];\n\n/**\n * @element sp-badge\n *\n * @slot - Text label of the badge\n * @slot icon - Optional icon that appears to the left of the label\n */\nexport class Badge extends SizedMixin(\n    ObserveSlotText(ObserveSlotPresence(SpectrumElement, '[slot=\"icon\"]'), ''),\n    {\n        noDefaultSize: true,\n    }\n) {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    @property({ reflect: true })\n    public get fixed(): FixedValues | undefined {\n        return this._fixed;\n    }\n\n    public set fixed(fixed: FixedValues | undefined) {\n        if (fixed === this.fixed) return;\n        const oldValue = this.fixed;\n        this._fixed = fixed;\n        if (fixed) {\n            this.setAttribute('fixed', fixed);\n        } else {\n            this.removeAttribute('fixed');\n        }\n        this.requestUpdate('fixed', oldValue);\n    }\n\n    private _fixed?: FixedValues;\n\n    @property({ type: String, reflect: true })\n    public variant: BadgeVariant = 'informative';\n\n    protected get hasIcon(): boolean {\n        return this.slotContentIsPresent;\n    }\n\n    protected override render(): TemplateResult {\n        if (window.__swc.DEBUG) {\n            if (!BADGE_VARIANTS.includes(this.variant)) {\n                window.__swc.warn(\n                    this,\n                    `<${this.localName}> element expect the \"variant\" attribute to be one of the following:`,\n                    'https://opensource.adobe.com/spectrum-web-components/components/badge/#variants',\n                    {\n                        issues: [...BADGE_VARIANTS],\n                    }\n                );\n            }\n        }\n        return html`\n            ${this.hasIcon\n                ? html`\n                      <slot\n                          name=\"icon\"\n                          ?icon-only=${!this.slotHasContent}\n                      ></slot>\n                  `\n                : nothing}\n            <div class=\"label\">\n                <slot></slot>\n            </div>\n        `;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;AAYA;AAAA,EAEI;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OAEG;AACP,SAAS,gBAAgB;AAEzB,SAAS,uBAAuB;AAChC,SAAS,2BAA2B;AACpC,OAAO,YAAY;AAEZ,aAAM,iBAAiB;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAEO,aAAM,eAAe;AAAA,EACxB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AASO,aAAM,cAAc;AAAA,EACvB,gBAAgB,oBAAoB,iBAAiB,eAAe,GAAG,EAAE;AAAA,EACzE;AAAA,IACI,eAAe;AAAA,EACnB;AACJ,EAAE;AAAA,EALK;AAAA;AA8BH,SAAO,UAAwB;AAAA;AAAA,EAxB/B,WAA2B,SAAyB;AAChD,WAAO,CAAC,MAAM;AAAA,EAClB;AAAA,EAGA,IAAW,QAAiC;AACxC,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAW,MAAM,OAAgC;AAC7C,QAAI,UAAU,KAAK,MAAO;AAC1B,UAAM,WAAW,KAAK;AACtB,SAAK,SAAS;AACd,QAAI,OAAO;AACP,WAAK,aAAa,SAAS,KAAK;AAAA,IACpC,OAAO;AACH,WAAK,gBAAgB,OAAO;AAAA,IAChC;AACA,SAAK,cAAc,SAAS,QAAQ;AAAA,EACxC;AAAA,EAOA,IAAc,UAAmB;AAC7B,WAAO,KAAK;AAAA,EAChB;AAAA,EAEmB,SAAyB;AACxC,QAAI,MAAoB;AACpB,UAAI,CAAC,eAAe,SAAS,KAAK,OAAO,GAAG;AACxC,eAAO,MAAM;AAAA,UACT;AAAA,UACA,IAAI,KAAK,SAAS;AAAA,UAClB;AAAA,UACA;AAAA,YACI,QAAQ,CAAC,GAAG,cAAc;AAAA,UAC9B;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,cACD,KAAK,UACD;AAAA;AAAA;AAAA,uCAGqB,CAAC,KAAK,cAAc;AAAA;AAAA,sBAGzC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAKrB;AACJ;AApDe;AAAA,EADV,SAAS,EAAE,SAAS,KAAK,CAAC;AAAA,GAVlB,MAWE;AAmBJ;AAAA,EADN,SAAS,EAAE,MAAM,QAAQ,SAAS,KAAK,CAAC;AAAA,GA7BhC,MA8BF;",
  "names": []
}
