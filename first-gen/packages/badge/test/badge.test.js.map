{
  "version": 3,
  "sources": ["badge.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { elementUpdated, expect, fixture, html } from '@open-wc/testing';\n\nimport '@spectrum-web-components/badge/sp-badge.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-checkmark-circle.js';\nimport { stub } from 'sinon';\nimport { Badge } from '../src/Badge.js';\nimport { testForLitDevWarnings } from '../../../test/testing-helpers.js';\n\ndescribe('Badge', () => {\n    testForLitDevWarnings(\n        async () =>\n            await fixture<Badge>(html`\n                <sp-badge>\n                    <sp-icon-checkmark-circle\n                        slot=\"icon\"\n                    ></sp-icon-checkmark-circle>\n                    Icon and label\n                </sp-badge>\n            `)\n    );\n    it('manages `fixed` attribute', async () => {\n        const el = await fixture<Badge>(html`\n            <sp-badge>Label only</sp-badge>\n        `);\n\n        expect(el.fixed).to.be.undefined;\n\n        const textFixedValue = 'inline-start';\n\n        el.fixed = textFixedValue;\n\n        await elementUpdated(el);\n\n        expect(el.fixed).to.equal(textFixedValue);\n\n        el.fixed = textFixedValue;\n\n        await elementUpdated(el);\n\n        expect(el.fixed).to.equal(textFixedValue);\n\n        el.fixed = undefined;\n\n        await elementUpdated(el);\n\n        expect(el.hasAttribute('fixed')).to.be.false;\n    });\n    describe('dev mode', () => {\n        let consoleWarnStub!: ReturnType<typeof stub>;\n        before(() => {\n            window.__swc.verbose = true;\n            consoleWarnStub = stub(console, 'warn');\n        });\n        afterEach(() => {\n            consoleWarnStub.resetHistory();\n        });\n        after(() => {\n            window.__swc.verbose = false;\n            consoleWarnStub.restore();\n        });\n\n        it('loads default badge accessibly', async () => {\n            const el = await fixture<Badge>(html`\n                <sp-badge>\n                    <sp-icon-checkmark-circle\n                        slot=\"icon\"\n                    ></sp-icon-checkmark-circle>\n                    Icon and label\n                </sp-badge>\n            `);\n\n            await elementUpdated(el);\n\n            await expect(el).to.be.accessible();\n            expect(consoleWarnStub.called).to.be.false;\n        });\n        it('warns in Dev Mode when sent an incorrect `variant`', async () => {\n            const el = await fixture<Badge>(html`\n                <sp-badge variant=\"other\">\n                    <sp-icon-checkmark-circle\n                        slot=\"icon\"\n                    ></sp-icon-checkmark-circle>\n                    Icon and label\n                </sp-badge>\n            `);\n\n            await elementUpdated(el);\n\n            expect(consoleWarnStub.called).to.be.true;\n            const spyCall = consoleWarnStub.getCall(0);\n            expect(\n                (spyCall.args.at(0) as string).includes('\"variant\"'),\n                'confirm variant-centric message'\n            ).to.be.true;\n            expect(spyCall.args.at(-1), 'confirm `data` shape').to.deep.equal({\n                data: {\n                    localName: 'sp-badge',\n                    type: 'api',\n                    level: 'default',\n                },\n            });\n        });\n    });\n});\n"],
  "mappings": ";AAYA,SAAS,gBAAgB,QAAQ,SAAS,YAAY;AAEtD,OAAO;AACP,OAAO;AACP,SAAS,YAAY;AAErB,SAAS,6BAA6B;AAEtC,SAAS,SAAS,MAAM;AACpB;AAAA,IACI,YACI,MAAM,QAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAOpB;AAAA,EACT;AACA,KAAG,6BAA6B,YAAY;AACxC,UAAM,KAAK,MAAM,QAAe;AAAA;AAAA,SAE/B;AAED,WAAO,GAAG,KAAK,EAAE,GAAG,GAAG;AAEvB,UAAM,iBAAiB;AAEvB,OAAG,QAAQ;AAEX,UAAM,eAAe,EAAE;AAEvB,WAAO,GAAG,KAAK,EAAE,GAAG,MAAM,cAAc;AAExC,OAAG,QAAQ;AAEX,UAAM,eAAe,EAAE;AAEvB,WAAO,GAAG,KAAK,EAAE,GAAG,MAAM,cAAc;AAExC,OAAG,QAAQ;AAEX,UAAM,eAAe,EAAE;AAEvB,WAAO,GAAG,aAAa,OAAO,CAAC,EAAE,GAAG,GAAG;AAAA,EAC3C,CAAC;AACD,WAAS,YAAY,MAAM;AACvB,QAAI;AACJ,WAAO,MAAM;AACT,aAAO,MAAM,UAAU;AACvB,wBAAkB,KAAK,SAAS,MAAM;AAAA,IAC1C,CAAC;AACD,cAAU,MAAM;AACZ,sBAAgB,aAAa;AAAA,IACjC,CAAC;AACD,UAAM,MAAM;AACR,aAAO,MAAM,UAAU;AACvB,sBAAgB,QAAQ;AAAA,IAC5B,CAAC;AAED,OAAG,kCAAkC,YAAY;AAC7C,YAAM,KAAK,MAAM,QAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAO/B;AAED,YAAM,eAAe,EAAE;AAEvB,YAAM,OAAO,EAAE,EAAE,GAAG,GAAG,WAAW;AAClC,aAAO,gBAAgB,MAAM,EAAE,GAAG,GAAG;AAAA,IACzC,CAAC;AACD,OAAG,sDAAsD,YAAY;AACjE,YAAM,KAAK,MAAM,QAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAO/B;AAED,YAAM,eAAe,EAAE;AAEvB,aAAO,gBAAgB,MAAM,EAAE,GAAG,GAAG;AACrC,YAAM,UAAU,gBAAgB,QAAQ,CAAC;AACzC;AAAA,QACK,QAAQ,KAAK,GAAG,CAAC,EAAa,SAAS,WAAW;AAAA,QACnD;AAAA,MACJ,EAAE,GAAG,GAAG;AACR,aAAO,QAAQ,KAAK,GAAG,EAAE,GAAG,sBAAsB,EAAE,GAAG,KAAK,MAAM;AAAA,QAC9D,MAAM;AAAA,UACF,WAAW;AAAA,UACX,MAAM;AAAA,UACN,OAAO;AAAA,QACX;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AAAA,EACL,CAAC;AACL,CAAC;",
  "names": []
}
