{
  "version": 3,
  "sources": ["tooltip.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport '@spectrum-web-components/tooltip/sp-tooltip.js';\nimport { Tooltip } from '@spectrum-web-components/tooltip';\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    nextFrame,\n    oneEvent,\n} from '@open-wc/testing';\nimport { Button } from '@spectrum-web-components/button';\nimport '@spectrum-web-components/button/sp-button.js';\nimport { spy, stub } from 'sinon';\nimport { testForLitDevWarnings } from '../../../test/testing-helpers.js';\nimport { sendMouse } from '../../../test/plugins/browser.js';\n\ndescribe('Tooltip', () => {\n    testForLitDevWarnings(\n        async () =>\n            await fixture<Tooltip>(html`\n                <sp-tooltip>Help text.</sp-tooltip>\n            `)\n    );\n    it('loads', async () => {\n        const el = await fixture<Tooltip>(html`\n            <sp-tooltip>Help text.</sp-tooltip>\n        `);\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('self manages', async () => {\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [1, 1],\n                },\n            ],\n        });\n        const button = await fixture<Button>(html`\n            <sp-button>\n                This is a button.\n                <sp-tooltip self-managed placement=\"top\">Help text.</sp-tooltip>\n            </sp-button>\n        `);\n\n        const el = button.querySelector('sp-tooltip') as Tooltip;\n\n        await elementUpdated(el);\n        await nextFrame();\n        await nextFrame();\n        await nextFrame();\n        await nextFrame();\n        await expect(button).to.be.accessible();\n\n        const opened = oneEvent(button, 'sp-opened');\n        button.focus();\n        await opened;\n\n        expect(el.open).to.be.true;\n        await expect(button).to.be.accessible();\n\n        const closed = oneEvent(button, 'sp-closed');\n        button.blur();\n        await closed;\n\n        expect(el.open).to.be.false;\n    });\n    it('self manages through a shadow boundary', async () => {\n        const test = await fixture<HTMLDivElement>(html`\n            <div></div>\n        `);\n        test.attachShadow({ mode: 'open' });\n        if (!test.shadowRoot) return;\n        test.shadowRoot.innerHTML = `\n            <sp-button>\n                This is a button.\n                <sp-tooltip self-managed placement=\"top\">\n                    Help text.\n                </sp-tooltip>\n            </sp-button>\n        `;\n\n        const button = test.shadowRoot.querySelector('sp-button') as Button;\n        const el = test.shadowRoot.querySelector('sp-tooltip') as Tooltip;\n\n        await elementUpdated(el);\n        await nextFrame();\n        await nextFrame();\n        await nextFrame();\n        await nextFrame();\n\n        const opened = oneEvent(button, 'sp-opened');\n        button.focus();\n        await opened;\n\n        expect(el.open).to.be.true;\n        await expect(button).to.be.accessible();\n\n        const closed = oneEvent(button, 'sp-closed');\n        button.blur();\n        await closed;\n\n        expect(el.open).to.be.false;\n    });\n    it('cleans up when self manages', async () => {\n        const button = await fixture<Button>(html`\n            <sp-button>\n                This is a button.\n                <sp-tooltip self-managed>Help text.</sp-tooltip>\n            </sp-button>\n        `);\n\n        const el = button.querySelector('sp-tooltip') as Tooltip;\n\n        await elementUpdated(el);\n\n        expect(el.open).to.be.false;\n        const opened = oneEvent(button, 'sp-opened');\n        button.focus();\n        await opened;\n        await elementUpdated(el);\n\n        expect(el.open).to.be.true;\n\n        const closed = oneEvent(button, 'sp-closed');\n        button.blur();\n        await closed;\n\n        expect(el.open).to.be.false;\n    });\n    it('cleans up when self managed and removed', async () => {\n        const button = await fixture<Button>(html`\n            <sp-button>\n                This is a button.\n                <sp-tooltip self-managed>Help text.</sp-tooltip>\n            </sp-button>\n        `);\n\n        const el = button.querySelector('sp-tooltip') as Tooltip;\n\n        await elementUpdated(el);\n\n        expect(el.open).to.be.false;\n        const opened = oneEvent(button, 'sp-opened');\n        button.focus();\n        await opened;\n\n        expect(el.open).to.be.true;\n\n        const closed = oneEvent(button, 'sp-closed');\n        button.remove();\n        await closed;\n\n        expect(el.open).to.be.false;\n    });\n    it('accepts variants', async () => {\n        const el = await fixture<Tooltip>(html`\n            <sp-tooltip variant=\"negative\">Help text.</sp-tooltip>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('negative');\n        expect(el.getAttribute('variant')).to.equal('negative');\n\n        el.variant = 'info';\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('info');\n        expect(el.getAttribute('variant')).to.equal('info');\n\n        el.setAttribute('variant', 'positive');\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('positive');\n        expect(el.getAttribute('variant')).to.equal('positive');\n\n        el.removeAttribute('variant');\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('');\n        expect(el.hasAttribute('variant')).to.be.false;\n    });\n    it('validates variants', async () => {\n        const el = await fixture<Tooltip>(html`\n            <sp-tooltip variant=\"other\">Help text.</sp-tooltip>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('');\n        expect(el.hasAttribute('variant')).to.be.false;\n\n        el.variant = 'info';\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('info');\n        expect(el.getAttribute('variant')).to.equal('info');\n\n        el.variant = 'info';\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('info');\n        expect(el.getAttribute('variant')).to.equal('info');\n    });\n\n    it('surfaces tip element', async () => {\n        const el = await fixture<Tooltip>(html`\n            <sp-tooltip placement=\"top\">Help text.</sp-tooltip>\n        `);\n\n        await elementUpdated(el);\n\n        expect(typeof el.tipElement).to.not.equal('undefined');\n    });\n    describe('self-managed', () => {\n        let documentEventsSpy!: ReturnType<typeof spy>;\n        before(() => {\n            documentEventsSpy = spy(document, 'addEventListener');\n        });\n        afterEach(() => {\n            documentEventsSpy.resetHistory();\n        });\n        after(() => {\n            documentEventsSpy.restore();\n        });\n        it('does not attach event listeners if no trigger was found', async function () {\n            const el = await fixture<Tooltip>(html`\n                <sp-tooltip self-managed>Help text.</sp-tooltip>\n            `);\n\n            await elementUpdated(el);\n            let calls = documentEventsSpy.callCount;\n            while (calls) {\n                calls -= 1;\n                const call = documentEventsSpy.getCall(calls);\n                expect(call.args[0]).to.not.equal('pointerenter');\n            }\n            expect(el.overlayElement?.triggerElement).to.be.null;\n        });\n    });\n    describe('dev mode', () => {\n        let consoleWarnStub!: ReturnType<typeof stub>;\n        before(() => {\n            window.__swc.verbose = true;\n            consoleWarnStub = stub(console, 'warn');\n        });\n        afterEach(() => {\n            consoleWarnStub.resetHistory();\n        });\n        after(() => {\n            window.__swc.verbose = false;\n            consoleWarnStub.restore();\n        });\n\n        it('warns when incorrectly using `self-managed`', async () => {\n            const el = await fixture<Tooltip>(html`\n                <sp-tooltip variant=\"negative\" self-managed>\n                    Help text.\n                </sp-tooltip>\n            `);\n\n            await elementUpdated(el);\n\n            expect(consoleWarnStub.called).to.be.true;\n            const spyCall = consoleWarnStub.getCall(0);\n            expect(\n                (spyCall.args.at(0) as string).includes('Self managed'),\n                'confirm self managed-centric message'\n            ).to.be.true;\n            expect(spyCall.args.at(-1), 'confirm `data` shape').to.deep.equal({\n                data: {\n                    localName: 'sp-tooltip',\n                    type: 'api',\n                    level: 'high',\n                },\n            });\n        });\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
