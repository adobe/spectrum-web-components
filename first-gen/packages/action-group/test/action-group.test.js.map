{
  "version": 3,
  "sources": ["action-group.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    aTimeout,\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    nextFrame,\n    oneEvent,\n    waitUntil,\n} from '@open-wc/testing';\n\nimport { ActionButton } from '@spectrum-web-components/action-button';\nimport { ActionMenu } from '@spectrum-web-components/action-menu';\nimport { MenuItem } from '@spectrum-web-components/menu';\nimport '@spectrum-web-components/action-button/sp-action-button.js';\nimport '@spectrum-web-components/action-menu/sp-action-menu.js';\nimport '@spectrum-web-components/menu/sp-menu.js';\nimport '@spectrum-web-components/menu/sp-menu-item.js';\nimport '@spectrum-web-components/picker/sp-picker.js';\nimport {\n    LitElement,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport '@spectrum-web-components/overlay/overlay-trigger.js';\nimport '@spectrum-web-components/tooltip/sp-tooltip.js';\nimport { ActionGroup } from '@spectrum-web-components/action-group';\nimport {\n    arrowDownEvent,\n    arrowLeftEvent,\n    arrowRightEvent,\n    arrowUpEvent,\n    endEvent,\n    homeEvent,\n    sendMouseFrom,\n    sendMouseTo,\n    testForLitDevWarnings,\n} from '../../../test/testing-helpers';\nimport { sendKeys } from '@web/test-runner-commands';\nimport '@spectrum-web-components/action-group/sp-action-group.js';\nimport { controlled } from '../stories/action-group-tooltip.stories.js';\nimport { spy } from 'sinon';\nimport { sendMouse } from '../../../test/plugins/browser.js';\nimport { HasActionMenuAsChild } from '../stories/action-group.stories.js';\nimport '../stories/action-group.stories.js';\nimport sinon from 'sinon';\nimport { isWebKit } from '@spectrum-web-components/shared';\n\nclass QuietActionGroup extends LitElement {\n    protected override render(): TemplateResult {\n        return html`\n            <sp-action-group quiet>\n                <slot name=\"first\"></slot>\n                <slot name=\"second\"></slot>\n            </sp-action-group>\n        `;\n    }\n}\ncustomElements.define('quiet-action-group', QuietActionGroup);\n\nclass EmphasizedActionGroup extends LitElement {\n    protected override render(): TemplateResult {\n        return html`\n            <sp-action-group emphasized>\n                <slot name=\"first\"></slot>\n                <slot name=\"second\"></slot>\n            </sp-action-group>\n        `;\n    }\n}\ncustomElements.define('emphasized-action-group', EmphasizedActionGroup);\n\nasync function singleSelectedActionGroup(\n    selected: string[]\n): Promise<ActionGroup> {\n    const el = await fixture<ActionGroup>(html`\n        <sp-action-group\n            label=\"Selects User-Chosen Buttons\"\n            selects=\"single\"\n            .selected=${selected}\n        >\n            <sp-action-button value=\"first\" class=\"first\">\n                First\n            </sp-action-button>\n            <sp-action-button value=\"second\" class=\"second\">\n                <div slot=\"icon\" style=\"width: 10px; height: 10px;\"></div>\n                Second\n            </sp-action-button>\n        </sp-action-group>\n    `);\n    return el;\n}\n\nasync function multipleSelectedActionGroup(\n    selected: string[]\n): Promise<ActionGroup> {\n    const el = await fixture<ActionGroup>(html`\n        <sp-action-group\n            label=\"Selects User-Chosen Buttons\"\n            selects=\"multiple\"\n            .selected=${selected}\n        >\n            <sp-action-button value=\"first\" class=\"first\">\n                First\n            </sp-action-button>\n            <sp-action-button value=\"second\" class=\"second\">\n                Second\n            </sp-action-button>\n        </sp-action-group>\n    `);\n    return el;\n}\n\ndescribe('ActionGroup', () => {\n    it('does not throw an error if slotElement is null', async () => {\n        // To verify that this test is not evergreen, you can temporarily disable the safeguard\n        // clause in `manageButtons` by commenting out the following lines:\n        // if (!this.slotElement) { return; }\n\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group>\n                <sp-action-button value=\"first\">First</sp-action-button>\n                <sp-action-button value=\"second\">Second</sp-action-button>\n            </sp-action-group>\n        `);\n\n        // Stub the slotElement getter to return null\n        const slotElementStub = sinon.stub(el, 'slotElement').get(() => null);\n        await elementUpdated(el);\n\n        // trigger a slotchange event\n        while (el.firstChild) {\n            el.removeChild(el.firstChild);\n        }\n        await elementUpdated(el);\n        expect(el.children.length).to.equal(0);\n        slotElementStub.restore();\n    });\n\n    it('loads empty action-group accessibly', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group></sp-action-group>\n        `);\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n\n    it('loads action-group with action-menu accessibly', async () => {\n        const el = await fixture<ActionGroup>(\n            HasActionMenuAsChild({ label: 'Action Group' })\n        );\n\n        await elementUpdated(el);\n\n        await nextFrame();\n        await nextFrame();\n        await nextFrame();\n        await nextFrame();\n\n        await expect(el).to.be.accessible();\n    });\n\n    it('action-group with action-menu manages tabIndex correctly while using keyboard', async () => {\n        const el = await fixture<ActionGroup>(\n            HasActionMenuAsChild({ label: 'Action Group' })\n        );\n\n        await elementUpdated(el);\n        await waitUntil(() => el.children.length === 4);\n\n        // press Tab to focus into the action-group\n        await sendKeys({ press: 'Tab' });\n\n        await elementUpdated(el);\n\n        // expect the first button to be focused\n        expect(\n            document.activeElement?.id,\n            'should be focused on the first button'\n        ).to.equal('first');\n\n        // expect all the elements of the focus group to have a tabIndex of -1 except the first button because it is focused using Tab\n        expect(\n            (el.children[0] as ActionButton)?.tabIndex,\n            'should be focused on the first button'\n        ).to.equal(0);\n        expect(\n            (el.children[1] as ActionButton)?.tabIndex,\n            'should not be focused on the second button'\n        ).to.equal(-1);\n        expect(\n            (el.children[2] as ActionButton)?.tabIndex,\n            'should not be focused on the third button'\n        ).to.equal(-1);\n        expect(\n            (el.children[3] as ActionMenu)?.tabIndex,\n            'should not be focused on the fourth button'\n        ).to.equal(-1);\n\n        // navigate to the action-menu using the arrow keys\n        await sendKeys({ press: 'ArrowRight' });\n        await sendKeys({ press: 'ArrowRight' });\n        await sendKeys({ press: 'ArrowRight' });\n\n        await elementUpdated(el);\n\n        // expect the action-menu to be focused\n        expect(el.children[3]).to.equal(document.activeElement);\n\n        // press Enter to open the action-menu\n        await sendKeys({ press: 'Enter' });\n\n        let opened = oneEvent(el.children[3] as ActionMenu, 'sp-opened');\n        await elementUpdated(el.children[3]);\n        await opened;\n\n        // expect the first menu item to be focused\n        const firstMenuItem = el.querySelector('#first-menu-item');\n        const fourthMenuItem = el.querySelector('#fourth-menu-item');\n        expect(firstMenuItem).to.equal(document.activeElement);\n        // navigate to the fourth menu item using the arrow keys\n        await sendKeys({ press: 'ArrowDown' });\n        await sendKeys({ press: 'ArrowDown' });\n        await sendKeys({ press: 'ArrowDown' });\n\n        opened = oneEvent(fourthMenuItem as MenuItem, 'sp-opened');\n\n        // press Enter to select the fourth menu item\n        await sendKeys({ press: 'Enter' });\n        await opened;\n\n        // expect the second submenu item to be focused\n        const secondSubMenuItem = el.querySelector(\n            '#second-sub-menu-item'\n        ) as MenuItem;\n        expect(secondSubMenuItem).to.equal(document.activeElement);\n\n        // press Enter to select the second submenu item\n        await sendKeys({ press: 'Enter' });\n\n        const closed = oneEvent(el.children[3] as ActionMenu, 'sp-closed');\n        await elementUpdated(el.children[3]);\n\n        await closed;\n\n        // expect the action-menu to be focused\n        expect(el.children[3]).to.equal(document.activeElement);\n    });\n\n    it.skip('action-group with action-menu manages tabIndex correctly while using mouse', async () => {\n        const el = await fixture<ActionGroup>(\n            HasActionMenuAsChild({ label: 'Action Group' })\n        );\n\n        await elementUpdated(el);\n\n        await aTimeout(100);\n\n        // get the bounding box of the first button\n        const firstButton = el.querySelector('#first') as ActionButton;\n        sendMouseTo(firstButton, 'click');\n\n        await elementUpdated(firstButton);\n\n        // expect all the elements of the focus group to have a tabIndex of -1 except the first button because it is focused using mouse\n        expect(\n            (el.children[0] as ActionButton)?.tabIndex,\n            'mouse1: should be focused on the first button'\n        ).to.equal(0);\n        expect(\n            (el.children[1] as ActionButton)?.tabIndex,\n            'mouse1: should not be focused on the second button'\n        ).to.equal(-1);\n        expect(\n            (el.children[2] as ActionButton)?.tabIndex,\n            'mouse1: should not be focused on the third button'\n        ).to.equal(-1);\n        expect(\n            (el.children[3] as ActionMenu)?.tabIndex,\n            'mouse1: should not be focused on the fourth button'\n        ).to.equal(-1);\n\n        // click outside the action-group and it should loose focus and update the tabIndexes\n        sendMouseFrom(el, 'click');\n\n        await elementUpdated(el);\n\n        // expect the first button to have a tabIndex of 0 and everything else to have a tabIndex of -1\n        expect(\n            (el.children[0] as ActionButton)?.tabIndex,\n            'mouse2: should be focused on the first button'\n        ).to.equal(0);\n        expect(\n            (el.children[1] as ActionButton)?.tabIndex,\n            'mouse2: should not be focused on the second button'\n        ).to.equal(-1);\n        expect(\n            (el.children[2] as ActionButton)?.tabIndex,\n            'mouse2: should not be focused on the third button'\n        ).to.equal(-1);\n        expect(\n            (el.children[3] as ActionMenu)?.tabIndex,\n            'mouse2: should not be focused on the fourth button'\n        ).to.equal(-1);\n\n        await elementUpdated(el);\n\n        // get the bounding box of the action-menu\n        const actionMenu = el.querySelector('#action-menu') as ActionMenu;\n\n        sendMouseTo(actionMenu, 'click');\n        await waitUntil(\n            () => actionMenu?.strategy?.overlay?.state === 'opened',\n            `action-menu opened (status ${actionMenu?.strategy?.overlay?.state})`,\n            { timeout: 300 }\n        );\n\n        expect(actionMenu).to.equal(document.activeElement);\n        const closed = oneEvent(el.children[3] as ActionMenu, 'sp-closed');\n\n        if (isWebKit()) {\n            // focus on the first menu item as not all items are keyboard focusable in Safari by default\n            // https://www.scottohara.me/blog/2014/10/03/link-tabbing-firefox-osx.html\n            actionMenu.optionsMenu.focus();\n        } else {\n            // use keyboard to navigate to the second menu item and select it\n            await sendKeys({ press: 'ArrowDown' });\n        }\n        expect(actionMenu.children[0]).to.equal(document.activeElement);\n        await sendKeys({ press: 'Enter' });\n        await elementUpdated(el);\n\n        await closed;\n\n        expect(\n            (el.children[0] as ActionButton)?.tabIndex,\n            'final: should NOT be focused on the first button'\n        ).to.equal(-1);\n        expect(\n            (el.children[1] as ActionButton)?.tabIndex,\n            'final: should not be focused on the second button'\n        ).to.equal(-1);\n        expect(\n            (el.children[2] as ActionButton)?.tabIndex,\n            'final: should not be focused on the third button'\n        ).to.equal(-1);\n        expect(\n            (el.children[3] as ActionMenu)?.tabIndex,\n            'final: should be be focused on the fourth button'\n        ).to.equal(0);\n    });\n\n    testForLitDevWarnings(\n        async () =>\n            await fixture<ActionGroup>(html`\n                <sp-action-group aria-label=\"Default Group\">\n                    <sp-action-button>First</sp-action-button>\n                    <sp-action-button>Second</sp-action-button>\n                    <sp-action-button>Third</sp-action-button>\n                </sp-action-group>\n            `)\n    );\n    it('loads default action-group accessibly', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group aria-label=\"Default Group\">\n                <sp-action-button>First</sp-action-button>\n                <sp-action-button>Second</sp-action-button>\n                <sp-action-button>Third</sp-action-button>\n            </sp-action-group>\n        `);\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n        expect(el.getAttribute('aria-label')).to.equal('Default Group');\n        expect(el.getAttribute('role')).to.equal('toolbar');\n        expect(el.children[0].getAttribute('role')).to.equal('button');\n    });\n    it('applies `static-color` attribute to its children', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group static-color=\"white\">\n                <sp-action-button id=\"first\">First</sp-action-button>\n                <sp-action-button id=\"second\">Second</sp-action-button>\n            </sp-action-group>\n        `);\n        const firstButton = el.querySelector('#first') as ActionButton;\n        const secondButton = el.querySelector('#second') as ActionButton;\n\n        await elementUpdated(el);\n\n        expect(firstButton.staticColor).to.equal('white');\n        expect(secondButton.staticColor).to.equal('white');\n\n        el.staticColor = undefined;\n\n        await elementUpdated(el);\n\n        expect(firstButton.staticColor).to.be.undefined;\n        expect(secondButton.staticColor).to.be.undefined;\n    });\n    it('manages \"label\"', async () => {\n        const testLabel = 'Testable action group';\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group label=${testLabel}>\n                <sp-action-button id=\"first\">First</sp-action-button>\n                <sp-action-button id=\"second\">Second</sp-action-button>\n            </sp-action-group>\n        `);\n\n        expect(el.getAttribute('aria-label')).to.equal(testLabel);\n\n        el.label = '';\n\n        await elementUpdated(el);\n\n        expect(el.hasAttribute('aria-label')).to.be.false;\n    });\n    it('applies `quiet` attribute to its children', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group quiet>\n                <sp-action-button id=\"first\">First</sp-action-button>\n                <sp-action-button id=\"second\">Second</sp-action-button>\n            </sp-action-group>\n        `);\n        const firstButton = el.querySelector('#first') as ActionButton;\n        const secondButton = el.querySelector('#second') as ActionButton;\n\n        await elementUpdated(el);\n\n        expect(firstButton.hasAttribute('quiet')).to.be.true;\n        expect(firstButton.quiet).to.be.true;\n        expect(secondButton.hasAttribute('quiet')).to.be.true;\n        expect(secondButton.quiet).to.be.true;\n    });\n    it('applies `quiet` attribute to its slotted children', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <quiet-action-group>\n                <sp-action-button slot=\"first\" id=\"first\">\n                    First\n                </sp-action-button>\n                <sp-action-button slot=\"second\" id=\"second\">\n                    Second\n                </sp-action-button>\n            </quiet-action-group>\n        `);\n        const firstButton = el.querySelector('#first') as ActionButton;\n        const secondButton = el.querySelector('#second') as ActionButton;\n\n        await elementUpdated(el);\n\n        expect(firstButton.hasAttribute('quiet')).to.be.true;\n        expect(firstButton.quiet).to.be.true;\n        expect(secondButton.hasAttribute('quiet')).to.be.true;\n        expect(secondButton.quiet).to.be.true;\n    });\n    it('applies `emphasized` attribute to its slotted children', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <emphasized-action-group>\n                <sp-action-button slot=\"first\" id=\"first\">\n                    First\n                </sp-action-button>\n                <sp-action-button slot=\"second\" id=\"second\">\n                    Second\n                </sp-action-button>\n            </emphasized-action-group>\n        `);\n        const firstButton = el.querySelector('#first') as ActionButton;\n        const secondButton = el.querySelector('#second') as ActionButton;\n\n        await elementUpdated(el);\n\n        expect(firstButton.hasAttribute('emphasized')).to.be.true;\n        expect(firstButton.emphasized).to.be.true;\n        expect(secondButton.hasAttribute('emphasized')).to.be.true;\n        expect(secondButton.emphasized).to.be.true;\n    });\n    it('applies `quiet` attribute to slotted children with overlays', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <quiet-action-group>\n                <overlay-trigger slot=\"first\">\n                    <sp-action-button slot=\"trigger\" id=\"first\">\n                        First\n                    </sp-action-button>\n                </overlay-trigger>\n                <overlay-trigger slot=\"second\">\n                    <sp-action-button slot=\"trigger\" id=\"second\">\n                        Second\n                    </sp-action-button>\n                </overlay-trigger>\n            </quiet-action-group>\n        `);\n        const firstButton = el.querySelector('#first') as ActionButton;\n        const secondButton = el.querySelector('#second') as ActionButton;\n\n        await elementUpdated(el);\n\n        expect(firstButton.hasAttribute('quiet')).to.be.true;\n        expect(firstButton.quiet).to.be.true;\n        expect(secondButton.hasAttribute('quiet')).to.be.true;\n        expect(secondButton.quiet).to.be.true;\n    });\n    it('applies `emphasized` attribute to slotted children with overlays', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <emphasized-action-group>\n                <overlay-trigger slot=\"first\">\n                    <sp-action-button slot=\"trigger\" id=\"first\">\n                        First\n                    </sp-action-button>\n                </overlay-trigger>\n                <overlay-trigger slot=\"second\">\n                    <sp-action-button slot=\"trigger\" id=\"second\">\n                        Second\n                    </sp-action-button>\n                </overlay-trigger>\n            </emphasized-action-group>\n        `);\n        const firstButton = el.querySelector('#first') as ActionButton;\n        const secondButton = el.querySelector('#second') as ActionButton;\n\n        await elementUpdated(el);\n\n        expect(firstButton.hasAttribute('emphasized')).to.be.true;\n        expect(firstButton.emphasized).to.be.true;\n        expect(secondButton.hasAttribute('emphasized')).to.be.true;\n        expect(secondButton.emphasized).to.be.true;\n    });\n    it('loads [selects=\"single\"] action-group accessibly', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group label=\"Selects Single Group\" selects=\"single\">\n                <sp-action-button>First</sp-action-button>\n                <sp-action-button>Second</sp-action-button>\n                <sp-action-button>Third</sp-action-button>\n            </sp-action-group>\n        `);\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n        expect(el.getAttribute('aria-label')).to.equal('Selects Single Group');\n        expect(el.getAttribute('role')).to.equal('radiogroup');\n        expect(el.children[0].getAttribute('role')).to.equal('radio');\n    });\n    it('loads [selects=\"single\"] action-group w/ selection accessibly', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group label=\"Selects Single Group\" selects=\"single\">\n                <sp-action-button>First</sp-action-button>\n                <sp-action-button>Second</sp-action-button>\n                <sp-action-button selected>Third</sp-action-button>\n            </sp-action-group>\n        `);\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('loads [selects=\"multiple\"] action-group accessibly', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group label=\"Selects Multiple Group\" selects=\"multiple\">\n                <sp-action-button>First</sp-action-button>\n                <sp-action-button>Second</sp-action-button>\n                <sp-action-button>Third</sp-action-button>\n            </sp-action-group>\n        `);\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n        expect(el.getAttribute('aria-label')).to.equal(\n            'Selects Multiple Group'\n        );\n        expect(el.getAttribute('role')).to.equal('toolbar');\n        expect(el.children[0].getAttribute('role')).to.equal('checkbox');\n    });\n    it('loads [selects=\"multiple\"] action-group w/ selection accessibly', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group label=\"Selects Multiple Group\" selects=\"multiple\">\n                <sp-action-button>First</sp-action-button>\n                <sp-action-button selected>Second</sp-action-button>\n                <sp-action-button selected>Third</sp-action-button>\n            </sp-action-group>\n        `);\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('sets tab stop when [selects=\"single\"] and the initial button is [disabled]', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group label=\"Selects Single Group\" selects=\"single\">\n                <sp-action-button disabled>First</sp-action-button>\n                <sp-action-button class=\"second\">Second</sp-action-button>\n                <sp-action-button>Third</sp-action-button>\n            </sp-action-group>\n        `);\n        const secondButton = el.querySelector('.second') as ActionButton;\n\n        await elementUpdated(el);\n\n        expect(secondButton.hasAttribute('tabindex'));\n        expect(secondButton.getAttribute('tabindex')).to.equal('0');\n    });\n    it('surfaces [selects=\"single\"] selection', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group label=\"Selects Single Group\" selects=\"single\">\n                <sp-action-button>First</sp-action-button>\n                <sp-action-button>Second</sp-action-button>\n                <sp-action-button selected>Third</sp-action-button>\n            </sp-action-group>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.selected, '\"Third\" selected').to.deep.equal(['Third']);\n    });\n    it('manages [selects=\"single\"] selection through multiple slots', async () => {\n        const test = await fixture<HTMLDivElement>(html`\n            <div>\n                <sp-action-button>First</sp-action-button>\n                <sp-action-button>Second</sp-action-button>\n                <sp-action-button selected>Third</sp-action-button>\n            </div>\n        `);\n\n        const firstItem = test.querySelector(\n            'sp-action-button'\n        ) as ActionButton;\n        const thirdItem = test.querySelector(\n            'sp-action-button[selected]'\n        ) as ActionButton;\n\n        const shadowRoot = test.attachShadow({ mode: 'open' });\n        shadowRoot.innerHTML = `\n            <sp-action-group label=\"Selects Single Group\" selects=\"single\">\n                <slot></slot>\n            </sp-action-group>\n        `;\n\n        const el = shadowRoot.querySelector('sp-action-group') as ActionGroup;\n        await elementUpdated(el);\n\n        expect(el.selected, '\"Third\" selected').to.deep.equal(['Third']);\n        expect(firstItem.selected).to.be.false;\n        expect(thirdItem.selected).to.be.true;\n\n        firstItem.click();\n        await elementUpdated(el);\n\n        expect(el.selected, '\"First\" selected').to.deep.equal(['First']);\n        expect(firstItem.selected).to.be.true;\n        expect(thirdItem.selected).to.be.false;\n    });\n    it('surfaces [selects=\"multiple\"] selection', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group label=\"Selects Multiple Group\" selects=\"multiple\">\n                <sp-action-button>First</sp-action-button>\n                <sp-action-button selected>Second</sp-action-button>\n                <sp-action-button selected>Third</sp-action-button>\n            </sp-action-group>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.selected, '\"Second\" and \"Third\" selected').to.deep.equal([\n            'Second',\n            'Third',\n        ]);\n    });\n    it('does not select without [selects]', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group label=\"No Selects Group\">\n                <sp-action-button>First</sp-action-button>\n                <sp-action-button selected>Second</sp-action-button>\n                <sp-action-button class=\"third\">Third</sp-action-button>\n            </sp-action-group>\n        `);\n        const thirdElement = el.querySelector('.third') as ActionButton;\n\n        await elementUpdated(el);\n        expect(el.selected.length).to.equal(1);\n\n        thirdElement.click();\n\n        await elementUpdated(el);\n\n        expect(el.selected.length).to.equal(1);\n    });\n    it('selects via `click` while [selects=\"single\"]', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group label=\"Selects Single Group\" selects=\"single\">\n                <sp-action-button value=\"first\">First</sp-action-button>\n                <sp-action-button value=\"second\" selected>\n                    Second\n                </sp-action-button>\n                <sp-action-button value=\"third\" class=\"third\">\n                    Third\n                </sp-action-button>\n            </sp-action-group>\n        `);\n        const thirdElement = el.querySelector('.third') as ActionButton;\n\n        await elementUpdated(el);\n        expect(el.selected.length).to.equal(1);\n        expect(el.selected.includes('second'));\n\n        thirdElement.click();\n\n        await elementUpdated(el);\n\n        expect(thirdElement.selected, 'third child selected').to.be.true;\n\n        await waitUntil(\n            () => el.selected.length === 1 && el.selected.includes('third'),\n            'Updates value of `selected`'\n        );\n    });\n    it('selects via `click` while  [selects=\"multiple\"] selection', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group label=\"Selects Multiple Group\" selects=\"multiple\">\n                <sp-action-button selected class=\"first\">\n                    First\n                </sp-action-button>\n                <sp-action-button class=\"second\">Second</sp-action-button>\n                <sp-action-button class=\"third\">Third</sp-action-button>\n            </sp-action-group>\n        `);\n        const firstElement = el.querySelector('.first') as ActionButton;\n        const secondElement = el.querySelector('.second') as ActionButton;\n        const thirdElement = el.querySelector('.third') as ActionButton;\n\n        await elementUpdated(el);\n        expect(el.selected.length).to.equal(1);\n        expect(el.selected.includes('First'));\n\n        firstElement.click();\n        secondElement.click();\n        thirdElement.click();\n\n        await elementUpdated(el);\n\n        expect(secondElement.selected, 'second child selected').to.be.true;\n        expect(thirdElement.selected, 'third child selected').to.be.true;\n\n        await waitUntil(\n            () =>\n                el.selected.length === 2 &&\n                el.selected.includes('Second') &&\n                el.selected.includes('Third'),\n            'Updates value of `selected`'\n        );\n    });\n    it('consumes descendant `change` events when `[selects]`', async () => {\n        const changeSpy = spy();\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group\n                @change=${() => changeSpy()}\n                label=\"Selects Single Group\"\n                selects=\"single\"\n            >\n                <sp-action-button toggles value=\"first\">First</sp-action-button>\n                <sp-action-button toggles value=\"second\" selected>\n                    Second\n                </sp-action-button>\n                <sp-action-button toggles value=\"third\" class=\"third\">\n                    Third\n                </sp-action-button>\n            </sp-action-group>\n        `);\n        const thirdElement = el.querySelector('.third') as ActionButton;\n\n        await elementUpdated(el);\n        expect(el.selected.length).to.equal(1);\n        expect(el.selected.includes('second'));\n        expect(changeSpy.callCount).to.equal(0);\n\n        thirdElement.click();\n\n        await elementUpdated(el);\n\n        expect(thirdElement.selected, 'third child selected').to.be.true;\n        expect(changeSpy.callCount).to.equal(1);\n\n        await waitUntil(\n            () => el.selected.length === 1 && el.selected.includes('third'),\n            'Updates value of `selected`'\n        );\n    });\n    it('does not respond to clicks on itself', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group label=\"Selects Single Group\" selects=\"single\">\n                <sp-action-button>First</sp-action-button>\n                <sp-action-button>Second</sp-action-button>\n                <sp-action-button class=\"third\">Third</sp-action-button>\n            </sp-action-group>\n        `);\n        await elementUpdated(el);\n        expect(el.selected.length).to.equal(0);\n\n        el.click();\n\n        await elementUpdated(el);\n\n        expect(el.selected.length).to.equal(0);\n    });\n    it('selection can be prevented', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group\n                label=\"Selects Single Group\"\n                selects=\"single\"\n                @change=${(event: Event): void => {\n                    event.preventDefault();\n                }}\n            >\n                <sp-action-button>First</sp-action-button>\n                <sp-action-button>Second</sp-action-button>\n                <sp-action-button class=\"third\">Third</sp-action-button>\n            </sp-action-group>\n        `);\n        const thirdElement = el.querySelector('.third') as ActionButton;\n\n        await elementUpdated(el);\n        expect(el.selected.length).to.equal(0);\n\n        thirdElement.click();\n\n        await elementUpdated(el);\n\n        expect(thirdElement.selected, 'third child not selected').to.be.false;\n        expect(el.selected.length).to.equal(0);\n    });\n\n    it('selects user-passed value while [selects=\"single\"]', async () => {\n        const el = await singleSelectedActionGroup(['first']);\n        await elementUpdated(el);\n        expect(el.selected.length).to.equal(1);\n\n        const firstButton = el.querySelector('.first') as ActionButton;\n        const secondButton = el.querySelector('.second') as ActionButton;\n        expect(firstButton.selected, 'first button selected').to.be.true;\n        expect(secondButton.selected, 'second button not selected').to.be.false;\n\n        secondButton.click();\n        await elementUpdated(el);\n\n        expect(el.selected.length).to.equal(1);\n        expect(firstButton.selected, 'first button not selected').to.be.false;\n        expect(secondButton.selected, 'second button selected').to.be.true;\n    });\n\n    it('selects can be updated while [selects=\"single\"]', async () => {\n        const el = await singleSelectedActionGroup(['first']);\n        await elementUpdated(el);\n        expect(el.selected.length).to.equal(1);\n\n        const firstButton = el.querySelector('.first') as ActionButton;\n        const secondButton = el.querySelector('.second') as ActionButton;\n        expect(firstButton.selected, 'first button selected').to.be.true;\n        expect(secondButton.selected, 'second button not selected').to.be.false;\n\n        el.selected = ['second'];\n        await elementUpdated(el);\n\n        expect(el.selected.length).to.equal(1);\n        expect(firstButton.selected, 'first button not selected').to.be.false;\n        expect(secondButton.selected, 'second button selected').to.be.true;\n    });\n\n    it('does not allow interaction with child content to interrupt the selection mechanism', async () => {\n        const el = await singleSelectedActionGroup([]);\n        await elementUpdated(el);\n        expect(el.selected.length).to.equal(0);\n\n        const firstButton = el.querySelector('.first') as ActionButton;\n        const secondButton = el.querySelector('.second') as ActionButton;\n        const icon = secondButton.querySelector('[slot=icon]') as HTMLElement;\n        expect(firstButton.selected, 'first button selected').to.be.false;\n        expect(secondButton.selected, 'second button not selected').to.be.false;\n\n        secondButton.click();\n        await elementUpdated(el);\n\n        expect(el.selected.length).to.equal(1);\n        expect(el.selected).to.deep.equal(['second']);\n        expect(firstButton.selected, 'first button not selected').to.be.false;\n        expect(secondButton.selected, 'second button selected').to.be.true;\n\n        firstButton.click();\n        await elementUpdated(el);\n\n        expect(el.selected.length).to.equal(1);\n        expect(el.selected).to.deep.equal(['first']);\n        expect(firstButton.selected, 'first button selected').to.be.true;\n        expect(secondButton.selected, 'second button not selected').to.be.false;\n\n        const rect = icon.getBoundingClientRect();\n        await sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [\n                        rect.left + rect.width / 2,\n                        rect.top + rect.height / 2,\n                    ],\n                },\n            ],\n        });\n        icon.click();\n        await elementUpdated(el);\n\n        expect(el.selected.length).to.equal(1);\n        expect(el.selected).to.deep.equal(['second']);\n        expect(firstButton.selected, 'first button not selected').to.be.false;\n        expect(secondButton.selected, 'second button selected').to.be.true;\n    });\n\n    it('selects user-passed value while [selects=\"multiple\"]', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group\n                label=\"Selects Multiple Group\"\n                selects=\"multiple\"\n                .selected=${['first', 'second']}\n            >\n                <sp-action-button class=\"first\" value=\"first\">\n                    First\n                </sp-action-button>\n                <sp-action-button class=\"second\" value=\"second\">\n                    Second\n                </sp-action-button>\n                <sp-action-button class=\"third \" value=\"third\">\n                    Third\n                </sp-action-button>\n            </sp-action-group>\n        `);\n\n        await elementUpdated(el);\n\n        await Promise.all(el.buttons.map((button) => elementUpdated(button)));\n\n        const firstButton = el.querySelector('.first') as ActionButton;\n        const secondButton = el.querySelector('.second') as ActionButton;\n        const thirdButton = el.querySelector('.third') as ActionButton;\n\n        expect(el.selected.length).to.equal(2);\n        expect(firstButton.selected, 'first button selected').to.be.true;\n        expect(secondButton.selected, 'second button selected').to.be.true;\n        expect(thirdButton.selected, 'third button not selected').to.be.false;\n\n        thirdButton.click();\n        await elementUpdated(el);\n\n        expect(el.selected.length).to.equal(3);\n        expect(firstButton.selected, 'first button selected').to.be.true;\n        expect(secondButton.selected, 'second button selected').to.be.true;\n        expect(thirdButton.selected, 'third button selected').to.be.true;\n\n        firstButton.click();\n        await elementUpdated(el);\n\n        expect(el.selected.length).to.equal(2);\n        expect(firstButton.selected, 'first button not selected').to.be.false;\n        expect(secondButton.selected, 'second button selected').to.be.true;\n        expect(thirdButton.selected, 'third button selected').to.be.true;\n    });\n\n    it('selects can be updated while [selects=\"multiple\"]', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group\n                label=\"Selects Multiple Group\"\n                selects=\"multiple\"\n                .selected=${['first', 'second']}\n            >\n                <sp-action-button class=\"first\" value=\"first\">\n                    First\n                </sp-action-button>\n                <sp-action-button class=\"second\" value=\"second\">\n                    Second\n                </sp-action-button>\n                <sp-action-button class=\"third \" value=\"third\">\n                    Third\n                </sp-action-button>\n            </sp-action-group>\n        `);\n\n        await elementUpdated(el);\n\n        await Promise.all(el.buttons.map((button) => elementUpdated(button)));\n\n        const firstButton = el.querySelector('.first') as ActionButton;\n        const secondButton = el.querySelector('.second') as ActionButton;\n        const thirdButton = el.querySelector('.third') as ActionButton;\n\n        expect(el.selected.length).to.equal(2);\n        expect(firstButton.selected, 'first button selected').to.be.true;\n        expect(secondButton.selected, 'second button selected').to.be.true;\n        expect(thirdButton.selected, 'third button not selected').to.be.false;\n\n        el.selected = ['first', 'second', 'third'];\n        await elementUpdated(el);\n\n        expect(el.selected.length).to.equal(3);\n        expect(firstButton.selected, 'first button selected').to.be.true;\n        expect(secondButton.selected, 'second button selected').to.be.true;\n        expect(thirdButton.selected, 'third button selected').to.be.true;\n\n        el.selected = ['second', 'third'];\n        await elementUpdated(el);\n\n        expect(el.selected.length, JSON.stringify(el.selected)).to.equal(2);\n        expect(firstButton.selected, 'first button not selected').to.be.false;\n        expect(secondButton.selected, 'second button selected').to.be.true;\n        expect(thirdButton.selected, 'third button selected').to.be.true;\n    });\n\n    it('selects multiple user-passed values while [selects=\"single\"], but then proceeds with radio-button style functionality', async () => {\n        const el = await singleSelectedActionGroup(['first', 'second']);\n        await elementUpdated(el);\n        expect(el.selected.length).to.equal(2);\n\n        const firstButton = el.querySelector('.first') as ActionButton;\n        const secondButton = el.querySelector('.second') as ActionButton;\n        expect(firstButton.selected, 'first button selected').to.be.true;\n        expect(secondButton.selected, 'second button selected').to.be.true;\n\n        secondButton.click();\n        await elementUpdated(el);\n\n        expect(el.selected.length).to.equal(1);\n        expect(firstButton.selected, 'first button selected').to.be.false;\n        expect(secondButton.selected, 'second button selected').to.be.true;\n    });\n\n    it('Clicking button event should bubble up from inner label to outer button element', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group\n                label=\"Selects Multiple Group\"\n                selects=\"multiple\"\n                .selected=${['first', 'second']}\n            >\n                <sp-action-button class=\"first\" value=\"first\">\n                    First\n                </sp-action-button>\n                <sp-action-button class=\"second\" value=\"second\">\n                    Second\n                </sp-action-button>\n            </sp-action-group>\n        `);\n\n        await elementUpdated(el);\n        expect(el.selected.length).to.equal(2);\n\n        const firstButtonEl = el.querySelector('.first') as ActionButton;\n        const firstSpanEl = firstButtonEl.shadowRoot.querySelector(\n            '#label'\n        ) as HTMLSpanElement;\n        const secondButtonEl = el.querySelector('.second') as ActionButton;\n\n        expect(firstButtonEl.selected, 'first button selected').to.be.true;\n        expect(secondButtonEl.selected, 'second button selected').to.be.true;\n\n        firstSpanEl.click(); // clicking inner span bubbles up and fires outer button click\n        await elementUpdated(el);\n\n        expect(firstButtonEl.selected, 'first button selected').to.be.false;\n        expect(secondButtonEl.selected, 'second button selected').to.be.true;\n\n        firstButtonEl.click(); // clicking outer action-button element fires own click event\n        await elementUpdated(el);\n\n        expect(firstButtonEl.selected, 'first button selected').to.be.true;\n        expect(secondButtonEl.selected, 'second button selected').to.be.true;\n    });\n\n    it('only selects user-passed buttons if present in action-group while [selects=\"multiple\"]', async () => {\n        const el = await multipleSelectedActionGroup(['second', 'fourth']);\n\n        await elementUpdated(el);\n        expect(el.selected.length).to.equal(1);\n        const secondButton = el.querySelector('.second') as ActionButton;\n        expect(secondButton.selected, 'second button selected').to.be.true;\n\n        const firstButton = el.querySelector('.first') as ActionButton;\n        expect(firstButton.selected, 'first button selected').to.be.false;\n    });\n\n    it('selects user-passed values with no .selects value, but does not allow interaction afterwards', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group\n                label=\"Selects User-Chosen Buttons\"\n                .selected=${['first']}\n            >\n                <sp-action-button value=\"first\" class=\"first\">\n                    First\n                </sp-action-button>\n                <sp-action-button value=\"second\" class=\"second\">\n                    Second\n                </sp-action-button>\n            </sp-action-group>\n        `);\n\n        await elementUpdated(el);\n        expect(el.selected.length).to.equal(1);\n        const firstButton = el.querySelector('.first') as ActionButton;\n        const secondButton = el.querySelector('.second') as ActionButton;\n        expect(firstButton.selected, 'first button selected').to.be.true;\n        expect(secondButton.selected, 'second button selected').to.be.false;\n\n        secondButton.click();\n        await elementUpdated(el);\n\n        expect(el.selected.length).to.equal(1);\n        expect(firstButton.selected, 'first button selected').to.be.true;\n        expect(secondButton.selected, 'second button selected').to.be.false;\n    });\n\n    it('selects multiple buttons if .selected is passed in, but does not allow further interaction afterwards', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group\n                label=\"Selects User-Chosen Buttons\"\n                .selected=${['first', 'second']}\n            >\n                <sp-action-button class=\"first\" value=\"first\">\n                    First\n                </sp-action-button>\n                <sp-action-button class=\"second\" value=\"second\">\n                    Second\n                </sp-action-button>\n            </sp-action-group>\n        `);\n\n        await elementUpdated(el);\n        expect(el.getAttribute('role')).to.equal('toolbar');\n        expect(el.selected.length).to.equal(2);\n\n        const firstButton = el.querySelector('.first') as ActionButton;\n        expect(firstButton.selected, 'first button selected').to.be.true;\n        expect(firstButton.hasAttribute('aria-checked')).to.be.false;\n        expect(\n            firstButton.getAttribute('aria-pressed'),\n            'first button aria-pressed'\n        ).to.eq('true');\n        expect(firstButton.getAttribute('role'), 'first button role').to.eq(\n            'button'\n        );\n\n        const secondButton = el.querySelector('.second') as ActionButton;\n        expect(secondButton.selected, 'second button selected').to.be.true;\n        expect(secondButton.hasAttribute('aria-checked')).to.be.false;\n        expect(\n            secondButton.getAttribute('aria-pressed'),\n            'second button aria-pressed'\n        ).to.eq('true');\n        expect(secondButton.getAttribute('role'), 'first button role').to.eq(\n            'button'\n        );\n\n        firstButton.click();\n        await elementUpdated(el);\n\n        expect(el.selected.length).to.equal(2);\n        expect(firstButton.selected, 'first button selected').to.be.true;\n        expect(firstButton.hasAttribute('aria-checked')).to.be.false;\n        expect(\n            firstButton.getAttribute('aria-pressed'),\n            'first button aria-pressed'\n        ).to.eq('true');\n        expect(firstButton.getAttribute('role'), 'first button role').to.eq(\n            'button'\n        );\n\n        expect(secondButton.selected, 'second button selected').to.be.true;\n        expect(secondButton.hasAttribute('aria-checked')).to.be.false;\n        expect(\n            secondButton.getAttribute('aria-pressed'),\n            'second button aria-pressed'\n        ).to.eq('true');\n        expect(secondButton.getAttribute('role'), 'first button role').to.eq(\n            'button'\n        );\n    });\n\n    it('will not change .selected state if event is prevented while [selects=\"multiple\"]', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group\n                label=\"Selects Multiple Group\"\n                selects=\"multiple\"\n                .selected=${['first', 'second']}\n                @change=${(event: Event): void => {\n                    event.preventDefault();\n                }}\n            >\n                <sp-action-button class=\"first\" value=\"first\">\n                    First\n                </sp-action-button>\n                <sp-action-button class=\"second\" value=\"second\">\n                    Second\n                </sp-action-button>\n                <sp-action-button class=\"third \" value=\"third\">\n                    Third\n                </sp-action-button>\n            </sp-action-group>\n        `);\n        const firstElement = el.querySelector('.first') as ActionButton;\n        const secondElement = el.querySelector('.second') as ActionButton;\n        const thirdElement = el.querySelector('.third') as ActionButton;\n\n        // checking if the first and second are selected\n        await elementUpdated(el);\n        expect(el.selected.length).to.equal(2);\n        expect(firstElement.selected, 'first child selected').to.be.true;\n        expect(secondElement.selected, 'second child selected').to.be.true;\n\n        // making sure third element isn't selected\n        thirdElement.click();\n        await elementUpdated(el);\n        expect(thirdElement.selected, 'third child not selected').to.be.false;\n        expect(el.selected.length).to.equal(2);\n\n        // making sure already-selected elements are not de-selected\n        secondElement.click();\n        await elementUpdated(el);\n\n        expect(secondElement.selected, 'second element still selected').to.be\n            .true;\n    });\n\n    it('will not change .selected state if event is prevented while [selects=\"single\"]', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group\n                label=\"Selects Single Group\"\n                selects=\"single\"\n                .selected=${['first']}\n                @change=${(event: Event): void => {\n                    event.preventDefault();\n                }}\n            >\n                <sp-action-button class=\"first\" value=\"first\">\n                    First\n                </sp-action-button>\n                <sp-action-button class=\"second\" value=\"second\">\n                    Second\n                </sp-action-button>\n            </sp-action-group>\n        `);\n        const firstElement = el.querySelector('.first') as ActionButton;\n        const secondElement = el.querySelector('.second') as ActionButton;\n\n        // checking if the first element is selected\n        await elementUpdated(el);\n        expect(el.selected.length).to.equal(1);\n        expect(firstElement.selected, 'first child selected').to.be.true;\n\n        // making sure third element isn't selected\n        secondElement.click();\n\n        await elementUpdated(el);\n\n        expect(secondElement.selected, 'second child not selected').to.be.false;\n        expect(el.selected.length).to.equal(1);\n\n        // making sure already-selected elements are not de-selected\n        firstElement.click();\n        await elementUpdated(el);\n\n        expect(firstElement.selected, 'first element still selected').to.be\n            .true;\n    });\n\n    it('will not change .selected state if event is prevented while selects is undefined', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group\n                label=\"Selects Single Group\"\n                .selected=${['first']}\n                @change=${(event: Event): void => {\n                    event.preventDefault();\n                }}\n            >\n                <sp-action-button class=\"first\" value=\"first\">\n                    First\n                </sp-action-button>\n                <sp-action-button class=\"second\" value=\"second\">\n                    Second\n                </sp-action-button>\n            </sp-action-group>\n        `);\n        const firstElement = el.querySelector('.first') as ActionButton;\n        const secondElement = el.querySelector('.second') as ActionButton;\n\n        // checking if the first element is selected\n        await elementUpdated(el);\n        expect(el.selected.length).to.equal(1);\n        expect(firstElement.selected, 'first child selected').to.be.true;\n\n        secondElement.click();\n        await elementUpdated(el);\n\n        // state should be exactly the same\n        expect(el.selected.length).to.equal(1);\n        expect(firstElement.selected, 'first child selected').to.be.true;\n        expect(secondElement.selected, 'second child not selected').to.be.false;\n    });\n\n    it('manages a `size` attribute', async () => {\n        const el = await fixture<ActionButton>(html`\n            <sp-action-group size=\"xl\">\n                <sp-action-button>Button</sp-action-button>\n            </sp-action-group>\n        `);\n\n        const button = el.querySelector('sp-action-button') as ActionButton;\n\n        await elementUpdated(el);\n        expect(el.size).to.equal('xl');\n        expect(button.size).to.equal('xl');\n        expect(el.getAttribute('size')).to.equal('xl');\n        expect(button.getAttribute('size')).to.equal('xl');\n        el.removeAttribute('size');\n        await elementUpdated(el);\n        expect(el.size).to.equal('m');\n        expect(el.hasAttribute('size')).to.be.false;\n        expect(button.size).to.equal('m');\n        expect(button.getAttribute('size')).to.equal('m');\n    });\n\n    it('does not apply a default `size` attribute', async () => {\n        const el = await fixture<ActionButton>(html`\n            <sp-action-group>\n                <sp-action-button>Button</sp-action-button>\n            </sp-action-group>\n        `);\n\n        const button = el.querySelector('sp-action-button') as ActionButton;\n\n        await elementUpdated(el);\n        expect(el.size).to.equal('m');\n        expect(button.size).to.equal('m');\n        expect(el.hasAttribute('size')).to.be.false;\n        expect(button.hasAttribute('size')).to.be.false;\n    });\n\n    it('will accept selected as a JSON string', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group\n                label=\"Selects Single Group\"\n                selects=\"single\"\n                selected='[\"first\"]'\n            >\n                <sp-action-button class=\"first\" value=\"first\">\n                    First\n                </sp-action-button>\n                <sp-action-button class=\"second\" value=\"second\">\n                    Second\n                </sp-action-button>\n            </sp-action-group>\n        `);\n        // checking if the first element is selected\n        await elementUpdated(el);\n        const firstElement = el.querySelector('.first') as ActionButton;\n        const secondElement = el.querySelector('.second') as ActionButton;\n\n        expect(el.selected.length).to.equal(1);\n        expect(firstElement.selected, 'first child selected').to.be.true;\n        expect(secondElement.selected, 'second child selected').to.be.false;\n    });\n\n    it('accepts role attribute override', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group role=\"group\">\n                <sp-action-button>Button</sp-action-button>\n            </sp-action-group>\n        `);\n\n        // with a role of group, the role should not be overridden\n        await elementUpdated(el);\n        expect(el.getAttribute('role')).to.equal('group');\n\n        // setting selects to single should override role to radiogroup\n        el.setAttribute('selects', 'single');\n        await elementUpdated(el);\n        expect(el.getAttribute('role')).to.equal('radiogroup');\n\n        // setting selects to multiple should override role to toolbar\n        el.setAttribute('selects', 'multiple');\n        await elementUpdated(el);\n        expect(el.getAttribute('role')).to.equal('toolbar');\n\n        // by default, role should be toolbar\n        el.removeAttribute('role');\n        el.removeAttribute('selects');\n        await elementUpdated(el);\n        expect(el.getAttribute('role')).to.equal('toolbar');\n    });\n\n    const acceptKeyboardInput = async (el: ActionGroup): Promise<void> => {\n        const thirdElement = el.querySelector('.third') as ActionButton;\n\n        await elementUpdated(el);\n        expect(el.selected.length).to.equal(1);\n        expect(el.selected[0]).to.equal('Second');\n\n        thirdElement.focus();\n        thirdElement.click();\n\n        await elementUpdated(el);\n\n        expect(thirdElement.selected, 'third child selected').to.be.true;\n        expect(el.selected.length).to.equal(1);\n        expect(el.selected[0]).to.equal('Third');\n\n        el.dispatchEvent(arrowRightEvent());\n        await sendKeys({ press: 'Enter' });\n\n        await elementUpdated(el);\n\n        expect(el.selected.length).to.equal(1);\n        expect(el.selected[0]).to.equal('First');\n\n        el.dispatchEvent(arrowLeftEvent());\n        el.dispatchEvent(arrowUpEvent());\n        await sendKeys({ press: 'Enter' });\n\n        expect(el.selected.length).to.equal(1);\n        expect(el.selected[0]).to.equal('Second');\n\n        el.dispatchEvent(endEvent());\n        await sendKeys({ press: 'Enter' });\n\n        expect(el.selected.length).to.equal(1);\n        expect(el.selected[0]).to.equal('Third');\n\n        await sendKeys({ press: 'Enter' });\n\n        el.dispatchEvent(homeEvent());\n        await sendKeys({ press: 'Enter' });\n\n        expect(el.selected.length).to.equal(1);\n        expect(el.selected[0]).to.equal('First');\n\n        el.dispatchEvent(arrowDownEvent());\n        await sendKeys({ press: 'Enter' });\n\n        expect(el.selected.length).to.equal(1);\n        expect(el.selected[0]).to.equal('Second');\n    };\n    it('accepts keybord input', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group label=\"Selects Single Group\" selects=\"single\">\n                <sp-action-button>First</sp-action-button>\n                <sp-action-button selected>Second</sp-action-button>\n                <sp-action-button class=\"third\">Third</sp-action-button>\n            </sp-action-group>\n        `);\n        await acceptKeyboardInput(el);\n    });\n    it('accepts keybord input with tooltip', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group label=\"Selects Single Group\" selects=\"single\">\n                <overlay-trigger>\n                    <sp-action-button slot=\"trigger\">First</sp-action-button>\n                    <sp-tooltip slot=\"hover-content\">\n                        Definitely the first one.\n                    </sp-tooltip>\n                </overlay-trigger>\n                <overlay-trigger>\n                    <sp-action-button slot=\"trigger\" selected>\n                        Second\n                    </sp-action-button>\n                    <sp-tooltip slot=\"hover-content\">\n                        Not the first, not the last.\n                    </sp-tooltip>\n                </overlay-trigger>\n                <overlay-trigger>\n                    <sp-action-button slot=\"trigger\" class=\"third\">\n                        Third\n                    </sp-action-button>\n                    <sp-tooltip slot=\"hover-content\">Select me.</sp-tooltip>\n                </overlay-trigger>\n            </sp-action-group>\n        `);\n        await acceptKeyboardInput(el);\n    });\n    it('accepts keybord input when [dir=\"ltr\"]', async () => {\n        const el = await fixture<ActionGroup>(html`\n            <sp-action-group\n                label=\"Selects Single Group\"\n                selects=\"single\"\n                dir=\"ltr\"\n            >\n                <sp-action-button>First</sp-action-button>\n                <sp-action-button disabled>Second</sp-action-button>\n                <sp-action-button class=\"third\">Third</sp-action-button>\n            </sp-action-group>\n        `);\n        const thirdElement = el.querySelector('.third') as ActionButton;\n\n        await elementUpdated(el);\n        expect(el.selected.length).to.equal(0);\n\n        thirdElement.focus();\n        thirdElement.click();\n\n        await elementUpdated(el);\n\n        expect(thirdElement.selected, 'third child selected').to.be.true;\n        expect(el.selected.length).to.equal(1);\n        expect(el.selected[0]).to.equal('Third');\n\n        el.dispatchEvent(arrowRightEvent());\n        await sendKeys({ press: 'Enter' });\n\n        await elementUpdated(el);\n\n        expect(el.selected.length).to.equal(1);\n        expect(el.selected[0]).to.equal('First');\n\n        el.dispatchEvent(arrowUpEvent());\n        await sendKeys({ press: 'Enter' });\n\n        expect(el.selected.length).to.equal(1);\n        expect(el.selected[0]).to.equal('Third');\n    });\n    it('processes `selects` correctly when mutations occur (because Overlays/Tooltips)', async () => {\n        const test = await fixture<SpectrumElement>(controlled());\n        const actionButtons = [\n            ...test.shadowRoot.querySelectorAll('sp-action-button'),\n        ] as ActionButton[];\n\n        expect(actionButtons[0].selected).to.be.true;\n        expect(actionButtons[1].selected).to.be.false;\n        expect(actionButtons[2].selected).to.be.false;\n\n        const changeSpy = spy();\n        test.addEventListener('change', () => changeSpy());\n        const rect = actionButtons[1].getBoundingClientRect();\n        sendMouse({\n            steps: [\n                {\n                    position: [\n                        rect.left + rect.width / 2,\n                        rect.top + rect.height / 2,\n                    ],\n                    type: 'click',\n                },\n            ],\n        });\n\n        await aTimeout(500);\n\n        expect(actionButtons[0].selected).to.be.false;\n        expect(actionButtons[1].selected).to.be.true;\n        expect(actionButtons[2].selected).to.be.false;\n    });\n});\n"],
  "mappings": "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",
  "names": ["_a", "_b"]
}
