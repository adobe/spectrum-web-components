{
  "version": 3,
  "sources": ["Avatar.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { ifDefined } from '@spectrum-web-components/base/src/directives.js';\nimport { LikeAnchor } from '@spectrum-web-components/shared/src/like-anchor.js';\nimport { Focusable } from '@spectrum-web-components/shared/src/focusable.js';\n\nimport avatarStyles from './avatar.css.js';\n\nexport type AvatarSize = 50 | 75 | 100 | 200 | 300 | 400 | 500 | 600 | 700;\nconst validSizes: AvatarSize[] = [50, 75, 100, 200, 300, 400, 500, 600, 700];\nconst defaultSize = validSizes[2];\n\n/**\n * @element sp-avatar\n */\nexport class Avatar extends LikeAnchor(Focusable) {\n    public static override get styles(): CSSResultArray {\n        return [avatarStyles];\n    }\n\n    @query('#link')\n    anchorElement!: HTMLAnchorElement;\n\n    public override get focusElement(): HTMLElement {\n        return this.anchorElement || this;\n    }\n\n    @property()\n    public src = '';\n\n    @property({ type: Number, reflect: true })\n    public get size(): AvatarSize {\n        return this._size;\n    }\n\n    public set size(value: AvatarSize) {\n        const size = value;\n        const validSize = (\n            validSizes.includes(size) ? size : defaultSize\n        ) as AvatarSize;\n        if (validSize) {\n            this.setAttribute('size', `${validSize}`);\n        }\n        if (this._size === validSize) {\n            return;\n        }\n        const oldSize = this._size;\n        this._size = validSize;\n        this.requestUpdate('size', oldSize);\n    }\n\n    private _size = defaultSize;\n\n    protected override render(): TemplateResult {\n        const avatar = html`\n            <img\n                class=\"image\"\n                alt=${ifDefined(this.label || undefined)}\n                src=${this.src}\n            />\n        `;\n        if (this.href) {\n            return this.renderAnchor({\n                id: 'link',\n                className: 'link',\n                anchorContent: avatar,\n            });\n        }\n        return avatar;\n    }\n\n    protected override firstUpdated(changes: PropertyValues): void {\n        super.firstUpdated(changes);\n        if (!this.hasAttribute('size')) {\n            this.setAttribute('size', `${this.size}`);\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;AAYA;AAAA,EAEI;AAAA,OAGG;AACP;AAAA,EACI;AAAA,EACA;AAAA,OACG;AACP,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;AAE1B,OAAO,kBAAkB;AAGzB,MAAM,aAA2B,CAAC,IAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;AAC3E,MAAM,cAAc,WAAW,CAAC;AAKzB,aAAM,eAAe,WAAW,SAAS,EAAE;AAAA,EAA3C;AAAA;AAaH,SAAO,MAAM;AAuBb,SAAQ,QAAQ;AAAA;AAAA,EAnChB,WAA2B,SAAyB;AAChD,WAAO,CAAC,YAAY;AAAA,EACxB;AAAA,EAKA,IAAoB,eAA4B;AAC5C,WAAO,KAAK,iBAAiB;AAAA,EACjC;AAAA,EAMA,IAAW,OAAmB;AAC1B,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAW,KAAK,OAAmB;AAC/B,UAAM,OAAO;AACb,UAAM,YACF,WAAW,SAAS,IAAI,IAAI,OAAO;AAEvC,QAAI,WAAW;AACX,WAAK,aAAa,QAAQ,GAAG,SAAS,EAAE;AAAA,IAC5C;AACA,QAAI,KAAK,UAAU,WAAW;AAC1B;AAAA,IACJ;AACA,UAAM,UAAU,KAAK;AACrB,SAAK,QAAQ;AACb,SAAK,cAAc,QAAQ,OAAO;AAAA,EACtC;AAAA,EAImB,SAAyB;AACxC,UAAM,SAAS;AAAA;AAAA;AAAA,sBAGD,UAAU,KAAK,SAAS,MAAS,CAAC;AAAA,sBAClC,KAAK,GAAG;AAAA;AAAA;AAGtB,QAAI,KAAK,MAAM;AACX,aAAO,KAAK,aAAa;AAAA,QACrB,IAAI;AAAA,QACJ,WAAW;AAAA,QACX,eAAe;AAAA,MACnB,CAAC;AAAA,IACL;AACA,WAAO;AAAA,EACX;AAAA,EAEmB,aAAa,SAA+B;AAC3D,UAAM,aAAa,OAAO;AAC1B,QAAI,CAAC,KAAK,aAAa,MAAM,GAAG;AAC5B,WAAK,aAAa,QAAQ,GAAG,KAAK,IAAI,EAAE;AAAA,IAC5C;AAAA,EACJ;AACJ;AAxDI;AAAA,EADC,MAAM,OAAO;AAAA,GALL,OAMT;AAOO;AAAA,EADN,SAAS;AAAA,GAZD,OAaF;AAGI;AAAA,EADV,SAAS,EAAE,MAAM,QAAQ,SAAS,KAAK,CAAC;AAAA,GAfhC,OAgBE;",
  "names": []
}
