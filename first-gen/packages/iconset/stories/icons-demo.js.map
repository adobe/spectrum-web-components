{
  "version": 3,
  "sources": ["icons-demo.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport { IconsetAddedDetail } from '@spectrum-web-components/iconset';\nimport {\n    css,\n    CSSResultGroup,\n    html,\n    PropertyValues,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    customElement,\n    property,\n    state,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { ifDefined } from '@spectrum-web-components/base/src/directives.js';\nimport { Search } from '@spectrum-web-components/search';\nimport '@spectrum-web-components/search/sp-search.js';\nimport '@spectrum-web-components/field-label/sp-field-label.js';\nimport bodyStyles from '@spectrum-web-components/styles/body.js';\nimport '@spectrum-web-components/icon/sp-icon.js';\nimport '@spectrum-web-components/help-text/sp-help-text.js';\n\nimport iconsList from './iconsList.json' assert { type: 'json' };\n\nimport {\n    SystemResolutionController,\n    systemResolverUpdatedSymbol,\n} from '@spectrum-web-components/reactive-controllers/src/SystemContextResolution.js';\n\n@customElement('delayed-ready')\nexport class DelayedReady extends SpectrumElement {\n    _delayedReady!: Promise<void>;\n    _resolveDelayedReady!: () => void;\n\n    protected override render(): TemplateResult {\n        return html`\n            <slot @slotchange=${this.handleSlotchange}></slot>\n        `;\n    }\n\n    protected override firstUpdated(): void {\n        this._delayedReady = new Promise(\n            (res) => (this._resolveDelayedReady = res)\n        );\n    }\n\n    protected override async getUpdateComplete(): Promise<boolean> {\n        const complete = (await super.getUpdateComplete()) as boolean;\n        await this._delayedReady;\n        return complete;\n    }\n\n    public handleSlotchange({\n        target,\n    }: Event & { target: HTMLSlotElement }): void {\n        if (target.assignedElements({ flatten: true }).length) {\n            requestAnimationFrame(() => {\n                this._resolveDelayedReady();\n            });\n        }\n    }\n}\n\n@customElement('icons-demo')\nexport class IconsDemo extends SpectrumElement {\n    @property()\n    public name = 'ui';\n\n    @property()\n    public package = '';\n\n    @property()\n    public size = 'm';\n\n    @property()\n    public search = '';\n\n    @property({ attribute: false })\n    public icons: {\n        name: string;\n        story(size: string): TemplateResult;\n        tag: string;\n    }[] = [];\n\n    private filteredIcons: {\n        name: string;\n        story(size: string): TemplateResult;\n        tag: string;\n    }[] = [];\n\n    private unsubscribeSystemContext: (() => void) | null = null;\n\n    @state()\n    public spectrumVersion = 1;\n\n    private iconset: string[] = [];\n    public constructor() {\n        super();\n        this.iconset = [];\n        this.handleIconSetAdded = this.handleIconSetAdded.bind(this);\n    }\n\n    public override async connectedCallback(): Promise<void> {\n        super.connectedCallback();\n        window.addEventListener('sp-iconset-added', this.handleIconSetAdded);\n    }\n    public override disconnectedCallback(): void {\n        window.removeEventListener('sp-iconset-added', this.handleIconSetAdded);\n        super.disconnectedCallback();\n        if (this.unsubscribeSystemContext) {\n            this.unsubscribeSystemContext();\n            this.unsubscribeSystemContext = null;\n        }\n    }\n\n    private filterIconsBySpectrumVersion(): void {\n        const iconVersion = this.spectrumVersion === 2 ? 's2' : 's1';\n        let filteredIcons = this.icons;\n        // Filter out icons that are not in the current version for workflow icons\n        if (this.name === 'workflow') {\n            filteredIcons = filteredIcons.filter((icon) => {\n                const iconName = icon.name.replace(/\\s/g, '').toLowerCase();\n                return iconsList[iconVersion].includes(iconName);\n            });\n        }\n\n        // Use a Set to remove duplicates that may get added because of the same icon name in both versions\n        const iconSet = new Set();\n        filteredIcons = filteredIcons.filter((icon) => {\n            if (iconSet.has(icon.name)) {\n                return false;\n            }\n            iconSet.add(icon.name);\n            return true;\n        });\n\n        this.filteredIcons = filteredIcons;\n    }\n\n    private systemResolver = new SystemResolutionController(this);\n\n    protected override update(changes: PropertyValues): void {\n        if (changes.has(systemResolverUpdatedSymbol)) {\n            this.spectrumVersion =\n                this.systemResolver.system === 'spectrum-two' ? 2 : 1;\n            this.filterIconsBySpectrumVersion();\n        }\n\n        if (changes.has('icons')) {\n            this.filterIconsBySpectrumVersion();\n        }\n\n        super.update(changes);\n    }\n\n    public handleIconSetAdded(event: CustomEvent<IconsetAddedDetail>): void {\n        const { iconset } = event.detail;\n        this.iconset = iconset.getIconList();\n        this.requestUpdate();\n    }\n    public static override get styles(): CSSResultGroup {\n        return [\n            ...bodyStyles,\n            css`\n                :host {\n                    display: grid;\n                    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n                    gap: 20px;\n                    align-items: flex-start;\n                }\n                .icon {\n                    display: flex;\n                    flex-direction: column;\n                    align-items: center;\n                    text-align: center;\n                    border-radius: var(\n                        --spectrum-alias-focus-ring-gap,\n                        var(--spectrum-spacing-50)\n                    );\n                }\n                :host([package]) .icon {\n                    cursor: pointer;\n                }\n                sp-icon {\n                    margin-bottom: 10px;\n                }\n                .search {\n                    grid-column-start: 1;\n                    grid-column-end: -1;\n                }\n                .icon[tabindex]:focus {\n                    outline: none;\n                }\n                .icon[tabindex]:focus-visible {\n                    outline: var(--spectrum-alias-focus-ring-size) solid\n                        var(--spectrum-alias-focus-ring-color);\n                    outline-offset: calc(\n                        var(\n                                --spectrum-alias-focus-ring-gap,\n                                var(--spectrum-spacing-50)\n                            ) * 2\n                    );\n                }\n            `,\n        ];\n    }\n    private handleKeydown(event: KeyboardEvent, tag: string): void {\n        const { code } = event;\n        if (code !== 'Enter' && code !== 'NumpadEnter' && code !== 'Space') {\n            return;\n        }\n        event.preventDefault();\n        this.shouldCopy(tag);\n    }\n\n    private shouldCopy(tag: string): void {\n        if (!this.package) return;\n        const conditionedTag = tag.slice(1, tag.length - 1);\n        const importURL = `import '@spectrum-web-components/${this.package}/icons/${conditionedTag}.js';`;\n        this.dispatchEvent(\n            new CustomEvent('copy-text', {\n                bubbles: true,\n                composed: true,\n                detail: {\n                    message: 'Import statement copied to clipboard!',\n                    text: importURL,\n                },\n            })\n        );\n    }\n    private updateSearch(event: Event & { target: Search }): void {\n        event.stopPropagation();\n        this.search = event.target.value;\n    }\n    private submit(event: Event & { target: Search }): void {\n        event.stopPropagation();\n        this.updateSearch(event);\n    }\n    private renderSearch(): TemplateResult {\n        const matchingIcons = this.search\n            ? this.filteredIcons.filter((icon) =>\n                  icon.name.toLowerCase().includes(this.search.toLowerCase())\n              )\n            : this.filteredIcons;\n\n        return html`\n            <div class=\"search\" part=\"search\">\n                <sp-field-label for=\"search\">Spectrum icons:</sp-field-label>\n                <sp-search\n                    id=\"search\"\n                    @keydown=${this.updateSearch}\n                    @input=${this.updateSearch}\n                    @submit=${this.submit}\n                    .value=${this.search}\n                    label=\"Search for icons\"\n                    autocomplete=\"off\"\n                >\n                    <sp-help-text slot=\"help-text\">\n                        Showing ${matchingIcons.length} of\n                        ${this.filteredIcons.length} available icons.\n                    </sp-help-text>\n                </sp-search>\n            </div>\n            ${matchingIcons.map((icon) => {\n                return html`\n                    <bdo\n                        class=\"icon\"\n                        part=\"icon\"\n                        dir=\"ltr\"\n                        class=\"icon\"\n                        @click=${() => this.shouldCopy(icon.tag)}\n                        @keydown=${(event: KeyboardEvent) =>\n                            this.handleKeydown(event, icon.tag)}\n                        tabindex=${ifDefined(this.package ? '0' : undefined)}\n                    >\n                        ${icon.story(this.size)} ${icon.tag}\n                    </bdo>\n                `;\n            })}\n        `;\n    }\n    protected override render(): TemplateResult {\n        return html`\n            ${this.filteredIcons.length\n                ? this.renderSearch()\n                : html`\n                      <slot></slot>\n                  `}\n            ${this.iconset.map(\n                (icon) => html`\n                    <bdo class=\"icon\" dir=\"ltr\">\n                        <sp-icon\n                            size=\"xl\"\n                            name=${`${this.name}:${icon}`}\n                        ></sp-icon>\n                        ${icon}\n                    </bdo>\n                `\n            )}\n        `;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
