{
  "version": 3,
  "sources": ["ButtonBase.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { LikeAnchor } from '@spectrum-web-components/shared/src/like-anchor.js';\nimport { Focusable } from '@spectrum-web-components/shared/src/focusable.js';\nimport { ObserveSlotText } from '@spectrum-web-components/shared/src/observe-slot-text.js';\nimport buttonStyles from './button-base.css.js';\n\n/**\n * @slot - text content to be displayed in the Button element\n * @slot icon - icon element(s) to display at the start of the button\n */\nexport class ButtonBase extends ObserveSlotText(LikeAnchor(Focusable), '', [\n    'sp-overlay,sp-tooltip',\n]) {\n    public static override get styles(): CSSResultArray {\n        return [buttonStyles];\n    }\n\n    // TODO we need to document this property for consumers,\n    // as it's not a 1:1 equivalent to active\n    @property({ type: Boolean, reflect: true })\n    public active = false;\n\n    /**\n     * The default behavior of the button.\n     * Possible values are: `button` (default), `submit`, and `reset`.\n     */\n    @property({ type: String })\n    public type: 'button' | 'submit' | 'reset' = 'button';\n\n    /**\n     * HTML anchor element that component clicks by proxy\n     */\n    @query('.anchor')\n    private anchorElement!: HTMLAnchorElement;\n\n    public override get focusElement(): HTMLElement {\n        return this;\n    }\n\n    protected get hasLabel(): boolean {\n        return this.slotHasContent;\n    }\n\n    protected get buttonContent(): TemplateResult[] {\n        const content = [\n            html`\n                <slot name=\"icon\" ?icon-only=${!this.hasLabel}></slot>\n            `,\n            html`\n                <span id=\"label\">\n                    <slot @slotchange=${this.manageTextObservedSlot}></slot>\n                </span>\n            `,\n        ];\n        return content;\n    }\n\n    constructor() {\n        super();\n        this.proxyFocus = this.proxyFocus.bind(this);\n\n        this.addEventListener('click', this.handleClickCapture, {\n            capture: true,\n        });\n    }\n\n    private handleClickCapture(event: Event): void | boolean {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            event.stopPropagation();\n            return false;\n        }\n\n        if (this.shouldProxyClick(event as MouseEvent)) {\n            return;\n        }\n    }\n\n    private proxyFocus(): void {\n        this.focus();\n    }\n\n    private shouldProxyClick(event?: MouseEvent): boolean {\n        let handled = false;\n\n        // Don't proxy clicks with modifier keys (Command/Meta, Ctrl, Shift, Alt)\n        if (\n            event &&\n            (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey)\n        ) {\n            return false;\n        }\n\n        if (this.anchorElement) {\n            // Click HTML anchor element by proxy, but only for non-modified clicks\n            this.anchorElement.click();\n            handled = true;\n            // if the button type is `submit` or `reset`\n        } else if (this.type !== 'button') {\n            // create an HTML Button Element by proxy, click it, and remove it\n            const proxy = document.createElement('button');\n            proxy.type = this.type;\n            this.insertAdjacentElement('afterend', proxy);\n            proxy.click();\n            proxy.remove();\n            handled = true;\n        }\n        return handled;\n    }\n\n    public override renderAnchor(): TemplateResult {\n        return html`\n            ${this.buttonContent}\n            ${super.renderAnchor({\n                id: 'button',\n                ariaHidden: true,\n                className: 'button anchor',\n                tabindex: -1,\n            })}\n        `;\n    }\n\n    protected renderButton(): TemplateResult {\n        return html`\n            ${this.buttonContent}\n        `;\n    }\n\n    protected override render(): TemplateResult {\n        return this.href && this.href.length > 0\n            ? this.renderAnchor()\n            : this.renderButton();\n    }\n\n    protected handleKeydown(event: KeyboardEvent): void {\n        const { code } = event;\n        switch (code) {\n            case 'Space':\n                event.preventDefault();\n                // allows button to activate when `Space` is pressed\n                if (typeof this.href === 'undefined') {\n                    this.addEventListener('keyup', this.handleKeyup);\n                    this.active = true;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    private handleKeypress(event: KeyboardEvent): void {\n        const { code } = event;\n        switch (code) {\n            case 'Enter':\n            case 'NumpadEnter':\n                // allows button or link to be activated with `Enter` and `NumpadEnter`\n                this.click();\n                break;\n            default:\n                break;\n        }\n    }\n\n    protected handleKeyup(event: KeyboardEvent): void {\n        const { code } = event;\n        switch (code) {\n            case 'Space':\n                this.removeEventListener('keyup', this.handleKeyup);\n                this.active = false;\n                this.click();\n                break;\n            default:\n                break;\n        }\n    }\n\n    private manageAnchor(): void {\n        // for a link\n        if (this.href && this.href.length > 0) {\n            // if the role is set to button\n            if (\n                !this.hasAttribute('role') ||\n                this.getAttribute('role') === 'button'\n            ) {\n                // change role to link\n                this.setAttribute('role', 'link');\n            }\n            // else for a button\n        } else {\n            // if the role is set to link\n            if (\n                !this.hasAttribute('role') ||\n                this.getAttribute('role') === 'link'\n            ) {\n                // change role to button\n                this.setAttribute('role', 'button');\n            }\n        }\n    }\n\n    protected override firstUpdated(changed: PropertyValues): void {\n        super.firstUpdated(changed);\n        if (!this.hasAttribute('tabindex')) {\n            this.setAttribute('tabindex', '0');\n        }\n        if (changed.has('label')) {\n            if (this.label) {\n                this.setAttribute('aria-label', this.label);\n            } else {\n                this.removeAttribute('aria-label');\n            }\n        }\n        this.manageAnchor();\n        this.addEventListener('keydown', this.handleKeydown);\n        this.addEventListener('keypress', this.handleKeypress);\n    }\n\n    protected override updated(changed: PropertyValues): void {\n        super.updated(changed);\n        if (changed.has('href')) {\n            this.manageAnchor();\n        }\n\n        if (this.anchorElement) {\n            // Ensure the anchor element is not focusable directly via tab\n            this.anchorElement.tabIndex = -1;\n\n            // Make sure it has proper ARIA attributes\n            if (!this.anchorElement.hasAttribute('aria-hidden')) {\n                this.anchorElement.setAttribute('aria-hidden', 'true');\n            }\n\n            // Set up focus delegation\n            this.anchorElement.addEventListener('focus', this.proxyFocus);\n        }\n    }\n    protected override update(changes: PropertyValues): void {\n        super.update(changes);\n        if (changes.has('label')) {\n            if (this.label) {\n                this.setAttribute('aria-label', this.label);\n            } else {\n                this.removeAttribute('aria-label');\n            }\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
