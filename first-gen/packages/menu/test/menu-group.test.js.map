{
  "version": 3,
  "sources": ["menu-group.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport '@spectrum-web-components/menu/sp-menu-group.js';\nimport '@spectrum-web-components/menu/sp-menu.js';\nimport '@spectrum-web-components/menu/sp-menu-item.js';\nimport '@spectrum-web-components/menu/sp-menu-divider.js';\nimport { Menu, MenuGroup, MenuItem } from '@spectrum-web-components/menu';\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    oneEvent,\n    waitUntil,\n} from '@open-wc/testing';\nimport { testForLitDevWarnings } from '../../../test/testing-helpers.js';\nimport { complexSlotted } from '../stories/menu-group.stories.js';\nimport { ComplexSlottedGroup, ComplexSlottedMenu } from '../stories/index.js';\nimport { sendKeys } from '@web/test-runner-commands';\nimport { sendMouse } from '../../../test/plugins/browser.js';\n\nconst managedItems = (menu: Menu | MenuGroup): MenuItem[] => {\n    return menu.childItems.filter(\n        (item: MenuItem) => item.menuData.selectionRoot === menu\n    );\n};\n\nconst focusableItems = (menu: Menu | MenuGroup): MenuItem[] => {\n    return menu.childItems.filter(\n        (item: MenuItem) => item.menuData.focusRoot === menu\n    );\n};\n\ndescribe('Menu group', () => {\n    testForLitDevWarnings(\n        async () =>\n            await fixture<Menu>(html`\n                <sp-menu selects=\"single\">\n                    <sp-menu-group selects=\"inherit\">\n                        <span slot=\"header\">Section Heading</span>\n                        <sp-menu-item>Action 1</sp-menu-item>\n                        <sp-menu-item>Action 2</sp-menu-item>\n                        <sp-menu-item>Action 3</sp-menu-item>\n                    </sp-menu-group>\n                    <sp-menu-divider></sp-menu-divider>\n                    <sp-menu-group selects=\"inherit\">\n                        <span slot=\"header\">Section Heading</span>\n                        <sp-menu-item>Save</sp-menu-item>\n                        <sp-menu-item disabled>Download</sp-menu-item>\n                    </sp-menu-group>\n                </sp-menu>\n            `)\n    );\n    it('renders', async () => {\n        const el = await fixture<Menu>(html`\n            <sp-menu selects=\"single\">\n                <sp-menu-group selects=\"inherit\">\n                    <span slot=\"header\">Section Heading</span>\n                    <sp-menu-item>Action 1</sp-menu-item>\n                    <sp-menu-item>Action 2</sp-menu-item>\n                    <sp-menu-item>Action 3</sp-menu-item>\n                </sp-menu-group>\n                <sp-menu-divider></sp-menu-divider>\n                <sp-menu-group selects=\"inherit\">\n                    <span slot=\"header\">Section Heading</span>\n                    <sp-menu-item>Save</sp-menu-item>\n                    <sp-menu-item disabled>Download</sp-menu-item>\n                </sp-menu-group>\n            </sp-menu>\n        `);\n\n        await waitUntil(\n            () => {\n                return managedItems(el).length === 5;\n            },\n            `expected menu group to manage 5 children, received ${managedItems(el).length} of ${el.childItems.length}`\n        );\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('manages [slot=\"header\"] content', async () => {\n        const el = await fixture<MenuGroup>(html`\n            <sp-menu-group></sp-menu-group>\n        `);\n        await elementUpdated(el);\n        const slot = el.shadowRoot.querySelector(\n            '[name=\"header\"'\n        ) as HTMLSlotElement;\n        const header = document.createElement('span');\n        header.textContent = 'Header';\n        header.slot = 'header';\n        expect(header.id).to.equal('');\n        let slotchanged = oneEvent(slot, 'slotchange');\n        el.append(header);\n        await slotchanged;\n        expect(header.id).to.equal(\n            (el as unknown as { headerId: string }).headerId\n        );\n\n        slotchanged = oneEvent(slot, 'slotchange');\n        header.remove();\n        await slotchanged;\n        expect(header.id).to.equal('');\n    });\n    it('handles selects for nested menu groups', async () => {\n        const el = await fixture<Menu>(html`\n            <sp-menu selects=\"single\">\n                <sp-menu-item selected>First</sp-menu-item>\n                <!-- 1 -->\n                <sp-menu-item>Second</sp-menu-item>\n                <!-- 1 -->\n                <sp-menu-group id=\"mg-multi\" selects=\"multiple\">\n                    <sp-menu-item selected>Multi1</sp-menu-item>\n                    <!-- 2 -->\n                    <sp-menu-item>Multi2</sp-menu-item>\n                    <!-- 2 -->\n                    <sp-menu-group id=\"mg-sub-inherit\" selects=\"inherit\">\n                        <sp-menu-item>SubInherit1</sp-menu-item>\n                        <!-- 2 -->\n                        <sp-menu-item>SubInherit2</sp-menu-item>\n                        <!-- 2 -->\n                    </sp-menu-group>\n                </sp-menu-group>\n                <sp-menu-group id=\"mg-single\" selects=\"single\">\n                    <sp-menu-item selected>Single1</sp-menu-item>\n                    <!-- 3 -->\n                    <sp-menu-item>Single2</sp-menu-item>\n                    <!-- 3 -->\n                </sp-menu-group>\n                <sp-menu-group id=\"mg-none\">\n                    <sp-menu-item>Inherit1</sp-menu-item>\n                    <!-- - -->\n                    <sp-menu-item>Inherit2</sp-menu-item>\n                    <!-- - -->\n                </sp-menu-group>\n                <sp-menu-group id=\"mg-inherit\" selects=\"inherit\">\n                    <sp-menu-item>Inherit1</sp-menu-item>\n                    <!-- 1 -->\n                    <sp-menu-item>Inherit2</sp-menu-item>\n                    <!-- 1 -->\n                </sp-menu-group>\n            </sp-menu>\n        `);\n\n        // 1 & 3 should be menuitemradio\n        // 2 shouwl menuitemcheckbox\n\n        await waitUntil(\n            () => managedItems(el).length === 4,\n            `expected outer menu to manage 4 items (2 are inherited), got ${\n                managedItems(el).length\n            }, with ${el.childItems.length} total`\n        );\n        await waitUntil(\n            () => el.selectedItems.length === 1,\n            'expected 1 selected item'\n        );\n        await elementUpdated(el);\n\n        const firstItem = el.querySelector(\n            'sp-menu-item:nth-of-type(1)'\n        ) as MenuItem;\n\n        const secondItem = el.querySelector(\n            'sp-menu-item:nth-of-type(2)'\n        ) as MenuItem;\n\n        const multiGroup = el.querySelector(\n            'sp-menu-group#mg-multi'\n        ) as MenuGroup;\n        const multiItem1 = multiGroup.querySelector(\n            'sp-menu-item:nth-of-type(1)'\n        ) as MenuItem;\n        const multiItem2 = multiGroup.querySelector(\n            'sp-menu-item:nth-of-type(2)'\n        ) as MenuItem;\n        await waitUntil(\n            () => managedItems(multiGroup).length === 4,\n            `selects=\"#mg-multi should manage 4 items (2 are inherited), received ${\n                managedItems(multiGroup).length\n            }`\n        );\n\n        const singleGroup = el.querySelector(\n            'sp-menu-group#mg-single'\n        ) as MenuGroup;\n\n        const singleItem1 = singleGroup.querySelector(\n            'sp-menu-item:nth-of-type(1)'\n        ) as MenuItem;\n        const singleItem2 = singleGroup.querySelector(\n            'sp-menu-item:nth-of-type(2)'\n        ) as MenuItem;\n        await waitUntil(\n            () => managedItems(singleGroup).length === 2,\n            'selects=\"#mg-none should manage 4 items (2 are inherited)'\n        );\n\n        const noneGroup = el.querySelector(\n            'sp-menu-group#mg-none'\n        ) as MenuGroup;\n        const noneItem1 = noneGroup.querySelector(\n            'sp-menu-item:nth-of-type(1)'\n        ) as MenuItem;\n        const noneItem2 = noneGroup.querySelector(\n            'sp-menu-item:nth-of-type(2)'\n        ) as MenuItem;\n        await waitUntil(\n            () => managedItems(noneGroup).length === 2,\n            `selects=\"#mg-none\" should manage 2 items, received ${\n                managedItems(noneGroup).length\n            }`\n        );\n\n        const inheritGroup = el.querySelector(\n            'sp-menu-group#mg-inherit'\n        ) as MenuGroup;\n        const inheritItem1 = inheritGroup.querySelector(\n            'sp-menu-item:nth-of-type(1)'\n        ) as MenuItem;\n        const inheritItem2 = inheritGroup.querySelector(\n            'sp-menu-item:nth-of-type(2)'\n        ) as MenuItem;\n\n        expect(firstItem.getAttribute('role')).to.equal('menuitemradio');\n        expect(secondItem.getAttribute('role')).to.equal('menuitemradio');\n        expect(multiItem1.getAttribute('role')).to.equal('menuitemcheckbox');\n        expect(multiItem2.getAttribute('role')).to.equal('menuitemcheckbox');\n        expect(singleItem1.getAttribute('role')).to.equal('menuitemradio');\n        expect(singleItem2.getAttribute('role')).to.equal('menuitemradio');\n        expect(noneItem1.getAttribute('role')).to.equal('menuitem');\n        expect(noneItem2.getAttribute('role')).to.equal('menuitem');\n        expect(inheritItem1.getAttribute('role')).to.equal('menuitemradio');\n        expect(inheritItem2.getAttribute('role')).to.equal('menuitemradio');\n\n        await elementUpdated(firstItem);\n        expect(singleItem1.selected).to.be.true;\n        expect(firstItem.selected).to.be.true;\n        expect(secondItem.selected, 'second item not selected').to.be.false;\n        expect(el.value).to.equal('First');\n        expect(el.selectedItems.length).to.equal(1);\n\n        expect(firstItem.getAttribute('aria-checked')).to.equal('true');\n        expect(secondItem.getAttribute('aria-checked')).to.equal('false');\n        let change = oneEvent(el, 'change');\n        secondItem.click();\n        await change;\n        await elementUpdated(el);\n        await elementUpdated(firstItem);\n        await elementUpdated(secondItem);\n        expect(firstItem.selected, 'first item not selected').to.be.false;\n        expect(secondItem.selected).to.be.true;\n        expect(firstItem.getAttribute('aria-checked')).to.equal('false');\n        expect(secondItem.getAttribute('aria-checked')).to.equal('true');\n        expect(el.value).to.equal('Second');\n        expect(el.selectedItems.length).to.equal(1);\n        change = oneEvent(el, 'change');\n        inheritItem1.click();\n        await change;\n        await elementUpdated(el);\n        await elementUpdated(inheritItem1);\n        await elementUpdated(secondItem);\n        expect(secondItem.selected, 'second item not selected again').to.be\n            .false;\n        expect(inheritItem1.selected).to.be.true;\n        expect(secondItem.getAttribute('aria-checked')).to.equal('false');\n        expect(inheritItem1.getAttribute('aria-checked')).to.equal('true');\n        expect(el.value).to.equal('Inherit1');\n        expect(el.selectedItems.length).to.equal(1);\n        change = oneEvent(el, 'change');\n        noneItem2.click();\n        await change;\n        await elementUpdated(el);\n        await elementUpdated(noneGroup);\n        await elementUpdated(noneItem2);\n        expect(inheritItem1.selected).to.be.true;\n        expect(noneItem2.selected, 'none item not selected').to.be.false;\n        expect(el.value).to.equal('Inherit1');\n        expect(el.selectedItems.length).to.equal(1);\n        change = oneEvent(el, 'change');\n        singleItem2.click();\n        await change;\n        await elementUpdated(singleGroup);\n        await elementUpdated(singleItem1);\n        await elementUpdated(singleItem2);\n        expect(singleItem2.selected).to.be.true;\n        expect(singleItem1.selected, 'first item not selected').to.be.false;\n        expect(inheritItem1.selected).to.be.true;\n        expect(singleItem1.getAttribute('aria-checked')).to.equal('false');\n        expect(singleItem2.getAttribute('aria-checked')).to.equal('true');\n        expect(el.value).to.equal('Inherit1');\n        expect(el.selectedItems.length).to.equal(1);\n        //expect(singleGroup.value).to.equal('Inherit1')\n        expect(singleGroup.selectedItems.length).to.equal(1);\n        change = oneEvent(el, 'change');\n        multiItem2.click();\n        await change;\n        await elementUpdated(el);\n        await elementUpdated(multiItem2);\n        expect(multiItem1.selected).to.be.true;\n        expect(multiItem2.selected).to.be.true;\n        expect(inheritItem1.selected).to.be.true;\n        expect(multiItem1.getAttribute('aria-checked')).to.equal('true');\n        expect(multiItem2.getAttribute('aria-checked')).to.equal('true');\n        //expect(multiGroup.value).to.equal('Inherit1')\n        expect(multiGroup.selectedItems.length).to.equal(2);\n    });\n\n    it('handles changing managed items for selects changes', async () => {\n        const el = await fixture<Menu>(html`\n            <sp-menu selects=\"multiple\" value-separator=\"--\">\n                <sp-menu-item selected>First</sp-menu-item>\n                <sp-menu-item>Second</sp-menu-item>\n                <sp-menu-group id=\"mg-inherit\" selects=\"inherit\">\n                    <sp-menu-item>Inherit1</sp-menu-item>\n                    <sp-menu-item>Inherit2</sp-menu-item>\n                    <sp-menu-group id=\"mg-sub-inherit\" selects=\"inherit\">\n                        <sp-menu-item>SubInherit1</sp-menu-item>\n                        <sp-menu-item selected>SubInherit2</sp-menu-item>\n                    </sp-menu-group>\n                </sp-menu-group>\n            </sp-menu>\n        `);\n\n        await waitUntil(\n            () => managedItems(el).length == 6,\n            `expected outer menu to manage 6 items, manages ${\n                managedItems(el).length\n            }`\n        );\n        await waitUntil(\n            () => el.selectedItems.length == 2,\n            'expected 2 selected item'\n        );\n        await elementUpdated(el);\n\n        const inheritGroup = el.querySelector(\n            'sp-menu-group#mg-inherit'\n        ) as MenuGroup;\n        const inheritItem1 = inheritGroup.querySelector(\n            'sp-menu-item:nth-of-type(1)'\n        ) as MenuItem;\n        const inheritItem2 = inheritGroup.querySelector(\n            'sp-menu-item:nth-of-type(2)'\n        ) as MenuItem;\n\n        const subInheritGroup = el.querySelector(\n            'sp-menu-group#mg-sub-inherit'\n        ) as MenuGroup;\n        const subInheritItem1 = subInheritGroup.querySelector(\n            'sp-menu-item:nth-of-type(1)'\n        ) as MenuItem;\n        const subInheritItem2 = subInheritGroup.querySelector(\n            'sp-menu-item:nth-of-type(2)'\n        ) as MenuItem;\n\n        expect(inheritItem1.getAttribute('role')).to.equal('menuitemcheckbox');\n        expect(inheritItem2.getAttribute('role')).to.equal('menuitemcheckbox');\n        expect(subInheritItem1.getAttribute('role')).to.equal(\n            'menuitemcheckbox'\n        );\n        expect(subInheritItem2.getAttribute('role')).to.equal(\n            'menuitemcheckbox'\n        );\n        expect(el.value).to.equal('First--SubInherit2');\n        expect(el.selectedItems.length).to.equal(2);\n        inheritGroup.setAttribute('selects', 'single');\n\n        await elementUpdated(inheritGroup);\n        await elementUpdated(el);\n\n        await waitUntil(\n            () => {\n                return managedItems(inheritGroup).length === 4;\n            },\n            `expected new single sub-group to manage 4 items, received ${managedItems(inheritGroup).length} because \"selects === ${inheritGroup.selects}`\n        );\n\n        await waitUntil(\n            () => managedItems(el).length === 2,\n            `expected outer menu to manage 2 items with none inherited, received ${\n                managedItems(el).length\n            }`\n        );\n        expect(inheritGroup.value).to.equal('SubInherit2');\n        expect(inheritGroup.selectedItems.length).to.equal(1);\n        expect(el.value).to.equal('First');\n        expect(inheritItem1.getAttribute('role')).to.equal('menuitemradio');\n        expect(inheritItem2.getAttribute('role')).to.equal('menuitemradio');\n        expect(subInheritItem1.getAttribute('role')).to.equal('menuitemradio');\n        expect(subInheritItem2.getAttribute('role')).to.equal('menuitemradio');\n    });\n    it('manages complex slotted menu items', async function () {\n        const el = await fixture<ComplexSlottedMenu>(complexSlotted());\n\n        await waitUntil(\n            () => focusableItems(el.menu).length == 12,\n            `expected outer menu to manage 12 items, ${\n                el.menu.localName\n            } manages ${focusableItems(el.menu).length}`\n        );\n\n        const menu = el.menu;\n        const items: Record<string, MenuItem> = {};\n        items.i2 = el.querySelector('#i-2') as MenuItem;\n        items.i8 = el.querySelector('#i-8') as MenuItem;\n        items.i9 = el.querySelector('#i-9') as MenuItem;\n        items.i3 = el.renderRoot.querySelector('#i-3') as MenuItem;\n        items.i5 = el.renderRoot.querySelector('#i-5') as MenuItem;\n        items.i6 = el.renderRoot.querySelector('#i-6') as MenuItem;\n        items.i7 = el.renderRoot.querySelector('#i-7') as MenuItem;\n        const group = el.renderRoot.querySelector(\n            '#complex-slotted-group'\n        ) as ComplexSlottedGroup;\n        items.i1 = group?.renderRoot.querySelector('#i-1') as MenuItem;\n        items.i4 = group?.renderRoot.querySelector('#i-4') as MenuItem;\n        items.i10 = group?.renderRoot.querySelector('#i-10') as MenuItem;\n        items.i11 = group?.renderRoot.querySelector('#i-11') as MenuItem;\n        items.i12 = group?.renderRoot.querySelector('#i-12') as MenuItem;\n\n        const rect = items.i9.getBoundingClientRect();\n        await sendMouse({\n            steps: [\n                {\n                    position: [\n                        rect.left + rect.width / 2,\n                        rect.top + rect.height / 2,\n                    ],\n                    type: 'click',\n                },\n            ],\n        });\n        await elementUpdated(items.i9);\n\n        await sendKeys({\n            press: 'ArrowDown',\n        });\n        await sendKeys({\n            press: 'ArrowUp',\n        });\n        await elementUpdated(items.i9);\n        expect(items.i9.focused).to.be.true;\n        await sendKeys({\n            press: 'ArrowDown',\n        });\n        let i = 9;\n        const count = Object.keys(items).length + 1;\n        while (!items.i9.focused) {\n            i = Math.max(1, (i + 1 + count) % count);\n            await elementUpdated(menu);\n            await elementUpdated(items[`i${i}`]);\n            expect(items[`i${i}`].focused, `i${i} should be focused`).to.be\n                .true;\n            await sendKeys({\n                press: 'ArrowDown',\n            });\n            await elementUpdated(menu);\n            await elementUpdated(items[`i${i}`]);\n        }\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
