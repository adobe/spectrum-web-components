{
  "version": 3,
  "sources": ["DialogBase.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    html,\n    nothing,\n    PropertyValues,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\n\nimport '@spectrum-web-components/underlay/sp-underlay.js';\nimport '@spectrum-web-components/button/sp-button.js';\n\n// Leveraged in build systems that use aliasing to prevent multiple registrations: https://github.com/adobe/spectrum-web-components/pull/3225\nimport '@spectrum-web-components/dialog/sp-dialog.js';\nimport modalWrapperStyles from '@spectrum-web-components/modal/src/modal-wrapper.css.js';\nimport modalStyles from '@spectrum-web-components/modal/src/modal.css.js';\nimport { Dialog } from './Dialog.js';\nimport { FocusVisiblePolyfillMixin } from '@spectrum-web-components/shared';\nimport { firstFocusableIn } from '@spectrum-web-components/shared/src/first-focusable-in.js';\n\n/**\n * @element sp-dialog-base\n *\n * @slot - A Dialog element to display.\n * @fires close - Announces that the dialog has been closed.\n */\nexport class DialogBase extends FocusVisiblePolyfillMixin(SpectrumElement) {\n    public static override get styles(): CSSResultArray {\n        return [modalWrapperStyles, modalStyles];\n    }\n\n    @property({ type: Boolean, reflect: true })\n    public dismissable = false;\n\n    @property({ type: Boolean, reflect: true })\n    public open = false;\n\n    @property({ type: String, reflect: true })\n    public mode?: 'fullscreen' | 'fullscreenTakeover';\n\n    /**\n     * When set to true, fills screens smaller than 350px high and 400px wide with the full dialog.\n     */\n    @property({ type: Boolean })\n    public responsive = false;\n\n    private transitionPromise = Promise.resolve();\n\n    private resolveTransitionPromise = (): void => {\n        return;\n    };\n\n    @property({ type: Boolean })\n    public underlay = false;\n\n    protected get dialog(): Dialog {\n        const dialog = (\n            this.shadowRoot.querySelector('slot') as HTMLSlotElement\n        ).assignedElements()[0] as Dialog;\n        if (window.__swc.DEBUG) {\n            if (!dialog) {\n                window.__swc.warn(\n                    this,\n                    `<${this.localName}> expects to be provided dialog content via its default slot.`,\n                    'https://opensource.adobe.com/spectrum-web-components/components/dialog-base/#dialog'\n                );\n            }\n        }\n        return dialog || this;\n    }\n\n    public override async focus(): Promise<void> {\n        if (this.shadowRoot) {\n            const firstFocusable = firstFocusableIn(this.dialog);\n            if (firstFocusable) {\n                if ((firstFocusable as SpectrumElement).updateComplete) {\n                    await firstFocusable.updateComplete;\n                }\n                firstFocusable.focus();\n            } else {\n                this.dialog.focus();\n            }\n            /* c8 ignore next 3 */\n        } else {\n            super.focus();\n        }\n    }\n\n    private animating = false;\n\n    public overlayWillCloseCallback(): boolean {\n        if (!this.open) return this.animating;\n        this.close();\n        return true;\n    }\n\n    private dismiss(): void {\n        if (!this.dismissable) {\n            return;\n        }\n        this.close();\n    }\n\n    protected handleClose(event: Event): void {\n        event.stopPropagation();\n        this.close();\n    }\n\n    public close(): void {\n        this.open = false;\n    }\n\n    private dispatchClosed(): void {\n        this.dispatchEvent(\n            new Event('close', {\n                bubbles: true,\n            })\n        );\n    }\n\n    private handleTransitionEvent(event: TransitionEvent): void {\n        this.dispatchEvent(\n            new TransitionEvent(event.type, {\n                bubbles: true,\n                composed: true,\n                propertyName: event.propertyName,\n            })\n        );\n    }\n\n    protected handleUnderlayTransitionend(event: TransitionEvent): void {\n        if (!this.open && event.propertyName === 'visibility') {\n            this.resolveTransitionPromise();\n        }\n        this.handleTransitionEvent(event);\n    }\n\n    protected handleModalTransitionend(event: TransitionEvent): void {\n        if (this.open || !this.underlay) {\n            this.resolveTransitionPromise();\n        }\n        this.handleTransitionEvent(event);\n    }\n\n    private get hasTransitionDuration(): boolean {\n        const modal = this.shadowRoot.querySelector('.modal') as HTMLElement;\n\n        const modalTransitionDurations =\n            window.getComputedStyle(modal).transitionDuration;\n        for (const duration of modalTransitionDurations.split(','))\n            if (parseFloat(duration) > 0) return true;\n\n        const underlay = this.shadowRoot.querySelector(\n            'sp-underlay'\n        ) as HTMLElement;\n\n        if (underlay) {\n            const underlayTransitionDurations =\n                window.getComputedStyle(underlay).transitionDuration;\n            for (const duration of underlayTransitionDurations.split(','))\n                if (parseFloat(duration) > 0) return true;\n        }\n\n        return false;\n    }\n\n    protected override update(changes: PropertyValues<this>): void {\n        if (changes.has('open') && changes.get('open') !== undefined) {\n            const hasTransitionDuration = this.hasTransitionDuration;\n            this.animating = true;\n            this.transitionPromise = new Promise((res) => {\n                this.resolveTransitionPromise = () => {\n                    this.animating = false;\n                    if (!this.open && hasTransitionDuration)\n                        this.dispatchClosed();\n                    res();\n                };\n            });\n            if (!this.open && !hasTransitionDuration) this.dispatchClosed();\n        }\n        super.update(changes);\n    }\n\n    protected renderDialog(): TemplateResult {\n        return html`\n            <slot></slot>\n        `;\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            ${this.underlay\n                ? html`\n                      <sp-underlay\n                          ?open=${this.open}\n                          @close=${this.dismiss}\n                          @transitionrun=${this.handleTransitionEvent}\n                          @transitionend=${this.handleUnderlayTransitionend}\n                          @transitioncancel=${this.handleTransitionEvent}\n                      ></sp-underlay>\n                  `\n                : nothing}\n            <div\n                class=\"modal ${this.mode}\"\n                @transitionrun=${this.handleTransitionEvent}\n                @transitionend=${this.handleModalTransitionend}\n                @transitioncancel=${this.handleTransitionEvent}\n                @close=${this.handleClose}\n            >\n                ${this.renderDialog()}\n            </div>\n        `;\n    }\n\n    protected override updated(changes: PropertyValues<this>): void {\n        if (changes.has('open')) {\n            if (this.open) {\n                if (\n                    'updateComplete' in this.dialog &&\n                    'shouldManageTabOrderForScrolling' in this.dialog\n                ) {\n                    this.dialog.updateComplete.then(() => {\n                        this.dialog.shouldManageTabOrderForScrolling();\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Bind the open/close transition into the update complete lifecycle so\n     * that the overlay system can wait for it to be \"visibly ready\" before\n     * attempting to throw focus into the content contained herein. Not\n     * waiting for this can cause small amounts of page scroll to happen\n     * while opening the Tray when focusable content is included: e.g. Menu\n     * elements whose selected Menu Item is not the first Menu Item.\n     */\n    protected override async getUpdateComplete(): Promise<boolean> {\n        const complete = (await super.getUpdateComplete()) as boolean;\n        await this.transitionPromise;\n        return complete;\n    }\n}\n"],
  "mappings": "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",
  "names": ["html", "nothing", "SpectrumElement", "property", "modalWrapperStyles", "modalStyles", "FocusVisiblePolyfillMixin", "firstFocusableIn", "firstFocusable", "event", "modal", "modalTransitionDurations", "duration", "underlay", "underlayTransitionDurations", "changes", "hasTransitionDuration", "res", "complete", "__decorateClass"]
}
