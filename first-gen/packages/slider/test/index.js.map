{
  "version": 3,
  "sources": ["index.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { Slider } from '@spectrum-web-components/slider';\nimport {\n    editable,\n    hideStepper,\n    Indeterminate,\n    StoryArgs,\n} from '../stories/slider.stories.js';\nimport { elementUpdated, expect, nextFrame } from '@open-wc/testing';\nimport { html, TemplateResult } from '@spectrum-web-components/base';\nimport { sendKeys } from '@web/test-runner-commands';\nimport { spy } from 'sinon';\nimport {\n    fixture,\n    testForLitDevWarnings,\n} from '../../../test/testing-helpers.js';\nimport { sendMouse } from '../../../test/plugins/browser.js';\n\nasync function sliderFromFixture(\n    sliderFixture: (args: StoryArgs) => TemplateResult\n): Promise<Slider> {\n    const el = await fixture<Slider>(sliderFixture({}));\n    const slider = el.querySelector('sp-slider') as Slider;\n    return slider;\n}\n\nexport const testEditableSlider = (type: string): void => {\n    describe(`Slider - editable, ${type}`, () => {\n        testForLitDevWarnings(async () => await sliderFromFixture(editable));\n        it('loads', async () => {\n            const el = await sliderFromFixture(editable);\n\n            await elementUpdated(el);\n\n            await expect(el).to.be.accessible();\n        });\n\n        it('loads - [hide-stepper]', async () => {\n            const el = await sliderFromFixture(hideStepper);\n\n            await elementUpdated(el);\n\n            await expect(el).to.be.accessible();\n        });\n\n        it('loads - [disabled]', async () => {\n            const el = document.createElement('sp-slider');\n            el.editable = true;\n            el.disabled = true;\n            el.label = 'Disabled, editable, slider';\n\n            try {\n                document.body.append(el);\n            } catch (error) {\n                expect(true).to.be.false;\n            }\n\n            await elementUpdated(el);\n\n            await expect(el).to.be.accessible();\n            el.remove();\n        });\n\n        it('toggles indeterminate when edited via the `<sp-number-field>`', async () => {\n            const el = await sliderFromFixture(Indeterminate);\n\n            await elementUpdated(el);\n\n            expect(el.value).to.equal(5);\n            expect(el.indeterminate).to.be.true;\n\n            el.focus();\n\n            await elementUpdated(el);\n\n            await sendKeys({ press: 'Backspace' });\n            await sendKeys({ press: 'Backspace' });\n            await sendKeys({ type: '15' });\n            await sendKeys({ press: 'Enter' });\n\n            await elementUpdated(el);\n\n            expect(el.value).to.equal(15);\n            expect(el.indeterminate).to.be.false;\n        });\n\n        it('focuses `<sp-number-field>` directly', async () => {\n            const el = await sliderFromFixture(editable);\n\n            await elementUpdated(el);\n\n            el.focus();\n\n            await elementUpdated(el);\n\n            expect(el.shadowRoot.activeElement).to.equal(el.numberField);\n        });\n\n        it('dispatches `input` of the animation frame', async () => {\n            const inputSpy = spy();\n            const changeSpy = spy();\n            const el = await fixture<Slider>(html`\n                <sp-slider\n                    editable\n                    hide-stepper\n                    min=\"1\"\n                    max=\"100\"\n                    step=\"1\"\n                    label=\"Slider label\"\n                    @input=${(event: Event & { target: Slider }) => {\n                        inputSpy(event.target.value);\n                    }}\n                    @change=${(event: Event & { target: Slider }) => {\n                        changeSpy(event.target.value);\n                    }}\n                ></sp-slider>\n            `);\n            await elementUpdated(el);\n            expect(el.value).to.equal(50.5);\n\n            expect(inputSpy.callCount, 'start clean').to.equal(0);\n            expect(changeSpy.callCount, 'start clean').to.equal(0);\n\n            const handle = el.shadowRoot.querySelector(\n                '.handle'\n            ) as HTMLDivElement;\n            const rect = handle.getBoundingClientRect();\n            let frames = 0;\n            let shouldCountFrames = true;\n            const countFrames = (): void => {\n                if (!shouldCountFrames) return;\n                frames += 1;\n                requestAnimationFrame(countFrames);\n            };\n            countFrames();\n            type Steps = {\n                type: 'move';\n                position: [number, number];\n            }[];\n            const toRight: Steps = [...Array(51).keys()].map((i) => ({\n                type: 'move',\n                position: [\n                    rect.left + rect.width / 2 + i,\n                    rect.top + rect.height / 2,\n                ],\n            }));\n            const toLeft: Steps = toRight.slice(0, -1).reverse();\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: [\n                            rect.left + rect.width / 2,\n                            rect.top + rect.height / 2,\n                        ],\n                    },\n                    {\n                        type: 'down',\n                    },\n                    ...toRight,\n                    ...toLeft,\n                    {\n                        type: 'up',\n                    },\n                ],\n            });\n            shouldCountFrames = false;\n            await elementUpdated(el);\n            await nextFrame();\n            await nextFrame();\n\n            expect(el.value).to.gt(50.5);\n            expect(\n                inputSpy.callCount,\n                'should not have more \"input\"s than frames'\n            ).to.lte(frames);\n            expect(changeSpy.callCount, 'only one change').to.equal(1);\n        });\n\n        it('edits via the `<sp-number-field>`', async () => {\n            const inputSpy = spy();\n            const changeSpy = spy();\n            const el = await sliderFromFixture(editable);\n            el.addEventListener('input', () => inputSpy());\n            el.addEventListener('change', () => changeSpy());\n\n            await elementUpdated(el);\n\n            el.focus();\n\n            await elementUpdated(el);\n\n            expect(el.shadowRoot.activeElement).to.equal(el.numberField);\n            expect(el.value).to.equal(90);\n\n            await sendKeys({ press: 'Backspace' });\n            await sendKeys({ press: 'Backspace' });\n            await sendKeys({ press: 'Backspace' });\n            await sendKeys({ type: '45' });\n            await sendKeys({ press: 'Enter' });\n\n            await elementUpdated(el);\n\n            expect(el.shadowRoot.activeElement).to.equal(el.numberField);\n            expect(el.value).to.equal(45);\n            expect(inputSpy.callCount, 'one input').to.equal(1);\n            expect(changeSpy.callCount, 'one change').to.equal(1);\n\n            await sendKeys({ press: 'Backspace' });\n            await sendKeys({ press: 'Backspace' });\n            await sendKeys({ press: 'Backspace' });\n            await sendKeys({ press: 'Enter' });\n\n            expect(el.shadowRoot.activeElement).to.equal(el.numberField);\n            expect(el.value).to.equal(45);\n            expect(inputSpy.callCount, 'still one input').to.equal(1);\n            expect(changeSpy.callCount, 'still one change').to.equal(1);\n\n            el.shadowRoot.activeElement?.dispatchEvent(\n                new WheelEvent('wheel', { deltaY: 1 })\n            );\n\n            await elementUpdated(el);\n\n            expect(el.shadowRoot.activeElement).to.equal(el.numberField);\n            expect(el.value).to.equal(46);\n            expect(inputSpy.callCount, 'still one input').to.equal(2);\n\n            el.shadowRoot.activeElement?.dispatchEvent(\n                new WheelEvent('wheel', { deltaY: -1 })\n            );\n\n            await elementUpdated(el);\n\n            expect(el.shadowRoot.activeElement).to.equal(el.numberField);\n            expect(el.value).to.equal(45);\n            expect(inputSpy.callCount, 'still one input').to.equal(3);\n\n            el.shadowRoot.activeElement?.dispatchEvent(\n                new WheelEvent('wheel', { deltaX: 1, shiftKey: true })\n            );\n\n            await elementUpdated(el);\n\n            expect(el.shadowRoot.activeElement).to.equal(el.numberField);\n            expect(el.value).to.equal(55);\n            expect(inputSpy.callCount, 'still one input').to.equal(4);\n\n            el.shadowRoot.activeElement?.dispatchEvent(\n                new WheelEvent('wheel', { deltaX: -1, shiftKey: true })\n            );\n\n            await elementUpdated(el);\n\n            expect(el.shadowRoot.activeElement).to.equal(el.numberField);\n            expect(el.value).to.equal(45);\n            expect(inputSpy.callCount, 'still one input').to.equal(5);\n        });\n\n        it('focuses `<input>` after pointer interactions', async () => {\n            let pointerId = -1;\n            const el = await sliderFromFixture(editable);\n\n            await elementUpdated(el);\n\n            expect(el.dragging).to.be.false;\n            expect(el.highlight).to.be.false;\n            expect(pointerId).to.equal(-1);\n\n            const handle = el.shadowRoot.querySelector(\n                '.handle'\n            ) as HTMLDivElement;\n            el.track.setPointerCapture = (id: number) => (pointerId = id);\n            el.track.releasePointerCapture = (id: number) => (pointerId = id);\n            handle.dispatchEvent(\n                new PointerEvent('pointerdown', {\n                    button: 1,\n                    pointerId: 1,\n                    cancelable: true,\n                    bubbles: true,\n                    composed: true,\n                    pointerType: 'mouse',\n                })\n            );\n            await elementUpdated(el);\n\n            expect(el.dragging).to.be.false;\n            expect(pointerId, '1').to.equal(-1);\n\n            handle.dispatchEvent(\n                new PointerEvent('pointerdown', {\n                    button: 0,\n                    pointerId: 1,\n                    cancelable: true,\n                    bubbles: true,\n                    composed: true,\n                    pointerType: 'mouse',\n                })\n            );\n\n            await elementUpdated(el);\n\n            expect(el.dragging, 'it is dragging 1').to.be.true;\n            expect(pointerId, '2').to.equal(1);\n\n            handle.dispatchEvent(\n                new PointerEvent('pointerup', {\n                    pointerId: 2,\n                    cancelable: true,\n                    bubbles: true,\n                    composed: true,\n                    pointerType: 'mouse',\n                })\n            );\n            await elementUpdated(el);\n\n            expect(el.dragging).to.be.false;\n            expect(el.highlight).to.be.false;\n            expect(pointerId, '3').to.equal(2);\n\n            handle.dispatchEvent(\n                new PointerEvent('pointerdown', {\n                    button: 0,\n                    pointerId: 1,\n                    cancelable: true,\n                    bubbles: true,\n                    composed: true,\n                    pointerType: 'mouse',\n                })\n            );\n\n            await elementUpdated(el);\n\n            expect(el.dragging, 'it is dragging 2').to.be.true;\n            expect(pointerId, '4').to.equal(1);\n\n            handle.dispatchEvent(\n                new PointerEvent('pointercancel', {\n                    pointerId: 3,\n                    cancelable: true,\n                    bubbles: true,\n                    composed: true,\n                    pointerType: 'mouse',\n                })\n            );\n            await elementUpdated(el);\n\n            expect(el.dragging).to.be.false;\n            expect(pointerId, '5').to.equal(3);\n            expect(el.shadowRoot.activeElement).to.equal(\n                el.handleController.inputForHandle(el)\n            );\n        });\n\n        // regression test for https://github.com/adobe/spectrum-web-components/issues/5522\n        it('dispatches `input` on track interaction after handle interaction', async () => {\n            const inputSpy = spy();\n            const changeSpy = spy();\n\n            const el = await fixture<Slider>(html`\n                <sp-slider\n                    editable\n                    hide-stepper\n                    min=\"1\"\n                    max=\"100\"\n                    step=\"1\"\n                    label=\"Slider label\"\n                    @input=${(event: Event & { target: Slider }) => {\n                        inputSpy(event.target.value);\n                    }}\n                    @change=${(event: Event & { target: Slider }) => {\n                        changeSpy(event.target.value);\n                    }}\n                ></sp-slider>\n            `);\n            await elementUpdated(el);\n            expect(el.value).to.equal(50.5);\n\n            expect(inputSpy.callCount, 'start clean').to.equal(0);\n            expect(changeSpy.callCount, 'start clean').to.equal(0);\n\n            const handle = el.shadowRoot.querySelector(\n                '.handle'\n            ) as HTMLDivElement;\n\n            const rect = handle.getBoundingClientRect();\n\n            // click handle once\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: [\n                            rect.left + rect.width / 2,\n                            rect.top + rect.height / 2,\n                        ],\n                    },\n                    {\n                        type: 'down',\n                    },\n                    { type: 'up' },\n                ],\n            });\n\n            await elementUpdated(el);\n\n            expect(changeSpy.callCount, 'one change').to.equal(1);\n            expect(inputSpy.callCount, 'no input').to.equal(0);\n\n            // move to and click track once\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: [\n                            rect.left - rect.width,\n                            rect.top + rect.height / 2,\n                        ],\n                    },\n                    {\n                        type: 'down',\n                    },\n                    { type: 'up' },\n                ],\n            });\n\n            await elementUpdated(el);\n\n            expect(changeSpy.callCount, 'one additional change').to.equal(2);\n            expect(inputSpy.callCount, 'one input').to.equal(1);\n        });\n    });\n};\n"],
  "mappings": "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",
  "names": []
}
