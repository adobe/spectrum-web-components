{
  "version": 3,
  "sources": ["SliderHandle.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { PropertyValues } from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\nimport { Focusable } from '@spectrum-web-components/shared/src/focusable.js';\nimport {\n    LanguageResolutionController,\n    languageResolverUpdatedSymbol,\n} from '@spectrum-web-components/reactive-controllers/src/LanguageResolution.js';\nimport {\n    NumberFormatOptions,\n    NumberFormatter,\n} from '@internationalized/number';\nimport { HandleController } from './HandleController.dev.js'\n\nexport type HandleMin = number | 'previous';\nexport type HandleMax = number | 'next';\n\nexport type HandleValues = {\n    name: string;\n    value: number;\n}[];\n\nexport type SliderNormalization = {\n    toNormalized: (value: number, min: number, max: number) => number;\n    fromNormalized: (value: number, min: number, max: number) => number;\n};\n\nexport const defaultNormalization: SliderNormalization = {\n    toNormalized(value: number, min: number, max: number) {\n        return (value - min) / (max - min);\n    },\n    fromNormalized(value: number, min: number, max: number) {\n        return value * (max - min) + min;\n    },\n};\n\nconst MinConverter = {\n    fromAttribute: (value: string): number | 'previous' => {\n        if (value === 'previous') return value;\n        return parseFloat(value);\n    },\n    toAttribute: (value: 'previous' | number): string => {\n        return value.toString();\n    },\n};\n\nconst MaxConverter = {\n    fromAttribute: (value: string): number | 'next' => {\n        if (value === 'next') return value;\n        return parseFloat(value);\n    },\n    toAttribute: (value: 'next' | number): string => {\n        return value.toString();\n    },\n};\n\n/**\n * @element sp-slider-handle\n *\n * @fires input - The value of the element has changed.\n * @fires change - An alteration to the value of the element has been committed by the user.\n */\nexport class SliderHandle extends Focusable {\n    public handleController?: HandleController;\n\n    public get handleName(): string {\n        return this.name;\n    }\n\n    public override get focusElement(): HTMLElement {\n        /* c8 ignore next */\n        return this.handleController?.inputForHandle(this) ?? this;\n    }\n\n    _forcedUnit = '';\n\n    /**\n     * By default, the value of a Slider Handle will be halfway between its\n     * `min` and `max` values, or the `min` value when `max` is less than `min`.\n     */\n    @property({ type: Number })\n    public value!: number;\n\n    /**\n     * Set the default value of the handle. Setting this property will cause the\n     * handle to reset to the default value on double click or pressing the `escape` key.\n     */\n    @property({ type: Number, attribute: 'default-value' })\n    public defaultValue!: number;\n\n    @property({ type: Boolean, reflect: true })\n    public dragging = false;\n\n    @property({ type: Boolean })\n    public highlight = false;\n\n    @property({ type: String })\n    public name = '';\n\n    @property({ reflect: true, converter: MinConverter })\n    public min?: number | 'previous';\n\n    @property({ reflect: true, converter: MaxConverter })\n    public max?: number | 'next';\n\n    @property({ type: Number, reflect: true })\n    public step?: number;\n\n    @property({ type: Object, attribute: 'format-options' })\n    public formatOptions?: NumberFormatOptions;\n\n    @property({ type: String })\n    public label = '';\n\n    @property({ attribute: false })\n    public getAriaHandleText: (\n        value: number,\n        numberFormat: NumberFormatter\n    ) => string = (value, numberFormat) => {\n        return numberFormat.format(value);\n    };\n\n    private languageResolver = new LanguageResolutionController(this);\n\n    protected override update(changes: PropertyValues): void {\n        if (!this.hasUpdated) {\n            const { max, min } = this as { max: number; min: number };\n            if (this.value == null) {\n                if (!isNaN(max) && !isNaN(min)) {\n                    this.value = max < min ? min : min + (max - min) / 2;\n                    this.handleController?.hostUpdate();\n                }\n            }\n        }\n\n        if (\n            changes.has('formatOptions') ||\n            changes.has(languageResolverUpdatedSymbol)\n        ) {\n            delete this._numberFormatCache;\n        }\n        if (changes.has('value')) {\n            const oldValue = changes.get('value');\n            if (oldValue != null) {\n                this.updateComplete.then(() => {\n                    this.handleController?.setValueFromHandle(this);\n                });\n            }\n        }\n        this.handleController?.handleHasChanged(this);\n        super.update(changes);\n    }\n\n    protected override firstUpdated(\n        changedProperties: PropertyValues<this>\n    ): void {\n        super.firstUpdated(changedProperties);\n        this.dispatchEvent(new CustomEvent('sp-slider-handle-ready'));\n    }\n\n    @property({ attribute: false })\n    public normalization: SliderNormalization = defaultNormalization;\n\n    public dispatchInputEvent(): void {\n        const inputEvent = new Event('input', {\n            bubbles: true,\n            composed: true,\n        });\n\n        this.dispatchEvent(inputEvent);\n    }\n\n    protected _numberFormatCache:\n        | { numberFormat: NumberFormatter; language: string }\n        | undefined;\n    protected getNumberFormat(): NumberFormatter {\n        /* c8 ignore next */\n        if (\n            !this._numberFormatCache ||\n            this.languageResolver.language !== this._numberFormatCache.language\n        ) {\n            let numberFormatter: NumberFormatter;\n            try {\n                numberFormatter = new NumberFormatter(\n                    this.languageResolver.language,\n                    this.formatOptions\n                );\n                this._forcedUnit = '';\n                // numberFormatter.format(1);\n            } catch (error) {\n                const {\n                    style,\n                    unit,\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    unitDisplay,\n                    ...formatOptionsNoUnit\n                } = this.formatOptions || {};\n                if (style === 'unit') {\n                    this._forcedUnit = unit as string;\n                }\n                numberFormatter = new NumberFormatter(\n                    this.languageResolver.language,\n                    formatOptionsNoUnit\n                );\n            }\n            this._numberFormatCache = {\n                language: this.languageResolver.language,\n                numberFormat: numberFormatter,\n            };\n        }\n        /* c8 ignore next */\n        return this._numberFormatCache?.numberFormat;\n    }\n\n    public get numberFormat(): NumberFormatter | undefined {\n        if (!this.formatOptions) return;\n        return this.getNumberFormat();\n    }\n}\n"],
  "mappings": "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",
  "names": ["_a"]
}
