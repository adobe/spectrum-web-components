{
  "version": 3,
  "sources": ["alert-banner.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport { elementUpdated, expect, fixture, html } from '@open-wc/testing';\nimport { sendKeys } from '@web/test-runner-commands';\nimport { SinonStub, spy, stub } from 'sinon';\n\nimport '@spectrum-web-components/alert-banner/sp-alert-banner.js';\nimport '@spectrum-web-components/button/sp-button.js';\nimport { AlertBanner } from '@spectrum-web-components/alert-banner';\nimport {\n    escapeEvent,\n    testForLitDevWarnings,\n} from '../../../test/testing-helpers.js';\n\ndescribe('AlertBanner', () => {\n    testForLitDevWarnings(\n        async () =>\n            await fixture<AlertBanner>(html`\n                <sp-alert-banner>Your trial will expire soon</sp-alert-banner>\n            `)\n    );\n    it('loads default alert-banner accessibly', async () => {\n        const el = await fixture<AlertBanner>(html`\n            <sp-alert-banner open>Your trial will expire soon</sp-alert-banner>\n        `);\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('accepts variants', async () => {\n        const el = await fixture<AlertBanner>(html`\n            <sp-alert-banner open variant=\"info\">\n                Your trial will expire soon\n            </sp-alert-banner>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.getAttribute('variant')).to.equal('info');\n        expect(el.shadowRoot.querySelector('sp-icon-info')).to.exist;\n\n        el.variant = 'negative';\n        await elementUpdated(el);\n\n        expect(el.getAttribute('variant')).to.equal('negative');\n        expect(el.shadowRoot.querySelector('sp-icon-alert')).to.exist;\n    });\n    it('removes variant attribute when given invalid variant', async () => {\n        const el = await fixture<AlertBanner>(html`\n            <sp-alert-banner open variant=\"inexistent\">\n                Your trial will expire soon\n            </sp-alert-banner>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.getAttribute('variant')).to.be.null;\n    });\n    it('calls corresponding handler using Space or Enter key for actionable alerts', async () => {\n        const actionSpy = spy();\n        const el = await fixture<AlertBanner>(html`\n            <sp-alert-banner open>\n                Your trial will expire soon\n                <sp-button slot=\"action\" @click=${() => actionSpy()}>\n                    Buy now\n                </sp-button>\n            </sp-alert-banner>\n        `);\n        await elementUpdated(el);\n\n        const buttonEl = el.querySelector('sp-button');\n        expect(buttonEl).to.exist;\n\n        buttonEl?.focus();\n        await sendKeys({ press: 'Enter' });\n        await elementUpdated(el);\n\n        expect(actionSpy).to.be.calledOnce;\n\n        buttonEl?.focus();\n        await sendKeys({ press: 'Space' });\n        await elementUpdated(el);\n\n        expect(actionSpy).to.be.calledTwice;\n    });\n\n    describe('dismiss behavior', () => {\n        it('can be dismissed by clicking the close button', async () => {\n            const el = await fixture<AlertBanner>(html`\n                <sp-alert-banner open dismissible>\n                    Your trial will expire soon\n                </sp-alert-banner>\n            `);\n\n            await elementUpdated(el);\n\n            const closeButton = el.shadowRoot.querySelector('sp-close-button');\n\n            expect(closeButton).to.exist;\n            expect(el.open).to.be.true;\n\n            closeButton?.click();\n            await elementUpdated(el);\n\n            expect(el.open).to.be.false;\n        });\n        it('can be dismissed using close button', async () => {\n            const el = await fixture<AlertBanner>(html`\n                <sp-alert-banner open>\n                    Your trial will expire soon\n                </sp-alert-banner>\n            `);\n\n            await elementUpdated(el);\n\n            const closeButton = el.shadowRoot.querySelector('sp-close-button');\n\n            expect(closeButton).to.not.exist;\n            expect(el.open).to.be.true;\n\n            el.close();\n            await elementUpdated(el);\n\n            expect(el.open).to.be.false;\n        });\n        it('prevent close', async () => {\n            const closeSpy = spy();\n            const el = await fixture<AlertBanner>(html`\n                <sp-alert-banner\n                    open\n                    dismissible\n                    @close=${(event: CustomEvent) => {\n                        event.preventDefault();\n                        closeSpy();\n                    }}\n                >\n                    Your trial will expire soon\n                </sp-alert-banner>\n            `);\n\n            await elementUpdated(el);\n\n            const closeButton = el.shadowRoot.querySelector('sp-close-button');\n            expect(el.open).to.be.true;\n\n            closeButton?.click();\n            await elementUpdated(el);\n\n            expect(el.open).to.be.true;\n            expect(closeSpy).to.be.calledOnce;\n        });\n        it('can be closed using Escape key', async () => {\n            const closeSpy = spy();\n            const el = await fixture<AlertBanner>(html`\n                <sp-alert-banner open dismissible @close=${() => closeSpy()}>\n                    Your trial will expire soon\n                </sp-alert-banner>\n            `);\n\n            await elementUpdated(el);\n            expect(el.open).to.be.true;\n\n            el.dispatchEvent(escapeEvent());\n            await elementUpdated(el);\n\n            expect(el.open).to.be.false;\n            expect(closeSpy).to.be.calledOnce;\n        });\n    });\n\n    describe('dev mode', () => {\n        let consoleStub: SinonStub;\n        before(() => {\n            window.__swc.verbose = true;\n            consoleStub = stub(console, 'warn');\n        });\n\n        after(() => {\n            window.__swc.verbose = false;\n            consoleStub.restore();\n        });\n\n        it('should log dev warning when given invalid variant', async () => {\n            const el = await fixture<AlertBanner>(html`\n                <sp-alert-banner open variant=\"inexistent\">\n                    Your trial will expire soon\n                </sp-alert-banner>\n            `);\n\n            await elementUpdated(el);\n\n            const warning = consoleStub.getCall(0).args.at(0);\n            const expectedContent = `<sp-alert-banner> element expects the \"variant\" attribute to be one of the following`;\n\n            expect(consoleStub).to.be.calledOnce;\n            expect(warning.includes(expectedContent)).to.be.true;\n            expect(warning.includes('neutral')).to.be.true;\n            expect(warning.includes('info')).to.be.true;\n            expect(warning.includes('negative')).to.be.true;\n        });\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
