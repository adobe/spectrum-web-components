{
  "version": 3,
  "sources": ["AlertBanner.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\nimport '@spectrum-web-components/button/sp-close-button.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-info.js';\nimport styles from './alert-banner.css.js';\n\nconst VALID_VARIANTS = ['neutral', 'info', 'negative'];\nexport type AlertBannerVariants = (typeof VALID_VARIANTS)[number];\n\n/**\n * @element sp-alert-banner\n *\n * @slot - The alert banner text context\n * @slot action - Slot for the button element that surfaces the contextual action a user can take\n *\n * @fires close - Announces the alert banner has been closed\n */\nexport class AlertBanner extends SpectrumElement {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    /**\n     * Controls the display of the alert banner\n     *\n     * @param {Boolean} open\n     */\n    @property({ type: Boolean, reflect: true })\n    public open = false;\n\n    /**\n     * Whether to include an icon-only close button to dismiss the alert banner\n     *\n     * @param {Boolean} dismissible\n     */\n    @property({ type: Boolean, reflect: true })\n    public dismissible = false;\n\n    /**\n     * The variant applies specific styling when set to `negative` or `info`;\n     * `variant` attribute is removed when it's passed an invalid variant.\n     *\n     * @param {String} variant\n     */\n    @property({ type: String })\n    public set variant(variant: AlertBannerVariants) {\n        if (variant === this.variant) {\n            return;\n        }\n        const oldValue = this.variant;\n\n        if (this.isValidVariant(variant)) {\n            this.setAttribute('variant', variant);\n            this._variant = variant;\n        } else {\n            this.removeAttribute('variant');\n            this._variant = '';\n\n            if (window.__swc.DEBUG) {\n                window.__swc.warn(\n                    this,\n                    `<${this.localName}> element expects the \"variant\" attribute to be one of the following:`,\n                    'https://opensource.adobe.com/spectrum-web-components/components/alert-banner/#variants',\n                    {\n                        issues: [...VALID_VARIANTS],\n                    }\n                );\n            }\n        }\n        this.requestUpdate('variant', oldValue);\n    }\n\n    public get variant(): AlertBannerVariants {\n        return this._variant;\n    }\n\n    private _variant: AlertBannerVariants = '';\n\n    protected isValidVariant(variant: string): boolean {\n        return VALID_VARIANTS.includes(variant);\n    }\n\n    protected renderIcon(variant: string): TemplateResult {\n        switch (variant) {\n            case 'info':\n                return html`\n                    <sp-icon-info\n                        label=\"Information\"\n                        class=\"type\"\n                    ></sp-icon-info>\n                `;\n            case 'negative':\n                return html`\n                    <sp-icon-alert label=\"Error\" class=\"type\"></sp-icon-alert>\n                `;\n            default:\n                return html``;\n        }\n    }\n\n    private shouldClose(): void {\n        const applyDefault = this.dispatchEvent(\n            new CustomEvent('close', {\n                composed: true,\n                bubbles: true,\n                cancelable: true,\n            })\n        );\n        if (applyDefault) {\n            this.close();\n        }\n    }\n\n    public close(): void {\n        this.open = false;\n    }\n\n    private handleKeydown(event: KeyboardEvent): void {\n        if (event.code === 'Escape' && this.dismissible) {\n            this.shouldClose();\n        }\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <div class=\"body\" role=\"alert\">\n                <div class=\"content\">\n                    ${this.renderIcon(this.variant)}\n                    <div class=\"text\"><slot></slot></div>\n                </div>\n                <slot name=\"action\"></slot>\n            </div>\n            <div class=\"end\">\n                ${this.dismissible\n                    ? html`\n                          <sp-close-button\n                              @click=${this.shouldClose}\n                              label=\"Close\"\n                              static-color=\"white\"\n                          ></sp-close-button>\n                      `\n                    : html``}\n            </div>\n        `;\n    }\n\n    protected override updated(changes: PropertyValues): void {\n        super.updated(changes);\n\n        if (changes.has('open')) {\n            if (this.open) {\n                this.addEventListener('keydown', this.handleKeydown);\n            } else {\n                this.removeEventListener('keydown', this.handleKeydown);\n            }\n        }\n    }\n}\n"],
  "mappings": "qNAWA,OAEI,QAAAA,EAEA,mBAAAC,MAEG,gCACP,OAAS,YAAAC,MAAgB,kDACzB,MAAO,qDACP,MAAO,iEACP,MAAO,gEACP,OAAOC,MAAY,wBAEnB,MAAMC,EAAiB,CAAC,UAAW,OAAQ,UAAU,EAW9C,aAAM,oBAAoBH,CAAgB,CAA1C,kCAWH,KAAO,KAAO,GAQd,KAAO,YAAc,GAwCrB,KAAQ,SAAgC,GA1DxC,WAA2B,QAAyB,CAChD,MAAO,CAACE,CAAM,CAClB,CAyBA,IAAW,QAAQE,EAA8B,CAC7C,GAAIA,IAAY,KAAK,QACjB,OAEJ,MAAMC,EAAW,KAAK,QAElB,KAAK,eAAeD,CAAO,GAC3B,KAAK,aAAa,UAAWA,CAAO,EACpC,KAAK,SAAWA,IAEhB,KAAK,gBAAgB,SAAS,EAC9B,KAAK,SAAW,IAapB,KAAK,cAAc,UAAWC,CAAQ,CAC1C,CAEA,IAAW,SAA+B,CACtC,OAAO,KAAK,QAChB,CAIU,eAAeD,EAA0B,CAC/C,OAAOD,EAAe,SAASC,CAAO,CAC1C,CAEU,WAAWA,EAAiC,CAClD,OAAQA,EAAS,CACb,IAAK,OACD,OAAOL;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMX,IAAK,WACD,OAAOA;AAAA;AAAA,kBAGX,QACI,OAAOA,GACf,CACJ,CAEQ,aAAoB,CACH,KAAK,cACtB,IAAI,YAAY,QAAS,CACrB,SAAU,GACV,QAAS,GACT,WAAY,EAChB,CAAC,CACL,GAEI,KAAK,MAAM,CAEnB,CAEO,OAAc,CACjB,KAAK,KAAO,EAChB,CAEQ,cAAcO,EAA4B,CAC1CA,EAAM,OAAS,UAAY,KAAK,aAChC,KAAK,YAAY,CAEzB,CAEmB,QAAyB,CACxC,OAAOP;AAAA;AAAA;AAAA,sBAGO,KAAK,WAAW,KAAK,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMjC,KAAK,YACDA;AAAA;AAAA,uCAEiB,KAAK,WAAW;AAAA;AAAA;AAAA;AAAA,wBAKjCA,GAAM;AAAA;AAAA,SAGxB,CAEmB,QAAQQ,EAA+B,CACtD,MAAM,QAAQA,CAAO,EAEjBA,EAAQ,IAAI,MAAM,IACd,KAAK,KACL,KAAK,iBAAiB,UAAW,KAAK,aAAa,EAEnD,KAAK,oBAAoB,UAAW,KAAK,aAAa,EAGlE,CACJ,CAjIWC,EAAA,CADNP,EAAS,CAAE,KAAM,QAAS,QAAS,EAAK,CAAC,GAVjC,YAWF,oBAQAO,EAAA,CADNP,EAAS,CAAE,KAAM,QAAS,QAAS,EAAK,CAAC,GAlBjC,YAmBF,2BASIO,EAAA,CADVP,EAAS,CAAE,KAAM,MAAO,CAAC,GA3BjB,YA4BE",
  "names": ["html", "SpectrumElement", "property", "styles", "VALID_VARIANTS", "variant", "oldValue", "event", "changes", "__decorateClass"]
}
