{
  "version": 3,
  "sources": ["AlertBanner.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\nimport '@spectrum-web-components/button/sp-close-button.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-info.js';\nimport styles from './alert-banner.css.js';\n\nconst VALID_VARIANTS = ['neutral', 'info', 'negative'];\nexport type AlertBannerVariants = (typeof VALID_VARIANTS)[number];\n\n/**\n * @element sp-alert-banner\n *\n * @slot - The alert banner text context\n * @slot action - Slot for the button element that surfaces the contextual action a user can take\n *\n * @fires close - Announces the alert banner has been closed\n */\nexport class AlertBanner extends SpectrumElement {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    /**\n     * Controls the display of the alert banner\n     *\n     * @param {Boolean} open\n     */\n    @property({ type: Boolean, reflect: true })\n    public open = false;\n\n    /**\n     * Whether to include an icon-only close button to dismiss the alert banner\n     *\n     * @param {Boolean} dismissible\n     */\n    @property({ type: Boolean, reflect: true })\n    public dismissible = false;\n\n    /**\n     * The variant applies specific styling when set to `negative` or `info`;\n     * `variant` attribute is removed when it's passed an invalid variant.\n     *\n     * @param {String} variant\n     */\n    @property({ type: String })\n    public set variant(variant: AlertBannerVariants) {\n        if (variant === this.variant) {\n            return;\n        }\n        const oldValue = this.variant;\n\n        if (this.isValidVariant(variant)) {\n            this.setAttribute('variant', variant);\n            this._variant = variant;\n        } else {\n            this.removeAttribute('variant');\n            this._variant = '';\n\n            if (window.__swc.DEBUG) {\n                window.__swc.warn(\n                    this,\n                    `<${this.localName}> element expects the \"variant\" attribute to be one of the following:`,\n                    'https://opensource.adobe.com/spectrum-web-components/components/alert-banner/#variants',\n                    {\n                        issues: [...VALID_VARIANTS],\n                    }\n                );\n            }\n        }\n        this.requestUpdate('variant', oldValue);\n    }\n\n    public get variant(): AlertBannerVariants {\n        return this._variant;\n    }\n\n    private _variant: AlertBannerVariants = '';\n\n    protected isValidVariant(variant: string): boolean {\n        return VALID_VARIANTS.includes(variant);\n    }\n\n    protected renderIcon(variant: string): TemplateResult {\n        switch (variant) {\n            case 'info':\n                return html`\n                    <sp-icon-info\n                        label=\"Information\"\n                        class=\"type\"\n                    ></sp-icon-info>\n                `;\n            case 'negative':\n                return html`\n                    <sp-icon-alert label=\"Error\" class=\"type\"></sp-icon-alert>\n                `;\n            default:\n                return html``;\n        }\n    }\n\n    private shouldClose(): void {\n        const applyDefault = this.dispatchEvent(\n            new CustomEvent('close', {\n                composed: true,\n                bubbles: true,\n                cancelable: true,\n            })\n        );\n        if (applyDefault) {\n            this.close();\n        }\n    }\n\n    public close(): void {\n        this.open = false;\n    }\n\n    private handleKeydown(event: KeyboardEvent): void {\n        if (event.code === 'Escape' && this.dismissible) {\n            this.shouldClose();\n        }\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <div class=\"body\" role=\"alert\">\n                <div class=\"content\">\n                    ${this.renderIcon(this.variant)}\n                    <div class=\"text\"><slot></slot></div>\n                </div>\n                <slot name=\"action\"></slot>\n            </div>\n            <div class=\"end\">\n                ${this.dismissible\n                    ? html`\n                          <sp-close-button\n                              @click=${this.shouldClose}\n                              label=\"Close\"\n                              static-color=\"white\"\n                          ></sp-close-button>\n                      `\n                    : html``}\n            </div>\n        `;\n    }\n\n    protected override updated(changes: PropertyValues): void {\n        super.updated(changes);\n\n        if (changes.has('open')) {\n            if (this.open) {\n                this.addEventListener('keydown', this.handleKeydown);\n            } else {\n                this.removeEventListener('keydown', this.handleKeydown);\n            }\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;AAWA;AAAA,EAEI;AAAA,EAEA;AAAA,OAEG;AACP,SAAS,gBAAgB;AACzB,OAAO;AACP,OAAO;AACP,OAAO;AACP,OAAO,YAAY;AAEnB,MAAM,iBAAiB,CAAC,WAAW,QAAQ,UAAU;AAW9C,aAAM,oBAAoB,gBAAgB;AAAA,EAA1C;AAAA;AAWH,SAAO,OAAO;AAQd,SAAO,cAAc;AAwCrB,SAAQ,WAAgC;AAAA;AAAA,EA1DxC,WAA2B,SAAyB;AAChD,WAAO,CAAC,MAAM;AAAA,EAClB;AAAA,EAyBA,IAAW,QAAQ,SAA8B;AAC7C,QAAI,YAAY,KAAK,SAAS;AAC1B;AAAA,IACJ;AACA,UAAM,WAAW,KAAK;AAEtB,QAAI,KAAK,eAAe,OAAO,GAAG;AAC9B,WAAK,aAAa,WAAW,OAAO;AACpC,WAAK,WAAW;AAAA,IACpB,OAAO;AACH,WAAK,gBAAgB,SAAS;AAC9B,WAAK,WAAW;AAEhB,UAAI,MAAoB;AACpB,eAAO,MAAM;AAAA,UACT;AAAA,UACA,IAAI,KAAK,SAAS;AAAA,UAClB;AAAA,UACA;AAAA,YACI,QAAQ,CAAC,GAAG,cAAc;AAAA,UAC9B;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,cAAc,WAAW,QAAQ;AAAA,EAC1C;AAAA,EAEA,IAAW,UAA+B;AACtC,WAAO,KAAK;AAAA,EAChB;AAAA,EAIU,eAAe,SAA0B;AAC/C,WAAO,eAAe,SAAS,OAAO;AAAA,EAC1C;AAAA,EAEU,WAAW,SAAiC;AAClD,YAAQ,SAAS;AAAA,MACb,KAAK;AACD,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMX,KAAK;AACD,eAAO;AAAA;AAAA;AAAA,MAGX;AACI,eAAO;AAAA,IACf;AAAA,EACJ;AAAA,EAEQ,cAAoB;AACxB,UAAM,eAAe,KAAK;AAAA,MACtB,IAAI,YAAY,SAAS;AAAA,QACrB,UAAU;AAAA,QACV,SAAS;AAAA,QACT,YAAY;AAAA,MAChB,CAAC;AAAA,IACL;AACA,QAAI,cAAc;AACd,WAAK,MAAM;AAAA,IACf;AAAA,EACJ;AAAA,EAEO,QAAc;AACjB,SAAK,OAAO;AAAA,EAChB;AAAA,EAEQ,cAAc,OAA4B;AAC9C,QAAI,MAAM,SAAS,YAAY,KAAK,aAAa;AAC7C,WAAK,YAAY;AAAA,IACrB;AAAA,EACJ;AAAA,EAEmB,SAAyB;AACxC,WAAO;AAAA;AAAA;AAAA,sBAGO,KAAK,WAAW,KAAK,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMjC,KAAK,cACD;AAAA;AAAA,uCAEiB,KAAK,WAAW;AAAA;AAAA;AAAA;AAAA,0BAKjC,MAAM;AAAA;AAAA;AAAA,EAGxB;AAAA,EAEmB,QAAQ,SAA+B;AACtD,UAAM,QAAQ,OAAO;AAErB,QAAI,QAAQ,IAAI,MAAM,GAAG;AACrB,UAAI,KAAK,MAAM;AACX,aAAK,iBAAiB,WAAW,KAAK,aAAa;AAAA,MACvD,OAAO;AACH,aAAK,oBAAoB,WAAW,KAAK,aAAa;AAAA,MAC1D;AAAA,IACJ;AAAA,EACJ;AACJ;AAjIW;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GAVjC,YAWF;AAQA;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GAlBjC,YAmBF;AASI;AAAA,EADV,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GA3BjB,YA4BE;",
  "names": []
}
