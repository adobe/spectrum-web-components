{
  "version": 3,
  "sources": ["Card.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    html,\n    nothing,\n    PropertyValues,\n    SizedMixin,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { ifDefined } from '@spectrum-web-components/base/src/directives.js';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { FocusVisiblePolyfillMixin } from '@spectrum-web-components/shared/src/focus-visible.js';\nimport { ObserveSlotPresence } from '@spectrum-web-components/shared/src/observe-slot-presence.js';\nimport { LikeAnchor } from '@spectrum-web-components/shared/src/like-anchor.js';\nimport '@spectrum-web-components/asset/sp-asset.js';\n\nimport { Checkbox } from '@spectrum-web-components/checkbox/src/Checkbox';\nimport '@spectrum-web-components/checkbox/sp-checkbox.js';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport '@spectrum-web-components/divider/sp-divider.js';\nimport cardStyles from './card.css.js';\n\n/**\n * @element sp-card\n *\n * @fires change - Announces a change in the `selected` property of a card\n * @slot preview - This is the preview image for Gallery Cards\n * @slot cover-photo - This is the cover photo for Default and Quiet Cards\n * @slot heading - HTML content to be listed as the heading\n * @slot subheading - HTML content to be listed as the subheading\n * @slot description - A description of the card\n * @slot actions - an `sp-action-menu` element outlining actions to take on the represened object\n * @slot footer - Footer text\n */\nexport class Card extends LikeAnchor(\n    SizedMixin(\n        ObserveSlotPresence(FocusVisiblePolyfillMixin(SpectrumElement), [\n            '[slot=\"cover-photo\"]',\n            '[slot=\"preview\"]',\n        ]),\n        {\n            validSizes: ['s', 'm'],\n            noDefaultSize: true,\n        }\n    )\n) {\n    public static override get styles(): CSSResultArray {\n        return [cardStyles];\n    }\n\n    @property()\n    public asset?: 'file' | 'folder';\n\n    @property({ reflect: true })\n    public variant: 'standard' | 'gallery' | 'quiet' = 'standard';\n\n    @property({ type: Boolean, reflect: true })\n    get selected(): boolean {\n        return this._selected;\n    }\n    set selected(selected: boolean) {\n        if (selected === this.selected) return;\n        this._selected = selected;\n        if (this.role === 'row' && this.toggles) {\n            this.setAttribute('aria-selected', String(this.selected));\n        }\n        this.requestUpdate('selected', !this._selected);\n    }\n\n    private _selected = false;\n\n    @property()\n    public heading = '';\n\n    @property({ type: Boolean, reflect: true })\n    public horizontal = false;\n\n    @query('#like-anchor')\n    private likeAnchor?: HTMLAnchorElement;\n\n    @property({ type: Boolean, reflect: true })\n    public focused = false;\n\n    /**\n     * Indicates whether the card can be toggled between selected and unselected states.\n     */\n    @property({ type: Boolean, reflect: true })\n    public toggles = false;\n\n    @property()\n    public value = '';\n\n    @property()\n    public subheading = '';\n\n    protected get hasCoverPhoto(): boolean {\n        return this.getSlotContentPresence('[slot=\"cover-photo\"]');\n    }\n\n    protected get hasPreview(): boolean {\n        return this.getSlotContentPresence('[slot=\"preview\"]');\n    }\n\n    public override click(): void {\n        this.likeAnchor?.click();\n    }\n\n    private handleFocusin = (event: Event): void => {\n        this.focused = true;\n        const target = event.composedPath()[0];\n        if (target !== this) {\n            this.removeEventListener('keydown', this.handleKeydown);\n            return;\n        }\n        this.addEventListener('keydown', this.handleKeydown);\n    };\n\n    private handleFocusout(event: Event): void {\n        this.focused = false;\n        const target = event.composedPath()[0];\n        if (target === this) {\n            this.removeEventListener('keydown', this.handleKeydown);\n        }\n    }\n\n    private handleKeydown(event: KeyboardEvent): void {\n        const { code } = event;\n        switch (code) {\n            case 'Space':\n                this.toggleSelected();\n                if (this.toggles) {\n                    event.preventDefault();\n                    break;\n                }\n            case 'Enter':\n            case 'NumpadEnter':\n                this.click();\n        }\n    }\n\n    private handleSelectedChange(event: Event & { target: Checkbox }): void {\n        event.stopPropagation();\n        this.selected = event.target.checked;\n        this.announceChange();\n    }\n\n    public toggleSelected(): void {\n        if (!this.toggles) {\n            this.dispatchEvent(\n                new Event('click', {\n                    bubbles: true,\n                    composed: true,\n                })\n            );\n            return;\n        }\n        this.selected = !this.selected;\n        this.announceChange();\n    }\n\n    private announceChange(): void {\n        const applyDefault = this.dispatchEvent(\n            new Event('change', {\n                cancelable: true,\n                bubbles: true,\n                composed: true,\n            })\n        );\n        if (!applyDefault) {\n            this.selected = !this.selected;\n        }\n    }\n\n    private stopPropagationOnHref(event: Event): void {\n        if (this.href) {\n            event.stopPropagation();\n        }\n    }\n\n    /**\n     * Handles pointer down events on the card element.\n     * Implements a click detection system that distinguishes between clicks and drags\n     * based on duration and movement distance.\n     */\n    private handlePointerdown(event: PointerEvent): void {\n        const path = event.composedPath();\n        const hasAnchor = path.some(\n            (el) => (el as HTMLElement).localName === 'a'\n        );\n        if (hasAnchor) return;\n        // Record the time and initial position of the pointerdown event\n        const startTime = event.timeStamp;\n        const startX = event.clientX;\n        const startY = event.clientY;\n\n        // Define the handler for when the pointer interaction ends\n        const handleEnd = (endEvent: PointerEvent): void => {\n            const endTime = endEvent.timeStamp;\n            const endX = endEvent.clientX;\n            const endY = endEvent.clientY;\n\n            // Calculate time duration and movement distance of the pointer\n            const timeDelta = endTime - startTime;\n            const moveX = Math.abs(endX - startX);\n            const moveY = Math.abs(endY - startY);\n\n            // Consider the pointer interaction a \"click\" only if:\n            // - It was short (under 200ms)\n            // - It didn't move significantly (less than 10px in any direction)\n            const moved = moveX > 10 || moveY > 10;\n\n            if (timeDelta < 200 && !moved) {\n                this.click();\n            }\n\n            this.removeEventListener('pointerup', handleEnd);\n            this.removeEventListener('pointercancel', handleEnd);\n        };\n\n        this.addEventListener('pointerup', handleEnd);\n        this.addEventListener('pointercancel', handleEnd);\n    }\n\n    protected get renderHeading(): TemplateResult {\n        return html`\n            <div class=\"title\" id=\"heading\">\n                <slot name=\"heading\">${this.heading}</slot>\n            </div>\n        `;\n    }\n\n    protected get renderPreviewImage(): TemplateResult {\n        return html`\n            <sp-asset id=\"preview\" variant=${ifDefined(this.asset)}>\n                <slot name=\"preview\"></slot>\n            </sp-asset>\n            ${this.variant !== 'quiet' && !this.horizontal\n                ? html`\n                      <sp-divider size=\"s\"></sp-divider>\n                  `\n                : nothing}\n        `;\n    }\n\n    protected get renderCoverImage(): TemplateResult {\n        return html`\n            <sp-asset id=\"cover-photo\" variant=${ifDefined(this.asset)}>\n                <slot name=\"cover-photo\"></slot>\n            </sp-asset>\n            ${this.variant !== 'quiet' && !this.horizontal\n                ? html`\n                      <sp-divider size=\"s\"></sp-divider>\n                  `\n                : nothing}\n        `;\n    }\n\n    protected get images(): TemplateResult[] {\n        const images: TemplateResult[] = [];\n        if (this.hasPreview) images.push(this.renderPreviewImage);\n        if (this.hasCoverPhoto) images.push(this.renderCoverImage);\n        return images;\n    }\n\n    private renderImage(): TemplateResult[] {\n        if (this.horizontal) {\n            return this.images;\n        }\n        if (this.variant !== 'standard') {\n            return [this.renderPreviewImage];\n        }\n        return this.images;\n    }\n\n    private get renderSubtitleAndDescription(): TemplateResult {\n        return html`\n            <div class=\"subtitle\">\n                <slot name=\"subheading\">${this.subheading}</slot>\n            </div>\n            <slot name=\"description\"></slot>\n        `;\n    }\n\n    protected override render(): TemplateResult {\n        /* When rendering the card within a grid,\n        where the card has role=\"row\", the row have an\n        immediate descendant of role=\"gridcell\", otherwise\n        the role for the content wrapper can remain undefined. */\n        const roleForWrapper = this.role === 'row' ? 'gridcell' : undefined;\n        return html`\n            <div class=\"wrapper\" role=${ifDefined(roleForWrapper)}>\n                ${this.renderImage()}\n                <div class=\"body\">\n                    <div class=\"header\">\n                        ${this.renderHeading}\n                        ${this.variant === 'gallery'\n                            ? this.renderSubtitleAndDescription\n                            : nothing}\n                        ${this.variant !== 'quiet' || this.size !== 's'\n                            ? html`\n                                  <div\n                                      class=\"action-button\"\n                                      @pointerdown=${this.stopPropagationOnHref}\n                                  >\n                                      <slot name=\"actions\"></slot>\n                                  </div>\n                              `\n                            : nothing}\n                    </div>\n                    ${this.variant !== 'gallery'\n                        ? html`\n                              <div class=\"content\">\n                                  ${this.renderSubtitleAndDescription}\n                              </div>\n                          `\n                        : nothing}\n                </div>\n                ${this.href\n                    ? this.renderAnchor({\n                          id: 'like-anchor',\n                          labelledby: 'heading',\n                      })\n                    : nothing}\n                ${this.variant === 'standard'\n                    ? html`\n                          <slot name=\"footer\"></slot>\n                      `\n                    : nothing}\n                ${this.toggles\n                    ? html`\n                          <sp-popover\n                              class=\"checkbox-toggle\"\n                              @pointerdown=${this.stopPropagationOnHref}\n                          >\n                              <sp-checkbox\n                                  class=\"checkbox\"\n                                  @change=${this.handleSelectedChange}\n                                  .checked=${this.selected}\n                              >\n                                  <span class=\"sr-only\">\n                                      ${this.label || this.heading}\n                                  </span>\n                              </sp-checkbox>\n                          </sp-popover>\n                      `\n                    : nothing}\n                ${this.variant === 'quiet' && this.size === 's'\n                    ? html`\n                          <div\n                              class=\"spectrum-QuickActions actions\"\n                              @pointerdown=${this.stopPropagationOnHref}\n                          >\n                              <slot name=\"actions\"></slot>\n                          </div>\n                      `\n                    : nothing}\n            </div>\n        `;\n    }\n\n    protected override firstUpdated(changes: PropertyValues): void {\n        super.firstUpdated(changes);\n        if (changes.has('label')) {\n            if (this.label) {\n                this.setAttribute('aria-label', this.label);\n            } else {\n                this.removeAttribute('aria-label');\n            }\n        }\n        this.addEventListener('pointerdown', this.handlePointerdown);\n        this.addEventListener('focusin', this.handleFocusin);\n        this.shadowRoot.addEventListener('focusin', this.handleFocusin);\n        this.addEventListener('focusout', this.handleFocusout);\n    }\n\n    protected override update(changes: PropertyValues): void {\n        super.update(changes);\n        if (changes.has('label')) {\n            if (this.label) {\n                this.setAttribute('aria-label', this.label);\n            } else {\n                this.removeAttribute('aria-label');\n            }\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["html", "nothing", "SizedMixin", "SpectrumElement", "ifDefined", "property", "query", "FocusVisiblePolyfillMixin", "ObserveSlotPresence", "LikeAnchor", "cardStyles", "event", "selected", "_a", "code", "el", "startTime", "startX", "startY", "handleEnd", "endEvent", "endTime", "endX", "endY", "timeDelta", "moveX", "moveY", "moved", "images", "roleForWrapper", "changes", "__decorateClass"]
}
