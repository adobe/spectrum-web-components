{
  "version": 3,
  "sources": ["RadioGroup.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { PropertyValues } from '@spectrum-web-components/base';\nimport {\n    property,\n    queryAssignedNodes,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { FocusVisiblePolyfillMixin } from '@spectrum-web-components/shared/src/focus-visible.js';\nimport { FieldGroup } from '@spectrum-web-components/field-group';\n\nimport { Radio } from './Radio.dev.js'\nimport { RovingTabindexController } from '@spectrum-web-components/reactive-controllers/src/RovingTabindex.js';\n\n/**\n * @element sp-radio-group\n *\n * @slot - The `sp-radio` elements to display/manage in the group.\n * @slot help-text - default or non-negative help text to associate to your form element\n * @slot negative-help-text - negative help text to associate to your form element when `invalid`\n *\n * @fires change - An alteration to the value of the element has been committed by the user.\n */\nexport class RadioGroup extends FocusVisiblePolyfillMixin(FieldGroup) {\n    @property({ type: String })\n    public name = '';\n\n    @queryAssignedNodes()\n    public defaultNodes!: Node[];\n\n    public get buttons(): Radio[] {\n        return this.defaultNodes.filter(\n            (node) => (node as HTMLElement) instanceof Radio\n        ) as Radio[];\n    }\n\n    rovingTabindexController = new RovingTabindexController<Radio>(this, {\n        focusInIndex: (elements: Radio[]) => {\n            return elements.findIndex((el) => {\n                return this.selected\n                    ? !el.disabled && el.value === this.selected\n                    : !el.disabled;\n            });\n        },\n        elementEnterAction: (el: Radio) => {\n            this._setSelected(el.value);\n        },\n        elements: () => this.buttons,\n        isFocusableElement: (el: Radio) => !el.disabled,\n    });\n\n    public override focus(): void {\n        this.rovingTabindexController.focus();\n    }\n\n    private _setSelected(value: string): void {\n        if (value === this.selected) {\n            return;\n        }\n        const oldValue = this.selected;\n        const radio = value\n            ? (this.querySelector(`sp-radio[value=\"${value}\"]`) as Radio)\n            : undefined;\n\n        // If no matching radio, selected is reset to empty string\n        this.selected = radio ? value : '';\n        const applyDefault = this.dispatchEvent(\n            new Event('change', {\n                cancelable: true,\n                bubbles: true,\n                composed: true,\n            })\n        );\n        if (!applyDefault) {\n            this.selected = oldValue;\n            return;\n        }\n        this.validateRadios();\n    }\n\n    @property({ reflect: true })\n    public selected = '';\n\n    protected override willUpdate(changes: PropertyValues<this>): void {\n        if (!this.hasUpdated) {\n            this.setAttribute('role', 'radiogroup');\n            const checkedRadio = this.querySelector(\n                'sp-radio[checked]'\n            ) as Radio;\n            const checkedRadioValue = checkedRadio ? checkedRadio.value : '';\n            // Prefer the checked item over the selected value\n            this.selected = checkedRadioValue || this.selected;\n            // Validate the selected value is actual a radio option\n            if (this.selected && this.selected !== checkedRadioValue) {\n                const selectedRadio = this.querySelector(\n                    `sp-radio[value=\"${this.selected}\"]`\n                ) as Radio;\n                if (selectedRadio) {\n                    selectedRadio.checked = true;\n                }\n            }\n\n            this.shadowRoot.addEventListener('change', (event: Event) => {\n                event.stopPropagation();\n                const target = event.target as Radio;\n                this._setSelected(target.value);\n            });\n        }\n\n        if (changes.has('selected')) {\n            this.validateRadios();\n        }\n    }\n\n    private async validateRadios(): Promise<void> {\n        let validSelection = false;\n        if (!this.hasUpdated) {\n            // Initial validation has to happen after the initial render to allow\n            // the buttons to be queries from the rendered <slot> element\n            await this.updateComplete;\n        }\n        this.buttons.map((button) => {\n            button.checked = this.selected === button.value;\n            validSelection = validSelection || button.checked;\n        });\n        if (!validSelection) {\n            this.selected = '';\n        }\n    }\n\n    protected override handleSlotchange(): void {\n        this.rovingTabindexController.clearElementCache();\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
