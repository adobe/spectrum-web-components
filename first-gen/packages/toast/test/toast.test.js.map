{
  "version": 3,
  "sources": ["toast.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport '@spectrum-web-components/toast/sp-toast.js';\nimport { Toast, toastVariants } from '@spectrum-web-components/toast';\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    nextFrame,\n    waitUntil,\n} from '@open-wc/testing';\nimport { CloseButton } from '@spectrum-web-components/button';\nimport {\n    testForLitDevWarnings,\n    waitForPredicate,\n} from '../../../test/testing-helpers.js';\nimport { spy } from 'sinon';\n\ninterface TestableToast {\n    _timeout: number;\n    countdownStart: number;\n}\n\ndescribe('Toast', () => {\n    testForLitDevWarnings(\n        async () =>\n            await fixture<Toast>(html`\n                <sp-toast open>Help text.</sp-toast>\n            `)\n    );\n    it('loads', async () => {\n        const el = await fixture<Toast>(html`\n            <sp-toast open>Help text.</sp-toast>\n        `);\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    toastVariants.map((variant) => {\n        it(`loads - [variant=\"${variant}\"]`, async () => {\n            const el = await fixture<Toast>(html`\n                <sp-toast variant=${variant} open>\n                    This toast is of the \\`${variant}\\` variant.\n                </sp-toast>\n            `);\n\n            await elementUpdated(el);\n\n            await expect(el).to.be.accessible();\n        });\n    });\n    it('loads - timeout', async () => {\n        const el = await fixture<Toast>(html`\n            <sp-toast timeout=\"100\">Help text.</sp-toast>\n        `);\n\n        await elementUpdated(el);\n        expect(el.open).to.be.false;\n\n        (el as unknown as TestableToast)._timeout = 100;\n        el.open = true;\n        await elementUpdated(el);\n\n        await waitForPredicate(() => el.open === false);\n        expect(el.open).to.be.false;\n    });\n    it('`timeout` updates `countdownStart`', async () => {\n        const el = await fixture<Toast>(html`\n            <sp-toast timeout=\"100\">Help text.</sp-toast>\n        `);\n\n        await elementUpdated(el);\n        expect(el.open).to.be.false;\n\n        const testableEl = el as unknown as TestableToast;\n        testableEl._timeout = 100;\n        el.open = true;\n        await elementUpdated(el);\n\n        const firstStart = testableEl.countdownStart;\n\n        await nextFrame();\n        await nextFrame();\n        await nextFrame();\n\n        el.timeout = 400;\n\n        await elementUpdated(el);\n        const secondStart = testableEl.countdownStart;\n\n        expect(secondStart).to.not.equal(firstStart);\n\n        await nextFrame();\n        await nextFrame();\n\n        el.timeout = 0;\n\n        await elementUpdated(el);\n        const thirdStart = testableEl.countdownStart;\n\n        expect(thirdStart).to.equal(0);\n    });\n    it('stops timeout on `focusin`', async () => {\n        const el = await fixture<Toast>(html`\n            <sp-toast timeout=\"100\">Help text.</sp-toast>\n        `);\n\n        await elementUpdated(el);\n\n        const testableEl = el as unknown as TestableToast;\n        expect(el.open, 'not open to start').to.be.false;\n\n        el.open = true;\n        await elementUpdated(el);\n        await nextFrame();\n\n        expect(testableEl.countdownStart, 'initially not 0').to.not.equal(0);\n\n        testableEl._timeout = 100;\n\n        el.dispatchEvent(new FocusEvent('focusin'));\n\n        await elementUpdated(el);\n        expect(testableEl.countdownStart, '0 after focusin').to.equal(0);\n        el.dispatchEvent(new FocusEvent('focusout'));\n\n        await elementUpdated(el);\n        await nextFrame();\n        expect(testableEl.countdownStart, 'not 0 after focusout').to.not.equal(\n            0\n        );\n\n        await waitUntil(() => el.open === false, 'closes');\n        expect(el.open, 'not open to end').to.be.false;\n    });\n    it('closes', async () => {\n        const el = await fixture<Toast>(html`\n            <sp-toast open>Help text.</sp-toast>\n        `);\n\n        await elementUpdated(el);\n        expect(el.open).to.be.true;\n\n        const renderRoot = el.shadowRoot ? el.shadowRoot : el;\n        const closeButton = renderRoot.querySelector(\n            'sp-close-button'\n        ) as CloseButton;\n        closeButton.click();\n\n        await elementUpdated(el);\n        expect(el.open).to.be.false;\n    });\n    it('`close` can be prevented', async () => {\n        const handleClose = (event: CustomEvent): void =>\n            event.preventDefault();\n        const el = await fixture<Toast>(html`\n            <sp-toast open timeout=\"100\" @close=${handleClose}>\n                Help text.\n            </sp-toast>\n        `);\n\n        await elementUpdated(el);\n        expect(el.open).to.be.true;\n\n        const renderRoot = el.shadowRoot ? el.shadowRoot : el;\n        const closeButton = renderRoot.querySelector(\n            'sp-close-button'\n        ) as CloseButton;\n        closeButton.click();\n\n        await elementUpdated(el);\n        expect(el.open).to.be.true;\n    });\n    it('can be a controlled element', async () => {\n        const closeSpy = spy();\n        const handleClose = (event: CustomEvent): void => {\n            event.preventDefault();\n            closeSpy();\n        };\n        const el = await fixture<Toast>(html`\n            <sp-toast open timeout=\"100\" @close=${handleClose}>\n                Help text.\n            </sp-toast>\n        `);\n\n        await elementUpdated(el);\n        expect(el.open).to.be.true;\n        expect(closeSpy.callCount).to.equal(0);\n\n        const renderRoot = el.shadowRoot ? el.shadowRoot : el;\n        const closeButton = renderRoot.querySelector(\n            'sp-close-button'\n        ) as CloseButton;\n        closeButton.click();\n\n        await elementUpdated(el);\n        expect(el.open).to.be.true;\n        expect(closeSpy.callCount).to.equal(1);\n\n        el.open = false;\n        await elementUpdated(el);\n        expect(el.open).to.be.false;\n        expect(closeSpy.callCount).to.equal(1);\n    });\n    it('validates variants', async () => {\n        const el = await fixture<Toast>(html`\n            <sp-toast variant=\"invalid\" open>\n                This toast validates variants.\n            </sp-toast>\n        `);\n\n        await elementUpdated(el);\n        expect(el.variant).to.equal('');\n\n        el.variant = toastVariants[0];\n\n        await elementUpdated(el);\n        expect(el.variant).to.equal(toastVariants[0]);\n\n        el.variant = toastVariants[0];\n\n        await elementUpdated(el);\n        expect(el.variant).to.equal(toastVariants[0]);\n    });\n    it('maintains [variant] when disconnected/connected', async () => {\n        const el = await fixture<Toast>(html`\n            <sp-toast variant=\"positive\" open>\n                This toast maintains variants.\n            </sp-toast>\n        `);\n\n        await elementUpdated(el);\n        expect(el.variant).to.equal('positive');\n        const parent = el.parentElement as HTMLElement;\n\n        el.remove();\n\n        expect(el.variant).to.equal('positive');\n\n        parent.append(el);\n\n        expect(el.variant).to.equal('positive');\n    });\n    it('reopens', async () => {\n        const closeSpy = spy();\n        const el = await fixture<Toast>(html`\n            <sp-toast\n                variant=\"positive\"\n                open\n                @close=${() => {\n                    closeSpy();\n                }}\n            >\n                This toast maintains variants.\n            </sp-toast>\n        `);\n\n        await elementUpdated(el);\n        expect(el.open).to.be.true;\n\n        const closeButton = el.shadowRoot.querySelector(\n            'sp-close-button'\n        ) as HTMLElement;\n        closeButton.click();\n\n        await elementUpdated(el);\n        expect(el.open).to.be.false;\n\n        el.open = true;\n\n        await elementUpdated(el);\n        expect(el.open).to.be.true;\n        expect(closeSpy.callCount).to.equal(1);\n    });\n    it('sp close button renders with static-color=\"white\"', async () => {\n        const el = await fixture<Toast>(html`\n            <sp-toast open>Help text.</sp-toast>\n        `);\n        const renderRoot = el.shadowRoot ? el.shadowRoot : el;\n        const closeButton = renderRoot.querySelector(\n            'sp-close-button'\n        ) as CloseButton;\n\n        expect(closeButton).to.exist;\n\n        expect(closeButton.getAttribute('static-color')).to.equal('white');\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
