{
  "version": 3,
  "sources": ["search.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport '@spectrum-web-components/search/sp-search.js';\nimport { Search } from '@spectrum-web-components/search';\nimport { elementUpdated, expect, html, litFixture } from '@open-wc/testing';\nimport { escapeEvent, spaceEvent } from '../../../test/testing-helpers.js';\nimport '@spectrum-web-components/shared/src/focus-visible.js';\nimport { spy } from 'sinon';\nimport { testForLitDevWarnings } from '../../../test/testing-helpers.js';\n\ndescribe('Search', () => {\n    testForLitDevWarnings(\n        async () =>\n            await litFixture<Search>(html`\n                <sp-search></sp-search>\n            `)\n    );\n    it('loads accessibly', async () => {\n        const el = await litFixture<Search>(html`\n            <sp-search></sp-search>\n        `);\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('can be cleared', async () => {\n        const el = await litFixture<Search>(html`\n            <sp-search value=\"Test\"></sp-search>\n        `);\n\n        await elementUpdated(el);\n        expect(el.value).to.equal('Test');\n\n        const root = el.shadowRoot ? el.shadowRoot : el;\n        const clearButton = root.querySelector('#button') as HTMLButtonElement;\n        clearButton.click();\n\n        await elementUpdated(el);\n\n        expect(el.value).to.equal('');\n    });\n    it('captures keyboard events to the clear button', async () => {\n        const el = await litFixture<Search>(html`\n            <sp-search value=\"Test\"></sp-search>\n        `);\n\n        await elementUpdated(el);\n        expect(el.value).to.equal('Test');\n\n        const root = el.shadowRoot ? el.shadowRoot : el;\n        const clearButton = root.querySelector('#button') as HTMLButtonElement;\n        clearButton.dispatchEvent(escapeEvent());\n\n        await elementUpdated(el);\n\n        expect(el.value).to.equal('Test');\n    });\n    it('dispatches events when using the \"clear\" button', async () => {\n        const inputSpy = spy();\n        const changeSpy = spy();\n        const handleInput = (event: Event): void => {\n            const target = event.target as HTMLInputElement;\n            inputSpy(target.value);\n        };\n        const handleChange = (event: Event): void => {\n            const target = event.target as HTMLInputElement;\n            changeSpy(target.value);\n        };\n        const el = await litFixture<Search>(html`\n            <sp-search\n                value=\"Test\"\n                @change=${handleChange}\n                @input=${handleInput}\n            ></sp-search>\n        `);\n\n        await elementUpdated(el);\n        expect(el.value).to.equal('Test');\n\n        const root = el.shadowRoot ? el.shadowRoot : el;\n        const clearButton = root.querySelector('#button') as HTMLButtonElement;\n        inputSpy.resetHistory();\n        changeSpy.resetHistory();\n        clearButton.click();\n\n        await elementUpdated(el);\n\n        expect(el.value).to.equal('');\n        expect(inputSpy.calledOnce, 'one input').to.be.true;\n        expect(inputSpy.calledWith(''), 'was blank').to.be.true;\n        expect(changeSpy.calledOnce, 'one change').to.be.true;\n        expect(changeSpy.calledWith(''), 'was blank').to.be.true;\n    });\n    it('can be cleared via \"Escape\"', async () => {\n        const inputSpy = spy();\n        const changeSpy = spy();\n        const handleInput = (event: Event): void => {\n            const target = event.target as HTMLInputElement;\n            inputSpy(target.value);\n        };\n        const handleChange = (event: Event): void => {\n            const target = event.target as HTMLInputElement;\n            changeSpy(target.value);\n        };\n        const el = await litFixture<Search>(html`\n            <sp-search\n                value=\"Test\"\n                @change=${handleChange}\n                @input=${handleInput}\n            ></sp-search>\n        `);\n\n        await elementUpdated(el);\n        expect(el.value).to.equal('Test');\n        el.focusElement.dispatchEvent(spaceEvent());\n\n        await elementUpdated(el);\n        expect(el.value).to.equal('Test');\n\n        inputSpy.resetHistory();\n        changeSpy.resetHistory();\n        el.focusElement.dispatchEvent(escapeEvent());\n\n        await elementUpdated(el);\n\n        expect(el.value).to.equal('');\n        expect(inputSpy.calledOnce, 'one input').to.be.true;\n        expect(inputSpy.calledWith(''), 'was blank').to.be.true;\n        expect(changeSpy.calledOnce, 'one change').to.be.true;\n        expect(changeSpy.calledWith(''), 'was blank').to.be.true;\n    });\n    it('cannot be cleared via \"Escape\" if holdValueOnEscape is true', async () => {\n        const inputSpy = spy();\n        const changeSpy = spy();\n        const handleInput = (event: Event): void => {\n            const target = event.target as HTMLInputElement;\n            inputSpy(target.value);\n        };\n        const handleChange = (event: Event): void => {\n            const target = event.target as HTMLInputElement;\n            changeSpy(target.value);\n        };\n        const el = await litFixture<Search>(html`\n            <sp-search\n                value=\"Test\"\n                @change=${handleChange}\n                @input=${handleInput}\n                holdValueOnEscape\n            ></sp-search>\n        `);\n\n        await elementUpdated(el);\n        expect(el.value).to.equal('Test');\n        el.focusElement.dispatchEvent(spaceEvent());\n\n        await elementUpdated(el);\n        expect(el.value).to.equal('Test');\n\n        inputSpy.resetHistory();\n        changeSpy.resetHistory();\n        el.focusElement.dispatchEvent(escapeEvent());\n\n        await elementUpdated(el);\n\n        expect(el.value).to.equal('Test');\n    });\n    it('cannot be multiline', async () => {\n        const el = await litFixture<Search>(html`\n            <sp-search multiline></sp-search>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.multiline).to.be.false;\n\n        el.multiline = true;\n\n        await elementUpdated(el);\n\n        expect(el.multiline).to.be.false;\n    });\n    it('accepts `placeholder` and `label` properties', async () => {\n        const testString = 'Search for images';\n        const el = await litFixture<Search>(html`\n            <sp-search></sp-search>\n        `);\n\n        await elementUpdated(el);\n        el.placeholder = testString;\n        el.label = testString;\n\n        await elementUpdated(el);\n\n        expect(el.focusElement.placeholder).to.equal(testString);\n        expect(el.focusElement.getAttribute('aria-label')).to.equal(testString);\n    });\n    it('can have default prevented', async () => {\n        const el = await litFixture<Search>(html`\n            <sp-search\n                @submit=${(event: Event) => {\n                    event.preventDefault();\n                }}\n            ></sp-search>\n        `);\n\n        await elementUpdated(el);\n        const searchForm = (\n            el.shadowRoot\n                ? el.shadowRoot.querySelector('form')\n                : el.querySelector('form')\n        ) as HTMLFormElement;\n\n        const submitEvent = new Event('submit', {\n            cancelable: true,\n            bubbles: false,\n            composed: false,\n        });\n        searchForm.dispatchEvent(submitEvent);\n\n        expect(submitEvent.defaultPrevented).to.be.true;\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
