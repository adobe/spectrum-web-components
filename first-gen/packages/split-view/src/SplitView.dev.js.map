{
  "version": 3,
  "sources": ["SplitView.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    html,\n    LitElement,\n    nothing,\n    PropertyValues,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    classMap,\n    ifDefined,\n} from '@spectrum-web-components/base/src/directives.js';\nimport {\n    property,\n    query,\n    state,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { streamingListener } from '@spectrum-web-components/base/src/streaming-listener.js';\nimport { randomID } from '@spectrum-web-components/shared/src/random-id.js';\n\nimport { WithSWCResizeObserver } from './types';\n\nimport styles from './split-view.css.js';\n\nconst DEFAULT_MAX_SIZE = 3840;\n\nconst SPLITTERSIZE = 2;\n\nconst ARROW_KEY_CHANGE_VALUE = 10;\n\nconst PAGEUPDOWN_KEY_CHANGE_VALUE = 50;\n\nconst COLLAPSE_THREASHOLD = 50;\n\n/**\n * @element sp-split-view\n *\n * @slot Two sibling elements to be sized by the element attritubes\n * @fires change - Announces the new position of the splitter\n */\nexport class SplitView extends SpectrumElement {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    @state()\n    public controlledEl?: HTMLElement;\n\n    @property({ type: Boolean, reflect: true })\n    public vertical = false;\n\n    @property({ type: Boolean, reflect: true })\n    public resizable = false;\n\n    @property({ type: Boolean, reflect: true })\n    public collapsible = false;\n\n    /** The minimum size of the primary pane */\n    @property({ type: Number, attribute: 'primary-min' })\n    public primaryMin = 0;\n\n    /** The maximum size of the primary pane */\n    @property({ type: Number, attribute: 'primary-max' })\n    public primaryMax = DEFAULT_MAX_SIZE;\n\n    /**\n     * The start size of the primary pane, can be a real pixel number|string, percentage or \"auto\"\n     * For example: \"100\", \"120px\", \"75%\" or \"auto\" are valid values\n     * @type {number |\u00A0number + \"px\" | number + \"%\" | \"auto\"}\n     * @attr\n     */\n    @property({ type: String, attribute: 'primary-size' })\n    public primarySize?: string;\n\n    /** The minimum size of the secondary pane */\n    @property({ type: Number, attribute: 'secondary-min' })\n    public secondaryMin = 0;\n\n    /** The maximum size of the secondary pane */\n    @property({ type: Number, attribute: 'secondary-max' })\n    public secondaryMax = DEFAULT_MAX_SIZE;\n\n    /** The current splitter position of split-view */\n    @property({ type: Number, reflect: true, attribute: 'splitter-pos' })\n    public splitterPos?: number;\n\n    /** The current size of first pane of split-view */\n    @property({ type: String, attribute: false })\n    private firstPaneSize = 'auto';\n\n    @property()\n    public label?: string;\n\n    @property({ type: Boolean, attribute: false })\n    private enoughChildren = false;\n\n    @property({ type: Number })\n    private viewSize = 0;\n\n    @query('slot')\n    private paneSlot!: HTMLSlotElement;\n\n    @query('#splitter')\n    private splitter!: HTMLDivElement;\n\n    private offset = 0;\n\n    private minPos = 0;\n\n    private maxPos = DEFAULT_MAX_SIZE;\n\n    private observer?: WithSWCResizeObserver['ResizeObserver'];\n\n    private rect?: DOMRect;\n\n    private _splitterSize?: number;\n\n    public constructor() {\n        super();\n        const RO = (window as unknown as WithSWCResizeObserver).ResizeObserver;\n        if (RO) {\n            this.observer = new RO(() => {\n                this.rect = undefined;\n                this.updateMinMax();\n            });\n        }\n    }\n\n    public override connectedCallback(): void {\n        super.connectedCallback();\n        this.observer?.observe(this);\n    }\n\n    public override disconnectedCallback(): void {\n        this.observer?.unobserve(this);\n        super.disconnectedCallback();\n    }\n\n    /**\n     * @private\n     **/\n    public get splitterSize(): number {\n        if (!this._splitterSize) {\n            this._splitterSize =\n                (this.splitter &&\n                    Math.round(\n                        parseFloat(\n                            window\n                                .getComputedStyle(this.splitter)\n                                .getPropertyValue(\n                                    this.vertical ? 'height' : 'width'\n                                )\n                        )\n                    )) ||\n                SPLITTERSIZE;\n        }\n        return this._splitterSize;\n    }\n\n    protected override render(): TemplateResult {\n        const splitterClasses = {\n            'is-resized-start': this.splitterPos === this.minPos,\n            'is-resized-end': (this.splitterPos &&\n                this.splitterPos > this.splitterSize &&\n                this.splitterPos === this.maxPos) as boolean,\n            'is-collapsed-start': this.splitterPos === 0,\n            'is-collapsed-end': (this.splitterPos &&\n                this.splitterPos >=\n                    Math.max(\n                        this.splitterSize,\n                        this.viewSize - this.splitterSize\n                    )) as boolean,\n        };\n        const label = this.resizable\n            ? this.label || 'Resize the panels'\n            : undefined;\n\n        return html`\n            <slot\n                id=${ifDefined(\n                    this.resizable ? this.controlledEl?.id : undefined\n                )}\n                @slotchange=${this.onContentSlotChange}\n                style=\"--spectrum-split-view-first-pane-size: ${this\n                    .firstPaneSize}\"\n            ></slot>\n            ${this.enoughChildren\n                ? html`\n                      <div\n                          id=\"splitter\"\n                          class=${classMap(splitterClasses)}\n                          role=\"separator\"\n                          aria-controls=${ifDefined(\n                              this.resizable ? this.controlledEl?.id : undefined\n                          )}\n                          aria-label=${ifDefined(label)}\n                          aria-orientation=${this.vertical\n                              ? 'horizontal'\n                              : 'vertical'}\n                          aria-valuenow=${Math.round(\n                              (parseFloat(this.firstPaneSize) / this.viewSize) *\n                                  100\n                          )}\n                          tabindex=${ifDefined(\n                              this.resizable ? '0' : undefined\n                          )}\n                          @keydown=${this.onKeydown}\n                          ${streamingListener({\n                              start: ['pointerdown', this.onPointerdown],\n                              streamInside: ['pointermove', this.onPointermove],\n                              end: [\n                                  [\n                                      'pointerup',\n                                      'pointercancel',\n                                      'pointerleave',\n                                  ],\n                                  this.onPointerup,\n                              ],\n                          })}\n                      >\n                          ${this.resizable\n                              ? html`\n                                    <div id=\"gripper\"></div>\n                                `\n                              : nothing}\n                      </div>\n                  `\n                : nothing}\n        `;\n    }\n\n    private controlledElIDApplied = false;\n\n    private onContentSlotChange(\n        event: Event & { target: HTMLSlotElement }\n    ): void {\n        if (this.controlledEl && this.controlledElIDApplied) {\n            this.controlledEl.removeAttribute('id');\n            this.controlledElIDApplied = false;\n        }\n        this.controlledEl = event.target.assignedElements()[0] as HTMLElement;\n        if (this.controlledEl && !this.controlledEl.id) {\n            this.controlledEl.id = `${this.tagName.toLowerCase()}-${randomID()}`;\n            this.controlledElIDApplied = true;\n        }\n        this.enoughChildren = this.children.length > 1;\n        this.checkResize();\n    }\n\n    private onPointerdown(event: PointerEvent): void {\n        if (!this.resizable || (event.button && event.button !== 0)) {\n            event.preventDefault();\n            return;\n        }\n        this.splitter.setPointerCapture(event.pointerId);\n        this.offset = this.getOffset();\n    }\n\n    private onPointermove(event: PointerEvent): void {\n        event.preventDefault();\n        let pos =\n            this.vertical || this.isLTR\n                ? this.getPosition(event) - this.offset\n                : this.offset - this.getPosition(event);\n        if (this.collapsible && pos < this.minPos - COLLAPSE_THREASHOLD) {\n            pos = 0;\n        }\n        if (this.collapsible && pos > this.maxPos + COLLAPSE_THREASHOLD) {\n            pos = this.viewSize - this.splitterSize;\n        }\n        this.updatePosition(pos);\n    }\n\n    private onPointerup(event: PointerEvent): void {\n        this.splitter.releasePointerCapture(event.pointerId);\n    }\n\n    private getOffset(): number {\n        if (!this.rect) {\n            this.rect = this.getBoundingClientRect();\n        }\n        const offsetX = this.isLTR ? this.rect.left : this.rect.right;\n        return this.vertical ? this.rect.top : offsetX;\n    }\n\n    private getPosition(event: PointerEvent): number {\n        return this.vertical ? event.clientY : event.clientX;\n    }\n\n    private movePosition(event: KeyboardEvent, offset: number): void {\n        event.preventDefault();\n        if (this.splitterPos !== undefined) {\n            this.updatePosition(this.splitterPos + offset);\n        }\n    }\n\n    private onKeydown(event: KeyboardEvent): void {\n        if (!this.resizable) {\n            return;\n        }\n        let direction = 0;\n        const isLTRorVertical = this.isLTR || this.vertical;\n        switch (event.key) {\n            case 'Home':\n                event.preventDefault();\n                this.updatePosition(this.collapsible ? 0 : this.minPos);\n                return;\n            case 'End':\n                event.preventDefault();\n                this.updatePosition(\n                    this.collapsible\n                        ? this.viewSize - this.splitterSize\n                        : this.maxPos\n                );\n                return;\n            case 'ArrowLeft':\n                direction = isLTRorVertical ? -1 : 1;\n                break;\n            case 'ArrowRight':\n                direction = isLTRorVertical ? 1 : -1;\n                break;\n            case 'ArrowUp':\n                direction = this.vertical ? -1 : 1;\n                break;\n            case 'ArrowDown':\n                direction = this.vertical ? 1 : -1;\n                break;\n            case 'PageUp':\n                direction = this.vertical ? -1 : 1;\n                break;\n            case 'PageDown':\n                direction = this.vertical ? 1 : -1;\n                break;\n        }\n        if (direction !== 0) {\n            const moveBy = event.key.startsWith('Page')\n                ? PAGEUPDOWN_KEY_CHANGE_VALUE\n                : ARROW_KEY_CHANGE_VALUE;\n            this.movePosition(event, moveBy * direction);\n        }\n    }\n\n    private async checkResize(): Promise<void> {\n        if (!this.enoughChildren) {\n            return;\n        }\n        this.updateMinMax();\n        if (this.splitterPos === undefined) {\n            const startPos = await this.calcStartPos();\n            this.updatePosition(startPos);\n        }\n    }\n\n    private updateMinMax(): void {\n        this.viewSize = this.vertical ? this.offsetHeight : this.offsetWidth;\n        this.minPos = Math.max(\n            this.primaryMin,\n            this.viewSize - this.secondaryMax\n        );\n        this.maxPos = Math.min(\n            this.primaryMax,\n            this.viewSize - Math.max(this.secondaryMin, this.splitterSize)\n        );\n    }\n\n    private updatePosition(x: number): void {\n        let pos = this.getLimitedPosition(x);\n        if (this.collapsible && x <= 0) {\n            pos = 0;\n        }\n        if (\n            this.collapsible &&\n            x > this.maxPos &&\n            x >= this.viewSize - this.splitterSize\n        ) {\n            pos = this.viewSize - this.splitterSize;\n        }\n        if (pos !== this.splitterPos) {\n            this.splitterPos = pos;\n            this.dispatchChangeEvent();\n        }\n    }\n\n    private getLimitedPosition(input: number): number {\n        if (input <= this.minPos) {\n            return this.minPos;\n        }\n        if (input >= this.maxPos) {\n            return this.maxPos;\n        }\n        return Math.max(this.minPos, Math.min(this.maxPos, input));\n    }\n\n    private async calcStartPos(): Promise<number> {\n        if (\n            this.primarySize !== undefined &&\n            /^\\d+(px)?$/.test(this.primarySize)\n        ) {\n            return parseInt(this.primarySize, 10);\n        }\n        if (this.primarySize !== undefined && /^\\d+%$/.test(this.primarySize)) {\n            return (parseInt(this.primarySize, 10) * this.viewSize) / 100;\n        }\n        if (this.primarySize === 'auto') {\n            this.firstPaneSize = 'auto';\n            const nodes = this.paneSlot.assignedNodes({ flatten: true });\n            const firstEl = nodes.find(\n                (node) => node instanceof HTMLElement\n            ) as LitElement;\n            if (typeof firstEl.updateComplete !== 'undefined') {\n                await firstEl.updateComplete;\n            }\n            if (firstEl) {\n                const size = window\n                    .getComputedStyle(firstEl)\n                    .getPropertyValue(this.vertical ? 'height' : 'width');\n                const size_i = parseFloat(size);\n                if (!isNaN(size_i)) {\n                    return this.getLimitedPosition(Math.ceil(size_i));\n                }\n            }\n        }\n        return this.viewSize / 2;\n    }\n\n    private dispatchChangeEvent(): void {\n        const changeEvent = new Event('change', {\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(changeEvent);\n    }\n\n    protected override willUpdate(changed: PropertyValues): void {\n        if (!this.hasUpdated || changed.has('primarySize')) {\n            this.splitterPos = undefined;\n            this.checkResize();\n        }\n        if (\n            changed.has('splitterPos') &&\n            this.splitterPos !== undefined &&\n            this.enoughChildren\n        ) {\n            this.firstPaneSize = `${Math.round(this.splitterPos)}px`;\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
