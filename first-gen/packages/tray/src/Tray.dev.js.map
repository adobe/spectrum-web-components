{
  "version": 3,
  "sources": ["Tray.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport '@spectrum-web-components/underlay/sp-underlay.js';\nimport { firstFocusableIn } from '@spectrum-web-components/shared/src/first-focusable-in.js';\nimport { MatchMediaController } from '@spectrum-web-components/reactive-controllers/src/MatchMedia.js';\n\nimport modalStyles from '@spectrum-web-components/modal/src/modal.css.js';\nimport styles from './tray.css.js';\n\n/**\n * @element sp-tray\n *\n * @slot - content to display within the Tray\n *\n * @fires close - Announces that the Tray has been closed.\n */\nexport class Tray extends SpectrumElement {\n    public static override get styles(): CSSResultArray {\n        return [modalStyles, styles];\n    }\n\n    @property({ type: Boolean, reflect: true })\n    public open = false;\n\n    protected prefersMotion = new MatchMediaController(\n        this,\n        '(prefers-reduced-motion: no-preference)'\n    );\n\n    private transitionPromise = Promise.resolve();\n\n    private resolveTransitionPromise = () => {};\n\n    @query('.tray')\n    private tray!: HTMLDivElement;\n\n    public override focus(): void {\n        const firstFocusable = firstFocusableIn(this);\n        if (firstFocusable) {\n            firstFocusable.focus();\n        } else if (this.children.length === 1) {\n            this.tray.focus();\n        } else {\n            super.focus();\n        }\n    }\n\n    private animating = false;\n\n    public overlayWillCloseCallback(): boolean {\n        if (!this.open) return this.animating;\n        this.close();\n        return true;\n    }\n\n    public close(): void {\n        this.open = false;\n        if (!this.prefersMotion.matches) {\n            this.dispatchClosed();\n        }\n    }\n\n    private dispatchClosed(): void {\n        this.dispatchEvent(\n            new Event('close', {\n                bubbles: true,\n            })\n        );\n    }\n\n    protected handleUnderlayTransitionend(): void {\n        if (!this.open) {\n            this.resolveTransitionPromise();\n            this.dispatchClosed();\n        }\n    }\n\n    protected handleTrayTransitionend(): void {\n        if (this.open) {\n            this.resolveTransitionPromise();\n        }\n    }\n\n    protected override update(changes: PropertyValues<this>): void {\n        if (\n            changes.has('open') &&\n            changes.get('open') !== undefined &&\n            this.prefersMotion.matches\n        ) {\n            this.animating = true;\n            this.transitionPromise = new Promise((res) => {\n                this.resolveTransitionPromise = () => {\n                    this.animating = false;\n                    res();\n                };\n            });\n        }\n        super.update(changes);\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <sp-underlay\n                ?open=${this.open}\n                @close=${this.close}\n                @transitionend=${this.handleUnderlayTransitionend}\n            ></sp-underlay>\n            <div\n                class=\"tray modal\"\n                tabindex=\"-1\"\n                @transitionend=${this.handleTrayTransitionend}\n            >\n                <slot></slot>\n            </div>\n        `;\n    }\n\n    /**\n     * Bind the open/close transition into the update complete lifecycle so\n     * that the overlay system can wait for it to be \"visibly ready\" before\n     * attempting to throw focus into the content contained herein. Not\n     * waiting for this can cause small amounts of page scroll to happen\n     * while opening the Tray when focusable content is included: e.g. Menu\n     * elements whose selected Menu Item is not the first Menu Item.\n     */\n    protected override async getUpdateComplete(): Promise<boolean> {\n        const complete = (await super.getUpdateComplete()) as boolean;\n        await this.transitionPromise;\n        return complete;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;AAYA;AAAA,EAEI;AAAA,EAEA;AAAA,OAEG;AACP;AAAA,EACI;AAAA,EACA;AAAA,OACG;AACP,OAAO;AACP,SAAS,wBAAwB;AACjC,SAAS,4BAA4B;AAErC,OAAO,iBAAiB;AACxB,OAAO,YAAY;AASZ,aAAM,aAAa,gBAAgB;AAAA,EAAnC;AAAA;AAMH,SAAO,OAAO;AAEd,SAAU,gBAAgB,IAAI;AAAA,MAC1B;AAAA,MACA;AAAA,IACJ;AAEA,SAAQ,oBAAoB,QAAQ,QAAQ;AAE5C,SAAQ,2BAA2B,MAAM;AAAA,IAAC;AAgB1C,SAAQ,YAAY;AAAA;AAAA,EA9BpB,WAA2B,SAAyB;AAChD,WAAO,CAAC,aAAa,MAAM;AAAA,EAC/B;AAAA,EAiBgB,QAAc;AAC1B,UAAM,iBAAiB,iBAAiB,IAAI;AAC5C,QAAI,gBAAgB;AAChB,qBAAe,MAAM;AAAA,IACzB,WAAW,KAAK,SAAS,WAAW,GAAG;AACnC,WAAK,KAAK,MAAM;AAAA,IACpB,OAAO;AACH,YAAM,MAAM;AAAA,IAChB;AAAA,EACJ;AAAA,EAIO,2BAAoC;AACvC,QAAI,CAAC,KAAK,KAAM,QAAO,KAAK;AAC5B,SAAK,MAAM;AACX,WAAO;AAAA,EACX;AAAA,EAEO,QAAc;AACjB,SAAK,OAAO;AACZ,QAAI,CAAC,KAAK,cAAc,SAAS;AAC7B,WAAK,eAAe;AAAA,IACxB;AAAA,EACJ;AAAA,EAEQ,iBAAuB;AAC3B,SAAK;AAAA,MACD,IAAI,MAAM,SAAS;AAAA,QACf,SAAS;AAAA,MACb,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEU,8BAAoC;AAC1C,QAAI,CAAC,KAAK,MAAM;AACZ,WAAK,yBAAyB;AAC9B,WAAK,eAAe;AAAA,IACxB;AAAA,EACJ;AAAA,EAEU,0BAAgC;AACtC,QAAI,KAAK,MAAM;AACX,WAAK,yBAAyB;AAAA,IAClC;AAAA,EACJ;AAAA,EAEmB,OAAO,SAAqC;AAC3D,QACI,QAAQ,IAAI,MAAM,KAClB,QAAQ,IAAI,MAAM,MAAM,UACxB,KAAK,cAAc,SACrB;AACE,WAAK,YAAY;AACjB,WAAK,oBAAoB,IAAI,QAAQ,CAAC,QAAQ;AAC1C,aAAK,2BAA2B,MAAM;AAClC,eAAK,YAAY;AACjB,cAAI;AAAA,QACR;AAAA,MACJ,CAAC;AAAA,IACL;AACA,UAAM,OAAO,OAAO;AAAA,EACxB;AAAA,EAEmB,SAAyB;AACxC,WAAO;AAAA;AAAA,wBAES,KAAK,IAAI;AAAA,yBACR,KAAK,KAAK;AAAA,iCACF,KAAK,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA,iCAKhC,KAAK,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAyB,oBAAsC;AAC3D,UAAM,WAAY,MAAM,MAAM,kBAAkB;AAChD,UAAM,KAAK;AACX,WAAO;AAAA,EACX;AACJ;AA5GW;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GALjC,KAMF;AAYC;AAAA,EADP,MAAM,OAAO;AAAA,GAjBL,KAkBD;",
  "names": []
}
