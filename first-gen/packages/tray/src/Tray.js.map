{
  "version": 3,
  "sources": ["Tray.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport '@spectrum-web-components/underlay/sp-underlay.js';\nimport { firstFocusableIn } from '@spectrum-web-components/shared/src/first-focusable-in.js';\nimport { MatchMediaController } from '@spectrum-web-components/reactive-controllers/src/MatchMedia.js';\n\nimport modalStyles from '@spectrum-web-components/modal/src/modal.css.js';\nimport styles from './tray.css.js';\n\n/**\n * @element sp-tray\n *\n * @slot - content to display within the Tray\n *\n * @fires close - Announces that the Tray has been closed.\n */\nexport class Tray extends SpectrumElement {\n    public static override get styles(): CSSResultArray {\n        return [modalStyles, styles];\n    }\n\n    @property({ type: Boolean, reflect: true })\n    public open = false;\n\n    protected prefersMotion = new MatchMediaController(\n        this,\n        '(prefers-reduced-motion: no-preference)'\n    );\n\n    private transitionPromise = Promise.resolve();\n\n    private resolveTransitionPromise = () => {};\n\n    @query('.tray')\n    private tray!: HTMLDivElement;\n\n    public override focus(): void {\n        const firstFocusable = firstFocusableIn(this);\n        if (firstFocusable) {\n            firstFocusable.focus();\n        } else if (this.children.length === 1) {\n            this.tray.focus();\n        } else {\n            super.focus();\n        }\n    }\n\n    private animating = false;\n\n    public overlayWillCloseCallback(): boolean {\n        if (!this.open) return this.animating;\n        this.close();\n        return true;\n    }\n\n    public close(): void {\n        this.open = false;\n        if (!this.prefersMotion.matches) {\n            this.dispatchClosed();\n        }\n    }\n\n    private dispatchClosed(): void {\n        this.dispatchEvent(\n            new Event('close', {\n                bubbles: true,\n            })\n        );\n    }\n\n    protected handleUnderlayTransitionend(): void {\n        if (!this.open) {\n            this.resolveTransitionPromise();\n            this.dispatchClosed();\n        }\n    }\n\n    protected handleTrayTransitionend(): void {\n        if (this.open) {\n            this.resolveTransitionPromise();\n        }\n    }\n\n    protected override update(changes: PropertyValues<this>): void {\n        if (\n            changes.has('open') &&\n            changes.get('open') !== undefined &&\n            this.prefersMotion.matches\n        ) {\n            this.animating = true;\n            this.transitionPromise = new Promise((res) => {\n                this.resolveTransitionPromise = () => {\n                    this.animating = false;\n                    res();\n                };\n            });\n        }\n        super.update(changes);\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <sp-underlay\n                ?open=${this.open}\n                @close=${this.close}\n                @transitionend=${this.handleUnderlayTransitionend}\n            ></sp-underlay>\n            <div\n                class=\"tray modal\"\n                tabindex=\"-1\"\n                @transitionend=${this.handleTrayTransitionend}\n            >\n                <slot></slot>\n            </div>\n        `;\n    }\n\n    /**\n     * Bind the open/close transition into the update complete lifecycle so\n     * that the overlay system can wait for it to be \"visibly ready\" before\n     * attempting to throw focus into the content contained herein. Not\n     * waiting for this can cause small amounts of page scroll to happen\n     * while opening the Tray when focusable content is included: e.g. Menu\n     * elements whose selected Menu Item is not the first Menu Item.\n     */\n    protected override async getUpdateComplete(): Promise<boolean> {\n        const complete = (await super.getUpdateComplete()) as boolean;\n        await this.transitionPromise;\n        return complete;\n    }\n}\n"],
  "mappings": "qNAYA,OAEI,QAAAA,EAEA,mBAAAC,MAEG,gCACP,OACI,YAAAC,EACA,SAAAC,MACG,kDACP,MAAO,mDACP,OAAS,oBAAAC,MAAwB,4DACjC,OAAS,wBAAAC,MAA4B,kEAErC,OAAOC,MAAiB,kDACxB,OAAOC,MAAY,gBASZ,aAAM,aAAaN,CAAgB,CAAnC,kCAMH,KAAO,KAAO,GAEd,KAAU,cAAgB,IAAII,EAC1B,KACA,yCACJ,EAEA,KAAQ,kBAAoB,QAAQ,QAAQ,EAE5C,KAAQ,yBAA2B,IAAM,CAAC,EAgB1C,KAAQ,UAAY,GA9BpB,WAA2B,QAAyB,CAChD,MAAO,CAACC,EAAaC,CAAM,CAC/B,CAiBgB,OAAc,CAC1B,MAAMC,EAAiBJ,EAAiB,IAAI,EACxCI,EACAA,EAAe,MAAM,EACd,KAAK,SAAS,SAAW,EAChC,KAAK,KAAK,MAAM,EAEhB,MAAM,MAAM,CAEpB,CAIO,0BAAoC,CACvC,OAAK,KAAK,MACV,KAAK,MAAM,EACJ,IAFgB,KAAK,SAGhC,CAEO,OAAc,CACjB,KAAK,KAAO,GACP,KAAK,cAAc,SACpB,KAAK,eAAe,CAE5B,CAEQ,gBAAuB,CAC3B,KAAK,cACD,IAAI,MAAM,QAAS,CACf,QAAS,EACb,CAAC,CACL,CACJ,CAEU,6BAAoC,CACrC,KAAK,OACN,KAAK,yBAAyB,EAC9B,KAAK,eAAe,EAE5B,CAEU,yBAAgC,CAClC,KAAK,MACL,KAAK,yBAAyB,CAEtC,CAEmB,OAAOC,EAAqC,CAEvDA,EAAQ,IAAI,MAAM,GAClBA,EAAQ,IAAI,MAAM,IAAM,QACxB,KAAK,cAAc,UAEnB,KAAK,UAAY,GACjB,KAAK,kBAAoB,IAAI,QAASC,GAAQ,CAC1C,KAAK,yBAA2B,IAAM,CAClC,KAAK,UAAY,GACjBA,EAAI,CACR,CACJ,CAAC,GAEL,MAAM,OAAOD,CAAO,CACxB,CAEmB,QAAyB,CACxC,OAAOT;AAAA;AAAA,wBAES,KAAK,IAAI;AAAA,yBACR,KAAK,KAAK;AAAA,iCACF,KAAK,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA,iCAKhC,KAAK,uBAAuB;AAAA;AAAA;AAAA;AAAA,SAKzD,CAUA,MAAyB,mBAAsC,CAC3D,MAAMW,EAAY,MAAM,MAAM,kBAAkB,EAChD,aAAM,KAAK,kBACJA,CACX,CACJ,CA5GWC,EAAA,CADNV,EAAS,CAAE,KAAM,QAAS,QAAS,EAAK,CAAC,GALjC,KAMF,oBAYCU,EAAA,CADPT,EAAM,OAAO,GAjBL,KAkBD",
  "names": ["html", "SpectrumElement", "property", "query", "firstFocusableIn", "MatchMediaController", "modalStyles", "styles", "firstFocusable", "changes", "res", "complete", "__decorateClass"]
}
