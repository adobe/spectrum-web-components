{
  "version": 3,
  "sources": ["StatusLight.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    SizedMixin,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\nimport statusLightStyles from './status-light.css.js';\n\n/**\n * @element sp-status-light\n *\n * @slot - text label of the Status Light\n */\nexport class StatusLight extends SizedMixin(SpectrumElement, {\n    noDefaultSize: true,\n}) {\n    public static override get styles(): CSSResultArray {\n        return [statusLightStyles];\n    }\n\n    /**\n     * A status light in a disabled state shows that a status exists, but is not available in that circumstance. This can be used to maintain layout continuity and communicate that a status may become available later.\n     */\n    @property({ type: Boolean, reflect: true })\n    public disabled = false;\n\n    /**\n     * The visual variant to apply to this status light.\n     */\n    @property({ reflect: true })\n    public variant:\n        | 'negative'\n        | 'notice'\n        | 'positive'\n        | 'info'\n        | 'neutral'\n        | 'yellow'\n        | 'fuchsia'\n        | 'indigo'\n        | 'seafoam'\n        | 'chartreuse'\n        | 'magenta'\n        | 'celery'\n        | 'purple' = 'info';\n\n    protected override render(): TemplateResult {\n        return html`\n            <slot></slot>\n        `;\n    }\n\n    protected override updated(changes: PropertyValues): void {\n        super.updated(changes);\n        if (changes.has('disabled')) {\n            if (this.disabled) {\n                this.setAttribute('aria-disabled', 'true');\n            } else {\n                this.removeAttribute('aria-disabled');\n            }\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;AAYA;AAAA,EAEI;AAAA,EAEA;AAAA,EACA;AAAA,OAEG;AACP,SAAS,gBAAgB;AACzB,OAAO,uBAAuB;AAOvB,aAAM,oBAAoB,WAAW,iBAAiB;AAAA,EACzD,eAAe;AACnB,CAAC,EAAE;AAAA,EAFI;AAAA;AAWH,SAAO,WAAW;AAMlB,SAAO,UAaU;AAAA;AAAA,EA3BjB,WAA2B,SAAyB;AAChD,WAAO,CAAC,iBAAiB;AAAA,EAC7B;AAAA,EA2BmB,SAAyB;AACxC,WAAO;AAAA;AAAA;AAAA,EAGX;AAAA,EAEmB,QAAQ,SAA+B;AACtD,UAAM,QAAQ,OAAO;AACrB,QAAI,QAAQ,IAAI,UAAU,GAAG;AACzB,UAAI,KAAK,UAAU;AACf,aAAK,aAAa,iBAAiB,MAAM;AAAA,MAC7C,OAAO;AACH,aAAK,gBAAgB,eAAe;AAAA,MACxC;AAAA,IACJ;AAAA,EACJ;AACJ;AArCW;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GAVjC,YAWF;AAMA;AAAA,EADN,SAAS,EAAE,SAAS,KAAK,CAAC;AAAA,GAhBlB,YAiBF;",
  "names": []
}
