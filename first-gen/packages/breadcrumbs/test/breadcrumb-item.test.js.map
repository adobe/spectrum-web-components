{
  "version": 3,
  "sources": ["breadcrumb-item.test.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport { elementUpdated, expect, fixture, html } from '@open-wc/testing';\nimport { spy } from 'sinon';\nimport { BreadcrumbItem, BreadcrumbSelectDetail } from '../src/index.js';\nimport { testForLitDevWarnings } from '../../../test/testing-helpers.js';\n\nimport '@spectrum-web-components/breadcrumbs/sp-breadcrumbs.js';\nimport '@spectrum-web-components/breadcrumbs/sp-breadcrumb-item.js';\n\ndescribe('Breadcrumb Item', () => {\n    testForLitDevWarnings(\n        async () =>\n            await fixture<BreadcrumbItem>(html`\n                <sp-breadcrumb-item value=\"home\">Home</sp-breadcrumb-item>\n            `)\n    );\n    it('should render accessibly', async () => {\n        const el = await fixture<BreadcrumbItem>(html`\n            <sp-breadcrumb-item value=\"home\">Home</sp-breadcrumb-item>\n        `);\n\n        expect(el.getAttribute('role')).to.equal('listitem');\n    });\n\n    it('should render a disabled item', async () => {\n        const el = await fixture<BreadcrumbItem>(html`\n            <sp-breadcrumb-item value=\"home\" disabled>Home</sp-breadcrumb-item>\n        `);\n        expect(el.hasAttribute('aria-disabled')).to.be.true;\n    });\n\n    it('should manage aria-current', async () => {\n        const el = await fixture<BreadcrumbItem>(html`\n            <sp-breadcrumbs>\n                <sp-breadcrumb-item value=\"home\">Home</sp-breadcrumb-item>\n                <sp-breadcrumb-item value=\"products\">\n                    Products\n                </sp-breadcrumb-item>\n            </sp-breadcrumbs>\n        `);\n\n        await elementUpdated(el);\n\n        const currentItem = el.querySelector(\n            'sp-breadcrumb-item:nth-child(2)'\n        ) as BreadcrumbItem;\n        const otherItem = el.querySelector(\n            'sp-breadcrumb-item:nth-child(1)'\n        ) as BreadcrumbItem;\n\n        await elementUpdated(currentItem);\n        await elementUpdated(otherItem);\n\n        expect(currentItem.focusElement.hasAttribute('aria-current'), 'current')\n            .to.be.true;\n        expect(otherItem.focusElement.hasAttribute('aria-current'), 'other').to\n            .be.false;\n    });\n\n    it('should not emit change event if element is the last one', async () => {\n        const changeSpy = spy();\n        const el = await fixture<BreadcrumbItem>(html`\n            <sp-breadcrumb-item\n                isLastOfType\n                @breadcrumb-select=${(\n                    event: CustomEvent<BreadcrumbSelectDetail>\n                ) => changeSpy(event.detail.value)}\n                value=\"https://adobe.com/home\"\n            >\n                Home\n            </sp-breadcrumb-item>\n        `);\n\n        await elementUpdated(el);\n\n        el.click();\n        expect(changeSpy.callCount).to.equal(0);\n    });\n\n    it('should emit change event if href is not provided and element is not the last one', async () => {\n        const changeSpy = spy();\n        const el = await fixture<BreadcrumbItem>(html`\n            <sp-breadcrumb-item\n                @breadcrumb-select=${(\n                    event: CustomEvent<BreadcrumbSelectDetail>\n                ) => changeSpy(event.detail.value)}\n                value=\"home\"\n            >\n                Home\n            </sp-breadcrumb-item>\n        `);\n\n        await elementUpdated(el);\n\n        el.click();\n        expect(changeSpy.callCount).to.equal(1);\n        expect(changeSpy).to.have.been.calledWith('home');\n    });\n});\n"],
  "mappings": ";AAWA,SAAS,gBAAgB,QAAQ,SAAS,YAAY;AACtD,SAAS,WAAW;AAEpB,SAAS,6BAA6B;AAEtC,OAAO;AACP,OAAO;AAEP,SAAS,mBAAmB,MAAM;AAC9B;AAAA,IACI,YACI,MAAM,QAAwB;AAAA;AAAA,aAE7B;AAAA,EACT;AACA,KAAG,4BAA4B,YAAY;AACvC,UAAM,KAAK,MAAM,QAAwB;AAAA;AAAA,SAExC;AAED,WAAO,GAAG,aAAa,MAAM,CAAC,EAAE,GAAG,MAAM,UAAU;AAAA,EACvD,CAAC;AAED,KAAG,iCAAiC,YAAY;AAC5C,UAAM,KAAK,MAAM,QAAwB;AAAA;AAAA,SAExC;AACD,WAAO,GAAG,aAAa,eAAe,CAAC,EAAE,GAAG,GAAG;AAAA,EACnD,CAAC;AAED,KAAG,8BAA8B,YAAY;AACzC,UAAM,KAAK,MAAM,QAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOxC;AAED,UAAM,eAAe,EAAE;AAEvB,UAAM,cAAc,GAAG;AAAA,MACnB;AAAA,IACJ;AACA,UAAM,YAAY,GAAG;AAAA,MACjB;AAAA,IACJ;AAEA,UAAM,eAAe,WAAW;AAChC,UAAM,eAAe,SAAS;AAE9B,WAAO,YAAY,aAAa,aAAa,cAAc,GAAG,SAAS,EAClE,GAAG,GAAG;AACX,WAAO,UAAU,aAAa,aAAa,cAAc,GAAG,OAAO,EAAE,GAChE,GAAG;AAAA,EACZ,CAAC;AAED,KAAG,2DAA2D,YAAY;AACtE,UAAM,YAAY,IAAI;AACtB,UAAM,KAAK,MAAM,QAAwB;AAAA;AAAA;AAAA,qCAGZ,CACjB,UACC,UAAU,MAAM,OAAO,KAAK,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,SAKzC;AAED,UAAM,eAAe,EAAE;AAEvB,OAAG,MAAM;AACT,WAAO,UAAU,SAAS,EAAE,GAAG,MAAM,CAAC;AAAA,EAC1C,CAAC;AAED,KAAG,oFAAoF,YAAY;AAC/F,UAAM,YAAY,IAAI;AACtB,UAAM,KAAK,MAAM,QAAwB;AAAA;AAAA,qCAEZ,CACjB,UACC,UAAU,MAAM,OAAO,KAAK,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,SAKzC;AAED,UAAM,eAAe,EAAE;AAEvB,OAAG,MAAM;AACT,WAAO,UAAU,SAAS,EAAE,GAAG,MAAM,CAAC;AACtC,WAAO,SAAS,EAAE,GAAG,KAAK,KAAK,WAAW,MAAM;AAAA,EACpD,CAAC;AACL,CAAC;",
  "names": []
}
