{
  "version": 3,
  "sources": ["template.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { html, type TemplateResult } from '@spectrum-web-components/base';\nimport { spreadProps } from '../../../test/lit-helpers.js';\nimport { ifDefined } from '@spectrum-web-components/base/src/directives.js';\nimport '@spectrum-web-components/breadcrumbs/sp-breadcrumbs.js';\nimport '@spectrum-web-components/breadcrumbs/sp-breadcrumb-item.js';\n\nexport type StoryArgs = {\n    compact?: boolean;\n    disabled?: boolean;\n    label?: string;\n    'max-visible-items'?: number;\n    onChange: () => void;\n};\n\n// Some dummy folder structure\nconst dummyOrganizer = [\n    'Your stuff',\n    'Files',\n    'Team',\n    'In progress',\n    'Trend',\n    'Winter',\n    'Assets',\n    '18x24',\n];\n\nexport const getBreadcrumbsWithLinks = (count: number): TemplateResult[] => {\n    const breadcrumbs: TemplateResult[] = [];\n    for (let i = 0; i < count; i++) {\n        breadcrumbs.push(html`\n            <sp-breadcrumb-item href=${window.location.href}>\n                ${dummyOrganizer[i] || `Breadcrumb ${i}`}\n            </sp-breadcrumb-item>\n        `);\n    }\n    return breadcrumbs;\n};\n\nexport const getBreadcrumbs = (count: number): TemplateResult[] => {\n    const breadcrumbs: TemplateResult[] = [];\n    for (let i = 0; i < count; i++) {\n        breadcrumbs.push(html`\n            <sp-breadcrumb-item value=${i}>\n                ${dummyOrganizer[i] || `Breadcrumb ${i}`}\n            </sp-breadcrumb-item>\n        `);\n    }\n    return breadcrumbs;\n};\n\nexport const getResizableStyles = (): TemplateResult => {\n    return html`\n        <style>\n            .resizable-container {\n                border: 2px solid;\n                padding: 20px;\n                width: 300px;\n                resize: both;\n                overflow: auto;\n            }\n        </style>\n    `;\n};\n\nexport const Template = (args: StoryArgs): TemplateResult => html`\n    <sp-breadcrumbs\n        ${spreadProps(args)}\n        max-visible-items=${ifDefined(args['max-visible-items'])}\n        @change=${args.onChange}\n        ?compact=${args.compact}\n    >\n        <sp-breadcrumb-item value=\"0\">Your stuff</sp-breadcrumb-item>\n        <sp-breadcrumb-item ?disabled=${args.disabled} value=\"1\">\n            Files\n        </sp-breadcrumb-item>\n        <sp-breadcrumb-item value=\"2\">Team</sp-breadcrumb-item>\n        <sp-breadcrumb-item value=\"3\">In progress</sp-breadcrumb-item>\n    </sp-breadcrumbs>\n`;\n"],
  "mappings": ";AAYA,SAAS,YAAiC;AAC1C,SAAS,mBAAmB;AAC5B,SAAS,iBAAiB;AAC1B,OAAO;AACP,OAAO;AAWP,MAAM,iBAAiB;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAEO,aAAM,0BAA0B,CAAC,UAAoC;AACxE,QAAM,cAAgC,CAAC;AACvC,WAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC5B,gBAAY,KAAK;AAAA,uCACc,OAAO,SAAS,IAAI;AAAA,kBACzC,eAAe,CAAC,KAAK,cAAc,CAAC,EAAE;AAAA;AAAA,SAE/C;AAAA,EACL;AACA,SAAO;AACX;AAEO,aAAM,iBAAiB,CAAC,UAAoC;AAC/D,QAAM,cAAgC,CAAC;AACvC,WAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC5B,gBAAY,KAAK;AAAA,wCACe,CAAC;AAAA,kBACvB,eAAe,CAAC,KAAK,cAAc,CAAC,EAAE;AAAA;AAAA,SAE/C;AAAA,EACL;AACA,SAAO;AACX;AAEO,aAAM,qBAAqB,MAAsB;AACpD,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWX;AAEO,aAAM,WAAW,CAAC,SAAoC;AAAA;AAAA,UAEnD,YAAY,IAAI,CAAC;AAAA,4BACC,UAAU,KAAK,mBAAmB,CAAC,CAAC;AAAA,kBAC9C,KAAK,QAAQ;AAAA,mBACZ,KAAK,OAAO;AAAA;AAAA;AAAA,wCAGS,KAAK,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
