{
  "version": 3,
  "sources": ["Tabs.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n    css,\n    CSSResult,\n    CSSResultArray,\n    html,\n    PropertyValueMap,\n    PropertyValues,\n    SizedMixin,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport {\n    classMap,\n    ifDefined,\n} from '@spectrum-web-components/base/src/directives.js';\nimport { IntersectionController } from '@lit-labs/observers/intersection-controller.js';\nimport { ResizeController } from '@lit-labs/observers/resize-controller.js';\nimport { Tab } from './Tab.js';\nimport { Focusable } from '@spectrum-web-components/shared';\nimport { RovingTabindexController } from '@spectrum-web-components/reactive-controllers/src/RovingTabindex.js';\n\nimport tabStyles from './tabs.css.js';\nimport tabSizes from './tabs-sizes.css.js';\nimport { TabPanel } from './TabPanel.js';\n\n// Encapsulated for use both here and in TopNav\nexport const ScaledIndicator = {\n    baseSize: 100 as const,\n    noSelectionStyle: 'transform: translateX(0px) scaleX(0) scaleY(0)',\n\n    transformX(left: number, width: number): string {\n        const scale = width / this.baseSize;\n        return `transform: translateX(${left}px) scaleX(${scale});`;\n    },\n\n    transformY(top: number, height: number): string {\n        const scale = height / this.baseSize;\n        return `transform: translateY(${top}px) scaleY(${scale});`;\n    },\n\n    baseStyles(): CSSResult {\n        return css`\n            :host([direction='vertical-right']) #selection-indicator,\n            :host([direction='vertical']) #selection-indicator {\n                height: ${this.baseSize}px;\n            }\n            :host([dir][direction='horizontal']) #selection-indicator {\n                width: ${this.baseSize}px;\n            }\n        `;\n    },\n};\n\n/**\n * Given that the scroll needs to be on the right side of the viewport.\n * Returns the coordonate x it needs to scroll so that the tab with given index is visible.\n */\nexport function calculateScrollTargetForRightSide(\n    index: number,\n    direction: 'rtl' | 'ltr',\n    tabs: Tab[],\n    container: HTMLDivElement\n): number {\n    const nextIndex = index + (direction === 'rtl' ? -1 : 1);\n    const nextTab = tabs[nextIndex];\n    const viewportEnd = container.scrollLeft + container.offsetWidth;\n    return nextTab ? nextTab.offsetLeft - container.offsetWidth : viewportEnd;\n}\n\n/**\n * Given that the scroll needs to be on the left side of the viewport.\n * Returns the coordonate x it needs to scroll so that the tab with given index is visible.\n */\nexport function calculateScrollTargetForLeftSide(\n    index: number,\n    direction: 'rtl' | 'ltr',\n    tabs: Tab[],\n    container: HTMLDivElement\n): number {\n    const prevIndex = index + (direction === 'rtl' ? 1 : -1);\n    const prevTab = tabs[prevIndex];\n    const leftmostElement = direction === 'rtl' ? -container.offsetWidth : 0;\n    return prevTab ? prevTab.offsetLeft + prevTab.offsetWidth : leftmostElement;\n}\n\n/**\n * @element sp-tabs\n *\n * @slot - Tab elements to manage as a group\n * @slot tab-panel - Tab Panel elements related to the listed Tab elements\n * @csspart tablist - Container element for the slotted sp-tab elements\n *\n * @fires change - The selected Tab child has changed.\n */\nexport class Tabs extends SizedMixin(Focusable, { noDefaultSize: true }) {\n    public static override get styles(): CSSResultArray {\n        return [tabSizes, tabStyles, ScaledIndicator.baseStyles()];\n    }\n\n    /**\n     * Whether to activate a tab on keyboard focus or not.\n     *\n     * By default a tab is activated via a \"click\" interaction. This is specifically intended for when\n     * tab content cannot be displayed instantly, e.g. not all of the DOM content is available, etc.\n     * To learn more about \"Deciding When to Make Selection Automatically Follow Focus\", visit:\n     * https://w3c.github.io/aria-practices/#kbd_selection_follows_focus\n     */\n    @property({ type: Boolean })\n    public auto = false;\n\n    /**\n     * The tab items are displayed closer together.\n     */\n    @property({ type: Boolean, reflect: true })\n    public compact = false;\n\n    @property({ reflect: true })\n    public override dir!: 'ltr' | 'rtl';\n\n    @property({ reflect: true })\n    public direction: 'vertical' | 'vertical-right' | 'horizontal' =\n        'horizontal';\n\n    @property({ type: Boolean, reflect: true })\n    public emphasized = false;\n\n    @property()\n    public label = '';\n\n    @property({ type: Boolean })\n    public enableTabsScroll = false;\n\n    /**\n     * The tab list is displayed without a border.\n     */\n    @property({ type: Boolean, reflect: true })\n    public quiet = false;\n\n    @property({ attribute: false })\n    public selectionIndicatorStyle = ScaledIndicator.noSelectionStyle;\n\n    @property({ attribute: false })\n    public shouldAnimate = false;\n\n    @query('slot')\n    private slotEl!: HTMLSlotElement;\n\n    @query('#list')\n    private tabList!: HTMLDivElement;\n\n    @property({ reflect: true })\n    selected = '';\n\n    private set tabs(tabs: Tab[]) {\n        if (tabs === this.tabs) return;\n        this._tabs.forEach((tab) => {\n            this.resizeController.unobserve(tab);\n        });\n        tabs.forEach((tab) => {\n            this.resizeController.observe(tab);\n        });\n        this._tabs = tabs;\n        this.rovingTabindexController.clearElementCache();\n    }\n\n    private get tabs(): Tab[] {\n        return this._tabs;\n    }\n\n    private _tabs: Tab[] = [];\n\n    constructor() {\n        super();\n        new IntersectionController(this, {\n            config: {\n                root: null,\n                rootMargin: '0px',\n                threshold: [0, 1],\n            },\n            callback: () => {\n                this.updateSelectionIndicator();\n            },\n        });\n    }\n\n    protected resizeController = new ResizeController(this, {\n        callback: () => {\n            this.updateSelectionIndicator();\n        },\n    });\n\n    rovingTabindexController = new RovingTabindexController<Tab>(this, {\n        focusInIndex: (elements) => {\n            let focusInIndex = 0;\n            const firstFocusableElement = elements.find((el, index) => {\n                const focusInElement = this.selected\n                    ? el.value === this.selected\n                    : !el.disabled;\n                focusInIndex = index;\n                return focusInElement;\n            });\n            return firstFocusableElement ? focusInIndex : -1;\n        },\n        direction: () => 'both',\n        elementEnterAction: (el) => {\n            if (!this.auto) return;\n\n            this.shouldAnimate = true;\n            this.selectTarget(el);\n        },\n        elements: () => this.tabs,\n        isFocusableElement: (el) => !this.disabled && !el.disabled,\n        listenerScope: () => this.tabList,\n    });\n\n    /**\n     * @private\n     */\n    public override get focusElement(): Tab | this {\n        return this.rovingTabindexController.focusInElement || this;\n    }\n\n    private limitDeltaToInterval(min: number, max: number) {\n        return (delta: number): number => {\n            if (delta < min) return min;\n            if (delta > max) return max;\n            return delta;\n        };\n    }\n\n    /**\n     * Scrolls through the tabs component, on the X-axis, by a given ammount of pixels/ delta. The given delta is limited to the scrollable area of the tabs component.\n     * @param {number} delta - The ammount of pixels to scroll by. If the value is positive, the tabs will scroll to the right. If the value is negative, the tabs will scroll to the left.\n     * @param {ScrollBehavior} behavior - The scroll behavior to use. Defaults to 'smooth'.\n     */\n    public scrollTabs(\n        delta: number,\n        behavior: ScrollBehavior = 'smooth'\n    ): void {\n        if (delta === 0) return;\n\n        const { scrollLeft, clientWidth, scrollWidth } = this.tabList;\n        const dirLimit = scrollWidth - clientWidth - Math.abs(scrollLeft);\n\n        const limitDelta =\n            this.dir === 'ltr'\n                ? this.limitDeltaToInterval(-scrollLeft, dirLimit)\n                : this.limitDeltaToInterval(-dirLimit, Math.abs(scrollLeft));\n\n        this.tabList?.scrollBy({\n            left: limitDelta(delta),\n            top: 0,\n            behavior,\n        });\n    }\n\n    public get scrollState(): Record<string, boolean> {\n        if (this.tabList) {\n            const { scrollLeft, clientWidth, scrollWidth } = this.tabList;\n            const canScrollLeft = Math.abs(scrollLeft) > 0;\n            const canScrollRight =\n                Math.ceil(Math.abs(scrollLeft)) < scrollWidth - clientWidth;\n            return {\n                canScrollLeft:\n                    this.dir === 'ltr' ? canScrollLeft : canScrollRight,\n                canScrollRight:\n                    this.dir === 'ltr' ? canScrollRight : canScrollLeft,\n            };\n        }\n        return {};\n    }\n\n    override async getUpdateComplete(): Promise<boolean> {\n        const complete = await super.getUpdateComplete();\n\n        const tabs = [...this.children] as Tab[];\n        const tabUpdateCompletes = tabs.map((tab) => {\n            if (typeof tab.updateComplete !== 'undefined') {\n                return tab.updateComplete;\n            }\n            return Promise.resolve(true);\n        });\n\n        await Promise.all(tabUpdateCompletes);\n        return complete;\n    }\n\n    private getNecessaryAutoScroll(index: number): number {\n        const selectedTab = this.tabs[index];\n        const selectionEnd = selectedTab.offsetLeft + selectedTab.offsetWidth;\n        const viewportEnd = this.tabList.scrollLeft + this.tabList.offsetWidth;\n        const selectionStart = selectedTab.offsetLeft;\n        const viewportStart = this.tabList.scrollLeft;\n\n        if (selectionEnd > viewportEnd) {\n            // Selection is on the right side, not visible.\n            return calculateScrollTargetForRightSide(\n                index,\n                this.dir,\n                this.tabs,\n                this.tabList\n            );\n        } else if (selectionStart < viewportStart) {\n            // Selection is on the left side, not visible.\n            return calculateScrollTargetForLeftSide(\n                index,\n                this.dir,\n                this.tabs,\n                this.tabList\n            );\n        }\n\n        return -1;\n    }\n\n    public async scrollToSelection(): Promise<void> {\n        if (!this.enableTabsScroll || !this.selected) {\n            return;\n        }\n\n        await this.updateComplete;\n\n        const selectedIndex = this.tabs.findIndex(\n            (tab) => tab.value === this.selected\n        );\n\n        if (selectedIndex !== -1 && this.tabList) {\n            // We have a selection, calculate the scroll needed to bring it into view\n            const scrollTarget = this.getNecessaryAutoScroll(selectedIndex);\n\n            // scrollTarget = -1 means it is already into view.\n            if (scrollTarget !== -1) {\n                this.tabList.scrollTo({ left: scrollTarget });\n            }\n        }\n    }\n\n    protected override updated(\n        changedProperties: PropertyValueMap<this>\n    ): void {\n        super.updated(changedProperties);\n\n        if (changedProperties.has('selected')) {\n            this.scrollToSelection();\n        }\n    }\n\n    protected managePanels({\n        target,\n    }: Event & { target: HTMLSlotElement }): void {\n        const panels = target.assignedElements() as TabPanel[];\n        panels.map((panel) => {\n            const { value, id } = panel;\n            const tab = this.querySelector(`[role=\"tab\"][value=\"${value}\"]`);\n            if (tab) {\n                tab.setAttribute('aria-controls', id);\n                panel.setAttribute('aria-labelledby', tab.id);\n            }\n            panel.selected = value === this.selected;\n        });\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <div\n                class=${classMap({ scroll: this.enableTabsScroll })}\n                aria-label=${ifDefined(this.label ? this.label : undefined)}\n                @click=${this.onClick}\n                @keydown=${this.onKeyDown}\n                @scroll=${this.onTabsScroll}\n                id=\"list\"\n                role=\"tablist\"\n                part=\"tablist\"\n            >\n                <slot @slotchange=${this.onSlotChange}></slot>\n                <div\n                    id=\"selection-indicator\"\n                    class=${ifDefined(\n                        this.shouldAnimate ? undefined : 'first-position'\n                    )}\n                    style=${this.selectionIndicatorStyle}\n                    role=\"presentation\"\n                ></div>\n            </div>\n            <slot name=\"tab-panel\" @slotchange=${this.managePanels}></slot>\n        `;\n    }\n\n    protected override willUpdate(changes: PropertyValues): void {\n        if (!this.hasUpdated) {\n            const selectedChild = this.querySelector(\n                ':scope > [selected]'\n            ) as Tab;\n            if (selectedChild) {\n                this.selectTarget(selectedChild);\n            }\n        }\n\n        super.willUpdate(changes);\n        if (changes.has('selected')) {\n            if (this.tabs.length) {\n                this.updateCheckedState();\n            }\n            if (changes.get('selected')) {\n                const previous = this.querySelector(\n                    `[role=\"tabpanel\"][value=\"${changes.get('selected')}\"]`\n                ) as TabPanel;\n                if (previous) previous.selected = false;\n            }\n            const next = this.querySelector(\n                `[role=\"tabpanel\"][value=\"${this.selected}\"]`\n            ) as TabPanel;\n            if (next) next.selected = true;\n        }\n        if (changes.has('direction')) {\n            if (this.direction === 'horizontal') {\n                this.removeAttribute('aria-orientation');\n            } else {\n                this.setAttribute('aria-orientation', 'vertical');\n            }\n        }\n        if (changes.has('dir')) {\n            this.updateSelectionIndicator();\n        }\n        if (changes.has('disabled')) {\n            if (this.disabled) {\n                this.setAttribute('aria-disabled', 'true');\n            } else {\n                this.removeAttribute('aria-disabled');\n            }\n        }\n        if (\n            !this.shouldAnimate &&\n            typeof changes.get('shouldAnimate') !== 'undefined'\n        ) {\n            this.shouldAnimate = true;\n        }\n    }\n\n    private onTabsScroll = (): void => {\n        this.dispatchEvent(\n            new Event('sp-tabs-scroll', {\n                bubbles: true,\n                composed: true,\n            })\n        );\n    };\n\n    private onClick = (event: Event): void => {\n        if (this.disabled) {\n            return;\n        }\n        const target = event\n            .composedPath()\n            .find((el) => (el as Tab).parentElement === this) as Tab;\n        if (!target || target.disabled) {\n            return;\n        }\n        this.shouldAnimate = true;\n        this.selectTarget(target);\n    };\n\n    private onKeyDown = (event: KeyboardEvent): void => {\n        if (event.code === 'Enter' || event.code === 'Space') {\n            event.preventDefault();\n            const target = event.target as HTMLElement;\n            if (target) {\n                this.selectTarget(target);\n            }\n        }\n    };\n\n    private selectTarget(target: HTMLElement): void {\n        const value = target.getAttribute('value');\n        if (value) {\n            const selected = this.selected;\n            this.selected = value;\n            const applyDefault = this.dispatchEvent(\n                new Event('change', {\n                    cancelable: true,\n                })\n            );\n            if (!applyDefault) {\n                this.selected = selected;\n            }\n        }\n    }\n\n    private onSlotChange(): void {\n        this.tabs = this.slotEl\n            .assignedElements()\n            .filter((el) => el.getAttribute('role') === 'tab') as Tab[];\n        this.updateCheckedState();\n    }\n\n    private updateCheckedState = (): void => {\n        this.tabs.forEach((element) => {\n            element.removeAttribute('selected');\n        });\n\n        if (this.selected) {\n            const currentChecked = this.tabs.find(\n                (el) => el.value === this.selected\n            );\n\n            if (currentChecked) {\n                currentChecked.selected = true;\n            } else {\n                this.selected = '';\n            }\n        } else {\n            const firstTab = this.tabs[0];\n            if (firstTab) {\n                firstTab.setAttribute('tabindex', '0');\n            }\n        }\n\n        this.updateSelectionIndicator();\n    };\n\n    private updateSelectionIndicator = async (): Promise<void> => {\n        const selectedElement = this.tabs.find((el) => el.selected);\n        if (!selectedElement) {\n            this.selectionIndicatorStyle = ScaledIndicator.noSelectionStyle;\n            return;\n        }\n        await Promise.all([\n            selectedElement.updateComplete,\n            document.fonts ? document.fonts.ready : Promise.resolve(),\n        ]);\n        const { width, height } = selectedElement.getBoundingClientRect();\n\n        this.selectionIndicatorStyle =\n            this.direction === 'horizontal'\n                ? ScaledIndicator.transformX(selectedElement.offsetLeft, width)\n                : ScaledIndicator.transformY(selectedElement.offsetTop, height);\n    };\n\n    public override connectedCallback(): void {\n        super.connectedCallback();\n        window.addEventListener('resize', this.updateSelectionIndicator);\n        if ('fonts' in document) {\n            (\n                document as unknown as {\n                    fonts: {\n                        addEventListener: (\n                            name: string,\n                            callback: () => void\n                        ) => void;\n                    };\n                }\n            ).fonts.addEventListener(\n                'loadingdone',\n                this.updateSelectionIndicator\n            );\n        }\n    }\n\n    public override disconnectedCallback(): void {\n        window.removeEventListener('resize', this.updateSelectionIndicator);\n        if ('fonts' in document) {\n            (\n                document as unknown as {\n                    fonts: {\n                        removeEventListener: (\n                            name: string,\n                            callback: () => void\n                        ) => void;\n                    };\n                }\n            ).fonts.removeEventListener(\n                'loadingdone',\n                this.updateSelectionIndicator\n            );\n        }\n        super.disconnectedCallback();\n    }\n}\n"],
  "mappings": "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",
  "names": ["css", "html", "SizedMixin", "property", "query", "classMap", "ifDefined", "IntersectionController", "ResizeController", "Focusable", "RovingTabindexController", "tabStyles", "tabSizes", "left", "width", "scale", "top", "height", "index", "direction", "tabs", "container", "nextIndex", "nextTab", "viewportEnd", "prevIndex", "prevTab", "leftmostElement", "elements", "focusInIndex", "el", "focusInElement", "event", "target", "element", "currentChecked", "firstTab", "selectedElement", "tab", "min", "max", "delta", "behavior", "_a", "scrollLeft", "clientWidth", "scrollWidth", "dirLimit", "limitDelta", "canScrollLeft", "canScrollRight", "complete", "tabUpdateCompletes", "selectedTab", "selectionEnd", "selectionStart", "viewportStart", "selectedIndex", "scrollTarget", "changedProperties", "panel", "value", "id", "changes", "selectedChild", "previous", "next", "selected", "__decorateClass"]
}
