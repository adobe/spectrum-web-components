"use strict";var f=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var o=(a,l,t,e)=>{for(var i=e>1?void 0:e?p(l,t):l,s=a.length-1,r;s>=0;s--)(r=a[s])&&(i=(e?r(l,t,i):r(i))||i);return e&&i&&f(l,t,i),i};import{css as m,html as v,SizedMixin as S}from"@spectrum-web-components/base";import{property as n,query as u}from"@spectrum-web-components/base/src/decorators.js";import{classMap as g,ifDefined as h}from"@spectrum-web-components/base/src/directives.js";import{IntersectionController as y}from"@lit-labs/observers/intersection-controller.js";import{ResizeController as T}from"@lit-labs/observers/resize-controller.js";import{Focusable as E}from"@spectrum-web-components/shared";import{RovingTabindexController as L}from"@spectrum-web-components/reactive-controllers/src/RovingTabindex.js";import C from"./tabs.css.js";import I from"./tabs-sizes.css.js";export const ScaledIndicator={baseSize:100,noSelectionStyle:"transform: translateX(0px) scaleX(0) scaleY(0)",transformX(a,l){const t=l/this.baseSize;return`transform: translateX(${a}px) scaleX(${t});`},transformY(a,l){const t=l/this.baseSize;return`transform: translateY(${a}px) scaleY(${t});`},baseStyles(){return m`
            :host([direction='vertical-right']) #selection-indicator,
            :host([direction='vertical']) #selection-indicator {
                height: ${this.baseSize}px;
            }
            :host([dir][direction='horizontal']) #selection-indicator {
                width: ${this.baseSize}px;
            }
        `}};export function calculateScrollTargetForRightSide(a,l,t,e){const i=a+(l==="rtl"?-1:1),s=t[i],r=e.scrollLeft+e.offsetWidth;return s?s.offsetLeft-e.offsetWidth:r}export function calculateScrollTargetForLeftSide(a,l,t,e){const i=a+(l==="rtl"?1:-1),s=t[i],r=l==="rtl"?-e.offsetWidth:0;return s?s.offsetLeft+s.offsetWidth:r}export class Tabs extends S(E,{noDefaultSize:!0}){constructor(){super();this.auto=!1;this.compact=!1;this.direction="horizontal";this.emphasized=!1;this.label="";this.enableTabsScroll=!1;this.quiet=!1;this.selectionIndicatorStyle=ScaledIndicator.noSelectionStyle;this.shouldAnimate=!1;this.selected="";this._tabs=[];this.resizeController=new T(this,{callback:()=>{this.updateSelectionIndicator()}});this.rovingTabindexController=new L(this,{focusInIndex:t=>{let e=0;return t.find((s,r)=>{const c=this.selected?s.value===this.selected:!s.disabled;return e=r,c})?e:-1},direction:()=>"both",elementEnterAction:t=>{this.auto&&(this.shouldAnimate=!0,this.selectTarget(t))},elements:()=>this.tabs,isFocusableElement:t=>!this.disabled&&!t.disabled,listenerScope:()=>this.tabList});this.onTabsScroll=()=>{this.dispatchEvent(new Event("sp-tabs-scroll",{bubbles:!0,composed:!0}))};this.onClick=t=>{if(this.disabled)return;const e=t.composedPath().find(i=>i.parentElement===this);!e||e.disabled||(this.shouldAnimate=!0,this.selectTarget(e))};this.onKeyDown=t=>{if(t.code==="Enter"||t.code==="Space"){t.preventDefault();const e=t.target;e&&this.selectTarget(e)}};this.updateCheckedState=()=>{if(this.tabs.forEach(t=>{t.removeAttribute("selected")}),this.selected){const t=this.tabs.find(e=>e.value===this.selected);t?t.selected=!0:this.selected=""}else{const t=this.tabs[0];t&&t.setAttribute("tabindex","0")}this.updateSelectionIndicator()};this.updateSelectionIndicator=async()=>{const t=this.tabs.find(s=>s.selected);if(!t){this.selectionIndicatorStyle=ScaledIndicator.noSelectionStyle;return}await Promise.all([t.updateComplete,document.fonts?document.fonts.ready:Promise.resolve()]);const{width:e,height:i}=t.getBoundingClientRect();this.selectionIndicatorStyle=this.direction==="horizontal"?ScaledIndicator.transformX(t.offsetLeft,e):ScaledIndicator.transformY(t.offsetTop,i)};new y(this,{config:{root:null,rootMargin:"0px",threshold:[0,1]},callback:()=>{this.updateSelectionIndicator()}})}static get styles(){return[I,C,ScaledIndicator.baseStyles()]}set tabs(t){t!==this.tabs&&(this._tabs.forEach(e=>{this.resizeController.unobserve(e)}),t.forEach(e=>{this.resizeController.observe(e)}),this._tabs=t,this.rovingTabindexController.clearElementCache())}get tabs(){return this._tabs}get focusElement(){return this.rovingTabindexController.focusInElement||this}limitDeltaToInterval(t,e){return i=>i<t?t:i>e?e:i}scrollTabs(t,e="smooth"){var d;if(t===0)return;const{scrollLeft:i,clientWidth:s,scrollWidth:r}=this.tabList,c=r-s-Math.abs(i),b=this.dir==="ltr"?this.limitDeltaToInterval(-i,c):this.limitDeltaToInterval(-c,Math.abs(i));(d=this.tabList)==null||d.scrollBy({left:b(t),top:0,behavior:e})}get scrollState(){if(this.tabList){const{scrollLeft:t,clientWidth:e,scrollWidth:i}=this.tabList,s=Math.abs(t)>0,r=Math.ceil(Math.abs(t))<i-e;return{canScrollLeft:this.dir==="ltr"?s:r,canScrollRight:this.dir==="ltr"?r:s}}return{}}async getUpdateComplete(){const t=await super.getUpdateComplete(),i=[...this.children].map(s=>typeof s.updateComplete!="undefined"?s.updateComplete:Promise.resolve(!0));return await Promise.all(i),t}getNecessaryAutoScroll(t){const e=this.tabs[t],i=e.offsetLeft+e.offsetWidth,s=this.tabList.scrollLeft+this.tabList.offsetWidth,r=e.offsetLeft,c=this.tabList.scrollLeft;return i>s?calculateScrollTargetForRightSide(t,this.dir,this.tabs,this.tabList):r<c?calculateScrollTargetForLeftSide(t,this.dir,this.tabs,this.tabList):-1}async scrollToSelection(){if(!this.enableTabsScroll||!this.selected)return;await this.updateComplete;const t=this.tabs.findIndex(e=>e.value===this.selected);if(t!==-1&&this.tabList){const e=this.getNecessaryAutoScroll(t);e!==-1&&this.tabList.scrollTo({left:e})}}updated(t){super.updated(t),t.has("selected")&&this.scrollToSelection()}managePanels({target:t}){t.assignedElements().map(i=>{const{value:s,id:r}=i,c=this.querySelector(`[role="tab"][value="${s}"]`);c&&(c.setAttribute("aria-controls",r),i.setAttribute("aria-labelledby",c.id)),i.selected=s===this.selected})}render(){return v`
            <div
                class=${g({scroll:this.enableTabsScroll})}
                aria-label=${h(this.label?this.label:void 0)}
                @click=${this.onClick}
                @keydown=${this.onKeyDown}
                @scroll=${this.onTabsScroll}
                id="list"
                role="tablist"
                part="tablist"
            >
                <slot @slotchange=${this.onSlotChange}></slot>
                <div
                    id="selection-indicator"
                    class=${h(this.shouldAnimate?void 0:"first-position")}
                    style=${this.selectionIndicatorStyle}
                    role="presentation"
                ></div>
            </div>
            <slot name="tab-panel" @slotchange=${this.managePanels}></slot>
        `}willUpdate(t){if(!this.hasUpdated){const e=this.querySelector(":scope > [selected]");e&&this.selectTarget(e)}if(super.willUpdate(t),t.has("selected")){if(this.tabs.length&&this.updateCheckedState(),t.get("selected")){const i=this.querySelector(`[role="tabpanel"][value="${t.get("selected")}"]`);i&&(i.selected=!1)}const e=this.querySelector(`[role="tabpanel"][value="${this.selected}"]`);e&&(e.selected=!0)}t.has("direction")&&(this.direction==="horizontal"?this.removeAttribute("aria-orientation"):this.setAttribute("aria-orientation","vertical")),t.has("dir")&&this.updateSelectionIndicator(),t.has("disabled")&&(this.disabled?this.setAttribute("aria-disabled","true"):this.removeAttribute("aria-disabled")),!this.shouldAnimate&&typeof t.get("shouldAnimate")!="undefined"&&(this.shouldAnimate=!0)}selectTarget(t){const e=t.getAttribute("value");if(e){const i=this.selected;this.selected=e,this.dispatchEvent(new Event("change",{cancelable:!0}))||(this.selected=i)}}onSlotChange(){this.tabs=this.slotEl.assignedElements().filter(t=>t.getAttribute("role")==="tab"),this.updateCheckedState()}connectedCallback(){super.connectedCallback(),window.addEventListener("resize",this.updateSelectionIndicator),"fonts"in document&&document.fonts.addEventListener("loadingdone",this.updateSelectionIndicator)}disconnectedCallback(){window.removeEventListener("resize",this.updateSelectionIndicator),"fonts"in document&&document.fonts.removeEventListener("loadingdone",this.updateSelectionIndicator),super.disconnectedCallback()}}o([n({type:Boolean})],Tabs.prototype,"auto",2),o([n({type:Boolean,reflect:!0})],Tabs.prototype,"compact",2),o([n({reflect:!0})],Tabs.prototype,"dir",2),o([n({reflect:!0})],Tabs.prototype,"direction",2),o([n({type:Boolean,reflect:!0})],Tabs.prototype,"emphasized",2),o([n()],Tabs.prototype,"label",2),o([n({type:Boolean})],Tabs.prototype,"enableTabsScroll",2),o([n({type:Boolean,reflect:!0})],Tabs.prototype,"quiet",2),o([n({attribute:!1})],Tabs.prototype,"selectionIndicatorStyle",2),o([n({attribute:!1})],Tabs.prototype,"shouldAnimate",2),o([u("slot")],Tabs.prototype,"slotEl",2),o([u("#list")],Tabs.prototype,"tabList",2),o([n({reflect:!0})],Tabs.prototype,"selected",2);
//# sourceMappingURL=Tabs.js.map
