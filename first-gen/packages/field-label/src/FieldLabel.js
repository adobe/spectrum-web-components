"use strict";var c=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var o=(n,l,e,i)=>{for(var t=i>1?void 0:i?d(l,e):l,s=n.length-1,r;s>=0;s--)(r=n[s])&&(t=(i?r(l,e,t):r(t))||t);return i&&t&&c(l,e,t),t};import{html as p,nothing as u,SizedMixin as m,SpectrumElement as b}from"@spectrum-web-components/base";import{property as a,query as f}from"@spectrum-web-components/base/src/decorators.js";import{randomID as h}from"@spectrum-web-components/shared/src/random-id.js";import"@spectrum-web-components/icons-ui/icons/sp-icon-asterisk100.js";import g from"@spectrum-web-components/icon/src/spectrum-icon-asterisk.css.js";import{conditionAttributeWithId as y,conditionAttributeWithoutId as v}from"@spectrum-web-components/base/src/condition-attribute-with-id.js";import{ElementResolutionController as E,elementResolverUpdatedSymbol as T}from"@spectrum-web-components/reactive-controllers/src/ElementResolution.js";import A from"./field-label.css.js";export class FieldLabel extends m(b,{noDefaultSize:!0}){constructor(){super(...arguments);this.disabled=!1;this.id="";this.for="";this.required=!1;this.resolvedElement=new E(this)}static get styles(){return[A,g]}handleClick(e){if(!this.target||this.disabled||e.defaultPrevented)return;this.target.focus();const i=this.getRootNode(),t=this.target,s=t.getRootNode(),r=s.host;s===i&&t.forceFocusVisible?t.forceFocusVisible():r&&r.forceFocusVisible&&r.forceFocusVisible()}applyTargetLabel(e){if(this.target=e||this.target,this.target){const i=this.target.applyFocusElementLabel,t=this.target.focusElement||this.target,s=t.getRootNode();typeof i!="undefined"?i(this.labelText,this):s===this.getRootNode()?(e?y:v)(t,"aria-labelledby",[this.id]):e?t.setAttribute("aria-label",this.labelText):t.removeAttribute("aria-label")}}async manageTarget(){this.applyTargetLabel();const e=this.resolvedElement.element;if(!e){this.target=e;return}e.localName.search("-")>0&&await customElements.whenDefined(e.localName),typeof e.updateComplete!="undefined"&&await e.updateComplete,this.applyTargetLabel(e)}get labelText(){const e=this.slotEl.assignedNodes({flatten:!0});return e.length?e.map(t=>(t.textContent||"").trim()).join(" "):""}render(){return p`
            <label>
                <slot></slot>
                ${this.required?p`
                          <sp-icon-asterisk100
                              class="required-icon spectrum-UIIcon-Asterisk100"
                          ></sp-icon-asterisk100>
                      `:u}
            </label>
        `}firstUpdated(e){super.firstUpdated(e),this.addEventListener("click",this.handleClick)}willUpdate(e){this.hasAttribute("id")||this.setAttribute("id",`${this.tagName.toLowerCase()}-${h()}`),e.has("for")&&(this.resolvedElement.selector=this.for?`#${this.for}`:""),(e.has("id")||e.has(T))&&this.manageTarget()}}o([a({type:Boolean,reflect:!0})],FieldLabel.prototype,"disabled",2),o([a({type:String})],FieldLabel.prototype,"id",2),o([a({type:String})],FieldLabel.prototype,"for",2),o([a({type:Boolean,reflect:!0})],FieldLabel.prototype,"required",2),o([f("slot")],FieldLabel.prototype,"slotEl",2),o([a({type:String,reflect:!0,attribute:"side-aligned"})],FieldLabel.prototype,"sideAligned",2);
//# sourceMappingURL=FieldLabel.js.map
