{
  "version": 3,
  "sources": ["AlertDialog.ts"],
  "sourcesContent": ["/**\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {\n    CSSResultArray,\n    html,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport '@spectrum-web-components/button/sp-button.js';\nimport { FocusVisiblePolyfillMixin } from '@spectrum-web-components/shared/src/focus-visible.js';\nimport { randomID } from '@spectrum-web-components/shared/src/random-id.js';\nimport { conditionAttributeWithId } from '@spectrum-web-components/base/src/condition-attribute-with-id.js';\nimport { ResizeController } from '@lit-labs/observers/resize-controller.js';\nimport alertStyles from './alert-dialog.css.js';\n\nexport type AlertDialogVariants =\n    | 'confirmation'\n    | 'information'\n    | 'warning'\n    | 'error'\n    | 'destructive'\n    | 'secondary'\n    | '';\n\nexport const alertDialogVariants: AlertDialogVariants[] = [\n    'confirmation',\n    'information',\n    'warning',\n    'error',\n    'destructive',\n    'secondary',\n];\n\nfunction gatherAppliedIdsFromSlottedChildren(\n    slot: HTMLSlotElement,\n    idBase: string\n): string[] {\n    const assignedElements = slot.assignedElements();\n    const ids: string[] = [];\n    assignedElements.forEach((el) => {\n        if (el.id) {\n            ids.push(el.id);\n        } else {\n            const id = idBase + `-${randomID()}`;\n            el.id = id;\n            ids.push(id);\n        }\n    });\n    return ids;\n}\nexport class AlertDialog extends FocusVisiblePolyfillMixin(SpectrumElement) {\n    public static override get styles(): CSSResultArray {\n        return [alertStyles];\n    }\n\n    @query('.content')\n    private contentElement!: HTMLDivElement;\n\n    private resizeController = new ResizeController(this, {\n        callback: () => {\n            this.shouldManageTabOrderForScrolling();\n        },\n    });\n\n    public _variant: AlertDialogVariants = '';\n\n    @property({ type: String, reflect: true })\n    public set variant(variant: AlertDialogVariants) {\n        if (variant === this.variant) {\n            return;\n        }\n        const oldValue = this.variant;\n        if (alertDialogVariants.includes(variant)) {\n            this.setAttribute('variant', variant);\n            this._variant = variant;\n        } else {\n            this.removeAttribute('variant');\n            this._variant = '';\n        }\n        this.requestUpdate('variant', oldValue);\n    }\n\n    public get variant(): AlertDialogVariants {\n        return this._variant;\n    }\n\n    protected renderIcon(): TemplateResult {\n        switch (this.variant) {\n            case 'warning':\n            case 'error':\n                return html`\n                    <sp-icon-alert class=\"icon\"></sp-icon-alert>\n                `;\n\n            default:\n                return html``;\n        }\n    }\n\n    protected renderHeading(): TemplateResult {\n        return html`\n            <slot name=\"heading\" @slotchange=${this.onHeadingSlotchange}></slot>\n        `;\n    }\n\n    protected renderContent(): TemplateResult {\n        return html`\n            <div class=\"content\">\n                <slot @slotchange=${this.onContentSlotChange}></slot>\n            </div>\n        `;\n    }\n\n    static instanceCount = 0;\n    private labelledbyId = `sp-dialog-label-${AlertDialog.instanceCount++}`;\n    private conditionLabelledby?: () => void;\n    private conditionDescribedby?: () => void;\n\n    private onHeadingSlotchange({\n        target,\n    }: Event & { target: HTMLSlotElement }): void {\n        if (this.conditionLabelledby) {\n            this.conditionLabelledby();\n            delete this.conditionLabelledby;\n        }\n        const ids = gatherAppliedIdsFromSlottedChildren(\n            target,\n            this.labelledbyId\n        );\n        if (ids.length) {\n            this.conditionLabelledby = conditionAttributeWithId(\n                this,\n                'aria-labelledby',\n                ids\n            );\n        }\n    }\n\n    public shouldManageTabOrderForScrolling = (): void => {\n        if (!this.contentElement) return;\n\n        const { offsetHeight, scrollHeight } = this.contentElement;\n        if (offsetHeight < scrollHeight) {\n            this.contentElement.tabIndex = 0;\n        } else {\n            this.contentElement.removeAttribute('tabindex');\n        }\n    };\n\n    private describedbyId = `sp-dialog-description-${AlertDialog.instanceCount++}`;\n\n    protected onContentSlotChange({\n        target,\n    }: Event & { target: HTMLSlotElement }): void {\n        requestAnimationFrame(() => {\n            // Can happen more than once. Take this.contentElement out\n            // of the observer before adding it again.\n            this.resizeController.unobserve(this.contentElement);\n            this.resizeController.observe(this.contentElement);\n        });\n        if (this.conditionDescribedby) {\n            this.conditionDescribedby();\n            delete this.conditionDescribedby;\n        }\n        const ids = gatherAppliedIdsFromSlottedChildren(\n            target,\n            this.describedbyId\n        );\n        if (ids.length && ids.length < 4) {\n            this.conditionDescribedby = conditionAttributeWithId(\n                this,\n                'aria-describedby',\n                ids\n            );\n        } else if (!ids.length) {\n            const idProvided = !!this.id;\n            if (!idProvided) this.id = this.describedbyId;\n            const conditionDescribedby = conditionAttributeWithId(\n                this,\n                'aria-describedby',\n                this.id\n            );\n            this.conditionDescribedby = () => {\n                conditionDescribedby();\n                if (!idProvided) {\n                    this.removeAttribute('id');\n                }\n            };\n        }\n    }\n\n    protected renderButtons(): TemplateResult {\n        return html`\n            <sp-button-group class=\"button-group\">\n                <slot name=\"button\"></slot>\n            </sp-button-group>\n        `;\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <div class=\"grid\">\n                <div class=\"header\">\n                    ${this.renderHeading()} ${this.renderIcon()}\n                </div>\n                <sp-divider size=\"m\" class=\"divider\"></sp-divider>\n                ${this.renderContent()} ${this.renderButtons()}\n            </div>\n        `;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
