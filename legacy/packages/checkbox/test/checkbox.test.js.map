{
  "version": 3,
  "sources": ["checkbox.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport '@spectrum-web-components/checkbox/sp-checkbox.js';\nimport { Checkbox } from '../';\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    triggerBlurFor,\n    waitUntil,\n} from '@open-wc/testing';\nimport '@spectrum-web-components/shared/src/focus-visible.js';\nimport { testForLitDevWarnings } from '../../../test/testing-helpers.js';\nimport { a11ySnapshot, findAccessibilityNode } from '@web/test-runner-commands';\n\nfunction inputForCheckbox(checkbox: Checkbox): HTMLInputElement {\n    if (!checkbox.shadowRoot) throw new Error('No shadowRoot');\n    return checkbox.shadowRoot.querySelector('#input') as HTMLInputElement;\n}\n\nfunction labelForCheckbox(checkbox: Checkbox): HTMLLabelElement {\n    if (!checkbox.shadowRoot) throw new Error('No shadowRoot');\n    const labelEl = checkbox.shadowRoot.querySelector('label');\n    if (!labelEl) {\n        throw new Error('Failed to find label in shadowRoot');\n    }\n    return labelEl;\n}\n\nfunction labelNodeForCheckbox(checkbox: Checkbox): Node {\n    if (!checkbox.shadowRoot) throw new Error('No shadowRoot');\n    const slotEl = checkbox.shadowRoot.querySelector('slot');\n    if (!slotEl) {\n        throw new Error('Failed to find slot in shadowRoot');\n    }\n    return slotEl.assignedNodes()[0];\n}\ndescribe('Checkbox', () => {\n    let testFixture: HTMLDivElement;\n\n    beforeEach(async () => {\n        testFixture = await fixture<HTMLDivElement>(html`\n            <div>\n                <div id=\"test-checkbox\">\n                    <sp-checkbox id=\"checkbox0\" tabindex=\"5\">\n                        Component\n                    </sp-checkbox>\n                    <sp-checkbox id=\"checkbox1\" tabindex=\"2\" checked>\n                        Check 1\n                    </sp-checkbox>\n                    <sp-checkbox id=\"checkbox2\" tabindex=\"3\" disabled>\n                        Check 2\n                    </sp-checkbox>\n                    <sp-checkbox id=\"checkbox3\" tabindex=\"1\" autofocus>\n                        Check 3\n                    </sp-checkbox>\n                    <sp-checkbox id=\"checkbox4\" tabindex=\"0\">\n                        Check 4\n                    </sp-checkbox>\n                    <sp-checkbox id=\"checkbox5\" tabindex=\"-1\">\n                        Check 5\n                    </sp-checkbox>\n                </div>\n            </div>\n        `);\n    });\n\n    it('loads', async () => {\n        const el = testFixture.querySelector('sp-checkbox') as Checkbox;\n        expect(el).to.not.equal(undefined);\n        const textNode = labelNodeForCheckbox(el);\n        const content = (textNode.textContent || '').trim();\n        expect(content).to.equal('Component');\n    });\n    testForLitDevWarnings(\n        async () =>\n            await fixture<Checkbox>(html`\n                <sp-checkbox>Not Checked</sp-checkbox>\n            `)\n    );\n\n    it('loads default checkbox accessibly', async () => {\n        const el = await fixture<Checkbox>(html`\n            <sp-checkbox>Not Checked</sp-checkbox>\n        `);\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n\n        const labelEl = labelForCheckbox(el);\n        const inputEl = inputForCheckbox(el);\n\n        expect(labelEl.getAttribute('for')).to.equal(inputEl.id);\n        expect(inputEl.checked).to.be.false;\n        expect(inputEl.indeterminate).to.be.false;\n\n        type NamedRoledAndCheckedNode = {\n            name: string;\n            role: string;\n            checked: boolean;\n        };\n        const snapshot = (await a11ySnapshot(\n            {}\n        )) as unknown as NamedRoledAndCheckedNode & {\n            children: NamedRoledAndCheckedNode[];\n        };\n        expect(\n            findAccessibilityNode<NamedRoledAndCheckedNode>(\n                snapshot,\n                (node) =>\n                    node.role === 'checkbox' &&\n                    !node.checked &&\n                    node.name === 'Not Checked'\n            ),\n            'Has a named and not checked \"checkbox\" element'\n        ).to.not.be.null;\n    });\n\n    it('loads `checked` checkbox accessibly', async () => {\n        const el = await fixture<Checkbox>(html`\n            <sp-checkbox checked>Checked</sp-checkbox>\n        `);\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n\n        const labelEl = labelForCheckbox(el);\n        const inputEl = inputForCheckbox(el);\n\n        expect(labelEl.getAttribute('for')).to.equal(inputEl.id);\n        expect(inputEl.checked).to.be.true;\n        expect(inputEl.indeterminate).to.be.false;\n\n        type NamedRoledAndCheckedNode = {\n            name: string;\n            role: string;\n            checked: boolean;\n        };\n        const snapshot = (await a11ySnapshot(\n            {}\n        )) as unknown as NamedRoledAndCheckedNode & {\n            children: NamedRoledAndCheckedNode[];\n        };\n        expect(\n            findAccessibilityNode<NamedRoledAndCheckedNode>(\n                snapshot,\n                (node) =>\n                    node.role === 'checkbox' &&\n                    node.checked &&\n                    node.name === 'Checked'\n            ),\n            'Has a named and checked \"checkbox\" element'\n        ).to.not.be.null;\n    });\n\n    it('is `invalid` checkbox accessibly', async () => {\n        const el = await fixture<Checkbox>(html`\n            <sp-checkbox invalid>Invalid Not Checked</sp-checkbox>\n        `);\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n\n        const labelEl = labelForCheckbox(el);\n        const inputEl = inputForCheckbox(el);\n\n        expect(labelEl.getAttribute('for')).to.equal(inputEl.id);\n        expect(inputEl).to.have.attribute('aria-invalid', 'true');\n    });\n\n    it('autofocuses', async () => {\n        const autoElement = testFixture.querySelector(\n            'sp-checkbox[autofocus]'\n        ) as Checkbox;\n\n        expect(autoElement).to.exist;\n        await waitUntil(\n            () => document.activeElement === autoElement,\n            'Autofocused'\n        );\n\n        await triggerBlurFor(autoElement);\n\n        expect(document.activeElement).to.not.equal(autoElement);\n    });\n\n    it('`click()`ing host clicks `focusElement`', async () => {\n        const el = await fixture<Checkbox>(html`\n            <sp-checkbox checked autofocus>Checked</sp-checkbox>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.checked, 'checked initially').to.be.true;\n\n        el.click();\n        await elementUpdated(el);\n\n        expect(el.checked, 'unchecked').to.be.false;\n\n        el.click();\n        await elementUpdated(el);\n\n        expect(el.checked, 'checked again').to.be.true;\n    });\n\n    it('respects checked attribute', () => {\n        let el = testFixture.querySelector('#checkbox0') as Checkbox;\n        expect(el.checked).to.be.false;\n\n        el = testFixture.querySelector('#checkbox1') as Checkbox;\n        expect(el.checked).to.be.true;\n    });\n\n    it('has name attribute', () => {\n        let el = testFixture.querySelector('#checkbox0') as Checkbox;\n\n        el = testFixture.querySelector('#checkbox1') as Checkbox;\n        expect(el.hasAttribute('name'));\n        expect(el.name).to.be.undefined;\n        el.setAttribute('name', 'test');\n        expect(el.name).to.be.equal('test');\n    });\n\n    it('handles click events', async () => {\n        const el = testFixture.querySelector('#checkbox1') as Checkbox;\n        expect(el.checked).to.be.true;\n\n        inputForCheckbox(el).click();\n        await elementUpdated(el);\n\n        expect(el.checked).to.be.false;\n    });\n\n    it('can have `change` events cancelled', async () => {\n        const el = testFixture.querySelector('#checkbox0') as Checkbox;\n        await elementUpdated(el);\n        expect(el.checked).to.be.false;\n\n        inputForCheckbox(el).click();\n        await elementUpdated(el);\n\n        expect(el.checked).to.be.true;\n\n        el.addEventListener('change', (event: Event) => event.preventDefault());\n        inputForCheckbox(el).click();\n        await elementUpdated(el);\n\n        expect(el.checked).to.be.true;\n    });\n    it('should recognize readonly property', async () => {\n        const el: Checkbox = await fixture('<sp-checkbox></sp-checkbox>');\n        expect(el.readonly).to.not.throw;\n        expect(el.readonly).to.be.a('boolean');\n    });\n    it('maintains its value when [readonly]', async () => {\n        const el = await fixture<Checkbox>(html`\n            <sp-checkbox id=\"checkbox0\" checked readonly>Component</sp-checkbox>\n        `);\n        expect(el.checked).to.be.true;\n\n        inputForCheckbox(el).click();\n        await elementUpdated(el);\n\n        expect(el.checked).to.be.true;\n    });\n\n    it('`indeterminate, checked` becomes `not checked` on click', async () => {\n        const el = await fixture<Checkbox>(html`\n            <sp-checkbox checked .indeterminate=${true}>\n                indeterminate, checked\n            </sp-checkbox>\n        `);\n        expect(el.checked).to.be.true;\n        expect(el.indeterminate).to.be.true;\n\n        const inputEl = inputForCheckbox(el);\n        expect(inputEl.checked).to.be.true;\n        expect(inputEl.indeterminate).to.be.true;\n\n        el.click();\n        await elementUpdated(el);\n\n        expect(el.checked).to.be.false;\n        expect(el.indeterminate).to.be.false;\n        expect(inputEl.checked).to.be.false;\n        expect(inputEl.indeterminate).to.be.false;\n    });\n\n    it('`indeterminate, not checked` becomes `checked` on click', async () => {\n        const el = await fixture<Checkbox>(html`\n            <sp-checkbox .indeterminate=${true}>\n                indeterminate, checked\n            </sp-checkbox>\n        `);\n        expect(el.checked).to.be.false;\n        expect(el.indeterminate).to.be.true;\n\n        const inputEl = inputForCheckbox(el);\n        expect(inputEl.checked).to.be.false;\n        expect(inputEl.indeterminate).to.be.true;\n\n        el.click();\n        await elementUpdated(el);\n\n        expect(el.checked).to.be.true;\n        expect(el.indeterminate).to.be.false;\n        expect(inputEl.checked).to.be.true;\n        expect(inputEl.indeterminate).to.be.false;\n    });\n\n    it('updates checkmark icons in response to size', async function () {\n        const el = await fixture<Checkbox>(html`\n            <sp-checkbox checked>sizes checkbox</sp-checkbox>\n        `);\n\n        const getCheckmarkLocalName = (): string => {\n            return (el.shadowRoot.querySelector('#checkmark') as HTMLElement)\n                .localName;\n        };\n\n        expect(el.size).to.equal('m');\n        let checkmarkLocalname = getCheckmarkLocalName();\n        el.size = 's';\n        await elementUpdated(el);\n        expect(getCheckmarkLocalName()).to.not.equal(checkmarkLocalname);\n\n        checkmarkLocalname = getCheckmarkLocalName();\n        el.size = 'l';\n        await elementUpdated(el);\n        expect(getCheckmarkLocalName()).to.not.equal(checkmarkLocalname);\n\n        checkmarkLocalname = getCheckmarkLocalName();\n        el.size = 'xl';\n        await elementUpdated(el);\n        expect(getCheckmarkLocalName()).to.not.equal(checkmarkLocalname);\n    });\n\n    it('updates partialCheckmark icons in response to size', async function () {\n        const el = await fixture<Checkbox>(html`\n            <sp-checkbox indeterminate>sizes checkbox</sp-checkbox>\n        `);\n\n        const getPartialCheckmarkLocalName = (): string => {\n            return (\n                el.shadowRoot.querySelector('#partialCheckmark') as HTMLElement\n            ).localName;\n        };\n\n        expect(el.size).to.equal('m');\n        let partialCheckmarkLocalname = getPartialCheckmarkLocalName();\n        el.size = 's';\n        await elementUpdated(el);\n        expect(getPartialCheckmarkLocalName()).to.not.equal(\n            partialCheckmarkLocalname\n        );\n\n        partialCheckmarkLocalname = getPartialCheckmarkLocalName();\n        el.size = 'l';\n        await elementUpdated(el);\n        expect(getPartialCheckmarkLocalName()).to.not.equal(\n            partialCheckmarkLocalname\n        );\n\n        partialCheckmarkLocalname = getPartialCheckmarkLocalName();\n        el.size = 'xl';\n        await elementUpdated(el);\n        expect(getPartialCheckmarkLocalName()).to.not.equal(\n            partialCheckmarkLocalname\n        );\n    });\n\n    it('updates tabindex when no longer disabled', async function () {\n        const el = await fixture<Checkbox>(html`\n            <sp-checkbox disabled>disabled checkbox</sp-checkbox>\n        `);\n        el.click();\n        await elementUpdated(el);\n        expect(el.checked).to.be.false;\n        expect(el.tabIndex).to.equal(-1);\n        el.removeAttribute('disabled');\n        await elementUpdated(el);\n        expect(el.tabIndex).to.equal(0);\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
