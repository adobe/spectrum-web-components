{
  "version": 3,
  "sources": ["avatar.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport '@spectrum-web-components/avatar/sp-avatar.js';\nimport { Avatar } from '@spectrum-web-components/avatar';\nimport { elementUpdated, expect, fixture, html } from '@open-wc/testing';\nimport { testForLitDevWarnings } from '../../../test/testing-helpers';\n\ndescribe('Avatar', () => {\n    testForLitDevWarnings(\n        async () =>\n            await fixture<Avatar>(\n                html`\n                    <sp-avatar\n                        label=\"Shantanu Narayen\"\n                        src=\"https://picsum.photos/500/500\"\n                    ></sp-avatar>\n                `\n            )\n    );\n    it('loads accessibly', async () => {\n        const el = await fixture<Avatar>(\n            html`\n                <sp-avatar\n                    label=\"Shantanu Narayen\"\n                    src=\"https://picsum.photos/500/500\"\n                ></sp-avatar>\n            `\n        );\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('loads accessibly with [href]', async () => {\n        const el = await fixture<Avatar>(\n            html`\n                <sp-avatar\n                    label=\"Shantanu Narayen\"\n                    src=\"https://picsum.photos/500/500\"\n                    href=\"https://adobe.com\"\n                ></sp-avatar>\n            `\n        );\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('validates `size`', async () => {\n        const el = await fixture<Avatar>(\n            html`\n                <sp-avatar\n                    label=\"Shantanu Narayen\"\n                    src=\"https://picsum.photos/500/500\"\n                ></sp-avatar>\n            `\n        );\n\n        await elementUpdated(el);\n\n        expect(el.size).to.equal(100);\n\n        el.setAttribute('size', '55');\n\n        await elementUpdated(el);\n\n        expect(el.size).to.equal(100);\n\n        el.setAttribute('size', '600');\n\n        await elementUpdated(el);\n\n        expect(el.size).to.equal(600);\n    });\n    it('loads with everything set', async () => {\n        const el = await fixture<Avatar>(\n            html`\n                <sp-avatar\n                    label=\"Shantanu Narayen\"\n                    src=\"https://picsum.photos/500/500\"\n                ></sp-avatar>\n            `\n        );\n\n        await elementUpdated(el);\n        expect(el).to.not.be.undefined;\n        const imageEl = el.shadowRoot\n            ? (el.shadowRoot.querySelector('img') as HTMLImageElement)\n            : (el.querySelector('img') as HTMLImageElement);\n        expect(imageEl.hasAttribute('alt')).to.be.true;\n        expect(imageEl.getAttribute('alt')).to.equal('Shantanu Narayen');\n    });\n    it('loads with no label', async () => {\n        const el = await fixture<Avatar>(\n            html`\n                <sp-avatar src=\"https://picsum.photos/500/500\"></sp-avatar>\n            `\n        );\n\n        await elementUpdated(el);\n        expect(el).to.not.be.undefined;\n        const imageEl = el.shadowRoot\n            ? (el.shadowRoot.querySelector('img') as HTMLImageElement)\n            : (el.querySelector('img') as HTMLImageElement);\n        expect(imageEl.hasAttribute('alt')).to.be.false;\n    });\n    it('can receive a `tabindex` without an `href`', async () => {\n        try {\n            const el = await fixture<Avatar>(\n                html`\n                    <sp-avatar\n                        label=\"Shantanu Narayen\"\n                        src=\"https://picsum.photos/500/500\"\n                        tabindex=\"0\"\n                    ></sp-avatar>\n                `\n            );\n            await elementUpdated(el);\n            const focusEl = el.focusElement;\n            expect(focusEl).to.exist;\n        } catch (error) {\n            expect(() => {\n                throw error;\n            }).to.throw('There should be no error.');\n        }\n    });\n});\n"],
  "mappings": ";AAUA,OAAO;AAEP,SAAS,gBAAgB,QAAQ,SAAS,YAAY;AACtD,SAAS,6BAA6B;AAEtC,SAAS,UAAU,MAAM;AACrB;AAAA,IACI,YACI,MAAM;AAAA,MACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMJ;AAAA,EACR;AACA,KAAG,oBAAoB,YAAY;AAC/B,UAAM,KAAK,MAAM;AAAA,MACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMJ;AAEA,UAAM,eAAe,EAAE;AAEvB,UAAM,OAAO,EAAE,EAAE,GAAG,GAAG,WAAW;AAAA,EACtC,CAAC;AACD,KAAG,gCAAgC,YAAY;AAC3C,UAAM,KAAK,MAAM;AAAA,MACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOJ;AAEA,UAAM,eAAe,EAAE;AAEvB,UAAM,OAAO,EAAE,EAAE,GAAG,GAAG,WAAW;AAAA,EACtC,CAAC;AACD,KAAG,oBAAoB,YAAY;AAC/B,UAAM,KAAK,MAAM;AAAA,MACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMJ;AAEA,UAAM,eAAe,EAAE;AAEvB,WAAO,GAAG,IAAI,EAAE,GAAG,MAAM,GAAG;AAE5B,OAAG,aAAa,QAAQ,IAAI;AAE5B,UAAM,eAAe,EAAE;AAEvB,WAAO,GAAG,IAAI,EAAE,GAAG,MAAM,GAAG;AAE5B,OAAG,aAAa,QAAQ,KAAK;AAE7B,UAAM,eAAe,EAAE;AAEvB,WAAO,GAAG,IAAI,EAAE,GAAG,MAAM,GAAG;AAAA,EAChC,CAAC;AACD,KAAG,6BAA6B,YAAY;AACxC,UAAM,KAAK,MAAM;AAAA,MACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMJ;AAEA,UAAM,eAAe,EAAE;AACvB,WAAO,EAAE,EAAE,GAAG,IAAI,GAAG;AACrB,UAAM,UAAU,GAAG,aACZ,GAAG,WAAW,cAAc,KAAK,IACjC,GAAG,cAAc,KAAK;AAC7B,WAAO,QAAQ,aAAa,KAAK,CAAC,EAAE,GAAG,GAAG;AAC1C,WAAO,QAAQ,aAAa,KAAK,CAAC,EAAE,GAAG,MAAM,kBAAkB;AAAA,EACnE,CAAC;AACD,KAAG,uBAAuB,YAAY;AAClC,UAAM,KAAK,MAAM;AAAA,MACb;AAAA;AAAA;AAAA,IAGJ;AAEA,UAAM,eAAe,EAAE;AACvB,WAAO,EAAE,EAAE,GAAG,IAAI,GAAG;AACrB,UAAM,UAAU,GAAG,aACZ,GAAG,WAAW,cAAc,KAAK,IACjC,GAAG,cAAc,KAAK;AAC7B,WAAO,QAAQ,aAAa,KAAK,CAAC,EAAE,GAAG,GAAG;AAAA,EAC9C,CAAC;AACD,KAAG,8CAA8C,YAAY;AACzD,QAAI;AACA,YAAM,KAAK,MAAM;AAAA,QACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOJ;AACA,YAAM,eAAe,EAAE;AACvB,YAAM,UAAU,GAAG;AACnB,aAAO,OAAO,EAAE,GAAG;AAAA,IACvB,SAAS,OAAO;AACZ,aAAO,MAAM;AACT,cAAM;AAAA,MACV,CAAC,EAAE,GAAG,MAAM,2BAA2B;AAAA,IAC3C;AAAA,EACJ,CAAC;AACL,CAAC;",
  "names": []
}
