{
  "version": 3,
  "sources": ["ActionGroup.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    SizedMixin,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { ActionButton } from '@spectrum-web-components/action-button';\nimport { RovingTabindexController } from '@spectrum-web-components/reactive-controllers/src/RovingTabindex.js';\nimport { MutationController } from '@lit-labs/observers/mutation-controller.js';\n\nimport styles from './action-group.css.js';\n\nconst EMPTY_SELECTION: string[] = [];\n\n/**\n * @element sp-action-group\n * @slot - the sp-action-button elements that make up the group\n *\n * @fires change - Announces that selection state has been changed by user\n */\nexport class ActionGroup extends SizedMixin(SpectrumElement, {\n    validSizes: ['xs', 's', 'm', 'l', 'xl'],\n    noDefaultSize: true,\n}) {\n    static override shadowRootOptions = {\n        ...SpectrumElement.shadowRootOptions,\n        delegatesFocus: true,\n    };\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    public set buttons(buttons: ActionButton[]) {\n        /* c8 ignore next 1 */\n        if (buttons === this.buttons) return;\n        this._buttons = buttons;\n        this.rovingTabindexController.clearElementCache();\n    }\n\n    public get buttons(): ActionButton[] {\n        return this._buttons;\n    }\n\n    public _buttons: ActionButton[] = [];\n\n    protected _buttonSelector = 'sp-action-button, sp-action-menu';\n\n    constructor() {\n        super();\n\n        new MutationController(this, {\n            config: {\n                childList: true,\n                subtree: true,\n            },\n            callback: () => {\n                this.manageButtons();\n            },\n            skipInitial: true,\n        });\n    }\n\n    rovingTabindexController = new RovingTabindexController<ActionButton>(\n        this,\n        {\n            focusInIndex: (elements: ActionButton[]) => {\n                let firstEnabledIndex = -1;\n                const firstSelectedIndex = elements.findIndex((el, index) => {\n                    if (!elements[firstEnabledIndex] && !el.disabled) {\n                        firstEnabledIndex = index;\n                    }\n                    return el.selected && !el.disabled;\n                });\n                return elements[firstSelectedIndex]\n                    ? firstSelectedIndex\n                    : firstEnabledIndex;\n            },\n            elements: () => this.buttons,\n            hostDelegatesFocus: true,\n            isFocusableElement: (el: ActionButton) => !el.disabled,\n        }\n    );\n\n    @property({ type: Boolean, reflect: true })\n    public compact = false;\n\n    @property({ type: Boolean, reflect: true })\n    public emphasized = false;\n\n    @property({ type: Boolean, reflect: true })\n    public justified = false;\n\n    @property({ type: String })\n    public label = '';\n\n    @property({ type: Boolean, reflect: true })\n    public quiet = false;\n\n    @property({ type: String })\n    public selects: undefined | 'single' | 'multiple';\n\n    @property({ reflect: true, attribute: 'static-color' })\n    public staticColor?: 'white' | 'black';\n\n    @property({ type: Boolean, reflect: true })\n    public vertical = false;\n\n    private _selected: string[] = EMPTY_SELECTION;\n\n    set selected(selected: string[]) {\n        this.requestUpdate('selected', this._selected);\n        this._selected = selected;\n        this.updateComplete.then(() => {\n            this.applySelects();\n            this.manageChildren();\n        });\n    }\n\n    @property({ type: Array })\n    get selected(): string[] {\n        return this._selected;\n    }\n\n    @query('slot')\n    slotElement!: HTMLSlotElement;\n\n    private dispatchChange(old: string[]): void {\n        const applyDefault = this.dispatchEvent(\n            new Event('change', {\n                bubbles: true,\n                composed: true,\n                cancelable: true,\n            })\n        );\n\n        if (!applyDefault) {\n            this.setSelected(old);\n            this.buttons.map((button) => {\n                button.selected = this.selected.includes(button.value);\n            });\n        }\n    }\n\n    private setSelected(selected: string[], announce?: boolean): void {\n        /* c8 ignore next 1 */\n        if (selected === this.selected) return;\n\n        const old = this.selected;\n        this.requestUpdate('selected', old);\n        this._selected = selected;\n        if (!announce) return;\n        this.dispatchChange(old);\n    }\n\n    public override focus(options?: FocusOptions): void {\n        this.rovingTabindexController.focus(options);\n    }\n\n    private deselectSelectedButtons(): void {\n        this.buttons.forEach((button) => {\n            if (!button.selected) return;\n\n            button.selected = false;\n            button.tabIndex = -1;\n            button.setAttribute(\n                this.selects ? 'aria-checked' : /* c8 ignore */ 'aria-pressed',\n                'false'\n            );\n        });\n    }\n\n    private handleActionButtonChange(event: Event): void {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    private handleClick(event: Event): void {\n        const target = event.target as ActionButton;\n        if (typeof target.value === 'undefined') {\n            return;\n        }\n        switch (this.selects) {\n            case 'single': {\n                this.deselectSelectedButtons();\n                target.selected = true;\n                target.tabIndex = 0;\n                target.setAttribute('aria-checked', 'true');\n                this.setSelected([target.value], true);\n                break;\n            }\n            case 'multiple': {\n                const selected = [...this.selected];\n                target.selected = !target.selected;\n                target.setAttribute(\n                    'aria-checked',\n                    target.selected ? 'true' : 'false'\n                );\n                if (target.selected) {\n                    selected.push(target.value);\n                } else {\n                    selected.splice(this.selected.indexOf(target.value), 1);\n                }\n                this.setSelected(selected, true);\n\n                this.buttons.forEach((button) => {\n                    button.tabIndex = -1;\n                });\n\n                target.tabIndex = 0;\n\n                break;\n            }\n            default:\n                break;\n        }\n    }\n\n    private async applySelects(): Promise<void> {\n        await this.manageSelects(true);\n    }\n\n    private async manageSelects(applied?: boolean): Promise<void> {\n        if (!this.buttons.length) {\n            return;\n        }\n\n        const options = this.buttons;\n        switch (this.selects) {\n            case 'single': {\n                // single behaves as a radio group\n                this.setAttribute('role', 'radiogroup');\n                const selections: ActionButton[] = [];\n                const updates = options.map(async (option) => {\n                    await option.updateComplete;\n                    if (option instanceof ActionButton)\n                        option.setAttribute('role', 'radio');\n                    option.setAttribute(\n                        'aria-checked',\n                        option.selected ? 'true' : 'false'\n                    );\n                    if (option.selected) {\n                        selections.push(option);\n                    }\n                });\n                if (applied) break;\n                await Promise.all(updates);\n\n                const selected = selections.map((button) => {\n                    return button.value;\n                });\n\n                this.setSelected(selected || EMPTY_SELECTION);\n                break;\n            }\n            case 'multiple': {\n                // switching from single to multiple, remove role=\"radiogroup\"\n                if (this.getAttribute('role') === 'radiogroup') {\n                    this.removeAttribute('role');\n                }\n                const selection: string[] = [];\n                const selections: ActionButton[] = [];\n                const updates = options.map(async (option) => {\n                    await option.updateComplete;\n                    if (option instanceof ActionButton)\n                        option.setAttribute('role', 'checkbox');\n                    option.setAttribute(\n                        'aria-checked',\n                        option.selected ? 'true' : 'false'\n                    );\n                    if (option.selected) {\n                        selection.push(option.value);\n                        selections.push(option);\n                    }\n                });\n                if (applied) break;\n                await Promise.all(updates);\n                const selected = !!selection.length\n                    ? selection\n                    : EMPTY_SELECTION;\n                this.setSelected(selected);\n                break;\n            }\n            default:\n                // if user defines .selected\n                if (this.selected.length) {\n                    const selections: ActionButton[] = [];\n                    const updates = options.map(async (option) => {\n                        await option.updateComplete;\n                        if (option instanceof ActionButton)\n                            option.setAttribute('role', 'button');\n                        if (option.selected) {\n                            option.setAttribute('aria-pressed', 'true');\n                            selections.push(option);\n                        } else {\n                            option.removeAttribute('aria-pressed');\n                        }\n                    });\n                    if (applied) break;\n                    await Promise.all(updates);\n\n                    this.setSelected(\n                        selections.map((button) => {\n                            return button.value;\n                        })\n                    );\n                } else {\n                    this.buttons.forEach((option) => {\n                        if (option instanceof ActionButton)\n                            option.setAttribute('role', 'button');\n                    });\n                    break;\n                }\n        }\n\n        // When no other role is defined, use role=\"toolbar\", which is appropriate with roving tabindex.\n        if (!this.hasAttribute('role')) {\n            this.setAttribute('role', 'toolbar');\n        }\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <slot role=\"presentation\" @slotchange=${this.manageButtons}></slot>\n        `;\n    }\n\n    protected override firstUpdated(changes: PropertyValues): void {\n        super.firstUpdated(changes);\n        this.addEventListener('click', this.handleClick);\n    }\n\n    protected override updated(changes: PropertyValues): void {\n        super.updated(changes);\n        if (changes.has('selects')) {\n            this.manageSelects();\n            this.manageChildren();\n            if (!!this.selects) {\n                this.shadowRoot.addEventListener(\n                    'change',\n                    this.handleActionButtonChange\n                );\n            } else {\n                this.shadowRoot.removeEventListener(\n                    'change',\n                    this.handleActionButtonChange\n                );\n            }\n        }\n        if (\n            changes.has('quiet') ||\n            changes.has('emphasized') ||\n            changes.has('size') ||\n            changes.has('staticColor')\n        ) {\n            this.manageChildren(changes);\n        }\n        // Update `aria-label` when `label` available or not first `updated`\n        if (\n            changes.has('label') &&\n            (this.label || typeof changes.get('label') !== 'undefined')\n        ) {\n            if (this.label.length) {\n                this.setAttribute('aria-label', this.label);\n            } else {\n                this.removeAttribute('aria-label');\n            }\n        }\n    }\n\n    private manageChildren(changes?: PropertyValues): void {\n        this.buttons.forEach((button) => {\n            if (this.quiet || changes?.get('quiet')) {\n                button.quiet = this.quiet;\n            }\n            if (this.emphasized || changes?.get('emphasized')) {\n                button.emphasized = this.emphasized;\n            }\n            if (this.staticColor || changes?.get('staticColor')) {\n                button.staticColor = this.staticColor;\n            }\n            if (this.selects || !this.hasManaged) {\n                button.selected = this.selected.includes(button.value);\n            }\n            if (\n                this.size &&\n                (this.size !== 'm' ||\n                    typeof changes?.get('size') !== 'undefined')\n            ) {\n                button.size = this.size;\n            }\n        });\n    }\n\n    private hasManaged = false;\n\n    private manageButtons = (): void => {\n        if (!this.slotElement) {\n            return;\n        }\n        const assignedElements = this.slotElement.assignedElements({\n            flatten: true,\n        });\n        const buttons = assignedElements.reduce((acc: unknown[], el) => {\n            if (el.matches(this._buttonSelector)) {\n                acc.push(el);\n            } else {\n                const buttonDescendents = Array.from(\n                    el.querySelectorAll(`:scope > ${this._buttonSelector}`)\n                );\n                acc.push(...buttonDescendents);\n            }\n            return acc;\n        }, []);\n        this.buttons = buttons as ActionButton[];\n        if (this.selects || !this.hasManaged) {\n            // <select> element merges selected so following paradigm here\n            const currentlySelectedButtons: string[] = [];\n            this.buttons.forEach((button: ActionButton) => {\n                if (button.selected) {\n                    currentlySelectedButtons.push(button.value);\n                }\n            });\n            this.setSelected(this.selected.concat(currentlySelectedButtons));\n        }\n        this.manageChildren();\n        this.manageSelects();\n        this.hasManaged = true;\n    };\n}\n"],
  "mappings": ";;;;;;;;;;;AAYA;AAAA,EAEI;AAAA,EAEA;AAAA,EACA;AAAA,OAEG;AACP;AAAA,EACI;AAAA,EACA;AAAA,OACG;AACP,SAAS,oBAAoB;AAC7B,SAAS,gCAAgC;AACzC,SAAS,0BAA0B;AAEnC,OAAO,YAAY;AAEnB,MAAM,kBAA4B,CAAC;AAQ5B,aAAM,oBAAoB,WAAW,iBAAiB;AAAA,EACzD,YAAY,CAAC,MAAM,KAAK,KAAK,KAAK,IAAI;AAAA,EACtC,eAAe;AACnB,CAAC,EAAE;AAAA,EAwBC,cAAc;AACV,UAAM;AALV,SAAO,WAA2B,CAAC;AAEnC,SAAU,kBAAkB;AAiB5B,oCAA2B,IAAI;AAAA,MAC3B;AAAA,MACA;AAAA,QACI,cAAc,CAAC,aAA6B;AACxC,cAAI,oBAAoB;AACxB,gBAAM,qBAAqB,SAAS,UAAU,CAAC,IAAI,UAAU;AACzD,gBAAI,CAAC,SAAS,iBAAiB,KAAK,CAAC,GAAG,UAAU;AAC9C,kCAAoB;AAAA,YACxB;AACA,mBAAO,GAAG,YAAY,CAAC,GAAG;AAAA,UAC9B,CAAC;AACD,iBAAO,SAAS,kBAAkB,IAC5B,qBACA;AAAA,QACV;AAAA,QACA,UAAU,MAAM,KAAK;AAAA,QACrB,oBAAoB;AAAA,QACpB,oBAAoB,CAAC,OAAqB,CAAC,GAAG;AAAA,MAClD;AAAA,IACJ;AAGA,SAAO,UAAU;AAGjB,SAAO,aAAa;AAGpB,SAAO,YAAY;AAGnB,SAAO,QAAQ;AAGf,SAAO,QAAQ;AASf,SAAO,WAAW;AAElB,SAAQ,YAAsB;AA8R9B,SAAQ,aAAa;AAErB,SAAQ,gBAAgB,MAAY;AAChC,UAAI,CAAC,KAAK,aAAa;AACnB;AAAA,MACJ;AACA,YAAM,mBAAmB,KAAK,YAAY,iBAAiB;AAAA,QACvD,SAAS;AAAA,MACb,CAAC;AACD,YAAM,UAAU,iBAAiB,OAAO,CAAC,KAAgB,OAAO;AAC5D,YAAI,GAAG,QAAQ,KAAK,eAAe,GAAG;AAClC,cAAI,KAAK,EAAE;AAAA,QACf,OAAO;AACH,gBAAM,oBAAoB,MAAM;AAAA,YAC5B,GAAG,iBAAiB,YAAY,KAAK,eAAe,EAAE;AAAA,UAC1D;AACA,cAAI,KAAK,GAAG,iBAAiB;AAAA,QACjC;AACA,eAAO;AAAA,MACX,GAAG,CAAC,CAAC;AACL,WAAK,UAAU;AACf,UAAI,KAAK,WAAW,CAAC,KAAK,YAAY;AAElC,cAAM,2BAAqC,CAAC;AAC5C,aAAK,QAAQ,QAAQ,CAAC,WAAyB;AAC3C,cAAI,OAAO,UAAU;AACjB,qCAAyB,KAAK,OAAO,KAAK;AAAA,UAC9C;AAAA,QACJ,CAAC;AACD,aAAK,YAAY,KAAK,SAAS,OAAO,wBAAwB,CAAC;AAAA,MACnE;AACA,WAAK,eAAe;AACpB,WAAK,cAAc;AACnB,WAAK,aAAa;AAAA,IACtB;AAzXI,QAAI,mBAAmB,MAAM;AAAA,MACzB,QAAQ;AAAA,QACJ,WAAW;AAAA,QACX,SAAS;AAAA,MACb;AAAA,MACA,UAAU,MAAM;AACZ,aAAK,cAAc;AAAA,MACvB;AAAA,MACA,aAAa;AAAA,IACjB,CAAC;AAAA,EACL;AAAA,EAhCA,WAA2B,SAAyB;AAChD,WAAO,CAAC,MAAM;AAAA,EAClB;AAAA,EAEA,IAAW,QAAQ,SAAyB;AAExC,QAAI,YAAY,KAAK,QAAS;AAC9B,SAAK,WAAW;AAChB,SAAK,yBAAyB,kBAAkB;AAAA,EACpD;AAAA,EAEA,IAAW,UAA0B;AACjC,WAAO,KAAK;AAAA,EAChB;AAAA,EAoEA,IAAI,SAAS,UAAoB;AAC7B,SAAK,cAAc,YAAY,KAAK,SAAS;AAC7C,SAAK,YAAY;AACjB,SAAK,eAAe,KAAK,MAAM;AAC3B,WAAK,aAAa;AAClB,WAAK,eAAe;AAAA,IACxB,CAAC;AAAA,EACL;AAAA,EAGA,IAAI,WAAqB;AACrB,WAAO,KAAK;AAAA,EAChB;AAAA,EAKQ,eAAe,KAAqB;AACxC,UAAM,eAAe,KAAK;AAAA,MACtB,IAAI,MAAM,UAAU;AAAA,QAChB,SAAS;AAAA,QACT,UAAU;AAAA,QACV,YAAY;AAAA,MAChB,CAAC;AAAA,IACL;AAEA,QAAI,CAAC,cAAc;AACf,WAAK,YAAY,GAAG;AACpB,WAAK,QAAQ,IAAI,CAAC,WAAW;AACzB,eAAO,WAAW,KAAK,SAAS,SAAS,OAAO,KAAK;AAAA,MACzD,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,YAAY,UAAoB,UAA0B;AAE9D,QAAI,aAAa,KAAK,SAAU;AAEhC,UAAM,MAAM,KAAK;AACjB,SAAK,cAAc,YAAY,GAAG;AAClC,SAAK,YAAY;AACjB,QAAI,CAAC,SAAU;AACf,SAAK,eAAe,GAAG;AAAA,EAC3B;AAAA,EAEgB,MAAM,SAA8B;AAChD,SAAK,yBAAyB,MAAM,OAAO;AAAA,EAC/C;AAAA,EAEQ,0BAAgC;AACpC,SAAK,QAAQ,QAAQ,CAAC,WAAW;AAC7B,UAAI,CAAC,OAAO,SAAU;AAEtB,aAAO,WAAW;AAClB,aAAO,WAAW;AAClB,aAAO;AAAA,QACH,KAAK,UAAU;AAAA;AAAA,UAAiC;AAAA;AAAA,QAChD;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEQ,yBAAyB,OAAoB;AACjD,UAAM,gBAAgB;AACtB,UAAM,eAAe;AAAA,EACzB;AAAA,EAEQ,YAAY,OAAoB;AACpC,UAAM,SAAS,MAAM;AACrB,QAAI,OAAO,OAAO,UAAU,aAAa;AACrC;AAAA,IACJ;AACA,YAAQ,KAAK,SAAS;AAAA,MAClB,KAAK,UAAU;AACX,aAAK,wBAAwB;AAC7B,eAAO,WAAW;AAClB,eAAO,WAAW;AAClB,eAAO,aAAa,gBAAgB,MAAM;AAC1C,aAAK,YAAY,CAAC,OAAO,KAAK,GAAG,IAAI;AACrC;AAAA,MACJ;AAAA,MACA,KAAK,YAAY;AACb,cAAM,WAAW,CAAC,GAAG,KAAK,QAAQ;AAClC,eAAO,WAAW,CAAC,OAAO;AAC1B,eAAO;AAAA,UACH;AAAA,UACA,OAAO,WAAW,SAAS;AAAA,QAC/B;AACA,YAAI,OAAO,UAAU;AACjB,mBAAS,KAAK,OAAO,KAAK;AAAA,QAC9B,OAAO;AACH,mBAAS,OAAO,KAAK,SAAS,QAAQ,OAAO,KAAK,GAAG,CAAC;AAAA,QAC1D;AACA,aAAK,YAAY,UAAU,IAAI;AAE/B,aAAK,QAAQ,QAAQ,CAAC,WAAW;AAC7B,iBAAO,WAAW;AAAA,QACtB,CAAC;AAED,eAAO,WAAW;AAElB;AAAA,MACJ;AAAA,MACA;AACI;AAAA,IACR;AAAA,EACJ;AAAA,EAEA,MAAc,eAA8B;AACxC,UAAM,KAAK,cAAc,IAAI;AAAA,EACjC;AAAA,EAEA,MAAc,cAAc,SAAkC;AAC1D,QAAI,CAAC,KAAK,QAAQ,QAAQ;AACtB;AAAA,IACJ;AAEA,UAAM,UAAU,KAAK;AACrB,YAAQ,KAAK,SAAS;AAAA,MAClB,KAAK,UAAU;AAEX,aAAK,aAAa,QAAQ,YAAY;AACtC,cAAM,aAA6B,CAAC;AACpC,cAAM,UAAU,QAAQ,IAAI,OAAO,WAAW;AAC1C,gBAAM,OAAO;AACb,cAAI,kBAAkB;AAClB,mBAAO,aAAa,QAAQ,OAAO;AACvC,iBAAO;AAAA,YACH;AAAA,YACA,OAAO,WAAW,SAAS;AAAA,UAC/B;AACA,cAAI,OAAO,UAAU;AACjB,uBAAW,KAAK,MAAM;AAAA,UAC1B;AAAA,QACJ,CAAC;AACD,YAAI,QAAS;AACb,cAAM,QAAQ,IAAI,OAAO;AAEzB,cAAM,WAAW,WAAW,IAAI,CAAC,WAAW;AACxC,iBAAO,OAAO;AAAA,QAClB,CAAC;AAED,aAAK,YAAY,YAAY,eAAe;AAC5C;AAAA,MACJ;AAAA,MACA,KAAK,YAAY;AAEb,YAAI,KAAK,aAAa,MAAM,MAAM,cAAc;AAC5C,eAAK,gBAAgB,MAAM;AAAA,QAC/B;AACA,cAAM,YAAsB,CAAC;AAC7B,cAAM,aAA6B,CAAC;AACpC,cAAM,UAAU,QAAQ,IAAI,OAAO,WAAW;AAC1C,gBAAM,OAAO;AACb,cAAI,kBAAkB;AAClB,mBAAO,aAAa,QAAQ,UAAU;AAC1C,iBAAO;AAAA,YACH;AAAA,YACA,OAAO,WAAW,SAAS;AAAA,UAC/B;AACA,cAAI,OAAO,UAAU;AACjB,sBAAU,KAAK,OAAO,KAAK;AAC3B,uBAAW,KAAK,MAAM;AAAA,UAC1B;AAAA,QACJ,CAAC;AACD,YAAI,QAAS;AACb,cAAM,QAAQ,IAAI,OAAO;AACzB,cAAM,WAAW,CAAC,CAAC,UAAU,SACvB,YACA;AACN,aAAK,YAAY,QAAQ;AACzB;AAAA,MACJ;AAAA,MACA;AAEI,YAAI,KAAK,SAAS,QAAQ;AACtB,gBAAM,aAA6B,CAAC;AACpC,gBAAM,UAAU,QAAQ,IAAI,OAAO,WAAW;AAC1C,kBAAM,OAAO;AACb,gBAAI,kBAAkB;AAClB,qBAAO,aAAa,QAAQ,QAAQ;AACxC,gBAAI,OAAO,UAAU;AACjB,qBAAO,aAAa,gBAAgB,MAAM;AAC1C,yBAAW,KAAK,MAAM;AAAA,YAC1B,OAAO;AACH,qBAAO,gBAAgB,cAAc;AAAA,YACzC;AAAA,UACJ,CAAC;AACD,cAAI,QAAS;AACb,gBAAM,QAAQ,IAAI,OAAO;AAEzB,eAAK;AAAA,YACD,WAAW,IAAI,CAAC,WAAW;AACvB,qBAAO,OAAO;AAAA,YAClB,CAAC;AAAA,UACL;AAAA,QACJ,OAAO;AACH,eAAK,QAAQ,QAAQ,CAAC,WAAW;AAC7B,gBAAI,kBAAkB;AAClB,qBAAO,aAAa,QAAQ,QAAQ;AAAA,UAC5C,CAAC;AACD;AAAA,QACJ;AAAA,IACR;AAGA,QAAI,CAAC,KAAK,aAAa,MAAM,GAAG;AAC5B,WAAK,aAAa,QAAQ,SAAS;AAAA,IACvC;AAAA,EACJ;AAAA,EAEmB,SAAyB;AACxC,WAAO;AAAA,oDACqC,KAAK,aAAa;AAAA;AAAA,EAElE;AAAA,EAEmB,aAAa,SAA+B;AAC3D,UAAM,aAAa,OAAO;AAC1B,SAAK,iBAAiB,SAAS,KAAK,WAAW;AAAA,EACnD;AAAA,EAEmB,QAAQ,SAA+B;AACtD,UAAM,QAAQ,OAAO;AACrB,QAAI,QAAQ,IAAI,SAAS,GAAG;AACxB,WAAK,cAAc;AACnB,WAAK,eAAe;AACpB,UAAI,CAAC,CAAC,KAAK,SAAS;AAChB,aAAK,WAAW;AAAA,UACZ;AAAA,UACA,KAAK;AAAA,QACT;AAAA,MACJ,OAAO;AACH,aAAK,WAAW;AAAA,UACZ;AAAA,UACA,KAAK;AAAA,QACT;AAAA,MACJ;AAAA,IACJ;AACA,QACI,QAAQ,IAAI,OAAO,KACnB,QAAQ,IAAI,YAAY,KACxB,QAAQ,IAAI,MAAM,KAClB,QAAQ,IAAI,aAAa,GAC3B;AACE,WAAK,eAAe,OAAO;AAAA,IAC/B;AAEA,QACI,QAAQ,IAAI,OAAO,MAClB,KAAK,SAAS,OAAO,QAAQ,IAAI,OAAO,MAAM,cACjD;AACE,UAAI,KAAK,MAAM,QAAQ;AACnB,aAAK,aAAa,cAAc,KAAK,KAAK;AAAA,MAC9C,OAAO;AACH,aAAK,gBAAgB,YAAY;AAAA,MACrC;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,eAAe,SAAgC;AACnD,SAAK,QAAQ,QAAQ,CAAC,WAAW;AAC7B,UAAI,KAAK,UAAS,mCAAS,IAAI,WAAU;AACrC,eAAO,QAAQ,KAAK;AAAA,MACxB;AACA,UAAI,KAAK,eAAc,mCAAS,IAAI,gBAAe;AAC/C,eAAO,aAAa,KAAK;AAAA,MAC7B;AACA,UAAI,KAAK,gBAAe,mCAAS,IAAI,iBAAgB;AACjD,eAAO,cAAc,KAAK;AAAA,MAC9B;AACA,UAAI,KAAK,WAAW,CAAC,KAAK,YAAY;AAClC,eAAO,WAAW,KAAK,SAAS,SAAS,OAAO,KAAK;AAAA,MACzD;AACA,UACI,KAAK,SACJ,KAAK,SAAS,OACX,QAAO,mCAAS,IAAI,aAAY,cACtC;AACE,eAAO,OAAO,KAAK;AAAA,MACvB;AAAA,IACJ,CAAC;AAAA,EACL;AAqCJ;AAxZa,YAIO,oBAAoB;AAAA,EAChC,GAAG,gBAAgB;AAAA,EACnB,gBAAgB;AACpB;AAyDO;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GA/DjC,YAgEF;AAGA;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GAlEjC,YAmEF;AAGA;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GArEjC,YAsEF;AAGA;AAAA,EADN,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GAxEjB,YAyEF;AAGA;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GA3EjC,YA4EF;AAGA;AAAA,EADN,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GA9EjB,YA+EF;AAGA;AAAA,EADN,SAAS,EAAE,SAAS,MAAM,WAAW,eAAe,CAAC;AAAA,GAjF7C,YAkFF;AAGA;AAAA,EADN,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GApFjC,YAqFF;AAcH;AAAA,EADH,SAAS,EAAE,MAAM,MAAM,CAAC;AAAA,GAlGhB,YAmGL;AAKJ;AAAA,EADC,MAAM,MAAM;AAAA,GAvGJ,YAwGT;",
  "names": []
}
