{
  "version": 3,
  "sources": ["AlertDialog.ts"],
  "sourcesContent": ["/*\nCopyright 2023 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n    CSSResultArray,\n    html,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport '@spectrum-web-components/button/sp-button.js';\nimport { FocusVisiblePolyfillMixin } from '@spectrum-web-components/shared/src/focus-visible.js';\nimport { randomID } from '@spectrum-web-components/shared/src/random-id.js';\nimport { conditionAttributeWithId } from '@spectrum-web-components/base/src/condition-attribute-with-id.js';\nimport { ResizeController } from '@lit-labs/observers/resize-controller.js';\nimport alertStyles from './alert-dialog.css.js';\n\nexport type AlertDialogVariants =\n    | 'confirmation'\n    | 'information'\n    | 'warning'\n    | 'error'\n    | 'destructive'\n    | 'secondary'\n    | '';\n\nexport const alertDialogVariants: AlertDialogVariants[] = [\n    'confirmation',\n    'information',\n    'warning',\n    'error',\n    'destructive',\n    'secondary',\n];\n\nfunction gatherAppliedIdsFromSlottedChildren(\n    slot: HTMLSlotElement,\n    idBase: string\n): string[] {\n    const assignedElements = slot.assignedElements();\n    const ids: string[] = [];\n    assignedElements.forEach((el) => {\n        if (el.id) {\n            ids.push(el.id);\n        } else {\n            const id = idBase + `-${randomID()}`;\n            el.id = id;\n            ids.push(id);\n        }\n    });\n    return ids;\n}\nexport class AlertDialog extends FocusVisiblePolyfillMixin(SpectrumElement) {\n    public static override get styles(): CSSResultArray {\n        return [alertStyles];\n    }\n\n    @query('.content')\n    private contentElement!: HTMLDivElement;\n\n    private resizeController = new ResizeController(this, {\n        callback: () => {\n            this.shouldManageTabOrderForScrolling();\n        },\n    });\n\n    public _variant: AlertDialogVariants = '';\n\n    @property({ type: String, reflect: true })\n    public set variant(variant: AlertDialogVariants) {\n        if (variant === this.variant) {\n            return;\n        }\n        const oldValue = this.variant;\n        if (alertDialogVariants.includes(variant)) {\n            this.setAttribute('variant', variant);\n            this._variant = variant;\n        } else {\n            this.removeAttribute('variant');\n            this._variant = '';\n        }\n        this.requestUpdate('variant', oldValue);\n    }\n\n    public get variant(): AlertDialogVariants {\n        return this._variant;\n    }\n\n    protected renderIcon(): TemplateResult {\n        switch (this.variant) {\n            case 'warning':\n            case 'error':\n                return html`\n                    <sp-icon-alert class=\"icon\"></sp-icon-alert>\n                `;\n\n            default:\n                return html``;\n        }\n    }\n\n    protected renderHeading(): TemplateResult {\n        return html`\n            <slot name=\"heading\" @slotchange=${this.onHeadingSlotchange}></slot>\n        `;\n    }\n\n    protected renderContent(): TemplateResult {\n        return html`\n            <div class=\"content\">\n                <slot @slotchange=${this.onContentSlotChange}></slot>\n            </div>\n        `;\n    }\n\n    static instanceCount = 0;\n    private labelledbyId = `sp-dialog-label-${AlertDialog.instanceCount++}`;\n    private conditionLabelledby?: () => void;\n    private conditionDescribedby?: () => void;\n\n    private onHeadingSlotchange({\n        target,\n    }: Event & { target: HTMLSlotElement }): void {\n        if (this.conditionLabelledby) {\n            this.conditionLabelledby();\n            delete this.conditionLabelledby;\n        }\n        const ids = gatherAppliedIdsFromSlottedChildren(\n            target,\n            this.labelledbyId\n        );\n        if (ids.length) {\n            this.conditionLabelledby = conditionAttributeWithId(\n                this,\n                'aria-labelledby',\n                ids\n            );\n        }\n    }\n\n    public shouldManageTabOrderForScrolling = (): void => {\n        if (!this.contentElement) return;\n\n        const { offsetHeight, scrollHeight } = this.contentElement;\n        if (offsetHeight < scrollHeight) {\n            this.contentElement.tabIndex = 0;\n        } else {\n            this.contentElement.removeAttribute('tabindex');\n        }\n    };\n\n    private describedbyId = `sp-dialog-description-${AlertDialog.instanceCount++}`;\n\n    protected onContentSlotChange({\n        target,\n    }: Event & { target: HTMLSlotElement }): void {\n        requestAnimationFrame(() => {\n            // Can happen more than once. Take this.contentElement out\n            // of the observer before adding it again.\n            this.resizeController.unobserve(this.contentElement);\n            this.resizeController.observe(this.contentElement);\n        });\n        if (this.conditionDescribedby) {\n            this.conditionDescribedby();\n            delete this.conditionDescribedby;\n        }\n        const ids = gatherAppliedIdsFromSlottedChildren(\n            target,\n            this.describedbyId\n        );\n        if (ids.length && ids.length < 4) {\n            this.conditionDescribedby = conditionAttributeWithId(\n                this,\n                'aria-describedby',\n                ids\n            );\n        } else if (!ids.length) {\n            const idProvided = !!this.id;\n            if (!idProvided) this.id = this.describedbyId;\n            const conditionDescribedby = conditionAttributeWithId(\n                this,\n                'aria-describedby',\n                this.id\n            );\n            this.conditionDescribedby = () => {\n                conditionDescribedby();\n                if (!idProvided) {\n                    this.removeAttribute('id');\n                }\n            };\n        }\n    }\n\n    protected renderButtons(): TemplateResult {\n        return html`\n            <sp-button-group class=\"button-group\">\n                <slot name=\"button\"></slot>\n            </sp-button-group>\n        `;\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <div class=\"grid\">\n                <div class=\"header\">\n                    ${this.renderHeading()} ${this.renderIcon()}\n                </div>\n                <sp-divider size=\"m\" class=\"divider\"></sp-divider>\n                ${this.renderContent()} ${this.renderButtons()}\n            </div>\n        `;\n    }\n}\n"],
  "mappings": "qNAWA,OAEI,QAAAA,EACA,mBAAAC,MAEG,gCACP,OACI,YAAAC,EACA,SAAAC,MACG,kDACP,MAAO,+CACP,OAAS,6BAAAC,MAAiC,uDAC1C,OAAS,YAAAC,MAAgB,mDACzB,OAAS,4BAAAC,MAAgC,mEACzC,OAAS,oBAAAC,MAAwB,2CACjC,OAAOC,MAAiB,wBAWjB,aAAM,oBAA6C,CACtD,eACA,cACA,UACA,QACA,cACA,WACJ,EAEA,SAASC,EACLC,EACAC,EACQ,CACR,MAAMC,EAAmBF,EAAK,iBAAiB,EACzCG,EAAgB,CAAC,EACvB,OAAAD,EAAiB,QAASE,GAAO,CAC7B,GAAIA,EAAG,GACHD,EAAI,KAAKC,EAAG,EAAE,MACX,CACH,MAAMC,EAAKJ,EAAS,IAAIN,EAAS,CAAC,GAClCS,EAAG,GAAKC,EACRF,EAAI,KAAKE,CAAE,CACf,CACJ,CAAC,EACMF,CACX,CACO,MAAMG,EAAN,MAAMA,UAAoBZ,EAA0BH,CAAe,CAAE,CAArE,kCAQH,KAAQ,iBAAmB,IAAIM,EAAiB,KAAM,CAClD,SAAU,IAAM,CACZ,KAAK,iCAAiC,CAC1C,CACJ,CAAC,EAED,KAAO,SAAgC,GAkDvC,KAAQ,aAAe,mBAAmBS,EAAY,eAAe,GAwBrE,KAAO,iCAAmC,IAAY,CAClD,GAAI,CAAC,KAAK,eAAgB,OAE1B,KAAM,CAAE,aAAAC,EAAc,aAAAC,CAAa,EAAI,KAAK,eACxCD,EAAeC,EACf,KAAK,eAAe,SAAW,EAE/B,KAAK,eAAe,gBAAgB,UAAU,CAEtD,EAEA,KAAQ,cAAgB,yBAAyBF,EAAY,eAAe,GAlG5E,WAA2B,QAAyB,CAChD,MAAO,CAACR,CAAW,CACvB,CAcA,IAAW,QAAQW,EAA8B,CAC7C,GAAIA,IAAY,KAAK,QACjB,OAEJ,MAAMC,EAAW,KAAK,QAClB,oBAAoB,SAASD,CAAO,GACpC,KAAK,aAAa,UAAWA,CAAO,EACpC,KAAK,SAAWA,IAEhB,KAAK,gBAAgB,SAAS,EAC9B,KAAK,SAAW,IAEpB,KAAK,cAAc,UAAWC,CAAQ,CAC1C,CAEA,IAAW,SAA+B,CACtC,OAAO,KAAK,QAChB,CAEU,YAA6B,CACnC,OAAQ,KAAK,QAAS,CAClB,IAAK,UACL,IAAK,QACD,OAAOpB;AAAA;AAAA,kBAIX,QACI,OAAOA,GACf,CACJ,CAEU,eAAgC,CACtC,OAAOA;AAAA,+CACgC,KAAK,mBAAmB;AAAA,SAEnE,CAEU,eAAgC,CACtC,OAAOA;AAAA;AAAA,oCAEqB,KAAK,mBAAmB;AAAA;AAAA,SAGxD,CAOQ,oBAAoB,CACxB,OAAAqB,CACJ,EAA8C,CACtC,KAAK,sBACL,KAAK,oBAAoB,EACzB,OAAO,KAAK,qBAEhB,MAAMR,EAAMJ,EACRY,EACA,KAAK,YACT,EACIR,EAAI,SACJ,KAAK,oBAAsBP,EACvB,KACA,kBACAO,CACJ,EAER,CAeU,oBAAoB,CAC1B,OAAAQ,CACJ,EAA8C,CAC1C,sBAAsB,IAAM,CAGxB,KAAK,iBAAiB,UAAU,KAAK,cAAc,EACnD,KAAK,iBAAiB,QAAQ,KAAK,cAAc,CACrD,CAAC,EACG,KAAK,uBACL,KAAK,qBAAqB,EAC1B,OAAO,KAAK,sBAEhB,MAAMR,EAAMJ,EACRY,EACA,KAAK,aACT,EACA,GAAIR,EAAI,QAAUA,EAAI,OAAS,EAC3B,KAAK,qBAAuBP,EACxB,KACA,mBACAO,CACJ,UACO,CAACA,EAAI,OAAQ,CACpB,MAAMS,EAAa,CAAC,CAAC,KAAK,GACrBA,IAAY,KAAK,GAAK,KAAK,eAChC,MAAMC,EAAuBjB,EACzB,KACA,mBACA,KAAK,EACT,EACA,KAAK,qBAAuB,IAAM,CAC9BiB,EAAqB,EAChBD,GACD,KAAK,gBAAgB,IAAI,CAEjC,CACJ,CACJ,CAEU,eAAgC,CACtC,OAAOtB;AAAA;AAAA;AAAA;AAAA,SAKX,CAEmB,QAAyB,CACxC,OAAOA;AAAA;AAAA;AAAA,sBAGO,KAAK,cAAc,CAAC,IAAI,KAAK,WAAW,CAAC;AAAA;AAAA;AAAA,kBAG7C,KAAK,cAAc,CAAC,IAAI,KAAK,cAAc,CAAC;AAAA;AAAA,SAG1D,CACJ,EAhKagB,EA+DF,cAAgB,EAzDfQ,EAAA,CADPrB,EAAM,UAAU,GALRa,EAMD,8BAWGQ,EAAA,CADVtB,EAAS,CAAE,KAAM,OAAQ,QAAS,EAAK,CAAC,GAhBhCc,EAiBE,uBAjBR,WAAM,YAANA",
  "names": ["html", "SpectrumElement", "property", "query", "FocusVisiblePolyfillMixin", "randomID", "conditionAttributeWithId", "ResizeController", "alertStyles", "gatherAppliedIdsFromSlottedChildren", "slot", "idBase", "assignedElements", "ids", "el", "id", "_AlertDialog", "offsetHeight", "scrollHeight", "variant", "oldValue", "target", "idProvided", "conditionDescribedby", "__decorateClass"]
}
