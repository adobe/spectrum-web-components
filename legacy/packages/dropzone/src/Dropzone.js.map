{
  "version": 3,
  "sources": ["Dropzone.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\n\nimport dropzoneStyles from './dropzone.css.js';\n\nexport type DropzoneEventDetail = DragEvent;\n\nexport type DropEffects = 'copy' | 'move' | 'link' | 'none';\n\n/**\n * @element sp-dropzone\n *\n * @slot - The default slot on an `sp-dropzone` is a great place to place upload instructions\n * built with an `sp-illustrated-message` or other information, possibly even built from data\n * provided by the upload, to support users successfully interacting with the drag and drop\n * based features of your application\n *\n * @fires sp-dropzone-should-accept - A cancellable event that confirms whether or not\n * a file dropped on the UI should be accepted.\n * @fires sp-dropzone-dragover - Announces when files have been dragged over the UI, but not yet dropped.\n * @fires sp-dropzone-dragleave - Announces when dragged files have been moved out of the UI without having been dropped.\n * @fires sp-dropzone-drop - Announces when dragged files have been dropped on the UI.\n */\nexport class Dropzone extends SpectrumElement {\n    public static override get styles(): CSSResultArray {\n        return [dropzoneStyles];\n    }\n\n    /**\n     * Controls the feedback (typically visual) the user is given during a drag and drop operation\n     * @attr\n     * @type {'copy' | 'move' | 'link' | 'none'}\n     */\n    public get dropEffect(): DropEffects {\n        return this._dropEffect;\n    }\n    public set dropEffect(value: DropEffects) {\n        if (['copy', 'move', 'link', 'none'].includes(value)) {\n            this._dropEffect = value;\n        }\n    }\n    private _dropEffect: DropEffects = 'copy';\n\n    /**\n     * Indicates that files are currently being dragged over the dropzone.\n     */\n    @property({ type: Boolean, reflect: true, attribute: 'dragged' })\n    public isDragged = false;\n\n    /**\n     * Set this property to indicate that the component is in a filled state.\n     */\n    @property({ type: Boolean, attribute: 'filled' })\n    public isFilled = false;\n\n    private debouncedDragLeave: number | null = null;\n\n    public override connectedCallback(): void {\n        super.connectedCallback();\n\n        this.addEventListener('drop', this.onDrop);\n        this.addEventListener('dragover', this.onDragOver);\n        this.addEventListener('dragleave', this.onDragLeave);\n    }\n\n    public override disconnectedCallback(): void {\n        super.disconnectedCallback();\n\n        this.removeEventListener('drop', this.onDrop);\n        this.removeEventListener('dragover', this.onDragOver);\n        this.removeEventListener('dragleave', this.onDragLeave);\n    }\n\n    public onDragOver(event: DragEvent): void {\n        const shouldAcceptEvent = new CustomEvent('sp-dropzone-should-accept', {\n            bubbles: true,\n            cancelable: true,\n            composed: true,\n            detail: event,\n        });\n        const shouldAccept = this.dispatchEvent(shouldAcceptEvent);\n        if (!event.dataTransfer) {\n            return;\n        }\n        if (!shouldAccept) {\n            event.dataTransfer.dropEffect = 'none';\n            return;\n        }\n\n        event.preventDefault();\n\n        this.clearDebouncedDragLeave();\n\n        this.isDragged = true;\n\n        event.dataTransfer.dropEffect = this.dropEffect;\n        const dragOverEvent = new CustomEvent('sp-dropzone-dragover', {\n            bubbles: true,\n            composed: true,\n            detail: event,\n        });\n        this.dispatchEvent(dragOverEvent);\n    }\n\n    public onDragLeave(event: DragEvent): void {\n        this.clearDebouncedDragLeave();\n\n        this.debouncedDragLeave = window.setTimeout(() => {\n            this.isDragged = false;\n\n            const dragLeave = new CustomEvent('sp-dropzone-dragleave', {\n                bubbles: true,\n                composed: true,\n                detail: event,\n            });\n            this.dispatchEvent(dragLeave);\n        }, 100);\n    }\n\n    public onDrop(event: DragEvent): void {\n        event.preventDefault();\n\n        this.clearDebouncedDragLeave();\n\n        this.isDragged = false;\n        const dropEvent = new CustomEvent('sp-dropzone-drop', {\n            bubbles: true,\n            composed: true,\n            detail: event,\n        });\n        this.dispatchEvent(dropEvent);\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <slot></slot>\n        `;\n    }\n\n    protected clearDebouncedDragLeave(): void {\n        if (this.debouncedDragLeave) {\n            clearTimeout(this.debouncedDragLeave);\n            this.debouncedDragLeave = null;\n        }\n    }\n}\n\ndeclare global {\n    interface GlobalEventHandlersEventMap {\n        'sp-dropzone:should-accept': CustomEvent<DragEvent>;\n        'sp-dropzone:dragover': CustomEvent<DragEvent>;\n        'sp-dropzone:dragleave': CustomEvent<DragEvent>;\n        'sp-dropzone:drop': CustomEvent<DragEvent>;\n    }\n}\n"],
  "mappings": "qNAYA,OAEI,QAAAA,EACA,mBAAAC,MAEG,gCACP,OAAS,YAAAC,MAAgB,kDAEzB,OAAOC,MAAoB,oBAoBpB,aAAM,iBAAiBF,CAAgB,CAAvC,kCAkBH,KAAQ,YAA2B,OAMnC,KAAO,UAAY,GAMnB,KAAO,SAAW,GAElB,KAAQ,mBAAoC,KA/B5C,WAA2B,QAAyB,CAChD,MAAO,CAACE,CAAc,CAC1B,CAOA,IAAW,YAA0B,CACjC,OAAO,KAAK,WAChB,CACA,IAAW,WAAWC,EAAoB,CAClC,CAAC,OAAQ,OAAQ,OAAQ,MAAM,EAAE,SAASA,CAAK,IAC/C,KAAK,YAAcA,EAE3B,CAiBgB,mBAA0B,CACtC,MAAM,kBAAkB,EAExB,KAAK,iBAAiB,OAAQ,KAAK,MAAM,EACzC,KAAK,iBAAiB,WAAY,KAAK,UAAU,EACjD,KAAK,iBAAiB,YAAa,KAAK,WAAW,CACvD,CAEgB,sBAA6B,CACzC,MAAM,qBAAqB,EAE3B,KAAK,oBAAoB,OAAQ,KAAK,MAAM,EAC5C,KAAK,oBAAoB,WAAY,KAAK,UAAU,EACpD,KAAK,oBAAoB,YAAa,KAAK,WAAW,CAC1D,CAEO,WAAWC,EAAwB,CACtC,MAAMC,EAAoB,IAAI,YAAY,4BAA6B,CACnE,QAAS,GACT,WAAY,GACZ,SAAU,GACV,OAAQD,CACZ,CAAC,EACKE,EAAe,KAAK,cAAcD,CAAiB,EACzD,GAAI,CAACD,EAAM,aACP,OAEJ,GAAI,CAACE,EAAc,CACfF,EAAM,aAAa,WAAa,OAChC,MACJ,CAEAA,EAAM,eAAe,EAErB,KAAK,wBAAwB,EAE7B,KAAK,UAAY,GAEjBA,EAAM,aAAa,WAAa,KAAK,WACrC,MAAMG,EAAgB,IAAI,YAAY,uBAAwB,CAC1D,QAAS,GACT,SAAU,GACV,OAAQH,CACZ,CAAC,EACD,KAAK,cAAcG,CAAa,CACpC,CAEO,YAAYH,EAAwB,CACvC,KAAK,wBAAwB,EAE7B,KAAK,mBAAqB,OAAO,WAAW,IAAM,CAC9C,KAAK,UAAY,GAEjB,MAAMI,EAAY,IAAI,YAAY,wBAAyB,CACvD,QAAS,GACT,SAAU,GACV,OAAQJ,CACZ,CAAC,EACD,KAAK,cAAcI,CAAS,CAChC,EAAG,GAAG,CACV,CAEO,OAAOJ,EAAwB,CAClCA,EAAM,eAAe,EAErB,KAAK,wBAAwB,EAE7B,KAAK,UAAY,GACjB,MAAMK,EAAY,IAAI,YAAY,mBAAoB,CAClD,QAAS,GACT,SAAU,GACV,OAAQL,CACZ,CAAC,EACD,KAAK,cAAcK,CAAS,CAChC,CAEmB,QAAyB,CACxC,OAAOV;AAAA;AAAA,SAGX,CAEU,yBAAgC,CAClC,KAAK,qBACL,aAAa,KAAK,kBAAkB,EACpC,KAAK,mBAAqB,KAElC,CACJ,CAlGWW,EAAA,CADNT,EAAS,CAAE,KAAM,QAAS,QAAS,GAAM,UAAW,SAAU,CAAC,GAvBvD,SAwBF,yBAMAS,EAAA,CADNT,EAAS,CAAE,KAAM,QAAS,UAAW,QAAS,CAAC,GA7BvC,SA8BF",
  "names": ["html", "SpectrumElement", "property", "dropzoneStyles", "value", "event", "shouldAcceptEvent", "shouldAccept", "dragOverEvent", "dragLeave", "dropEvent", "__decorateClass"]
}
