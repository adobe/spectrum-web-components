{
  "version": 3,
  "sources": ["icons.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport '@spectrum-web-components/icons/sp-icons-large.js';\nimport '@spectrum-web-components/icons/sp-icons-medium.js';\nimport { IconsLarge, IconsMedium } from '../';\nimport IconsetSVG from '../src/icons-large.svg.js';\nimport { elementUpdated, expect, fixture, html } from '@open-wc/testing';\nimport { stub } from 'sinon';\n\ndescribe('icons', () => {\n    it('large', async () => {\n        const el = await fixture<IconsLarge>(html`\n            <sp-icons-large></sp-icons-large>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el).to.not.equal(undefined);\n        expect(el.getIconList().length).to.be.above(0);\n    });\n    it('medium', async () => {\n        const el = await fixture<IconsMedium>(html`\n            <sp-icons-medium></sp-icons-medium>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el).to.not.equal(undefined);\n        expect(el.getIconList().length).to.be.above(0);\n    });\n    it('listens to slotchange events', async () => {\n        const el = await fixture<IconsMedium>(html`\n            <sp-icons-medium>${IconsetSVG}</sp-icons-medium>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el).to.not.equal(undefined);\n        expect(el.getIconList().length).to.equal(48);\n    });\n});\n\ndescribe('dev mode', () => {\n    let consoleWarnStub!: ReturnType<typeof stub>;\n    before(() => {\n        window.__swc.verbose = true;\n        consoleWarnStub = stub(console, 'warn');\n    });\n    afterEach(() => {\n        consoleWarnStub.resetHistory();\n    });\n    after(() => {\n        window.__swc.verbose = false;\n        consoleWarnStub.restore();\n    });\n\n    it('warns in devMode for deprecated usage - medium', async () => {\n        const el = await fixture<IconsMedium>(html`\n            <sp-icons-medium>${IconsetSVG}</sp-icons-medium>\n        `);\n\n        await elementUpdated(el);\n        expect(consoleWarnStub.called).to.be.true;\n\n        const spyCall = consoleWarnStub.getCall(0);\n        expect(\n            (spyCall.args.at(0) as string).includes('deprecated'),\n            'confirm deprecated variant warning'\n        ).to.be.true;\n        expect(spyCall.args.at(-1), 'confirm `data` shape').to.deep.equal({\n            data: {\n                localName: 'sp-icons-medium',\n                type: 'api',\n                level: 'deprecation',\n            },\n        });\n    });\n    it('warns in devMode for deprecated usage - large', async () => {\n        const el = await fixture<IconsLarge>(html`\n            <sp-icons-large>${IconsetSVG}</sp-icons-large>\n        `);\n\n        await elementUpdated(el);\n        expect(consoleWarnStub.called).to.be.true;\n\n        const spyCall = consoleWarnStub.getCall(0);\n        expect(\n            (spyCall.args.at(0) as string).includes('deprecated'),\n            'confirm deprecated variant warning'\n        ).to.be.true;\n        expect(spyCall.args.at(-1), 'confirm `data` shape').to.deep.equal({\n            data: {\n                localName: 'sp-icons-large',\n                type: 'api',\n                level: 'deprecation',\n            },\n        });\n    });\n});\n"],
  "mappings": ";AAUA,OAAO;AACP,OAAO;AAEP,OAAO,gBAAgB;AACvB,SAAS,gBAAgB,QAAQ,SAAS,YAAY;AACtD,SAAS,YAAY;AAErB,SAAS,SAAS,MAAM;AACpB,KAAG,SAAS,YAAY;AACpB,UAAM,KAAK,MAAM,QAAoB;AAAA;AAAA,SAEpC;AAED,UAAM,eAAe,EAAE;AAEvB,WAAO,EAAE,EAAE,GAAG,IAAI,MAAM,MAAS;AACjC,WAAO,GAAG,YAAY,EAAE,MAAM,EAAE,GAAG,GAAG,MAAM,CAAC;AAAA,EACjD,CAAC;AACD,KAAG,UAAU,YAAY;AACrB,UAAM,KAAK,MAAM,QAAqB;AAAA;AAAA,SAErC;AAED,UAAM,eAAe,EAAE;AAEvB,WAAO,EAAE,EAAE,GAAG,IAAI,MAAM,MAAS;AACjC,WAAO,GAAG,YAAY,EAAE,MAAM,EAAE,GAAG,GAAG,MAAM,CAAC;AAAA,EACjD,CAAC;AACD,KAAG,gCAAgC,YAAY;AAC3C,UAAM,KAAK,MAAM,QAAqB;AAAA,+BACf,UAAU;AAAA,SAChC;AAED,UAAM,eAAe,EAAE;AAEvB,WAAO,EAAE,EAAE,GAAG,IAAI,MAAM,MAAS;AACjC,WAAO,GAAG,YAAY,EAAE,MAAM,EAAE,GAAG,MAAM,EAAE;AAAA,EAC/C,CAAC;AACL,CAAC;AAED,SAAS,YAAY,MAAM;AACvB,MAAI;AACJ,SAAO,MAAM;AACT,WAAO,MAAM,UAAU;AACvB,sBAAkB,KAAK,SAAS,MAAM;AAAA,EAC1C,CAAC;AACD,YAAU,MAAM;AACZ,oBAAgB,aAAa;AAAA,EACjC,CAAC;AACD,QAAM,MAAM;AACR,WAAO,MAAM,UAAU;AACvB,oBAAgB,QAAQ;AAAA,EAC5B,CAAC;AAED,KAAG,kDAAkD,YAAY;AAC7D,UAAM,KAAK,MAAM,QAAqB;AAAA,+BACf,UAAU;AAAA,SAChC;AAED,UAAM,eAAe,EAAE;AACvB,WAAO,gBAAgB,MAAM,EAAE,GAAG,GAAG;AAErC,UAAM,UAAU,gBAAgB,QAAQ,CAAC;AACzC;AAAA,MACK,QAAQ,KAAK,GAAG,CAAC,EAAa,SAAS,YAAY;AAAA,MACpD;AAAA,IACJ,EAAE,GAAG,GAAG;AACR,WAAO,QAAQ,KAAK,GAAG,EAAE,GAAG,sBAAsB,EAAE,GAAG,KAAK,MAAM;AAAA,MAC9D,MAAM;AAAA,QACF,WAAW;AAAA,QACX,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,IACJ,CAAC;AAAA,EACL,CAAC;AACD,KAAG,iDAAiD,YAAY;AAC5D,UAAM,KAAK,MAAM,QAAoB;AAAA,8BACf,UAAU;AAAA,SAC/B;AAED,UAAM,eAAe,EAAE;AACvB,WAAO,gBAAgB,MAAM,EAAE,GAAG,GAAG;AAErC,UAAM,UAAU,gBAAgB,QAAQ,CAAC;AACzC;AAAA,MACK,QAAQ,KAAK,GAAG,CAAC,EAAa,SAAS,YAAY;AAAA,MACpD;AAAA,IACJ,EAAE,GAAG,GAAG;AACR,WAAO,QAAQ,KAAK,GAAG,EAAE,GAAG,sBAAsB,EAAE,GAAG,KAAK,MAAM;AAAA,MAC9D,MAAM;AAAA,QACF,WAAW;AAAA,QACX,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,IACJ,CAAC;AAAA,EACL,CAAC;AACL,CAAC;",
  "names": []
}
