{
  "version": 3,
  "sources": ["FieldLabel.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    nothing,\n    PropertyValues,\n    SizedMixin,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport type { Focusable } from '@spectrum-web-components/shared';\nimport { randomID } from '@spectrum-web-components/shared/src/random-id.js';\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-asterisk100.js';\nimport asteriskIconStyles from '@spectrum-web-components/icon/src/spectrum-icon-asterisk.css.js';\nimport {\n    conditionAttributeWithId,\n    conditionAttributeWithoutId,\n} from '@spectrum-web-components/base/src/condition-attribute-with-id.js';\nimport {\n    ElementResolutionController,\n    elementResolverUpdatedSymbol,\n} from '@spectrum-web-components/reactive-controllers/src/ElementResolution.js';\n\nimport styles from './field-label.css.js';\n\ntype AcceptsFocusVisisble = HTMLElement & { forceFocusVisible?(): void };\ntype Labelable = Focusable & {\n    applyFocusElementLabel?: (\n        appliedLabel: string,\n        labelElement?: FieldLabel\n    ) => void;\n};\n\n/**\n * @element sp-field-label\n *\n * @slot - text content of the label\n */\nexport class FieldLabel extends SizedMixin(SpectrumElement, {\n    noDefaultSize: true,\n}) {\n    public static override get styles(): CSSResultArray {\n        return [styles, asteriskIconStyles];\n    }\n\n    @property({ type: Boolean, reflect: true })\n    public disabled = false;\n\n    @property({ type: String })\n    public override id = '';\n\n    @property({ type: String })\n    public for = '';\n\n    @property({ type: Boolean, reflect: true })\n    public required = false;\n\n    @query('slot')\n    public slotEl!: HTMLSlotElement;\n\n    @property({ type: String, reflect: true, attribute: 'side-aligned' })\n    public sideAligned?: 'start' | 'end';\n\n    private target?: Labelable;\n\n    private handleClick(event: Event): void {\n        if (!this.target || this.disabled || event.defaultPrevented) return;\n        this.target.focus();\n        const parent = this.getRootNode() as ShadowRoot;\n        const target = this.target as AcceptsFocusVisisble;\n        const targetParent = target.getRootNode() as ShadowRoot;\n        const targetHost = targetParent.host as AcceptsFocusVisisble;\n        if (targetParent === parent && target.forceFocusVisible) {\n            target.forceFocusVisible();\n        } else if (targetHost && targetHost.forceFocusVisible) {\n            targetHost.forceFocusVisible();\n        }\n    }\n\n    private resolvedElement = new ElementResolutionController(this);\n\n    private applyTargetLabel(target?: Labelable): void {\n        // Apply new target when provided\n        this.target = target || this.target;\n        if (this.target) {\n            // When target is available add or remove label information\n            // depending on the value of `apply`.\n            const applyLabel = this.target.applyFocusElementLabel;\n            const focusable = this.target.focusElement || this.target;\n            const targetParent = focusable.getRootNode() as HTMLElement;\n            if (typeof applyLabel !== 'undefined') {\n                applyLabel(this.labelText, this);\n            } else if (targetParent === (this.getRootNode() as HTMLElement)) {\n                const conditionAttribute = target\n                    ? conditionAttributeWithId\n                    : conditionAttributeWithoutId;\n                conditionAttribute(focusable, 'aria-labelledby', [this.id]);\n            } else {\n                if (target) {\n                    focusable.setAttribute('aria-label', this.labelText);\n                } else {\n                    focusable.removeAttribute('aria-label');\n                }\n            }\n        }\n    }\n\n    private async manageTarget(): Promise<void> {\n        this.applyTargetLabel();\n        const target = this.resolvedElement.element as Focusable;\n        if (!target) {\n            this.target = target;\n            return;\n        }\n        if (target.localName.search('-') > 0) {\n            await customElements.whenDefined(target.localName);\n        }\n        if (typeof target.updateComplete !== 'undefined') {\n            await target.updateComplete;\n        }\n        this.applyTargetLabel(target);\n    }\n\n    private get labelText(): string {\n        const assignedNodes = this.slotEl.assignedNodes({ flatten: true });\n        if (!assignedNodes.length) {\n            return '';\n        }\n        const labelText = assignedNodes.map((node) =>\n            (node.textContent || /* c8 ignore next */ '').trim()\n        );\n        return labelText.join(' ');\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <label>\n                <slot></slot>\n                ${this.required\n                    ? html`\n                          <sp-icon-asterisk100\n                              class=\"required-icon spectrum-UIIcon-Asterisk100\"\n                          ></sp-icon-asterisk100>\n                      `\n                    : nothing}\n            </label>\n        `;\n    }\n\n    protected override firstUpdated(changes: PropertyValues): void {\n        super.firstUpdated(changes);\n        this.addEventListener('click', this.handleClick);\n    }\n\n    protected override willUpdate(changes: PropertyValues): void {\n        if (!this.hasAttribute('id')) {\n            this.setAttribute(\n                'id',\n                `${this.tagName.toLowerCase()}-${randomID()}`\n            );\n        }\n        if (changes.has('for')) {\n            this.resolvedElement.selector = this.for ? `#${this.for}` : '';\n        }\n        if (changes.has('id') || changes.has(elementResolverUpdatedSymbol)) {\n            this.manageTarget();\n        }\n    }\n}\n"],
  "mappings": "qNAYA,OAEI,QAAAA,EACA,WAAAC,EAEA,cAAAC,EACA,mBAAAC,MAEG,gCACP,OACI,YAAAC,EACA,SAAAC,MACG,kDAEP,OAAS,YAAAC,MAAgB,mDACzB,MAAO,iEACP,OAAOC,MAAwB,kEAC/B,OACI,4BAAAC,EACA,+BAAAC,MACG,mEACP,OACI,+BAAAC,EACA,gCAAAC,MACG,yEAEP,OAAOC,MAAY,uBAeZ,aAAM,mBAAmBV,EAAWC,EAAiB,CACxD,cAAe,EACnB,CAAC,CAAE,CAFI,kCAQH,KAAO,SAAW,GAGlB,KAAgB,GAAK,GAGrB,KAAO,IAAM,GAGb,KAAO,SAAW,GAwBlB,KAAQ,gBAAkB,IAAIO,EAA4B,IAAI,EAtC9D,WAA2B,QAAyB,CAChD,MAAO,CAACE,EAAQL,CAAkB,CACtC,CAsBQ,YAAYM,EAAoB,CACpC,GAAI,CAAC,KAAK,QAAU,KAAK,UAAYA,EAAM,iBAAkB,OAC7D,KAAK,OAAO,MAAM,EAClB,MAAMC,EAAS,KAAK,YAAY,EAC1BC,EAAS,KAAK,OACdC,EAAeD,EAAO,YAAY,EAClCE,EAAaD,EAAa,KAC5BA,IAAiBF,GAAUC,EAAO,kBAClCA,EAAO,kBAAkB,EAClBE,GAAcA,EAAW,mBAChCA,EAAW,kBAAkB,CAErC,CAIQ,iBAAiBF,EAA0B,CAG/C,GADA,KAAK,OAASA,GAAU,KAAK,OACzB,KAAK,OAAQ,CAGb,MAAMG,EAAa,KAAK,OAAO,uBACzBC,EAAY,KAAK,OAAO,cAAgB,KAAK,OAC7CH,EAAeG,EAAU,YAAY,EACvC,OAAOD,GAAe,YACtBA,EAAW,KAAK,UAAW,IAAI,EACxBF,IAAkB,KAAK,YAAY,GACfD,EACrBP,EACAC,GACaU,EAAW,kBAAmB,CAAC,KAAK,EAAE,CAAC,EAEtDJ,EACAI,EAAU,aAAa,aAAc,KAAK,SAAS,EAEnDA,EAAU,gBAAgB,YAAY,CAGlD,CACJ,CAEA,MAAc,cAA8B,CACxC,KAAK,iBAAiB,EACtB,MAAMJ,EAAS,KAAK,gBAAgB,QACpC,GAAI,CAACA,EAAQ,CACT,KAAK,OAASA,EACd,MACJ,CACIA,EAAO,UAAU,OAAO,GAAG,EAAI,GAC/B,MAAM,eAAe,YAAYA,EAAO,SAAS,EAEjD,OAAOA,EAAO,gBAAmB,aACjC,MAAMA,EAAO,eAEjB,KAAK,iBAAiBA,CAAM,CAChC,CAEA,IAAY,WAAoB,CAC5B,MAAMK,EAAgB,KAAK,OAAO,cAAc,CAAE,QAAS,EAAK,CAAC,EACjE,OAAKA,EAAc,OAGDA,EAAc,IAAKC,IAChCA,EAAK,aAAoC,IAAI,KAAK,CACvD,EACiB,KAAK,GAAG,EALd,EAMf,CAEmB,QAAyB,CACxC,OAAOrB;AAAA;AAAA;AAAA,kBAGG,KAAK,SACDA;AAAA;AAAA;AAAA;AAAA,wBAKAC,CAAO;AAAA;AAAA,SAGzB,CAEmB,aAAaqB,EAA+B,CAC3D,MAAM,aAAaA,CAAO,EAC1B,KAAK,iBAAiB,QAAS,KAAK,WAAW,CACnD,CAEmB,WAAWA,EAA+B,CACpD,KAAK,aAAa,IAAI,GACvB,KAAK,aACD,KACA,GAAG,KAAK,QAAQ,YAAY,CAAC,IAAIhB,EAAS,CAAC,EAC/C,EAEAgB,EAAQ,IAAI,KAAK,IACjB,KAAK,gBAAgB,SAAW,KAAK,IAAM,IAAI,KAAK,GAAG,GAAK,KAE5DA,EAAQ,IAAI,IAAI,GAAKA,EAAQ,IAAIX,CAA4B,IAC7D,KAAK,aAAa,CAE1B,CACJ,CA1HWY,EAAA,CADNnB,EAAS,CAAE,KAAM,QAAS,QAAS,EAAK,CAAC,GAPjC,WAQF,wBAGSmB,EAAA,CADfnB,EAAS,CAAE,KAAM,MAAO,CAAC,GAVjB,WAWO,kBAGTmB,EAAA,CADNnB,EAAS,CAAE,KAAM,MAAO,CAAC,GAbjB,WAcF,mBAGAmB,EAAA,CADNnB,EAAS,CAAE,KAAM,QAAS,QAAS,EAAK,CAAC,GAhBjC,WAiBF,wBAGAmB,EAAA,CADNlB,EAAM,MAAM,GAnBJ,WAoBF,sBAGAkB,EAAA,CADNnB,EAAS,CAAE,KAAM,OAAQ,QAAS,GAAM,UAAW,cAAe,CAAC,GAtB3D,WAuBF",
  "names": ["html", "nothing", "SizedMixin", "SpectrumElement", "property", "query", "randomID", "asteriskIconStyles", "conditionAttributeWithId", "conditionAttributeWithoutId", "ElementResolutionController", "elementResolverUpdatedSymbol", "styles", "event", "parent", "target", "targetParent", "targetHost", "applyLabel", "focusable", "assignedNodes", "node", "changes", "__decorateClass"]
}
