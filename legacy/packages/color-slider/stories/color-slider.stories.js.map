{
  "version": 3,
  "sources": ["color-slider.stories.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { html, TemplateResult } from '@spectrum-web-components/base';\n\nimport '@spectrum-web-components/color-slider/sp-color-slider.js';\nimport { gradient } from './images.js';\nexport default {\n    title: 'Color/Slider',\n    component: 'sp-color-slider',\n};\n\nexport const Default = (): TemplateResult => {\n    return html`\n        <sp-color-slider></sp-color-slider>\n    `;\n};\n\n// export const alpha = (): TemplateResult => {\n//     return html`\n//         <sp-color-slider\n//             style=\"--sp-color-slider-gradient: rgba(0, 0, 0, 1) 0%, rgba(0, 0, 0, 0) 100%;\"\n//             color=\"rgba(0, 0, 0, 1)\"\n//         ></sp-color-slider>\n//     `;\n// };\n\nexport const disabled = (): TemplateResult => {\n    return html`\n        <sp-color-slider disabled></sp-color-slider>\n    `;\n};\n\nexport const vertical = (): TemplateResult => {\n    return html`\n        <sp-color-slider vertical></sp-color-slider>\n    `;\n};\n\nexport const canvas = (): TemplateResult => {\n    return html`\n        <sp-color-slider color=\"rgb(255, 0, 0)\">\n            <canvas slot=\"gradient\" role=\"presentation\"></canvas>\n        </sp-color-slider>\n    `;\n};\n\nclass CanvasWriter extends HTMLElement {\n    writeToCanvas(): void {\n        const { previousElementSibling } = this;\n        if (previousElementSibling) {\n            const canvas = previousElementSibling.querySelector(\n                'canvas[slot=\"gradient\"]'\n            ) as HTMLCanvasElement;\n\n            if (canvas) {\n                canvas.width = canvas.offsetWidth;\n                canvas.height = canvas.offsetHeight;\n                const context = canvas.getContext('2d');\n                if (context) {\n                    context.rect(0, 0, canvas.width, canvas.height);\n\n                    const gradient = context.createLinearGradient(\n                        0,\n                        0,\n                        canvas.width,\n                        canvas.height\n                    );\n\n                    gradient.addColorStop(0, 'rgb(255, 0, 0)');\n                    gradient.addColorStop(0.17, 'rgb(255, 255, 0)');\n                    gradient.addColorStop(0.33, 'rgb(0, 255, 0)');\n                    gradient.addColorStop(0.5, 'rgb(0, 255, 255)');\n                    gradient.addColorStop(0.67, 'rgb(0, 0, 255)');\n                    gradient.addColorStop(0.83, 'rgb(255, 0, 255)');\n                    gradient.addColorStop(1, 'rgb(255, 0, 0)');\n\n                    context.fillStyle = gradient;\n                    context.fill();\n                }\n            }\n        }\n    }\n\n    constructor() {\n        super();\n        this.writeStatePromise = new Promise((res) => {\n            requestAnimationFrame(() => {\n                this.writeToCanvas();\n                res(true);\n            });\n        });\n    }\n\n    private writeStatePromise: Promise<boolean> = Promise.resolve(false);\n\n    get updateComplete(): Promise<boolean> {\n        return this.writeStatePromise;\n    }\n}\n\ncustomElements.define('slider-canvas-writer', CanvasWriter);\n\ncanvas.decorators = [\n    (story: () => TemplateResult): TemplateResult => {\n        return html`\n            ${story()}\n            <slider-canvas-writer></slider-canvas-writer>\n        `;\n    },\n];\n\nexport const image = (): TemplateResult => {\n    return html`\n        <sp-color-slider color=\"rgb(255, 0, 0)\">\n            <img slot=\"gradient\" role=\"presentation\" src=${gradient} />\n        </sp-color-slider>\n    `;\n};\n"],
  "mappings": ";AAYA,SAAS,YAA4B;AAErC,OAAO;AACP,SAAS,gBAAgB;AACzB,eAAe;AAAA,EACX,OAAO;AAAA,EACP,WAAW;AACf;AAEO,aAAM,UAAU,MAAsB;AACzC,SAAO;AAAA;AAAA;AAGX;AAWO,aAAM,WAAW,MAAsB;AAC1C,SAAO;AAAA;AAAA;AAGX;AAEO,aAAM,WAAW,MAAsB;AAC1C,SAAO;AAAA;AAAA;AAGX;AAEO,aAAM,SAAS,MAAsB;AACxC,SAAO;AAAA;AAAA;AAAA;AAAA;AAKX;AAEA,MAAM,qBAAqB,YAAY;AAAA,EAqCnC,cAAc;AACV,UAAM;AASV,SAAQ,oBAAsC,QAAQ,QAAQ,KAAK;AAR/D,SAAK,oBAAoB,IAAI,QAAQ,CAAC,QAAQ;AAC1C,4BAAsB,MAAM;AACxB,aAAK,cAAc;AACnB,YAAI,IAAI;AAAA,MACZ,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA,EA5CA,gBAAsB;AAClB,UAAM,EAAE,uBAAuB,IAAI;AACnC,QAAI,wBAAwB;AACxB,YAAMA,UAAS,uBAAuB;AAAA,QAClC;AAAA,MACJ;AAEA,UAAIA,SAAQ;AACR,QAAAA,QAAO,QAAQA,QAAO;AACtB,QAAAA,QAAO,SAASA,QAAO;AACvB,cAAM,UAAUA,QAAO,WAAW,IAAI;AACtC,YAAI,SAAS;AACT,kBAAQ,KAAK,GAAG,GAAGA,QAAO,OAAOA,QAAO,MAAM;AAE9C,gBAAMC,YAAW,QAAQ;AAAA,YACrB;AAAA,YACA;AAAA,YACAD,QAAO;AAAA,YACPA,QAAO;AAAA,UACX;AAEA,UAAAC,UAAS,aAAa,GAAG,gBAAgB;AACzC,UAAAA,UAAS,aAAa,MAAM,kBAAkB;AAC9C,UAAAA,UAAS,aAAa,MAAM,gBAAgB;AAC5C,UAAAA,UAAS,aAAa,KAAK,kBAAkB;AAC7C,UAAAA,UAAS,aAAa,MAAM,gBAAgB;AAC5C,UAAAA,UAAS,aAAa,MAAM,kBAAkB;AAC9C,UAAAA,UAAS,aAAa,GAAG,gBAAgB;AAEzC,kBAAQ,YAAYA;AACpB,kBAAQ,KAAK;AAAA,QACjB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAcA,IAAI,iBAAmC;AACnC,WAAO,KAAK;AAAA,EAChB;AACJ;AAEA,eAAe,OAAO,wBAAwB,YAAY;AAE1D,OAAO,aAAa;AAAA,EAChB,CAAC,UAAgD;AAC7C,WAAO;AAAA,cACD,MAAM,CAAC;AAAA;AAAA;AAAA,EAGjB;AACJ;AAEO,aAAM,QAAQ,MAAsB;AACvC,SAAO;AAAA;AAAA,2DAEgD,QAAQ;AAAA;AAAA;AAGnE;",
  "names": ["canvas", "gradient"]
}
