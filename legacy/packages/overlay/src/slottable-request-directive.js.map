{
  "version": 3,
  "sources": ["slottable-request-directive.ts"],
  "sourcesContent": ["/*\nCopyright 2023 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n    ElementPart,\n    nothing,\n    render,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    AsyncDirective,\n    directive,\n} from '@spectrum-web-components/base/src/async-directive.js';\nimport {\n    removeSlottableRequest,\n    SlottableRequestEvent,\n} from './slottable-request-event.js';\n\nexport class SlottableRequestDirective extends AsyncDirective {\n    protected template!: () => TemplateResult;\n    protected target!: HTMLElement;\n    private renderBefore: HTMLElement | undefined;\n    protected listenerHost!: HTMLElement;\n    protected listeners!: AbortController;\n\n    /* c8 ignore next 9 */\n    render(_template: () => TemplateResult): unknown {\n        // render function here just defines the interface to the update call later\n        // we don't have anything to render since this is intended to be an ElementPart directive\n        // so will be used on an element and is not itself rendered\n        return nothing;\n    }\n\n    override update(\n        part: ElementPart,\n        [template]: Parameters<this['render']>\n    ): void {\n        this.template = template;\n        if (this.target !== part.element) {\n            this.target = part.element as HTMLElement;\n            this.renderBefore = this.target.children[0] as HTMLElement;\n        }\n        this.listenerHost = this.target;\n        this.init();\n    }\n\n    handleSlottableRequest(event: SlottableRequestEvent): void {\n        /* c8 ignore next 1 */\n        if (event.target !== event.currentTarget) return;\n\n        const willRemoveSlottable = event.data === removeSlottableRequest;\n\n        render(willRemoveSlottable ? undefined : this.template(), this.target, {\n            renderBefore: this.renderBefore,\n        });\n    }\n\n    init(): void {\n        this.listeners?.abort();\n        this.listeners = new AbortController();\n        const { signal } = this.listeners;\n        this.listenerHost.addEventListener(\n            'slottable-request',\n            (event: Event) =>\n                this.handleSlottableRequest(event as SlottableRequestEvent),\n            { signal }\n        );\n\n        if (window.__swc.DEBUG) {\n            window.__swc.warn(\n                undefined,\n                `\u26A0\uFE0F  WARNING \u26A0\uFE0F : The Overlay Trigger Directive is experimental and there is no guarantees behind its usage in an application!! Its API and presence within the library could be changed at anytime. See \"sp-overlay\" or \"Overlay.open()\" for a stable API for overlaying content on your application.`,\n                'https://opensource.adobe.com/spectrum-web-components/components/overlay',\n                {\n                    level: 'high',\n                    type: 'api',\n                }\n            );\n        }\n    }\n\n    override disconnected(): void {\n        this.listeners?.abort();\n    }\n\n    /* c8 ignore next 3 */\n    override reconnected(): void {\n        this.init();\n    }\n}\n\nexport const slottableRequest = directive(SlottableRequestDirective);\n"],
  "mappings": "aAWA,OAEI,WAAAA,EACA,UAAAC,MAEG,gCACP,OACI,kBAAAC,EACA,aAAAC,MACG,uDACP,OACI,0BAAAC,MAEG,+BAEA,aAAM,kCAAkCF,CAAe,CAQ1D,OAAOG,EAA0C,CAI7C,OAAOL,CACX,CAES,OACLM,EACA,CAACC,CAAQ,EACL,CACJ,KAAK,SAAWA,EACZ,KAAK,SAAWD,EAAK,UACrB,KAAK,OAASA,EAAK,QACnB,KAAK,aAAe,KAAK,OAAO,SAAS,CAAC,GAE9C,KAAK,aAAe,KAAK,OACzB,KAAK,KAAK,CACd,CAEA,uBAAuBE,EAAoC,CAEvD,GAAIA,EAAM,SAAWA,EAAM,cAAe,OAE1C,MAAMC,EAAsBD,EAAM,OAASJ,EAE3CH,EAAOQ,EAAsB,OAAY,KAAK,SAAS,EAAG,KAAK,OAAQ,CACnE,aAAc,KAAK,YACvB,CAAC,CACL,CAEA,MAAa,CAjEjB,IAAAC,GAkEQA,EAAA,KAAK,YAAL,MAAAA,EAAgB,QAChB,KAAK,UAAY,IAAI,gBACrB,KAAM,CAAE,OAAAC,CAAO,EAAI,KAAK,UACxB,KAAK,aAAa,iBACd,oBACCH,GACG,KAAK,uBAAuBA,CAA8B,EAC9D,CAAE,OAAAG,CAAO,CACb,CAaJ,CAES,cAAqB,CAzFlC,IAAAD,GA0FQA,EAAA,KAAK,YAAL,MAAAA,EAAgB,OACpB,CAGS,aAAoB,CACzB,KAAK,KAAK,CACd,CACJ,CAEO,aAAM,iBAAmBP,EAAU,yBAAyB",
  "names": ["nothing", "render", "AsyncDirective", "directive", "removeSlottableRequest", "_template", "part", "template", "event", "willRemoveSlottable", "_a", "signal"]
}
