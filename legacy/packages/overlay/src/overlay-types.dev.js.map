{
  "version": 3,
  "sources": ["overlay-types.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport type { Placement } from '@floating-ui/dom';\nimport type { VirtualTrigger } from './VirtualTrigger.dev.js'\n\nexport type Constructor<T = Record<string, unknown>> = {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    new (...args: any[]): T;\n    prototype: T;\n};\n\nexport { Placement };\n\nexport type OverlayTypes = 'auto' | 'hint' | 'manual' | 'modal' | 'page';\n\nexport type TriggerInteraction = 'click' | 'longpress' | 'hover';\n\nexport type TriggerInteractions = OverlayTypes;\n\nexport type TriggerInteractionsV1 =\n    | 'click'\n    | 'longpress'\n    | 'hover'\n    | 'custom'\n    | 'replace'\n    | 'inline'\n    | 'modal';\n\nexport type OverlayTriggerInteractions = Extract<\n    TriggerInteractions,\n    'inline' | 'modal' | 'replace'\n>;\n\nexport interface OverlayOpenCloseDetail {\n    interaction: TriggerInteractions;\n    reason?: 'external-click';\n}\n\nexport interface OverlayCloseReasonDetail {\n    reason?: 'external-click';\n}\n\nexport type OverlayOptions = {\n    delayed?: boolean;\n    notImmediatelyClosable?: boolean;\n    offset?: number | [number, number]; // supporting multi-axis\n    placement?: Placement;\n    receivesFocus?: 'auto' | 'true' | 'false';\n    trigger?: HTMLElement | VirtualTrigger;\n    type?: 'modal' | 'page' | 'hint' | 'auto' | 'manual';\n};\n\nexport type OverlayOptionsV1 = {\n    root?: HTMLElement;\n    delayed?: boolean;\n    placement?: Placement;\n    offset?: number;\n    receivesFocus?: 'true' | 'false' | 'auto';\n    notImmediatelyClosable?: boolean;\n    abortPromise?: Promise<boolean>;\n    virtualTrigger?: VirtualTrigger;\n};\n\ndeclare global {\n    interface GlobalEventHandlersEventMap {\n        'sp-opened': CustomEvent<OverlayOpenCloseDetail>;\n        'sp-closed': CustomEvent<OverlayOpenCloseDetail>;\n    }\n}\n\nexport type OpenableElement = HTMLElement & {\n    open: boolean;\n    tipElement?: HTMLElement;\n    updateComplete?: Promise<void>;\n};\n\nexport type OverlayState = 'closed' | 'opening' | 'opened' | 'closing';\n"],
  "mappings": ";AAqBA;",
  "names": []
}
