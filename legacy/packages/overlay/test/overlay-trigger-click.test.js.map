{
  "version": 3,
  "sources": ["overlay-trigger-click.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n    elementUpdated,\n    expect,\n    html,\n    nextFrame,\n    oneEvent,\n    waitUntil,\n} from '@open-wc/testing';\nimport type { Popover } from '@spectrum-web-components/popover';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport '@spectrum-web-components/tooltip/sp-tooltip.js';\n\nimport '@spectrum-web-components/button/sp-button.js';\nimport '@spectrum-web-components/action-button/sp-action-button.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-magnify.js';\nimport {\n    OverlayTrigger,\n    TriggerInteractionsV1,\n} from '@spectrum-web-components/overlay';\nimport '@spectrum-web-components/overlay/overlay-trigger.js';\nimport { spy } from 'sinon';\nimport { ActionButton } from '@spectrum-web-components/action-button';\nimport { fixture, isOnTopLayer } from '../../../test/testing-helpers.js';\n\ndescribe('Overlay Trigger - Click', () => {\n    it('displays `click` declaratively', async () => {\n        const openedSpy = spy();\n        const closedSpy = spy();\n        const el = await fixture<OverlayTrigger>(\n            (() => html`\n                <overlay-trigger\n                    placement=\"right-start\"\n                    open=\"click\"\n                    @sp-opened=${() => openedSpy()}\n                    @sp-closed=${() => closedSpy()}\n                >\n                    <sp-action-button slot=\"trigger\">\n                        <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                    </sp-action-button>\n                    <sp-popover slot=\"click-content\" tip></sp-popover>\n                </overlay-trigger>\n            `)()\n        );\n\n        await waitUntil(\n            () => {\n                return openedSpy.calledOnce;\n            },\n            'click content projected to overlay',\n            { timeout: 2000 }\n        );\n\n        await nextFrame();\n\n        el.removeAttribute('open');\n        await elementUpdated(el);\n\n        await waitUntil(() => closedSpy.calledOnce, 'click content returned', {\n            timeout: 2000,\n        });\n    });\n    describe('closes on scroll', () => {\n        afterEach(async () => {\n            if (document.scrollingElement) {\n                document.scrollingElement.scrollTop = 0;\n            }\n            await waitUntil(() => {\n                if (document.scrollingElement) {\n                    return document.scrollingElement.scrollTop === 0;\n                }\n                return true;\n            });\n        });\n        (['click', 'replace', 'inline'] as TriggerInteractionsV1[]).map(\n            (interaction) => {\n                it(`closes \"${interaction}\" overlay on scroll`, async function () {\n                    const el = await fixture<OverlayTrigger>(html`\n                        <overlay-trigger\n                            placement=\"right\"\n                            type=${interaction}\n                            content=\"click\"\n                        >\n                            <sp-action-button\n                                slot=\"trigger\"\n                                style=\"margin: 50vh 0 100vh;\"\n                            >\n                                <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                            </sp-action-button>\n                            <sp-popover slot=\"click-content\" tip>\n                                Content\n                            </sp-popover>\n                        </overlay-trigger>\n                    `);\n                    await nextFrame();\n                    const popover = el.querySelector('sp-popover') as Popover;\n                    expect(el.open).to.be.undefined;\n\n                    await elementUpdated(el);\n                    const opened = oneEvent(el, 'sp-opened');\n                    const trigger = el.querySelector(\n                        'sp-action-button'\n                    ) as HTMLElement;\n                    trigger.click();\n\n                    await opened;\n\n                    expect(el.open).to.equal('click');\n\n                    expect(await isOnTopLayer(popover)).to.be.true;\n\n                    const closed = oneEvent(el, 'sp-closed');\n                    if (document.scrollingElement) {\n                        document.scrollingElement.scrollTop = 100;\n                    }\n\n                    await closed;\n\n                    expect(el.open).to.be.undefined;\n\n                    expect(await isOnTopLayer(popover)).to.be.false;\n                });\n            }\n        );\n    });\n    it('opens a second time', async () => {\n        const openedSpy = spy();\n        const closedSpy = spy();\n        const el = await fixture<OverlayTrigger>(html`\n            <overlay-trigger\n                placement=\"right-start\"\n                type=\"modal\"\n                open=\"click\"\n                @sp-opened=${() => openedSpy()}\n                @sp-closed=${() => closedSpy()}\n            >\n                <sp-action-button slot=\"trigger\">\n                    <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                </sp-action-button>\n                <sp-popover slot=\"click-content\" tip></sp-popover>\n            </overlay-trigger>\n        `);\n        await elementUpdated(el);\n        const trigger = el.querySelector('[slot=trigger]') as ActionButton;\n\n        await waitUntil(\n            () => openedSpy.calledOnce,\n            'click content projected to overlay',\n            { timeout: 2000 }\n        );\n        expect(el.open).to.equal('click');\n\n        el.removeAttribute('open');\n        await elementUpdated(el);\n\n        await waitUntil(() => closedSpy.calledOnce, 'click content returned', {\n            timeout: 2000,\n        });\n\n        expect(el.open).to.be.null;\n\n        trigger.click();\n        await waitUntil(\n            () => openedSpy.callCount === 2,\n            'click content projected to overlay, again',\n            { timeout: 2000 }\n        );\n        expect(el.open).to.equal('click');\n    });\n\n    it('opens with a delay on click', async () => {\n        const el = await fixture<OverlayTrigger>(html`\n            <overlay-trigger placement=\"right-start\">\n                <sp-button slot=\"trigger\" variant=\"primary\"></sp-button>\n                <sp-tooltip\n                    slot=\"click-content\"\n                    id=\"content\"\n                    delayed\n                ></sp-tooltip>\n            </overlay-trigger>\n        `);\n        const start = performance.now();\n        const opened = oneEvent(el, 'sp-opened');\n\n        el.setAttribute('open', 'click');\n        await opened;\n\n        const end = performance.now();\n        expect(end - start).to.be.greaterThan(1000);\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
