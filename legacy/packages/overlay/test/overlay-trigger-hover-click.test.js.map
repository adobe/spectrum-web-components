{
  "version": 3,
  "sources": ["overlay-trigger-hover-click.test.ts"],
  "sourcesContent": ["/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n    aTimeout,\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    oneEvent,\n} from '@open-wc/testing';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport '@spectrum-web-components/action-button/sp-action-button.js';\nimport '@spectrum-web-components/button/sp-button.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-magnify.js';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport '@spectrum-web-components/tooltip/sp-tooltip.js';\nimport { OverlayTrigger } from '@spectrum-web-components/overlay/src/OverlayTrigger';\nimport { TriggerInteractions } from '@spectrum-web-components/overlay/src/overlay-types';\nimport '@spectrum-web-components/overlay/overlay-trigger.js';\nimport { ActionButton } from '@spectrum-web-components/action-button';\nimport { sendMouse } from '../../../test/plugins/browser.js';\nimport { clickAndHoverTargets, deep } from '../stories/overlay.stories.js';\nimport { ignoreResizeObserverLoopError } from '../../../test/testing-helpers.js';\nimport { Tooltip } from '@spectrum-web-components/tooltip/src/Tooltip.js';\nimport { sendKeys } from '@web/test-runner-commands';\nimport { Button } from '@spectrum-web-components/button';\n\nignoreResizeObserverLoopError(before, after);\n\ndescribe('Overlay Trigger - Hover and Click', () => {\n    it('toggles open and closed on click', async () => {\n        const el = await fixture<OverlayTrigger>(html`\n            <overlay-trigger>\n                <sp-button slot=\"trigger\">Click and hover</sp-button>\n                <sp-popover slot=\"click-content\" dialog tip>\n                    Popover content\n                </sp-popover>\n                <sp-tooltip slot=\"hover-content\" delayed>\n                    Tooltip content\n                </sp-tooltip>\n            </overlay-trigger>\n        `);\n        const trigger = el.querySelector(\n            '[slot=trigger]'\n        ) as unknown as ActionButton;\n        let interaction: TriggerInteractions;\n\n        // repeatedly click to toggle the popover\n        for (let i = 0; i < 3; i++) {\n            const openedEvent = oneEvent(el, 'sp-opened');\n            trigger.click();\n            interaction = (await openedEvent).detail.interaction;\n\n            expect(interaction).equals('auto');\n\n            const closedEvent = oneEvent(el, 'sp-closed');\n            trigger.click();\n            interaction = (await closedEvent).detail.interaction;\n\n            expect(interaction).equals('auto');\n        }\n    });\n    it('toggles on click after hover', async () => {\n        const el = await fixture<OverlayTrigger>(html`\n            <overlay-trigger>\n                <sp-button slot=\"trigger\">Click and hover</sp-button>\n                <sp-popover slot=\"click-content\" dialog tip>\n                    Popover content\n                </sp-popover>\n                <sp-tooltip slot=\"hover-content\" delayed>\n                    Tooltip content\n                </sp-tooltip>\n            </overlay-trigger>\n        `);\n        const trigger = el.querySelector(\n            '[slot=trigger]'\n        ) as unknown as ActionButton;\n        const clickContent = el.querySelector(\n            '[slot=\"click-content\"]'\n        ) as HTMLElement;\n        const bounds = el.getBoundingClientRect();\n        let interaction: TriggerInteractions;\n\n        // hover over the button to trigger the tooltip\n        const hoveredEvent = oneEvent(el, 'sp-opened');\n        sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [bounds.left - 1, bounds.top - 1],\n                },\n                {\n                    type: 'move',\n                    position: [bounds.left, bounds.top],\n                },\n                {\n                    type: 'move',\n                    position: [bounds.left + 1, bounds.top + 1],\n                },\n            ],\n        });\n        interaction = (await hoveredEvent).detail.interaction;\n\n        expect(interaction).equals('hint');\n\n        // repeatedly click to toggle the popover\n        for (let i = 0; i < 3; i++) {\n            const openedEvent = oneEvent(clickContent, 'sp-opened');\n            trigger.click();\n            interaction = (await openedEvent).detail.interaction;\n\n            expect(interaction).equals('auto');\n\n            const closedEvent = oneEvent(clickContent, 'sp-closed');\n            trigger.click();\n            interaction = (await closedEvent).detail.interaction;\n\n            expect(interaction).equals('auto');\n        }\n    });\n    it('persists a hover overlay when clicking its trigger and closes the next highest overlay on the stack', async () => {\n        const root = document.createElement('div');\n        root.style.width = '100vw';\n        root.style.height = '100vh';\n        root.style.display = 'grid';\n        root.style.placeContent = 'center';\n        const test = await fixture(clickAndHoverTargets(), {\n            parentNode: root,\n        });\n\n        const overlayTrigger1 = test.querySelector(\n            'overlay-trigger[placement=\"right\"]'\n        ) as OverlayTrigger;\n        const overlayTrigger2 = test.querySelector(\n            'overlay-trigger[placement=\"left\"]'\n        ) as OverlayTrigger;\n\n        await elementUpdated(overlayTrigger1);\n        await elementUpdated(overlayTrigger2);\n\n        const trigger1 = overlayTrigger1.querySelector(\n            '.friendly-target'\n        ) as HTMLButtonElement;\n        const trigger2 = overlayTrigger2.querySelector(\n            '.friendly-target'\n        ) as HTMLButtonElement;\n        const rect1 = trigger1.getBoundingClientRect();\n        const rect2 = trigger2.getBoundingClientRect();\n        let opened = oneEvent(trigger1, 'sp-opened');\n        sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [\n                        rect1.left + rect1.width / 2,\n                        rect1.top + rect1.height / 2,\n                    ],\n                },\n            ],\n        });\n        await opened;\n\n        expect(overlayTrigger1.open).to.equal('click');\n        expect(overlayTrigger2.open).to.undefined;\n\n        opened = oneEvent(trigger2, 'sp-opened');\n        sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rect2.left + rect2.width / 2,\n                        rect2.top + rect2.height / 2,\n                    ],\n                },\n            ],\n        });\n        await opened;\n\n        expect(overlayTrigger1.open).to.equal('click');\n        expect(overlayTrigger2.open).to.equal('hover');\n\n        const closed = oneEvent(trigger1, 'sp-closed');\n        sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [\n                        rect2.left + rect2.width / 2,\n                        rect2.top + rect2.height / 2,\n                    ],\n                },\n            ],\n        });\n        await closed;\n\n        expect(overlayTrigger1.open).to.be.undefined;\n        expect(overlayTrigger2.open).to.equal('hover');\n    });\n    it('does not close ancestor \"click\" overlays on `click`', async () => {\n        const test = await fixture<HTMLDivElement>(html`\n            <div>${deep()}</div>\n        `);\n        const el = test.querySelector('overlay-trigger') as OverlayTrigger;\n        const trigger = test.querySelector('sp-button') as Button;\n        const button = el.querySelector('sp-action-button') as ActionButton;\n        const button2 = el.querySelector(\n            'sp-action-button:nth-of-type(2)'\n        ) as ActionButton;\n        const tooltip = button.querySelector('sp-tooltip') as Tooltip;\n\n        expect(el.open).to.be.undefined;\n        expect(tooltip.open).to.be.false;\n\n        const opened = oneEvent(el, 'sp-opened');\n        trigger.focus();\n        // For `:focus-visible` heuristic.\n        await sendKeys({\n            press: 'Tab',\n        });\n        await sendKeys({\n            press: 'Shift+Tab',\n        });\n        await sendKeys({\n            press: 'Space',\n        });\n        await opened;\n\n        expect(el.open).to.equal('click');\n        expect(tooltip.open).to.be.true;\n\n        button.click();\n\n        await aTimeout(200);\n\n        expect(el.open).to.equal('click');\n        expect(tooltip.open).to.be.true;\n\n        let closed = oneEvent(button, 'sp-closed');\n        expect(document.activeElement === button, `button focused`).to.be.true;\n        await sendKeys({\n            press: 'Tab',\n        });\n        expect(document.activeElement === button2, `button focused`).to.be.true;\n        await closed;\n\n        expect(el.open).to.equal('click');\n        expect(tooltip.open).to.be.false;\n\n        closed = oneEvent(el, 'sp-closed');\n        sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [1, 1],\n                },\n            ],\n        });\n        await closed;\n\n        expect(el.open, '\"click\" overlay no longer open').to.be.undefined;\n        expect(tooltip.open).to.be.false;\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
