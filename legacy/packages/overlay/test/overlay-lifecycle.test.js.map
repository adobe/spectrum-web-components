{
  "version": 3,
  "sources": ["overlay-lifecycle.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    nextFrame,\n    oneEvent,\n    waitUntil,\n} from '@open-wc/testing';\nimport '@spectrum-web-components/tooltip/sp-tooltip.js';\nimport '@spectrum-web-components/action-button/sp-action-button.js';\nimport { OverlayTrigger } from '@spectrum-web-components/overlay';\nimport '@spectrum-web-components/overlay/overlay-trigger.js';\nimport {\n    a11ySnapshot,\n    findAccessibilityNode,\n    sendKeys,\n} from '@web/test-runner-commands';\nimport { Tooltip } from '@spectrum-web-components/tooltip';\n\ndescribe('Overlay Trigger - accessible hover content management', () => {\n    it('accessibly describes trigger content with hover content', async () => {\n        const el = await fixture<OverlayTrigger>(html`\n            <overlay-trigger placement=\"right-start\">\n                <sp-action-button slot=\"trigger\">\n                    Button with Tooltip\n                </sp-action-button>\n                <sp-tooltip slot=\"hover-content\">\n                    Described by this content on focus/hover. 1\n                </sp-tooltip>\n            </overlay-trigger>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.open).to.be.undefined;\n        type DescribedNode = {\n            name: string;\n            description: string;\n        };\n        const snapshot = (await a11ySnapshot(\n            {}\n        )) as unknown as DescribedNode & {\n            children: DescribedNode[];\n        };\n        expect(\n            findAccessibilityNode<DescribedNode>(\n                snapshot,\n                (node) =>\n                    node.name === 'Button with Tooltip' &&\n                    typeof node.description === 'undefined'\n            ),\n            '`name`ed with no `description`'\n        );\n    });\n    it('gardens `aria-describedby` in its target', async () => {\n        const el = await fixture<OverlayTrigger>(html`\n            <overlay-trigger placement=\"right-start\">\n                <sp-action-button slot=\"trigger\" aria-describedby=\"descriptor\">\n                    Button with Tooltip\n                </sp-action-button>\n                <sp-tooltip slot=\"hover-content\" delayed>\n                    Described by this content on focus/hover. 2\n                </sp-tooltip>\n            </overlay-trigger>\n            <div id=\"descriptor\">I'm a description!</div>\n        `);\n\n        const trigger = el.querySelector('[slot=\"trigger\"]') as HTMLElement;\n        const tooltip = el.querySelector(\n            '[slot=\"hover-content\"]'\n        ) as HTMLElement;\n\n        await elementUpdated(el);\n        await nextFrame();\n        await nextFrame();\n\n        await waitUntil(\n            () => tooltip.id,\n            'Tooltip never published an ID for itself'\n        );\n\n        expect(trigger.getAttribute('aria-describedby')).to.equal(\n            `descriptor ${tooltip.id}`\n        );\n\n        trigger.remove();\n\n        // slot change timing\n        await nextFrame();\n\n        expect(trigger.getAttribute('aria-describedby')).to.equal('descriptor');\n    });\n    it('applies `aria-describedby` attribute', async () => {\n        const el = await fixture<OverlayTrigger>(html`\n            <overlay-trigger placement=\"right-start\">\n                <sp-action-button slot=\"trigger\">\n                    Button with Tooltip\n                </sp-action-button>\n                <sp-tooltip slot=\"hover-content\" delayed>\n                    Described by this content on focus/hover. 2\n                </sp-tooltip>\n            </overlay-trigger>\n        `);\n\n        const trigger = el.querySelector('[slot=\"trigger\"]') as HTMLElement;\n        const tooltip = el.querySelector(\n            '[slot=\"hover-content\"]'\n        ) as HTMLElement;\n\n        await elementUpdated(el);\n        await nextFrame();\n        await nextFrame();\n\n        await waitUntil(\n            () => tooltip.id,\n            'Tooltip never published an ID for itself'\n        );\n\n        expect(trigger.getAttribute('aria-describedby')).to.equal(tooltip.id);\n\n        trigger.remove();\n\n        // slot change timing\n        await nextFrame();\n\n        expect(trigger.getAttribute('aria-describedby')).to.be.null;\n    });\n    it('does not duplicate `aria-describedby` attribute', async () => {\n        const el = await fixture<OverlayTrigger>(html`\n            <div>\n                <sp-action-button slot=\"trigger\">\n                    Button with Tooltip\n                </sp-action-button>\n                <overlay-trigger placement=\"right-start\">\n                    <sp-tooltip slot=\"hover-content\" delayed>\n                        Described by this content on focus/hover. 2\n                    </sp-tooltip>\n                </overlay-trigger>\n            </div>\n        `);\n\n        const trigger = el.querySelector('[slot=\"trigger\"]') as HTMLElement;\n        const tooltip = el.querySelector('sp-tooltip') as Tooltip;\n        const overlay = el.querySelector('overlay-trigger') as OverlayTrigger;\n\n        trigger.setAttribute('aria-describedby', tooltip.id);\n        overlay.append(trigger);\n\n        await elementUpdated(el);\n        expect(trigger.getAttribute('aria-describedby')).to.equal(tooltip.id);\n        expect(el.open).to.be.undefined;\n\n        // For `:focus-visible` heuristic.\n        const input = document.createElement('input');\n        el.insertAdjacentElement('afterbegin', input);\n        input.focus();\n\n        const opened = oneEvent(el, 'sp-opened');\n        await sendKeys({\n            press: 'Tab',\n        });\n        await opened;\n\n        expect(trigger.getAttribute('aria-describedby')).to.equal(tooltip.id);\n\n        const closed = oneEvent(el, 'sp-closed');\n        trigger.dispatchEvent(\n            new FocusEvent('focusout', { bubbles: true, composed: true })\n        );\n        await closed;\n\n        expect(trigger.getAttribute('aria-describedby')).to.equal(tooltip.id);\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
