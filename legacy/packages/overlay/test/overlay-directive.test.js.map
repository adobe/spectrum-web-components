{
  "version": 3,
  "sources": ["overlay-directive.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { html } from '@spectrum-web-components/base';\nimport {\n    elementUpdated,\n    expect,\n    nextFrame,\n    oneEvent,\n    waitUntil,\n} from '@open-wc/testing';\nimport { Button } from '@spectrum-web-components/button';\nimport { Overlay } from '@spectrum-web-components/overlay';\nimport {\n    Default,\n    insertionOptions,\n} from '../stories/overlay-directive.stories.js';\nimport { sendMouse } from '../../../test/plugins/browser.js';\nimport { fixture } from '../../../test/testing-helpers.js';\n\ndescribe('Overlay Directive', () => {\n    it('opens declaratively', async function () {\n        const test = await fixture<Button>(Default({ open: true }));\n        await oneEvent(test, 'sp-opened');\n\n        const el = test.nextElementSibling as Overlay;\n\n        expect(el.open).to.be.true;\n    });\n    it('opens without options', async function () {\n        const test = await fixture<Button>(Default());\n        const opened = oneEvent(test, 'sp-opened');\n        test.click();\n        await opened;\n\n        const el = test.nextElementSibling as Overlay;\n\n        expect(el.open).to.be.true;\n    });\n    it('opens an Overlay after the trigger', async function () {\n        const test = await fixture<HTMLElement>(html`\n            <div\n                style=\"width: 100%; height: 100vh; display: grid; place-content: center;\"\n            >\n                ${insertionOptions()}\n            </div>\n        `);\n\n        const el = test.querySelector('sp-button') as Button;\n\n        await elementUpdated(el);\n        let overlays = document.querySelectorAll('sp-overlay');\n        expect(overlays.length).to.equal(0);\n\n        const rect = el.getBoundingClientRect();\n        let opened = oneEvent(el, 'sp-opened');\n        // Open the Tooltip via \"hover\"\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rect.left + rect.width / 2,\n                        rect.top + rect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await opened;\n\n        opened = oneEvent(el, 'sp-opened');\n        // Open the Popover via \"click\"\n        await sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [\n                        rect.left + rect.width / 2,\n                        rect.top + rect.height / 2,\n                    ],\n                },\n                {\n                    type: 'move',\n                    position: [\n                        rect.left - rect.width / 2,\n                        rect.top - rect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await opened;\n\n        overlays = document.querySelectorAll('sp-overlay');\n        expect(overlays.length).to.be.gt(0);\n        expect(overlays[0].previousElementSibling).to.equal(el);\n\n        // `slottable-request` comes _after_ `sp-closed` and triggers DOM cleanup\n        const closed = oneEvent(overlays[0], 'slottable-request');\n        await sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [\n                        rect.left - rect.width / 2,\n                        rect.top - rect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await closed;\n\n        await waitUntil(() => {\n            overlays = document.querySelectorAll('sp-overlay');\n            return overlays.length === 0;\n        }, 'not all overlays were cleaned up');\n\n        expect(overlays.length).to.equal(0);\n    });\n\n    it('opens an Overlay in a specific part of the DOM', async function () {\n        const test = await fixture<HTMLElement>(html`\n            <div\n                style=\"width: 100%; height: 100vh; display: grid; place-content: center;\"\n            >\n                ${insertionOptions(insertionOptions.args)}\n            </div>\n        `);\n\n        const el = test.querySelector('sp-button') as Button;\n\n        await elementUpdated(el);\n\n        const otherElement = test.querySelector(\n            '#other-element'\n        ) as HTMLElement;\n        let overlays = otherElement.querySelectorAll('sp-overlay');\n        expect(overlays.length).to.equal(0);\n\n        const rect = el.getBoundingClientRect();\n        let opened = oneEvent(el, 'sp-opened');\n        // Open the Tooltip via \"hover\"\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        rect.left + rect.width / 2,\n                        rect.top + rect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await opened;\n\n        opened = oneEvent(el, 'sp-opened');\n        // Open the Popover via \"click\"\n        await sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [\n                        rect.left + rect.width / 2,\n                        rect.top + rect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await opened;\n\n        overlays = otherElement.querySelectorAll('sp-overlay');\n        expect(overlays.length).to.equal(1);\n\n        // `slottable-request` comes _after_ `sp-closed` and triggers DOM cleanup\n        const closed = oneEvent(overlays[0], 'slottable-request');\n        await sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [\n                        rect.left - rect.width / 2,\n                        rect.top - rect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await closed;\n\n        // Wait for DOM clean up to complete\n        await nextFrame();\n        await nextFrame();\n\n        overlays = otherElement.querySelectorAll('sp-overlay');\n        expect(overlays.length).to.equal(0);\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
