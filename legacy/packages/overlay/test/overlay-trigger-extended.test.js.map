{
  "version": 3,
  "sources": ["overlay-trigger-extended.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n    elementUpdated,\n    expect,\n    html,\n    nextFrame,\n    oneEvent,\n    waitUntil,\n} from '@open-wc/testing';\n\nimport '@spectrum-web-components/overlay/overlay-trigger.js';\nimport { OverlayTrigger } from '@spectrum-web-components/overlay';\nimport '@spectrum-web-components/button/sp-button.js';\nimport { Button } from '@spectrum-web-components/button';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport { Popover } from '@spectrum-web-components/popover';\nimport '@spectrum-web-components/textfield/sp-textfield.js';\nimport '@spectrum-web-components/dialog/sp-dialog.js';\nimport { sendMouse } from '../../../test/plugins/browser.js';\nimport { fixture } from '../../../test/testing-helpers.js';\nimport { sendKeys } from '@web/test-runner-commands';\nimport { isChrome } from '@spectrum-web-components/shared';\n\nconst initTest = async (\n    styles = html``\n): Promise<{\n    overlayTrigger: OverlayTrigger;\n    button: Button;\n    popover: Popover;\n}> => {\n    const test = await fixture<HTMLDivElement>(html`\n        <div class=\"container\">\n            <style>\n                .container {\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    flex-direction: column;\n                }\n            </style>\n            ${styles}\n            <overlay-trigger type=\"modal\" id=\"trigger\" placement=\"top\">\n                <sp-button id=\"outer-button\" variant=\"primary\" slot=\"trigger\">\n                    Show Popover\n                </sp-button>\n                <sp-popover\n                    id=\"outer-popover\"\n                    slot=\"click-content\"\n                    direction=\"bottom\"\n                    tip\n                    tabindex=\"0\"\n                    placement=\"top\"\n                >\n                    <sp-dialog no-divider>\n                        This is the overlay content.\n                    </sp-dialog>\n                </sp-popover>\n            </overlay-trigger>\n        </div>\n    `);\n    await nextFrame();\n    await nextFrame();\n    await nextFrame();\n    await nextFrame();\n    await nextFrame();\n    await nextFrame();\n    return {\n        overlayTrigger: test.querySelector('overlay-trigger') as OverlayTrigger,\n        button: test.querySelector('sp-button') as Button,\n        popover: test.querySelector('sp-popover') as Popover,\n    };\n};\n\ndescribe('Overlay Trigger - extended', () => {\n    let overlayTrigger!: OverlayTrigger;\n    let button!: Button;\n    let popover!: Popover;\n\n    afterEach(async () => {\n        if (overlayTrigger && overlayTrigger.open) {\n            const closed = oneEvent(overlayTrigger, 'sp-closed');\n            overlayTrigger.open = undefined;\n            await closed;\n        }\n    });\n\n    it('manages `placement` on open', async () => {\n        ({ overlayTrigger, button, popover } = await initTest());\n\n        expect(popover.placement).to.equal('top');\n\n        const open = oneEvent(overlayTrigger, 'sp-opened');\n        button.click();\n        await open;\n\n        expect(popover.placement).to.equal('bottom');\n\n        const close = oneEvent(overlayTrigger, 'sp-closed');\n        overlayTrigger.open = undefined;\n        await close;\n\n        expect(popover.placement).to.equal('top');\n    });\n\n    it('manages `placement` on scroll', async () => {\n        // This test is flaky in chrome on ci so we're skipping it for now\n        if (isChrome()) {\n            return;\n        }\n\n        ({ overlayTrigger, button, popover } = await initTest(html`\n            <style>\n                sp-button {\n                    margin: 100vh 0;\n                    transform: translateY(-100%);\n                }\n            </style>\n        `));\n\n        expect(popover.placement).to.equal('top');\n\n        const open = oneEvent(overlayTrigger, 'sp-opened');\n        button.click();\n        await open;\n\n        expect(popover.placement).to.equal('top');\n\n        button.scrollIntoView({\n            behavior: 'instant' as ScrollBehavior,\n            block: 'start',\n        });\n        await nextFrame();\n        await nextFrame();\n        await nextFrame();\n        await nextFrame();\n        expect(popover.placement).to.equal('bottom');\n    });\n\n    it('occludes content behind the overlay', async () => {\n        // This test is flaky in chrome on ci so we're skipping it for now\n        if (isChrome()) {\n            return;\n        }\n        const { overlayTrigger, button, popover } = await initTest();\n        const textfield = document.createElement('sp-textfield');\n        overlayTrigger.insertAdjacentElement('afterend', textfield);\n\n        const textfieldRect = textfield.getBoundingClientRect();\n        expect(document.activeElement === textfield).to.be.false;\n\n        // Add more reliable focus handling for CI environments\n        await sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [\n                        textfieldRect.left + textfieldRect.width / 2,\n                        textfieldRect.top + textfieldRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await elementUpdated(textfield);\n\n        // Explicitly focus the textfield to ensure it's focused in all environments\n        textfield.focus();\n        await waitUntil(() => document.activeElement === textfield);\n\n        // Now verify the focus state\n        expect(\n            document.activeElement === textfield,\n            'clicking focuses the Textfield'\n        ).to.be.true;\n\n        expect(popover.placement).to.equal('top');\n        const open = oneEvent(overlayTrigger, 'sp-opened');\n        await sendKeys({\n            press: 'Shift+Tab',\n        });\n        expect(document.activeElement === button, 'button focused').to.be.true;\n        await sendKeys({\n            press: 'Enter',\n        });\n        await open;\n\n        expect(overlayTrigger.type).to.equal('modal');\n        expect(overlayTrigger.open).to.equal('click');\n        expect(popover.placement).to.equal('bottom');\n\n        const close = oneEvent(overlayTrigger, 'sp-closed');\n        await sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [\n                        textfieldRect.left + textfieldRect.width / 2,\n                        textfieldRect.top + textfieldRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await close;\n\n        expect(overlayTrigger.open).to.be.undefined;\n        expect(\n            document.activeElement === textfield,\n            'closing does not focus the Textfield'\n        ).to.be.false;\n\n        await sendMouse({\n            steps: [\n                {\n                    type: 'click',\n                    position: [\n                        textfieldRect.left + textfieldRect.width / 2,\n                        textfieldRect.top + textfieldRect.height / 2,\n                    ],\n                },\n            ],\n        });\n\n        // Explicitly focus the textfield again to ensure consistent behavior\n        textfield.focus();\n        await waitUntil(\n            () => document.activeElement === textfield,\n            'textfield is focused'\n        );\n\n        expect(\n            document.activeElement === textfield,\n            'the Textfield is focused again'\n        ).to.be.true;\n    });\n\n    xit('occludes wheel interactions behind the overlay', async () => {\n        // currently fails for no reason in Firefox locally, and most browsers in CI.\n        ({ overlayTrigger, button, popover } = await initTest());\n        const scrollingArea = document.createElement('div');\n        Object.assign(scrollingArea.style, {\n            width: '100px',\n            height: '100px',\n            overflow: 'auto',\n        });\n        const content = Array(100).fill(\n            'This is content within my box that will scroll.'\n        );\n        scrollingArea.textContent = content.join(' ');\n        document.body.append(scrollingArea);\n        await nextFrame();\n\n        const boundingRect = scrollingArea.getBoundingClientRect();\n        expect(scrollingArea.scrollTop).to.equal(0);\n        const distance = 1;\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        boundingRect.left + boundingRect.width / 2,\n                        boundingRect.top + boundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await sendMouse({\n            steps: [\n                {\n                    type: 'wheel',\n                    position: [0, distance],\n                },\n            ],\n        });\n        // wait for scroll to complete\n        await waitUntil(\n            () => scrollingArea.scrollTop === distance,\n            `scroll went to ${distance}`\n        );\n        expect(scrollingArea.scrollTop).to.equal(distance);\n\n        expect(popover.placement).to.equal('top');\n\n        const open = oneEvent(overlayTrigger, 'sp-opened');\n        button.click();\n        await open;\n\n        expect(overlayTrigger.open).to.equal('click');\n        expect(popover.placement).to.equal('bottom');\n        expect(scrollingArea.scrollTop).to.equal(distance);\n        await sendMouse({\n            steps: [\n                {\n                    type: 'wheel',\n                    position: [0, -distance],\n                },\n            ],\n        });\n        // Awaiting here points out that this always fails in Firefox\n        // and also was failing in WebKit without our knowing.\n        await nextFrame();\n        await nextFrame();\n        await nextFrame();\n\n        expect(\n            scrollingArea.scrollTop,\n            `scrollTop should be ${distance}.`\n        ).to.equal(distance);\n        scrollingArea.remove();\n    });\n});\n"],
  "mappings": "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",
  "names": ["overlayTrigger", "button", "popover"]
}
