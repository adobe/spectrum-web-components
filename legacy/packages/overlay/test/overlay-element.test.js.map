{
  "version": 3,
  "sources": ["overlay-element.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n    aTimeout,\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    nextFrame,\n    oneEvent,\n} from '@open-wc/testing';\nimport { Overlay } from '@spectrum-web-components/overlay/src/Overlay.js';\nimport '@spectrum-web-components/overlay/sp-overlay.js';\nimport { Tooltip } from '@spectrum-web-components/tooltip';\nimport '@spectrum-web-components/tooltip/sp-tooltip.js';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport { Theme } from '@spectrum-web-components/theme';\nimport { TemplateResult } from '@spectrum-web-components/base';\nimport '@spectrum-web-components/theme/sp-theme.js';\nimport '@spectrum-web-components/theme/src/themes.js';\nimport '@spectrum-web-components/button/sp-button.js';\n\nimport { sendMouse } from '../../../test/plugins/browser.js';\nimport { Button } from '@spectrum-web-components/button';\nimport { sendKeys } from '@web/test-runner-commands';\nimport {\n    click,\n    receivesFocus,\n    withSlider,\n} from '../stories/overlay-element.stories.js';\nimport {\n    removeSlottableRequest,\n    SlottableRequestEvent,\n} from '../src/slottable-request-event.js';\nimport { stub } from 'sinon';\nimport { OverlayStateEvent } from '@spectrum-web-components/overlay/src/events.js';\nimport { Slider } from '@spectrum-web-components/slider/src/Slider.js';\n\nconst OVERLAY_TYPES = ['modal', 'page', 'hint', 'auto', 'manual'] as const;\ntype OverlayTypes = (typeof OVERLAY_TYPES)[number];\n\nasync function styledFixture<T extends Element>(\n    story: TemplateResult\n): Promise<T> {\n    const test = await fixture<Theme>(html`\n        <sp-theme system=\"spectrum\" scale=\"medium\" color=\"light\">\n            ${story}\n        </sp-theme>\n    `);\n    return test.children[0] as T;\n}\n\ndescribe('sp-overlay', () => {\n    function opensDeclaratively(overlayType: OverlayTypes): void {\n        it(`as [type=\"'${overlayType}'\"]`, async () => {\n            const el = await styledFixture<Overlay>(html`\n                <sp-overlay open type=${overlayType}>\n                    <sp-tooltip>Content</sp-tooltip>\n                </sp-overlay>\n            `);\n            const content = el.children[0] as Tooltip;\n            let opened = oneEvent(el, 'sp-opened');\n            await opened;\n\n            expect(content.open).to.be.true;\n            const closed = oneEvent(el, 'sp-closed');\n            el.open = false;\n            await closed;\n\n            expect(content.open).to.be.false;\n            opened = oneEvent(el, 'sp-opened');\n            el.open = true;\n            await opened;\n\n            expect(content.open).to.be.true;\n        });\n    }\n\n    describe('`slottable-request` event', () => {\n        it('dispatched before `sp-opened`', async function () {\n            let slottableRequestTime = 0;\n            let openedTime = 0;\n            const el = await fixture<Overlay>(html`\n                <sp-overlay\n                    @slottable-request=${() =>\n                        (slottableRequestTime = performance.now())}\n                    @sp-opened=${() => (openedTime = performance.now())}\n                >\n                    <sp-popover>test</sp-popover>\n                </sp-overlay>\n            `);\n\n            await elementUpdated(el);\n\n            const opened = oneEvent(el, 'sp-opened');\n            el.open = true;\n            await opened;\n\n            expect(slottableRequestTime).to.be.lt(openedTime);\n        });\n        it('dispatched after `sp-closed`', async function () {\n            let slottableRequestTime = 0;\n            let closedTime = 0;\n            const el = await fixture<Overlay>(html`\n                <sp-overlay\n                    @sp-closed=${() => (closedTime = performance.now())}\n                    @slottable-request=${() =>\n                        (slottableRequestTime = performance.now())}\n                >\n                    <sp-popover>test</sp-popover>\n                </sp-overlay>\n            `);\n\n            await elementUpdated(el);\n\n            const opened = oneEvent(el, 'sp-opened');\n            el.open = true;\n            await opened;\n\n            await nextFrame();\n            await nextFrame();\n\n            const closed = oneEvent(el, 'sp-closed');\n            el.open = false;\n            await closed;\n\n            await nextFrame();\n            await nextFrame();\n\n            expect(\n                slottableRequestTime,\n                `slottable-request: ${slottableRequestTime}, sp-closed: ${closedTime}`\n            ).to.be.gt(closedTime);\n        });\n        it('follows transition timing from lazily added children', async function () {\n            let slottableRequestTime = 0;\n            let openedTime = 0;\n            const popover = document.createElement('sp-popover');\n            popover.textContent = 'Test';\n            const el = await fixture<Overlay>(html`\n                <sp-overlay\n                    @slottable-request=${(event: SlottableRequestEvent) => {\n                        slottableRequestTime = performance.now();\n                        if (event.data !== removeSlottableRequest) {\n                            (event.target as HTMLElement).append(popover);\n                        } else {\n                            popover.remove();\n                        }\n                    }}\n                    @sp-opened=${() => (openedTime = performance.now())}\n                ></sp-overlay>\n            `);\n\n            await elementUpdated(el);\n\n            const opened = oneEvent(el, 'sp-opened');\n            el.open = true;\n            await opened;\n\n            expect(slottableRequestTime).to.be.lte(openedTime);\n            expect(openedTime - slottableRequestTime).to.be.gt(130);\n        });\n\n        describe('dev mode', () => {\n            let consoleWarnStub!: ReturnType<typeof stub>;\n            before(() => {\n                window.__swc.verbose = true;\n                consoleWarnStub = stub(console, 'warn');\n            });\n            afterEach(() => {\n                consoleWarnStub.resetHistory();\n            });\n            after(() => {\n                window.__swc.verbose = false;\n                consoleWarnStub.restore();\n            });\n\n            it('warns that `slottable-request` events are experimental', async () => {\n                const el = await fixture<Overlay>(html`\n                    <sp-overlay>\n                        <sp-popover>test</sp-popover>\n                    </sp-overlay>\n                `);\n\n                await elementUpdated(el);\n\n                const opened = oneEvent(el, 'sp-opened');\n                el.open = true;\n                await opened;\n\n                expect(consoleWarnStub.called).to.be.true;\n                const spyCall = consoleWarnStub.getCall(0);\n                expect(\n                    (spyCall.args.at(0) as string).includes(\n                        '`slottable-request` events are experimental'\n                    ),\n                    '`slottable-request`-centric message'\n                ).to.be.true;\n                expect(\n                    spyCall.args.at(-1),\n                    'confirm `data` shape'\n                ).to.deep.equal({\n                    data: {\n                        localName: 'base',\n                        type: 'api',\n                        level: 'high',\n                    },\n                });\n            });\n        });\n    });\n\n    describe('[type=\"modal\"]', () => {\n        opensDeclaratively('modal');\n        describe('interaction with other non-ancestor overlays', function () {\n            beforeEach(async function () {\n                this.fixture = await styledFixture<Overlay>(html`\n                    <div>\n                        ${OVERLAY_TYPES.map(\n                            (type) => html`\n                                <sp-overlay type=${type}>\n                                    <sp-tooltip>${type} Content</sp-tooltip>\n                                </sp-overlay>\n                            `\n                        )}\n                    </div>\n                `);\n\n                this.modal = this.fixture.querySelector(\n                    '[type=\"modal\"]'\n                ) as Overlay;\n                this.page = this.fixture.querySelector(\n                    '[type=\"page\"]'\n                ) as Overlay;\n                this.hint = this.fixture.querySelector(\n                    '[type=\"hint\"]'\n                ) as Overlay;\n                this.auto = this.fixture.querySelector(\n                    '[type=\"auto\"]'\n                ) as Overlay;\n                this.manual = this.fixture.querySelector(\n                    '[type=\"manual\"]'\n                ) as Overlay;\n\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.false;\n            });\n            afterEach(async function () {\n                const closed = oneEvent(this.modal, 'sp-closed');\n                this.modal.open = false;\n                await closed;\n            });\n            it('closes \"page\" overlays when opening', async function () {\n                let opened = oneEvent(this.page, 'sp-opened');\n                this.page.open = true;\n                await opened;\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.true;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.false;\n\n                opened = oneEvent(this.modal, 'sp-opened');\n                const closed = oneEvent(this.page, 'sp-closed');\n                this.modal.open = true;\n                await opened;\n                await closed;\n                expect(this.modal.open).to.be.true;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.false;\n            });\n            it('closes \"hint\" overlays when opening', async function () {\n                let opened = oneEvent(this.hint, 'sp-opened');\n                this.hint.open = true;\n                await opened;\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.true;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.false;\n\n                opened = oneEvent(this.modal, 'sp-opened');\n                const closed = oneEvent(this.hint, 'sp-closed');\n                this.modal.open = true;\n                await opened;\n                await closed;\n                expect(this.modal.open).to.be.true;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.false;\n            });\n            it('closes \"auto\" overlays when opening', async function () {\n                let opened = oneEvent(this.auto, 'sp-opened');\n                this.auto.open = true;\n                await opened;\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.true;\n                expect(this.manual.open).to.be.false;\n\n                opened = oneEvent(this.modal, 'sp-opened');\n                const closed = oneEvent(this.auto, 'sp-closed');\n                this.modal.open = true;\n                await opened;\n                await closed;\n                expect(this.modal.open).to.be.true;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.false;\n            });\n            it('does not close \"manual\" overlays when opening', async function () {\n                let opened = oneEvent(this.manual, 'sp-opened');\n                this.manual.open = true;\n                await opened;\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.true;\n\n                opened = oneEvent(this.modal, 'sp-opened');\n                this.modal.open = true;\n                await opened;\n                expect(this.modal.open).to.be.true;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.true;\n            });\n        });\n    });\n    describe('[type=\"page\"]', () => {\n        opensDeclaratively('page');\n        describe('interaction with other non-ancestor overlays', function () {\n            beforeEach(async function () {\n                this.fixture = await styledFixture<Overlay>(html`\n                    <div>\n                        ${OVERLAY_TYPES.map(\n                            (type) => html`\n                                <sp-overlay type=${type}>\n                                    <sp-tooltip>${type} Content</sp-tooltip>\n                                </sp-overlay>\n                            `\n                        )}\n                    </div>\n                `);\n\n                this.modal = this.fixture.querySelector(\n                    '[type=\"modal\"]'\n                ) as Overlay;\n                this.page = this.fixture.querySelector(\n                    '[type=\"page\"]'\n                ) as Overlay;\n                this.hint = this.fixture.querySelector(\n                    '[type=\"hint\"]'\n                ) as Overlay;\n                this.auto = this.fixture.querySelector(\n                    '[type=\"auto\"]'\n                ) as Overlay;\n                this.manual = this.fixture.querySelector(\n                    '[type=\"manual\"]'\n                ) as Overlay;\n\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.false;\n            });\n            afterEach(async function () {\n                const closed = oneEvent(this.page, 'sp-closed');\n                this.page.open = false;\n                await closed;\n            });\n            it('should not close \"modal\" overlays when opening', async function () {\n                let opened = oneEvent(this.modal, 'sp-opened');\n                this.modal.open = true;\n                await opened;\n                expect(this.modal.open).to.be.true;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.false;\n\n                opened = oneEvent(this.page, 'sp-opened');\n                this.page.open = true;\n                await opened;\n                expect(this.modal.open).to.be.true;\n                expect(this.page.open).to.be.true;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.false;\n            });\n            it('closes \"hint\" overlays when opening', async function () {\n                let opened = oneEvent(this.hint, 'sp-opened');\n                this.hint.open = true;\n                await opened;\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.true;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.false;\n\n                opened = oneEvent(this.page, 'sp-opened');\n                const closed = oneEvent(this.hint, 'sp-closed');\n                this.page.open = true;\n                await opened;\n                await closed;\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.true;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.false;\n            });\n            it('closes \"auto\" overlays when opening', async function () {\n                let opened = oneEvent(this.auto, 'sp-opened');\n                this.auto.open = true;\n                await opened;\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.true;\n                expect(this.manual.open).to.be.false;\n\n                opened = oneEvent(this.page, 'sp-opened');\n                const closed = oneEvent(this.auto, 'sp-closed');\n                this.page.open = true;\n                await opened;\n                await closed;\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.true;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.false;\n            });\n            it('does not close \"manual\" overlays when opening', async function () {\n                let opened = oneEvent(this.manual, 'sp-opened');\n                this.manual.open = true;\n                await opened;\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.true;\n\n                opened = oneEvent(this.page, 'sp-opened');\n                this.page.open = true;\n                await opened;\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.true;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.true;\n            });\n        });\n        it('ignores Escape key interactions', async () => {\n            const el = await styledFixture<Overlay>(html`\n                <sp-overlay type=\"page\">\n                    <sp-popover>This is a \"page\" Overlay</sp-popover>\n                </sp-overlay>\n            `);\n            const opened = oneEvent(el, 'sp-opened');\n            el.open = true;\n            await opened;\n\n            expect(el.open).to.be.true;\n\n            await sendKeys({\n                press: 'Escape',\n            });\n\n            await elementUpdated(el);\n\n            expect(el.open).to.be.true;\n        });\n    });\n\n    describe('[type=\"hint\"]', () => {\n        opensDeclaratively('hint');\n\n        it('closes other `[type=hint]` overlays when opening', async () => {\n            const test = await styledFixture<Overlay>(html`\n                <div>\n                    ${[1, 2].map(\n                        (overlay) => html`\n                            <sp-overlay type=\"hint\" class=\"hint-${overlay}\">\n                                <sp-tooltip>Hint ${overlay} Content</sp-tooltip>\n                            </sp-overlay>\n                        `\n                    )}\n                </div>\n            `);\n            const hint1 = test.querySelector('.hint-1') as Overlay;\n            const hint2 = test.querySelector('.hint-2') as Overlay;\n\n            expect(hint1.open).to.be.false;\n            expect(hint2.open).to.be.false;\n\n            let opened = oneEvent(hint1, 'sp-opened');\n            hint1.open = true;\n            await opened;\n\n            expect(hint1.open).to.be.true;\n            expect(hint2.open).to.be.false;\n\n            opened = oneEvent(hint2, 'sp-opened');\n            let closed = oneEvent(hint1, 'sp-closed');\n            hint2.open = true;\n            await opened;\n            await closed;\n\n            expect(hint1.open).to.be.false;\n            expect(hint2.open).to.be.true;\n\n            opened = oneEvent(hint1, 'sp-opened');\n            closed = oneEvent(hint2, 'sp-closed');\n            hint1.open = true;\n            await opened;\n            await closed;\n\n            expect(hint1.open).to.be.true;\n            expect(hint2.open).to.be.false;\n        });\n        it('stays open when pointer enters overlay from trigger element', async () => {\n            const test = await styledFixture(html`\n                <div>\n                    <sp-button id=\"test-button\">This is a button.</sp-button>\n                    <sp-overlay\n                        trigger=\"test-button@hover\"\n                        type=\"hint\"\n                        placement=\"bottom\"\n                        offset=\"-10\"\n                    >\n                        <sp-tooltip>Help text.</sp-tooltip>\n                    </sp-overlay>\n                </div>\n            `);\n\n            const button = test.querySelector('sp-button') as Button;\n            const overlay = test.querySelector(\n                'sp-overlay'\n            ) as unknown as Overlay;\n            const el = test.querySelector('sp-tooltip') as Tooltip;\n            const buttonRect = button.getBoundingClientRect();\n            const buttonPoint = [\n                buttonRect.x + buttonRect.width / 2,\n                buttonRect.y + buttonRect.height - 2,\n            ] as [number, number];\n\n            await elementUpdated(overlay);\n\n            // This test is possibly weird in its over simplicity for this contexts...\n            await expect(button).to.be.accessible();\n            // Pointer enter the button to trigger the tooltip\n            let opened = oneEvent(button, 'sp-opened');\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: buttonPoint,\n                    },\n                ],\n            });\n            await elementUpdated(overlay);\n            // Allow the overlay process time to get started (we're not waiting for it to finish),\n            // so that the next step can happen _while_ it opens.\n            await nextFrame();\n            await nextFrame();\n            expect(overlay.open).to.be.true;\n            // Pointer leave the button to close the tooltip, but...\n            // Pointer enter the tooltip to keep the tooltip open\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: [\n                            buttonRect.x + buttonRect.width / 2,\n                            buttonRect.y + buttonRect.height - 1,\n                        ],\n                    },\n                    {\n                        type: 'move',\n                        position: [\n                            buttonRect.x + buttonRect.width / 2,\n                            buttonRect.y + buttonRect.height,\n                        ],\n                    },\n                    {\n                        type: 'move',\n                        position: [\n                            buttonRect.x + buttonRect.width / 2,\n                            buttonRect.y + buttonRect.height + 1,\n                        ],\n                    },\n                ],\n            });\n            // Give the Overlay some time to process what just happened.\n            await nextFrame();\n            await nextFrame();\n            expect(overlay.open).to.be.true;\n            await opened;\n\n            expect(el.open).to.be.true;\n            await expect(button).to.be.accessible();\n\n            let closed = oneEvent(button, 'sp-closed');\n            // point enter the button to trigger the tooltip\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: buttonPoint,\n                    },\n                ],\n            });\n            // pointer leave the button to close the tooltip\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: [\n                            buttonRect.x + buttonRect.width * 2,\n                            buttonRect.y + buttonRect.height * 2,\n                        ] as [number, number],\n                    },\n                ],\n            });\n            await closed;\n\n            expect(el.open).to.be.false;\n\n            opened = oneEvent(button, 'sp-opened');\n            // pointer enter the button to trigger the tooltip\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: buttonPoint,\n                    },\n                ],\n            });\n            await opened;\n            await elementUpdated(el);\n            closed = oneEvent(button, 'sp-closed');\n            // pointer leave the button to close the tooltip\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: [\n                            buttonRect.x + buttonRect.width * 2,\n                            buttonRect.y + buttonRect.height * 2,\n                        ] as [number, number],\n                    },\n                ],\n            });\n            await closed;\n        });\n        it('stays open when pointer enters overlay from trigger element: self managed', async () => {\n            const button = await styledFixture(html`\n                <sp-button>\n                    This is a button.\n                    <sp-tooltip self-managed placement=\"bottom\">\n                        Help text.\n                    </sp-tooltip>\n                </sp-button>\n            `);\n\n            const el = button.querySelector('sp-tooltip') as Tooltip;\n            const buttonRect = button.getBoundingClientRect();\n            const buttonPoint = [\n                buttonRect.x + buttonRect.width / 2,\n                buttonRect.y + buttonRect.height / 2,\n            ] as [number, number];\n\n            await elementUpdated(el);\n            // This test is possibly weird in its over simplicity for this contexts...\n            await expect(button).to.be.accessible();\n            // Pointer enter the button to trigger the tooltip\n            let opened = oneEvent(button, 'sp-opened');\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: buttonPoint,\n                    },\n                ],\n            });\n            // It takes this many frame for the overlay content to actual be queryable.\n            // We're trying to do work _before_ `sp-opened` so it's a little tricky.\n            // Is it possible to do this work _after_ `sp-opened` for more stability?\n            // Try futzing with the `offset` values of the `sp-overlay`?\n            await nextFrame();\n            await nextFrame();\n            await nextFrame();\n            await nextFrame();\n            const tooltipRect = (\n                el.shadowRoot.querySelector('#tooltip') as HTMLDivElement\n            ).getBoundingClientRect();\n            const tooltipPoint = [\n                tooltipRect.x + tooltipRect.width / 2,\n                tooltipRect.y + tooltipRect.height / 2,\n            ] as [number, number];\n            // Pointer leave the button to close the tooltip, but...\n            // Pointer enter the tooltip to keep the tooltip open\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: tooltipPoint,\n                    },\n                ],\n            });\n            await opened;\n\n            expect(el.open).to.be.true;\n            await expect(button).to.be.accessible();\n\n            let closed = oneEvent(button, 'sp-closed');\n            // point enter the button to trigger the tooltip\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: buttonPoint,\n                    },\n                ],\n            });\n            // pointer leave the button to close the tooltip\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: [\n                            buttonRect.x + buttonRect.width * 2,\n                            buttonRect.y + buttonRect.height * 2,\n                        ] as [number, number],\n                    },\n                ],\n            });\n            await closed;\n\n            expect(el.open).to.be.false;\n\n            opened = oneEvent(button, 'sp-opened');\n            // pointer enter the button to trigger the tooltip\n            await sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: buttonPoint,\n                    },\n                ],\n            });\n            await opened;\n            expect(el.open).to.be.true;\n\n            closed = oneEvent(button, 'sp-closed');\n            // pointer leave the button to close the tooltip\n            sendMouse({\n                steps: [\n                    {\n                        type: 'move',\n                        position: [\n                            buttonRect.x + buttonRect.width * 2,\n                            buttonRect.y + buttonRect.height * 2,\n                        ] as [number, number],\n                    },\n                ],\n            });\n            await closed;\n            expect(el.open).to.be.false;\n        });\n    });\n    describe('[type=\"auto\"]', () => {\n        opensDeclaratively('auto');\n        it('receives focus', async () => {\n            const test = await fixture(html`\n                <div>${receivesFocus(receivesFocus.args)}</div>\n            `);\n            const trigger = test.querySelector('#trigger') as Button;\n            const overlay = test.querySelector('a');\n\n            expect(document.activeElement === overlay).to.be.false;\n\n            const opened = oneEvent(trigger, 'sp-opened');\n            trigger.click();\n            await opened;\n\n            expect(document.activeElement === overlay).to.be.true;\n        });\n        it('does not close when clicking a Slider track in the Overlay', async function () {\n            const test = await fixture(html`\n                <div>${withSlider()}</div>\n            `);\n            const el = test.querySelector('sp-overlay') as Overlay;\n            const button = test.querySelector('sp-button') as Button;\n            const slider = el.querySelector('sp-slider') as Slider;\n            const track = slider.shadowRoot.querySelector(\n                '#track'\n            ) as HTMLDivElement;\n\n            expect(el.open).to.be.false;\n\n            const opened = oneEvent(el, 'sp-opened');\n            const buttonRect = button.getBoundingClientRect();\n            sendMouse({\n                steps: [\n                    {\n                        type: 'click',\n                        position: [\n                            buttonRect.left + buttonRect.width / 2,\n                            buttonRect.top + buttonRect.height / 2,\n                        ],\n                    },\n                ],\n            });\n            await opened;\n\n            expect(el.open).to.be.true;\n            expect(slider.value).to.equal(5);\n\n            const sliderRect = track.getBoundingClientRect();\n\n            let pointerId = -1;\n            slider.track.setPointerCapture = (id: number) => (pointerId = id);\n            slider.track.releasePointerCapture = (id: number) =>\n                (pointerId = id);\n            expect(pointerId).to.equal(-1);\n            track.dispatchEvent(\n                new PointerEvent('pointerdown', {\n                    clientX: sliderRect.left + sliderRect.width - 5,\n                    clientY: sliderRect.top + sliderRect.height / 2,\n                    pointerId: 1,\n                    cancelable: true,\n                    bubbles: true,\n                    composed: true,\n                    button: 0,\n                })\n            );\n            await elementUpdated(slider);\n\n            track.dispatchEvent(\n                new PointerEvent('pointerup', {\n                    pointerId: 1,\n                    cancelable: true,\n                    bubbles: true,\n                    composed: true,\n                })\n            );\n            await elementUpdated(slider);\n\n            await aTimeout(1500);\n\n            expect(slider.value).to.equal(19.5);\n            expect(el.open).to.be.true;\n        });\n    });\n    describe('[type=\"manual\"]', () => {\n        opensDeclaratively('manual');\n        describe('interaction with other non-ancestor overlays', function () {\n            beforeEach(async function () {\n                this.fixture = await styledFixture<Overlay>(html`\n                    <div>\n                        ${OVERLAY_TYPES.map(\n                            (type) => html`\n                                <sp-overlay type=${type}>\n                                    <sp-tooltip>${type} Content</sp-tooltip>\n                                </sp-overlay>\n                            `\n                        )}\n                    </div>\n                `);\n\n                this.modal = this.fixture.querySelector(\n                    '[type=\"modal\"]'\n                ) as Overlay;\n                this.page = this.fixture.querySelector(\n                    '[type=\"page\"]'\n                ) as Overlay;\n                this.hint = this.fixture.querySelector(\n                    '[type=\"hint\"]'\n                ) as Overlay;\n                this.auto = this.fixture.querySelector(\n                    '[type=\"auto\"]'\n                ) as Overlay;\n                this.manual = this.fixture.querySelector(\n                    '[type=\"manual\"]'\n                ) as Overlay;\n\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.false;\n            });\n            afterEach(async function () {\n                const closed = oneEvent(this.manual, 'sp-closed');\n                this.manual.open = false;\n                await closed;\n            });\n            it('does not close \"modal\" overlays when opening', async function () {\n                let opened = oneEvent(this.modal, 'sp-opened');\n                this.modal.open = true;\n                await opened;\n                expect(this.modal.open).to.be.true;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.false;\n\n                opened = oneEvent(this.manual, 'sp-opened');\n                this.manual.open = true;\n                await opened;\n                expect(this.modal.open).to.be.true;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.true;\n            });\n            it('does not close \"modal\" overlays when opening', async function () {\n                let opened = oneEvent(this.page, 'sp-opened');\n                this.page.open = true;\n                await opened;\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.true;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.false;\n\n                opened = oneEvent(this.manual, 'sp-opened');\n                this.manual.open = true;\n                await opened;\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.true;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.true;\n            });\n            it('does not close \"hint\" overlays when opening', async function () {\n                let opened = oneEvent(this.hint, 'sp-opened');\n                this.hint.open = true;\n                await opened;\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.true;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.false;\n\n                opened = oneEvent(this.manual, 'sp-opened');\n                this.manual.open = true;\n                await opened;\n\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.true;\n                expect(this.auto.open).to.be.false;\n                expect(this.manual.open).to.be.true;\n            });\n            it('does not close \"auto\" overlays when opening', async function () {\n                let opened = oneEvent(this.auto, 'sp-opened');\n                this.auto.open = true;\n                await opened;\n\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.true;\n                expect(this.manual.open).to.be.false;\n\n                opened = oneEvent(this.manual, 'sp-opened');\n                this.manual.open = true;\n                await opened;\n\n                expect(this.modal.open).to.be.false;\n                expect(this.page.open).to.be.false;\n                expect(this.hint.open).to.be.false;\n                expect(this.auto.open).to.be.true;\n                expect(this.manual.open).to.be.true;\n            });\n        });\n        describe('only close when manually closed', function () {\n            it('does not close when clicking away', async () => {\n                const test = await fixture(html`\n                    <div>\n                        ${click({\n                            ...click.args,\n                            interaction: 'click',\n                            placement: 'bottom',\n                            type: 'manual',\n                            delayed: false,\n                            receivesFocus: 'auto',\n                        })}\n                    </div>\n                `);\n                const el = test.querySelector('sp-overlay') as Overlay;\n\n                expect(el.open).to.be.false;\n\n                const opened = oneEvent<OverlayStateEvent>(el, 'sp-opened');\n                el.open = true;\n                let { overlay } = await opened;\n                expect(el === overlay).to.be.true;\n\n                await sendMouse({\n                    steps: [\n                        {\n                            type: 'click',\n                            position: [50, 400],\n                        },\n                    ],\n                });\n\n                await aTimeout(200);\n\n                expect(el.open).to.be.true;\n\n                const closed = oneEvent<OverlayStateEvent>(el, 'sp-closed');\n                el.open = false;\n                ({ overlay } = await closed);\n                expect(el === overlay).to.be.true;\n\n                expect(el.open).to.be.false;\n            });\n            it('close last item of overlay stack when pressing `Escape`', async () => {\n                const test = await fixture(html`\n                    <div>\n                        ${click({\n                            ...click.args,\n                            interaction: 'click',\n                            placement: 'bottom',\n                            type: 'manual',\n                            delayed: false,\n                            receivesFocus: 'auto',\n                        })}\n                    </div>\n                `);\n                const el = test.querySelector('sp-overlay') as Overlay;\n\n                expect(el.open).to.be.false;\n\n                const opened = oneEvent<OverlayStateEvent>(el, 'sp-opened');\n                el.open = true;\n                let { overlay } = await opened;\n                expect(el === overlay).to.be.true;\n\n                await sendKeys({\n                    press: 'Escape',\n                });\n\n                await elementUpdated(el);\n                // the last item of the overlay stack should close on pressing escape\n                expect(el.open).to.be.false;\n\n                const closed = oneEvent<OverlayStateEvent>(el, 'sp-closed');\n                el.open = false;\n                ({ overlay } = await closed);\n                expect(el === overlay).to.be.true;\n\n                expect(el.open).to.be.false;\n            });\n        });\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
