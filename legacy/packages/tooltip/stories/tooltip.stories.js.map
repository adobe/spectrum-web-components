{
  "version": 3,
  "sources": ["tooltip.stories.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport '@spectrum-web-components/tooltip/sp-tooltip.js';\nimport { html, nothing, TemplateResult } from '@spectrum-web-components/base';\nimport { ifDefined } from '@spectrum-web-components/base/src/directives.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-checkmark.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-info.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-edit.js';\nimport '@spectrum-web-components/button/sp-button.js';\nimport '@spectrum-web-components/field-label/sp-field-label.js';\nimport '@spectrum-web-components/textfield/sp-textfield.js';\nimport '@spectrum-web-components/action-button/sp-action-button.js';\nimport { Placement } from '@spectrum-web-components/overlay';\nimport '@spectrum-web-components/overlay/sp-overlay.js';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport '@spectrum-web-components/overlay/overlay-trigger.js';\n// Import Overlay type for type casting\nimport type { Overlay } from '@spectrum-web-components/overlay';\n\nconst iconOptions: {\n    [key: string]: ({\n        width,\n        height,\n        hidden,\n        title,\n    }?: {\n        width?: number;\n        height?: number;\n        hidden?: boolean;\n        title?: string;\n    }) => TemplateResult | string;\n} = {\n    '': () => html``,\n    negative: () => html`\n        <sp-icon-alert slot=\"icon\"></sp-icon-alert>\n    `,\n    positive: () => html`\n        <sp-icon-checkmark slot=\"icon\"></sp-icon-checkmark>\n    `,\n    info: () => html`\n        <sp-icon-info slot=\"icon\"></sp-icon-info>\n    `,\n};\n\nexport default {\n    component: 'sp-tooltip',\n    title: 'Tooltip',\n};\n\ninterface Properties {\n    delayed?: boolean;\n    disabled?: boolean;\n    open?: boolean;\n    placement?: Placement;\n    variant?: string;\n    text?: string;\n    offset?: number;\n}\n\nexport const Default = ({\n    open,\n    placement,\n    variant,\n    text,\n}: Properties): TemplateResult => {\n    return html`\n        <sp-tooltip ?open=${open} placement=${placement} variant=${variant}>\n            ${text}\n        </sp-tooltip>\n    `;\n};\nDefault.args = {\n    open: true,\n    placement: 'top',\n    variant: '',\n    text: 'Tooltip',\n};\nDefault.argTypes = {\n    open: {\n        name: 'open',\n        type: { name: 'boolean', required: false },\n        description: 'Whether the tooltip is open.',\n        table: {\n            type: { summary: 'boolean' },\n            defaultValue: { summary: false },\n        },\n        control: {\n            type: 'boolean',\n        },\n    },\n    placement: {\n        name: 'placement',\n        type: { name: 'string', required: false },\n        description: 'The placement of the tooltip in relation to its parent',\n        table: {\n            type: { summary: 'string' },\n            defaultValue: { summary: 'top' },\n        },\n        control: {\n            type: 'inline-radio',\n            options: [\n                'auto',\n                'auto-start',\n                'auto-end',\n                'top',\n                'bottom',\n                'right',\n                'left',\n                'top-start',\n                'top-end',\n                'bottom-start',\n                'bottom-end',\n                'right-start',\n                'right-end',\n                'left-start',\n                'left-end',\n                'none',\n            ],\n        },\n    },\n    text: {\n        name: 'text',\n        type: { name: 'string', required: false },\n        table: {\n            type: { summary: 'string' },\n            defaultValue: { summary: '' },\n        },\n        control: 'text',\n    },\n    variant: {\n        name: 'variant',\n        type: { name: 'string', required: false },\n        description: 'The style of the tooltip.',\n        table: {\n            type: { summary: 'string' },\n            defaultValue: { summary: '' },\n        },\n        control: {\n            type: 'inline-radio',\n            options: ['info', 'positive', 'negative', ''],\n        },\n    },\n};\n\nexport const wIcon = ({\n    open,\n    placement,\n    variant,\n    text,\n}: Properties): TemplateResult => {\n    return html`\n        <sp-tooltip ?open=${open} placement=${placement} variant=${variant}>\n            ${!!variant ? iconOptions[variant]() : nothing} ${text}\n        </sp-tooltip>\n    `;\n};\nwIcon.args = {\n    open: true,\n    placement: 'top',\n    text: 'Tooltip',\n    variant: 'negative',\n};\nwIcon.argTypes = {\n    open: {\n        name: 'open',\n        type: { name: 'boolean', required: false },\n        description: 'Whether the tooltip is open.',\n        table: {\n            type: { summary: 'boolean' },\n            defaultValue: { summary: false },\n        },\n        control: {\n            type: 'boolean',\n        },\n    },\n    placement: {\n        name: 'placement',\n        type: { name: 'string', required: false },\n        description: 'The placement of the tooltip in relation to its parent',\n        table: {\n            type: { summary: 'string' },\n            defaultValue: { summary: 'top' },\n        },\n        control: {\n            type: 'inline-radio',\n            options: [\n                'auto',\n                'auto-start',\n                'auto-end',\n                'top',\n                'bottom',\n                'right',\n                'left',\n                'top-start',\n                'top-end',\n                'bottom-start',\n                'bottom-end',\n                'right-start',\n                'right-end',\n                'left-start',\n                'left-end',\n                'none',\n            ],\n        },\n    },\n    text: {\n        name: 'text',\n        type: { name: 'string', required: false },\n        table: {\n            type: { summary: 'string' },\n            defaultValue: { summary: '' },\n        },\n        control: 'text',\n    },\n    variant: {\n        name: 'variant',\n        type: { name: 'string', required: false },\n        table: {\n            type: { summary: 'string' },\n            defaultValue: { summary: '' },\n        },\n        control: {\n            type: 'inline-radio',\n            options: ['info', 'positive', 'negative', ''],\n        },\n    },\n};\n\nconst overlayStyles = html`\n    <style>\n        html,\n        body,\n        #root,\n        #root-inner,\n        sp-story-decorator {\n            height: 100%;\n            margin: 0;\n        }\n\n        sp-story-decorator > div {\n            display: contents;\n        }\n\n        sp-story-decorator::part(container) {\n            display: flex;\n            flex-direction: column;\n            width: 100%;\n            height: 100%;\n            align-items: center;\n            justify-content: center;\n            gap: 24px;\n        }\n\n        sp-button:nth-of-type(1) {\n            margin-top: 24px;\n        }\n    </style>\n`;\n\nconst overlaid = (openPlacement: Placement): TemplateResult => {\n    return html`\n        ${overlayStyles}\n        ${(\n            [\n                ['bottom', ''],\n                ['left', 'negative'],\n                ['right', 'positive'],\n                ['top', 'info'],\n                ['top-start', ''],\n            ] as [Placement, string][]\n        ).map(([placement, variant]) => {\n            return html`\n                <sp-button id=\"trigger-${placement}\" label=\"${placement} test\">\n                    Hover for ${variant ? variant : 'tooltip'} on the\n                    ${placement}\n                </sp-button>\n                <sp-overlay\n                    trigger=\"trigger-${placement}@hover\"\n                    type=\"hint\"\n                    placement=${placement}\n                    open=${ifDefined(\n                        openPlacement === placement ? 'hover' : undefined\n                    )}\n                >\n                    <sp-tooltip variant=${variant} placement=${placement}>\n                        ${placement}\n                    </sp-tooltip>\n                </sp-overlay>\n            `;\n        })}\n    `;\n};\n\nexport const overlaidTop = (): TemplateResult => overlaid('top');\nexport const overlaidRight = (): TemplateResult => overlaid('right');\nexport const overlaidBottom = (): TemplateResult => overlaid('bottom');\nexport const overlaidLeft = (): TemplateResult => overlaid('left');\nexport const overlaidTopStart = (): TemplateResult => overlaid('top-start');\n\nexport const selfManaged = ({\n    placement,\n    open,\n    offset,\n    delayed,\n    disabled,\n}: Properties): TemplateResult => html`\n    ${overlayStyles}\n    <sp-action-button class=\"self-managed\">\n        This is a button.\n        <sp-tooltip\n            self-managed\n            placement=${placement}\n            offset=${offset}\n            ?delayed=${delayed}\n            ?disabled=${disabled}\n            ?open=${open}\n        >\n            Add paragraph text by dragging the Text tool on the canvas to use\n            this feature\n        </sp-tooltip>\n    </sp-action-button>\n`;\nselfManaged.args = {\n    placement: 'top',\n    open: true,\n    offset: 6,\n    delayed: false,\n    disabled: false,\n};\nselfManaged.argTypes = {\n    delayed: {\n        name: 'delayed',\n        type: { name: 'boolean', required: false },\n        description: 'Whether to manage the tooltip with the warmup timer',\n    },\n    disabled: {\n        name: 'disabled',\n        type: { name: 'boolean', required: false },\n        description: 'Whether the Tooltip is active and can be displayed',\n    },\n    offset: {\n        name: 'offset',\n        type: { name: 'number', required: false },\n        description:\n            'The pixel distance from the parent element to place the tooltip',\n    },\n    open: {\n        name: 'open',\n        type: { name: 'boolean', required: false },\n        description: 'Whether the tooltip is open.',\n        table: {\n            type: { summary: 'boolean' },\n            defaultValue: { summary: false },\n        },\n        control: {\n            type: 'boolean',\n        },\n    },\n    placement: {\n        name: 'placement',\n        type: { name: 'string', required: false },\n        description: 'The placement of the tooltip in relation to its parent',\n        table: {\n            type: { summary: 'string' },\n            defaultValue: { summary: 'top' },\n        },\n        control: {\n            type: 'inline-radio',\n            options: [\n                'auto',\n                'auto-start',\n                'auto-end',\n                'top',\n                'bottom',\n                'right',\n                'left',\n                'top-start',\n                'top-end',\n                'bottom-start',\n                'bottom-end',\n                'right-start',\n                'right-end',\n                'left-start',\n                'left-end',\n                'none',\n            ],\n        },\n    },\n};\n\nexport const selfManagedIconOnly = (): TemplateResult => html`\n    ${overlayStyles}\n    <sp-action-button class=\"self-managed\">\n        <sp-icon-edit slot=\"icon\"></sp-icon-edit>\n        <sp-tooltip self-managed>This is a tooltip.</sp-tooltip>\n    </sp-action-button>\n    <hr />\n\n    <sp-action-button class=\"self-managed\">\n        <sp-icon-edit slot=\"icon\"></sp-icon-edit>\n    </sp-action-button>\n`;\n\nexport const selfManagedFieldLabel = (): TemplateResult => html`\n    <div style=\"display: inline-flex; flex-direction: column;\">\n        <sp-field-label for=\"input\">\n            <sp-icon-edit></sp-icon-edit>\n            <sp-tooltip self-managed>Edit</sp-tooltip>\n        </sp-field-label>\n        <sp-textfield id=\"input\"></sp-textfield>\n    </div>\n`;\n\nexport const draggable = (): TemplateResult => {\n    const handleDragStart = (event: DragEvent): void => {\n        event.dataTransfer?.setDragImage(\n            event.target as HTMLElement,\n            event.offsetX,\n            event.offsetY\n        );\n    };\n    return html`\n        <sp-button>\n            A simple button that should not be included in the DragImage\n        </sp-button>\n        <div\n            draggable=\"true\"\n            id=\"draggableElement\"\n            @dragstart=${handleDragStart}\n            style=\"margin-top: 16px; cursor: move; padding: 24px; border: red 1px solid;\"\n        >\n            <p>Click and drag me to show DragImage</p>\n            <sp-action-button>\n                Action Button with self managed tooltip\n                <sp-tooltip self-managed placement=\"bottom\">\n                    My Tooltip\n                </sp-tooltip>\n            </sp-action-button>\n        </div>\n    `;\n};\n\ndraggable.swc_vrt = {\n    skip: true,\n};\n\ndraggable.parameters = {\n    // Disables Chromatic's snapshotting on a global level\n    chromatic: { disableSnapshot: true },\n};\n\nexport const DelayedTooltipWithOverlay = (): TemplateResult => {\n    return html`\n        <div\n            style=\"width: 100%; max-width: 800px; margin: 0 auto; padding: 20px;\"\n        >\n            <h2>Delayed Tooltip Overlay Interaction Issue</h2>\n\n            <div style=\"display: flex; gap: 24px; margin-bottom: 24px;\">\n                <!-- First overlay - this should stay open during tooltip warmup -->\n                <sp-button variant=\"primary\" id=\"button1\">\n                    Click to Open Popover\n                </sp-button>\n                <sp-overlay\n                    trigger=\"button1@click\"\n                    placement=\"bottom\"\n                    id=\"popover-overlay\"\n                >\n                    <sp-popover>\n                        <div style=\"padding: 20px;\">\n                            <h3 style=\"margin-top: 0;\">Opened Popover</h3>\n                            <p>\n                                This popover should stay open during tooltip\n                                warmup\n                            </p>\n                            <p>\n                                <strong>Steps to test:</strong>\n                                With this popover open, hover the button to the\n                                right.\n                            </p>\n                        </div>\n                    </sp-popover>\n                </sp-overlay>\n\n                <overlay-trigger triggered-by=\"hover\">\n                    <sp-button\n                        slot=\"trigger\"\n                        variant=\"secondary\"\n                        @pointerenter=${(event: Event) => {\n                            // Capture phase event handler to stop propagation during warmup\n                            // This ensures other overlays don't close prematurely\n                            event.stopPropagation();\n                        }}\n                    >\n                        Hover me\n                    </sp-button>\n                    <sp-tooltip\n                        slot=\"hover-content\"\n                        delayed\n                        placement=\"bottom\"\n                        @sp-opened=${() => {\n                            const popoverOverlay = document.getElementById(\n                                'popover-overlay'\n                            ) as Overlay;\n                            if (\n                                popoverOverlay &&\n                                popoverOverlay.hasAttribute('open')\n                            ) {\n                                popoverOverlay.open = false;\n                            }\n                        }}\n                    >\n                        This is a delayed tooltip\n                    </sp-tooltip>\n                </overlay-trigger>\n            </div>\n\n            <div\n                style=\"border: 1px solid #ccc; padding: 20px; border-radius: 4px; background-color: #f5f5f5;\"\n            >\n                <h3 style=\"margin-top: 0;\">Expected Behavior</h3>\n                <ol style=\"margin-left: 16px;\">\n                    <li>\n                        Click the\n                        <strong>Click to Open Popover</strong>\n                        button to open the popover\n                    </li>\n                    <li>\n                        Hover over the\n                        <strong>Hover me</strong>\n                        button\n                    </li>\n                    <li>\n                        The popover should\n                        <strong>remain open</strong>\n                        during the tooltip's 1-second warmup period\n                    </li>\n                    <li>\n                        The popover should\n                        <strong>automatically close</strong>\n                        when the tooltip appears in DOM\n                    </li>\n                </ol>\n            </div>\n        </div>\n    `;\n};\n"],
  "mappings": "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",
  "names": []
}
