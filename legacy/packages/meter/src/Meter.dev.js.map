{
  "version": 3,
  "sources": ["Meter.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    nothing,\n    PropertyValues,\n    SizedMixin,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\n\nimport { getLabelFromSlot } from '@spectrum-web-components/shared/src/get-label-from-slot.js';\nimport { ObserveSlotText } from '@spectrum-web-components/shared/src/observe-slot-text.js';\nimport { LanguageResolutionController } from '@spectrum-web-components/reactive-controllers/src/LanguageResolution.js';\nimport '@spectrum-web-components/field-label/sp-field-label.js';\nimport styles from './meter.css.js';\n\nexport const meterVariants = ['positive', 'notice', 'negative'];\n\nexport type MeterVariants = (typeof meterVariants)[number];\n\n/**\n * @element sp-meter\n *\n * @slot - text labeling the Meter\n */\nexport class Meter extends SizedMixin(ObserveSlotText(SpectrumElement, ''), {\n    noDefaultSize: true,\n}) {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    @property({ type: Number })\n    public progress = 0;\n\n    /**\n     * The variant applies specific styling when set to `negative`, `positive`, `notice`\n     * `variant` attribute is removed when not matching one of the above.\n     *\n     * @param {String} variant\n     */\n    @property({ type: String })\n    public set variant(variant: MeterVariants) {\n        if (variant === this.variant) {\n            return;\n        }\n        const oldValue = this.variant;\n        if (meterVariants.includes(variant)) {\n            this.setAttribute('variant', variant);\n            this._variant = variant;\n        } else {\n            this.removeAttribute('variant');\n            this._variant = '';\n        }\n        this.requestUpdate('variant', oldValue);\n    }\n\n    public get variant(): MeterVariants {\n        return this._variant;\n    }\n\n    private _variant: MeterVariants = '';\n\n    @property({ type: String, reflect: true })\n    public label = '';\n\n    @query('slot')\n    private slotEl!: HTMLSlotElement;\n\n    private languageResolver = new LanguageResolutionController(this);\n\n    @property({ type: Boolean, reflect: true, attribute: 'side-label' })\n    // called sideLabel\n    public sideLabel = false;\n\n    @property({ reflect: true, attribute: 'static-color' })\n    public staticColor?: 'white';\n\n    protected override render(): TemplateResult {\n        return html`\n            <sp-field-label size=${this.size} class=\"label\">\n                ${this.slotHasContent ? nothing : this.label}\n                <slot @slotchange=${this.handleSlotchange}>${this.label}</slot>\n            </sp-field-label>\n            <sp-field-label size=${this.size} class=\"percentage\">\n                ${new Intl.NumberFormat(this.languageResolver.language, {\n                    style: 'percent',\n                    unitDisplay: 'narrow',\n                }).format(this.progress / 100)}\n            </sp-field-label>\n            <div class=\"track\">\n                <div\n                    class=\"fill\"\n                    style=\"transform: scaleX(calc(${this.progress} / 100));\"\n                ></div>\n            </div>\n        `;\n    }\n\n    protected handleSlotchange(): void {\n        const labelFromSlot = getLabelFromSlot(this.label, this.slotEl);\n        if (labelFromSlot) {\n            this.label = labelFromSlot;\n        }\n    }\n\n    protected override firstUpdated(changes: PropertyValues): void {\n        super.firstUpdated(changes);\n        this.setAttribute('role', 'meter progressbar');\n    }\n\n    protected override updated(changes: PropertyValues): void {\n        super.updated(changes);\n        if (changes.has('progress')) {\n            this.setAttribute('aria-valuenow', '' + this.progress);\n        }\n        if (changes.has('label')) {\n            if (this.label.length) {\n                this.setAttribute('aria-label', this.label);\n            } else {\n                this.removeAttribute('aria-label');\n            }\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;AAYA;AAAA,EAEI;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,OAEG;AACP;AAAA,EACI;AAAA,EACA;AAAA,OACG;AAEP,SAAS,wBAAwB;AACjC,SAAS,uBAAuB;AAChC,SAAS,oCAAoC;AAC7C,OAAO;AACP,OAAO,YAAY;AAEZ,aAAM,gBAAgB,CAAC,YAAY,UAAU,UAAU;AASvD,aAAM,cAAc,WAAW,gBAAgB,iBAAiB,EAAE,GAAG;AAAA,EACxE,eAAe;AACnB,CAAC,EAAE;AAAA,EAFI;AAAA;AAQH,SAAO,WAAW;AA4BlB,SAAQ,WAA0B;AAGlC,SAAO,QAAQ;AAKf,SAAQ,mBAAmB,IAAI,6BAA6B,IAAI;AAIhE;AAAA,SAAO,YAAY;AAAA;AAAA,EA7CnB,WAA2B,SAAyB;AAChD,WAAO,CAAC,MAAM;AAAA,EAClB;AAAA,EAYA,IAAW,QAAQ,SAAwB;AACvC,QAAI,YAAY,KAAK,SAAS;AAC1B;AAAA,IACJ;AACA,UAAM,WAAW,KAAK;AACtB,QAAI,cAAc,SAAS,OAAO,GAAG;AACjC,WAAK,aAAa,WAAW,OAAO;AACpC,WAAK,WAAW;AAAA,IACpB,OAAO;AACH,WAAK,gBAAgB,SAAS;AAC9B,WAAK,WAAW;AAAA,IACpB;AACA,SAAK,cAAc,WAAW,QAAQ;AAAA,EAC1C;AAAA,EAEA,IAAW,UAAyB;AAChC,WAAO,KAAK;AAAA,EAChB;AAAA,EAmBmB,SAAyB;AACxC,WAAO;AAAA,mCACoB,KAAK,IAAI;AAAA,kBAC1B,KAAK,iBAAiB,UAAU,KAAK,KAAK;AAAA,oCACxB,KAAK,gBAAgB,IAAI,KAAK,KAAK;AAAA;AAAA,mCAEpC,KAAK,IAAI;AAAA,kBAC1B,IAAI,KAAK,aAAa,KAAK,iBAAiB,UAAU;AAAA,MACpD,OAAO;AAAA,MACP,aAAa;AAAA,IACjB,CAAC,EAAE,OAAO,KAAK,WAAW,GAAG,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,oDAKM,KAAK,QAAQ;AAAA;AAAA;AAAA;AAAA,EAI7D;AAAA,EAEU,mBAAyB;AAC/B,UAAM,gBAAgB,iBAAiB,KAAK,OAAO,KAAK,MAAM;AAC9D,QAAI,eAAe;AACf,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AAAA,EAEmB,aAAa,SAA+B;AAC3D,UAAM,aAAa,OAAO;AAC1B,SAAK,aAAa,QAAQ,mBAAmB;AAAA,EACjD;AAAA,EAEmB,QAAQ,SAA+B;AACtD,UAAM,QAAQ,OAAO;AACrB,QAAI,QAAQ,IAAI,UAAU,GAAG;AACzB,WAAK,aAAa,iBAAiB,KAAK,KAAK,QAAQ;AAAA,IACzD;AACA,QAAI,QAAQ,IAAI,OAAO,GAAG;AACtB,UAAI,KAAK,MAAM,QAAQ;AACnB,aAAK,aAAa,cAAc,KAAK,KAAK;AAAA,MAC9C,OAAO;AACH,aAAK,gBAAgB,YAAY;AAAA,MACrC;AAAA,IACJ;AAAA,EACJ;AACJ;AA3FW;AAAA,EADN,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GAPjB,MAQF;AASI;AAAA,EADV,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GAhBjB,MAiBE;AAsBJ;AAAA,EADN,SAAS,EAAE,MAAM,QAAQ,SAAS,KAAK,CAAC;AAAA,GAtChC,MAuCF;AAGC;AAAA,EADP,MAAM,MAAM;AAAA,GAzCJ,MA0CD;AAMD;AAAA,EAFN,SAAS,EAAE,MAAM,SAAS,SAAS,MAAM,WAAW,aAAa,CAAC;AAAA,GA9C1D,MAgDF;AAGA;AAAA,EADN,SAAS,EAAE,SAAS,MAAM,WAAW,eAAe,CAAC;AAAA,GAlD7C,MAmDF;",
  "names": []
}
