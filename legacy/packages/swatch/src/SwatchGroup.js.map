{
  "version": 3,
  "sources": ["SwatchGroup.ts"],
  "sourcesContent": ["/*\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    ElementSize,\n    html,\n    PropertyValues,\n    SizedMixin,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    queryAssignedElements,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { RovingTabindexController } from '@spectrum-web-components/reactive-controllers/src/RovingTabindex.js';\nimport { MutationController } from '@lit-labs/observers/mutation-controller.js';\n\nimport styles from './swatch-group.css.js';\nimport type {\n    Swatch,\n    SwatchBorder,\n    SwatchRounding,\n    SwatchShape,\n} from './Swatch.js';\n\nexport type SwatchGroupSizes = Exclude<ElementSize, 'xxs' | 'xl' | 'xxl'>;\nexport type SwatchSelects = 'single' | 'multiple' | undefined;\n\n/**\n * @element sp-swatch-group\n *\n * @slot - Swatch elements to manage as a group\n */\nexport class SwatchGroup extends SizedMixin(SpectrumElement, {\n    validSizes: ['xs', 's', 'm', 'l'],\n    noDefaultSize: true,\n}) {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    @property({ reflect: true })\n    public border: SwatchBorder;\n\n    @property({ reflect: true })\n    public density: 'compact' | 'spacious' | undefined;\n\n    @property({ reflect: true })\n    public rounding: SwatchRounding;\n\n    @property({ type: Array })\n    public get selected(): string[] {\n        return this._selected;\n    }\n\n    public set selected(selected: string[]) {\n        if (selected === this.selected) return;\n\n        const oldSelected = this.selected;\n        this._selected = selected;\n        this.requestUpdate('selected', oldSelected);\n    }\n\n    // Specifically surface `_selected` internally so that change can be made to this value internally\n    // without triggering the update lifecycle directly.\n    private _selected: string[] = [];\n\n    @property()\n    public selects: SwatchSelects;\n\n    private selectedSet = new Set<string>();\n\n    @property({ reflect: true })\n    public shape: SwatchShape;\n\n    @queryAssignedElements({ flatten: true })\n    public swatches!: Swatch[];\n\n    constructor() {\n        super();\n\n        new MutationController(this, {\n            config: {\n                attributes: true,\n                childList: true,\n                subtree: true,\n            },\n            callback: () => {\n                this.manageChange();\n            },\n        });\n    }\n\n    rovingTabindexController = new RovingTabindexController<Swatch>(this, {\n        focusInIndex: (elements: Swatch[]) => {\n            let firstEnabledIndex = -1;\n            const firstSelectedIndex = elements.findIndex((el, index) => {\n                if (!elements[firstEnabledIndex] && !el.disabled) {\n                    firstEnabledIndex = index;\n                }\n                return el.selected && !el.disabled;\n            });\n            return elements[firstSelectedIndex]\n                ? firstSelectedIndex\n                : firstEnabledIndex;\n        },\n        elements: () => this.swatches,\n        isFocusableElement: (el: Swatch) => !el.disabled,\n    });\n\n    public override focus(options?: FocusOptions): void {\n        this.rovingTabindexController.focus(options);\n    }\n\n    protected handleChange(event: Event & { target: Swatch }): void {\n        event.stopPropagation();\n        const oldSelected = this.selected;\n        if (!this.selects) {\n            event.preventDefault();\n            return;\n        }\n        if (this.selects === 'single') {\n            const { target } = event;\n            target.tabIndex = 0;\n            target.selected = true;\n            if (this.selectedSet.has(target.value)) {\n                return;\n            }\n            this.selectedSet.clear();\n            this.selectedSet.add(target.value);\n            this.rovingTabindexController.elements.forEach((child) => {\n                if (child === target) return;\n                child.selected = false;\n            });\n        } else if (this.selects === 'multiple') {\n            const { target } = event;\n            if (target.selected) {\n                this.selectedSet.add(target.value);\n            } else {\n                this.selectedSet.delete(target.value);\n            }\n        }\n        this._selected = [...this.selectedSet];\n        const applyDefault = this.dispatchEvent(\n            new Event('change', {\n                cancelable: true,\n                bubbles: true,\n            })\n        );\n        if (!applyDefault) {\n            this._selected = oldSelected;\n            event.preventDefault();\n        }\n    }\n\n    private manageChange = async (): Promise<void> => {\n        const presentSet = new Set();\n        this.selectedSet = new Set(this.selected);\n        await Promise.all(this.swatches.map((swatch) => swatch.updateComplete));\n        this.swatches.forEach((swatch) => {\n            presentSet.add(swatch.value);\n            if (swatch.selected) {\n                this.selectedSet.add(swatch.value);\n            }\n        });\n        this.selectedSet.forEach((value) => {\n            if (!presentSet.has(value)) {\n                this.selectedSet.delete(value);\n            }\n        });\n        this._selected = [...this.selectedSet];\n        this.rovingTabindexController.clearElementCache();\n    };\n\n    private getPassthroughSwatchActions(\n        changes: PropertyValues\n    ): ((swatch: Swatch) => void)[] {\n        const targetValues: {\n            border?: SwatchBorder;\n            rounding?: SwatchRounding;\n            shape?: SwatchShape;\n            size?: SwatchGroupSizes;\n            selects?: SwatchSelects;\n        } = {};\n        if (\n            changes.has('selects') &&\n            (this.selects || typeof changes.get('selects') !== 'undefined')\n        ) {\n            targetValues.selects = this.selects;\n        }\n        if (\n            changes.has('border') &&\n            (this.border || typeof changes.get('border') !== 'undefined')\n        ) {\n            targetValues.border = this.border;\n        }\n        if (\n            changes.has('rounding') &&\n            (this.rounding || typeof changes.get('rounding') !== 'undefined')\n        ) {\n            targetValues.rounding = this.rounding;\n        }\n        if (\n            changes.has('size') &&\n            (this.size !== 'm' || typeof changes.get('size') !== 'undefined')\n        ) {\n            targetValues.size = this.size as SwatchGroupSizes;\n        }\n        if (\n            changes.has('shape') &&\n            (this.shape || typeof changes.get('shape') !== 'undefined')\n        ) {\n            targetValues.shape = this.shape;\n        }\n        const passThroughSwatchActions: ((swatch: Swatch) => void)[] = [];\n        if (Object.keys(targetValues).length) {\n            passThroughSwatchActions.push((swatch) => {\n                if (window.__swc.DEBUG) {\n                    if (\n                        'selects' in targetValues &&\n                        targetValues.selects !== 'multiple' &&\n                        swatch.mixedValue\n                    ) {\n                        window.__swc.warn(\n                            this,\n                            `<sp-swatch> elements can only leverage the \"mixed-value\" attribute when their <sp-swatch-group> parent element is also leveraging \"selects=\"multiple\"\"`,\n                            'https://opensource.adobe.com/spectrum-web-components/components/swatch-group/#multiple',\n                            {\n                                type: 'accessibility',\n                            }\n                        );\n                    }\n                }\n                if ('border' in targetValues)\n                    swatch.border = targetValues.border;\n                if ('rounding' in targetValues)\n                    swatch.rounding = targetValues.rounding;\n                if ('shape' in targetValues) swatch.shape = targetValues.shape;\n                if ('size' in targetValues)\n                    swatch.size = targetValues.size as SwatchGroupSizes;\n            });\n        }\n        return passThroughSwatchActions;\n    }\n\n    private getSelectionSwatchActions(\n        changes: PropertyValues\n    ): ((swatch: Swatch) => void)[] {\n        const selectionSwatchActions: ((swatch: Swatch) => void)[] = [];\n        if (!changes.has('selects')) return selectionSwatchActions;\n        if (this.selects) {\n            this.setAttribute(\n                'role',\n                this.selects === 'single' ? 'radiogroup' : 'group'\n            );\n        } else {\n            this.removeAttribute('role');\n        }\n        const swatchRoles = {\n            single: 'radio',\n            multiple: 'checkbox',\n        };\n        const swatchRole = this.selects ? swatchRoles[this.selects] : 'button';\n        selectionSwatchActions.push((swatch) => {\n            swatch.setAttribute('role', swatchRole);\n        });\n        return selectionSwatchActions;\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <slot\n                @change=${this.handleChange}\n                @slotchange=${this.manageChange}\n            ></slot>\n        `;\n    }\n\n    protected override willUpdate(changes: PropertyValues<this>): void {\n        const swatchActions = [\n            ...this.getPassthroughSwatchActions(changes),\n            ...this.getSelectionSwatchActions(changes),\n        ];\n\n        // Create Swatch actions that build state to be applied later.\n        let nextSelected = new Set(this.selected);\n        const currentValues = new Set();\n        if (changes.has('selected')) {\n            swatchActions.push((swatch) => {\n                currentValues.add(swatch.value);\n                if (\n                    nextSelected.has(swatch.value) ||\n                    (!this.hasUpdated && swatch.selected)\n                ) {\n                    swatch.selected = true;\n                } else {\n                    swatch.selected = false;\n                }\n            });\n        }\n\n        const doActions = (): void => {\n            nextSelected = new Set(this.selected);\n\n            // Do Swatch actions to each Swatch in the collection.\n            this.swatches.forEach((swatch) => {\n                swatchActions.forEach((action) => {\n                    action(swatch);\n                });\n            });\n\n            // Apply state built in actions back to the Swatch Group\n            if (changes.has('selected')) {\n                this._selected = [...nextSelected.values()].filter(\n                    (selectedValue) => currentValues.has(selectedValue)\n                );\n            }\n        };\n\n        if (this.hasUpdated) {\n            // Do actions immediately when the element has already updated.\n            doActions();\n        } else {\n            // On first update wait for a `slotchange` event, which is not currently managed\n            // by the element lifecycle before allowing Swatch actions to be commited.\n            this.shadowRoot.addEventListener(\n                'slotchange',\n                () => {\n                    requestAnimationFrame(doActions);\n                },\n                { once: true }\n            );\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["html", "SizedMixin", "SpectrumElement", "property", "queryAssignedElements", "RovingTabindexController", "MutationController", "styles", "elements", "firstEnabledIndex", "firstSelectedIndex", "el", "index", "presentSet", "swatch", "value", "selected", "oldSelected", "options", "event", "target", "child", "changes", "targetValues", "passThroughSwatchActions", "selectionSwatchActions", "swatchRoles", "swatchRole", "swatchActions", "nextSelected", "currentValues", "doActions", "action", "selectedValue", "__decorateClass"]
}
