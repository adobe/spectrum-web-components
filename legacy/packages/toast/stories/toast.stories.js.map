{
  "version": 3,
  "sources": ["toast.stories.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { html, TemplateResult } from '@spectrum-web-components/base';\n\nimport '@spectrum-web-components/toast/sp-toast.js';\nimport '@spectrum-web-components/button/sp-button.js';\nimport '@spectrum-web-components/overlay/sp-overlay.js';\n\nimport { Placement } from '@spectrum-web-components/overlay';\nimport '@spectrum-web-components/overlay/overlay-trigger.js';\nimport { ifDefined } from '@spectrum-web-components/base/src/directives.js';\n\nconst toast = ({\n    variant = '',\n    open = true,\n    content = '',\n    timeout = 0,\n    iconLabel = '',\n}): TemplateResult => html`\n    <sp-toast\n        variant=${variant as\n            | ''\n            | 'negative'\n            | 'positive'\n            | 'info'\n            | 'error'\n            | 'warning'}\n        ?open=${open}\n        timeout=${ifDefined(timeout)}\n        .iconLabel=${iconLabel}\n    >\n        ${content}\n        <sp-button\n            slot=\"action\"\n            static-color=\"white\"\n            variant=\"secondary\"\n            treatment=\"outline\"\n        >\n            Undo\n        </sp-button>\n    </sp-toast>\n`;\n\nexport default {\n    component: 'sp-toast',\n    title: 'Toast',\n    args: {\n        content: 'This is a toast message.',\n        open: true,\n    },\n    argTypes: {\n        content: {\n            name: 'content',\n            type: { name: 'string', required: false },\n            table: {\n                type: { summary: 'string' },\n                defaultValue: { summary: '' },\n            },\n        },\n        open: {\n            name: 'open',\n            type: { name: 'boolean', required: false },\n            table: {\n                type: { summary: 'boolean' },\n                defaultValue: { summary: false },\n            },\n        },\n        variant: {\n            name: 'variant',\n            options: ['', 'negative', 'positive', 'info', 'error', 'warning'],\n            table: {\n                type: { summary: 'string' },\n                defaultValue: { summary: '' },\n            },\n            control: {\n                type: 'select',\n            },\n        },\n        timeout: {\n            name: 'timeout',\n            type: { name: 'number', required: false },\n            table: {\n                type: { summary: 'number' },\n                defaultValue: { summary: null },\n            },\n        },\n        iconLabel: {\n            name: 'iconLabel',\n            type: { name: 'string', required: false },\n            table: {\n                type: { summary: 'string' },\n                defaultValue: { summary: '' },\n            },\n        },\n    },\n};\n\ninterface Properties {\n    variant: '' | 'negative' | 'positive' | 'info' | 'error' | 'warning';\n    open: boolean;\n    content: string;\n    timeout: number;\n    iconLabel: string;\n    onClose: (event: Event) => void;\n}\n\nexport const Default = ({\n    variant,\n    open,\n    content,\n    timeout,\n    iconLabel,\n}: Properties): TemplateResult => {\n    return toast({ variant, open, content, timeout, iconLabel });\n};\n\nconst variantDemo = ({\n    variant,\n    open,\n    content,\n    timeout,\n    iconLabel,\n}: Properties): TemplateResult => {\n    return toast({ variant, open, content, timeout, iconLabel });\n};\n\nexport const Positive = (args: Properties): TemplateResult =>\n    variantDemo({ ...args, variant: 'positive' });\n\nexport const Negative = (args: Properties): TemplateResult =>\n    variantDemo({ ...args, variant: 'negative' });\n\nexport const Info = (args: Properties): TemplateResult =>\n    variantDemo({ ...args, variant: 'info' });\n\nexport const Wrapping = (args: Properties): TemplateResult =>\n    variantDemo({\n        ...args,\n        variant: 'info',\n        content:\n            'A new version of Lightroom Classic is now available. Use the Update button below to start using the new version.',\n    });\n\nconst overlayStyles = html`\n    <style>\n        html,\n        body,\n        #root,\n        #root-inner,\n        sp-story-decorator {\n            height: 100%;\n            margin: 0;\n        }\n\n        sp-story-decorator > div {\n            display: contents;\n        }\n\n        sp-story-decorator::part(container) {\n            display: flex;\n            flex-direction: column;\n            width: 100%;\n            height: 100%;\n            align-items: center;\n            justify-content: center;\n        }\n\n        overlay-trigger {\n            flex: none;\n            margin: 24px 0;\n        }\n\n        .self-managed:nth-child(3) {\n            margin-left: 50px;\n        }\n    </style>\n`;\n\nconst overlaid = (openPlacement: Placement): TemplateResult => {\n    return html`\n        ${overlayStyles}\n        ${(\n            [\n                ['bottom', ''],\n                ['left', 'negative'],\n                ['right', 'positive'],\n                ['top', 'info'],\n            ] as [Placement, string][]\n        ).map(([placement, variant]) => {\n            return html`\n                <overlay-trigger\n                    placement=${placement}\n                    open=${ifDefined(\n                        openPlacement === placement ? 'click' : undefined\n                    )}\n                >\n                    <sp-button label=\"${placement} test\" slot=\"trigger\">\n                        Click for ${variant ? variant : 'toast'} on the\n                        ${placement}\n                    </sp-button>\n                    <sp-toast slot=\"click-content\" variant=${variant}>\n                        ${placement}\n                    </sp-toast>\n                </overlay-trigger>\n            `;\n        })}\n    `;\n};\n\nexport const overlaidTop = (): TemplateResult => overlaid('top');\nexport const overlaidRight = (): TemplateResult => overlaid('right');\nexport const overlaidBottom = (): TemplateResult => overlaid('bottom');\nexport const overlaidLeft = (): TemplateResult => overlaid('left');\n\nexport const overlay = (args: Properties): TemplateResult => {\n    return html`\n        <style>\n            sp-toast {\n                position: fixed;\n                bottom: 1em;\n                left: 1em;\n            }\n        </style>\n        <sp-button id=\"overlay\">Toggle Toast overlay</sp-button>\n        <sp-overlay trigger=\"overlay@click\" type=\"auto\" open>\n            ${variantDemo({ ...args, variant: 'positive' })}\n        </sp-overlay>\n    `;\n};\n"],
  "mappings": "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",
  "names": []
}
