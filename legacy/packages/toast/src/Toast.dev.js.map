{
  "version": 3,
  "sources": ["Toast.ts"],
  "sourcesContent": ["/*\nCopyright 2024 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\nimport '@spectrum-web-components/button/sp-close-button.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-info.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-checkmark-circle.js';\nimport { FocusVisiblePolyfillMixin } from '@spectrum-web-components/shared/src/focus-visible.js';\n\nimport toastStyles from './toast.css.js';\n\nexport const toastVariants: ToastVariants[] = [\n    'negative',\n    'positive',\n    'info',\n    'error',\n    'warning',\n];\n\nexport type ToastVariants =\n    | 'negative'\n    | 'positive'\n    | 'info'\n    | 'error'\n    | 'warning'\n    | '';\n\n/**\n * @element sp-toast\n *\n * @slot - The toast content\n * @slot action - button element surfacing an action in the Toast\n *\n * @fires close - Announces that the Toast has been closed by the user or by its timeout.\n */\n\nexport class Toast extends FocusVisiblePolyfillMixin(SpectrumElement) {\n    public static override get styles(): CSSResultArray {\n        return [toastStyles];\n    }\n\n    /**\n     * The `open` property indicates whether the toast is visible or hidden.\n     *\n     * @param {Boolean} open\n     */\n    @property({ type: Boolean, reflect: true })\n    public open = false;\n\n    /**\n     * When a timeout is provided, it represents the number of milliseconds from when\n     * the Toast was placed on the page before it will automatically dismiss itself.\n     *\n     * Accessibility concerns require that a Toast is available for at least 6000ms\n     * before being dismissed, so any timeout of less than 6000ms will be raised to\n     * that baseline.\n     *\n     * It is suggested that messages longer than 120 words should receive an additional\n     * 1000ms in their timeout for each additional 120 words in the message.\n     *\n     * For example, a message with 240 words should have a timeout of 7000ms,\n     * and a message with 360 words should have a timeout of 8000ms.\n     *\n     * @param {Number | null} timeout\n     * @default null\n     */\n    //TODO(#4939): Align on the timeout minimum with design\n    @property({ type: Number })\n    public set timeout(timeout: number | null) {\n        const hasTimeout = typeof timeout !== null && (timeout as number) > 0;\n        const newTimeout = hasTimeout\n            ? Math.max(6000, timeout as number)\n            : null;\n        const oldValue = this.timeout;\n        if (newTimeout && this.countdownStart) {\n            this.countdownStart = performance.now();\n        }\n        this._timeout = newTimeout;\n        this.requestUpdate('timeout', oldValue);\n    }\n\n    public get timeout(): number | null {\n        return this._timeout;\n    }\n\n    private _timeout: number | null = null;\n\n    /**\n     * The variant applies specific styling when set to `negative`, `positive`, `info`, `error`, or `warning`.\n     *\n     * The variants `error` and `warning` are deprecated and should be replaced with `negative`.\n     *\n     * `variant` attribute is removed when not matching one of the above.\n     *\n     * @param {String} variant\n     */\n    @property({ type: String })\n    public set variant(variant: ToastVariants) {\n        if (variant === this.variant) {\n            return;\n        }\n        const oldValue = this.variant;\n\n        // validate the variant is one of the allowed values else remove the attribute\n        if (toastVariants.includes(variant)) {\n            this.setAttribute('variant', variant);\n            this._variant = variant;\n        } else {\n            this.removeAttribute('variant');\n            this._variant = '';\n        }\n        this.requestUpdate('variant', oldValue);\n    }\n\n    public get variant(): ToastVariants {\n        return this._variant;\n    }\n\n    private _variant: ToastVariants = '';\n\n    /**\n     * The `iconLabel` property is used to set the `label` attribute on the icon element. This is used to provide a text alternative for the icon to ensure accessibility.\n     *\n     * If the `iconLabel` property is not set, the icon will use the `variant` to dynamically set the `label`.\n     *\n     * @param {String} iconLabel\n     */\n    @property({ type: String, attribute: 'icon-label' })\n    public iconLabel?: string;\n\n    //TODO(#4931): Address the deprecated variants or remove the flags\n    private renderIcon(\n        variant: ToastVariants,\n        iconLabel?: string\n    ): TemplateResult {\n        switch (variant) {\n            case 'info':\n                return html`\n                    <sp-icon-info\n                        label=${iconLabel || 'Information'}\n                        class=\"type\"\n                    ></sp-icon-info>\n                `;\n            case 'negative':\n            case 'error': // deprecated\n                return html`\n                    <sp-icon-alert\n                        label=${iconLabel || 'Error'}\n                        class=\"type\"\n                    ></sp-icon-alert>\n                `;\n            case 'warning': // deprecated\n                return html`\n                    <sp-icon-alert\n                        label=${iconLabel || 'Warning'}\n                        class=\"type\"\n                    ></sp-icon-alert>\n                `;\n            case 'positive':\n                return html`\n                    <sp-icon-checkmark-circle\n                        label=${iconLabel || 'Success'}\n                        class=\"type\"\n                    ></sp-icon-checkmark-circle>\n                `;\n            default:\n                return html``;\n        }\n    }\n\n    private countdownStart = 0;\n    private nextCount = -1;\n\n    private doCountdown = (time: number): void => {\n        if (!this.countdownStart) {\n            this.countdownStart = performance.now();\n        }\n        if (time - this.countdownStart > (this._timeout as number)) {\n            this.shouldClose();\n            this.countdownStart = 0;\n        } else {\n            this.countdown();\n        }\n    };\n\n    private countdown = (): void => {\n        cancelAnimationFrame(this.nextCount);\n        this.nextCount = requestAnimationFrame(this.doCountdown);\n    };\n\n    private holdCountdown = (): void => {\n        this.stopCountdown();\n        this.addEventListener('focusout', this.resumeCountdown);\n    };\n\n    private resumeCountdown = (): void => {\n        this.removeEventListener('focusout', this.holdCountdown);\n        this.countdown();\n    };\n\n    private startCountdown(): void {\n        this.countdown();\n        this.addEventListener('focusin', this.holdCountdown);\n    }\n\n    private stopCountdown(): void {\n        cancelAnimationFrame(this.nextCount);\n        this.countdownStart = 0;\n    }\n\n    private shouldClose(): void {\n        const applyDefault = this.dispatchEvent(\n            new CustomEvent('close', {\n                composed: true,\n                bubbles: true,\n                cancelable: true,\n            })\n        );\n        if (applyDefault) {\n            this.close();\n        }\n    }\n\n    public close(): void {\n        this.open = false;\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            ${this.renderIcon(this.variant, this.iconLabel)}\n            <div class=\"body\" role=\"alert\">\n                <div class=\"content\">\n                    <slot></slot>\n                </div>\n                <slot name=\"action\"></slot>\n            </div>\n            <div class=\"buttons\">\n                <sp-close-button\n                    @click=${this.shouldClose}\n                    label=\"Close\"\n                    static-color=\"white\"\n                ></sp-close-button>\n            </div>\n        `;\n    }\n\n    protected override updated(changes: PropertyValues): void {\n        super.updated(changes);\n        if (changes.has('open')) {\n            if (this.open) {\n                if (this.timeout) {\n                    this.startCountdown();\n                }\n            } else {\n                if (this.timeout) {\n                    this.stopCountdown();\n                }\n            }\n        }\n        if (changes.has('timeout')) {\n            if (this.timeout !== null && this.open) {\n                this.startCountdown();\n            } else {\n                this.stopCountdown();\n            }\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
