{
  "version": 3,
  "sources": ["slider.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport '@spectrum-web-components/slider/sp-slider.js';\nimport '@spectrum-web-components/slider/sp-slider-handle.js';\nimport '@spectrum-web-components/button/sp-button.js';\nimport '@spectrum-web-components/overlay/sp-overlay.js';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport { Overlay } from '@spectrum-web-components/overlay';\nimport { Slider, SliderHandle } from '@spectrum-web-components/slider';\nimport { tick } from '../stories/slider.stories.js';\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    nextFrame,\n    oneEvent,\n    waitUntil,\n} from '@open-wc/testing';\nimport { sendKeys } from '@web/test-runner-commands';\nimport { sendMouse } from '../../../test/plugins/browser.js';\nimport { spy, stub } from 'sinon';\nimport { createLanguageContext } from '../../../tools/reactive-controllers/test/helpers.js';\nimport { testForLitDevWarnings } from '../../../test/testing-helpers.js';\n\ndescribe('Slider', () => {\n    testForLitDevWarnings(\n        async () =>\n            await fixture<Slider>(html`\n                <sp-slider label=\"Slider\"></sp-slider>\n            `)\n    );\n    it('loads', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider label=\"Slider\"></sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('loads - [variant=\"tick\"]', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider\n                label=\"Ticked Slider\"\n                min=\"-100\"\n                max=\"100\"\n                value=\"0\"\n                tick-labels\n                variant=\"tick\"\n            ></sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('loads - [variant=\"tick\"] irregularly', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider label=\"Slider\"></sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('receives value from the outside', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider max=\"20\"></sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(10);\n\n        el.value = 10;\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(10);\n\n        el.value = 50;\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(20);\n    });\n    it('accepts keyboard events', async () => {\n        const el = await fixture<Slider>(\n            tick({\n                variant: 'tick',\n                tickStep: 5,\n            })\n        );\n\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(46);\n        expect(el.highlight).to.be.false;\n\n        el.focus();\n        await sendKeys({\n            press: 'ArrowDown',\n        });\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(45);\n        expect(el.highlight).to.be.true;\n        await sendKeys({\n            press: 'ArrowUp',\n        });\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(46);\n        expect(el.highlight).to.be.true;\n    });\n    it('accepts pointer events', async () => {\n        let pointerId = -1;\n        const el = await fixture<Slider>(html`\n            <sp-slider></sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.dragging).to.be.false;\n        expect(el.highlight).to.be.false;\n        expect(pointerId).to.equal(-1);\n\n        const handle = el.shadowRoot.querySelector('.handle') as HTMLDivElement;\n        el.track.setPointerCapture = (id: number) => (pointerId = id);\n        el.track.releasePointerCapture = (id: number) => (pointerId = id);\n        handle.dispatchEvent(\n            new PointerEvent('pointerdown', {\n                button: 1,\n                pointerId: 1,\n                cancelable: true,\n                bubbles: true,\n                composed: true,\n            })\n        );\n        await elementUpdated(el);\n\n        expect(el.dragging).to.be.false;\n        expect(pointerId, '1').to.equal(-1);\n\n        handle.dispatchEvent(\n            new PointerEvent('pointerdown', {\n                button: 0,\n                pointerId: 1,\n                cancelable: true,\n                bubbles: true,\n                composed: true,\n            })\n        );\n        await elementUpdated(el);\n        expect(el.dragging, 'it is dragging 1').to.be.true;\n        expect(pointerId, '2').to.equal(1);\n\n        handle.dispatchEvent(\n            new PointerEvent('pointerup', {\n                pointerId: 2,\n                cancelable: true,\n                bubbles: true,\n                composed: true,\n            })\n        );\n        await elementUpdated(el);\n\n        expect(el.dragging).to.be.false;\n        expect(el.highlight).to.be.false;\n        expect(pointerId, '3').to.equal(2);\n\n        handle.dispatchEvent(\n            new PointerEvent('pointerdown', {\n                button: 0,\n                pointerId: 1,\n                cancelable: true,\n                bubbles: true,\n                composed: true,\n            })\n        );\n        await elementUpdated(el);\n\n        expect(el.dragging, 'it is dragging 2').to.be.true;\n        expect(pointerId, '4').to.equal(1);\n\n        handle.dispatchEvent(\n            new PointerEvent('pointercancel', {\n                pointerId: 3,\n                cancelable: true,\n                bubbles: true,\n                composed: true,\n            })\n        );\n        await elementUpdated(el);\n\n        expect(el.dragging).to.be.false;\n        expect(pointerId, '5').to.equal(3);\n    });\n    it('will `trackPointerDown` on `#controls`', async () => {\n        let pointerId = -1;\n        const el = await fixture<Slider>(html`\n            <sp-slider style=\"width: 500px\" max=\"70\"></sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(35);\n\n        const controls = el.shadowRoot.querySelector(\n            '#controls'\n        ) as HTMLDivElement;\n        const handle = el.shadowRoot.querySelector('.handle') as HTMLDivElement;\n        el.track.setPointerCapture = (id: number) => (pointerId = id);\n        el.track.releasePointerCapture = (id: number) => (pointerId = id);\n\n        controls.dispatchEvent(\n            new PointerEvent('pointerdown', {\n                button: 1,\n                // account for 8px <body> margin by default\n                clientX: 9,\n                pointerId: 4,\n                bubbles: true,\n                cancelable: true,\n            })\n        );\n        await elementUpdated(el);\n\n        expect(pointerId).to.equal(-1);\n        expect(el.value).to.equal(35);\n        expect(el.dragging, 'handle is not yet being dragged').to.be.false;\n\n        controls.dispatchEvent(\n            new PointerEvent('pointerdown', {\n                button: 0,\n                // account for 8px <body> margin by default\n                clientX: 9,\n                pointerId: 4,\n                bubbles: true,\n                cancelable: true,\n            })\n        );\n        await elementUpdated(el);\n\n        expect(pointerId).to.equal(4);\n        expect(el.value).to.equal(0);\n        expect(el.dragging, 'handle is being dragged').to.be.true;\n        handle.dispatchEvent(\n            new PointerEvent('pointermove', {\n                button: 0,\n                // account for 8px <body> margin by default\n                clientX: 508,\n                pointerId: 4,\n                bubbles: true,\n                cancelable: true,\n            })\n        );\n        await elementUpdated(el);\n\n        expect(el.dragging, 'handle is still being dragged').to.be.true;\n        expect(pointerId).to.equal(4);\n        expect(el.value).to.equal(70);\n\n        handle.dispatchEvent(\n            new PointerEvent('pointerup', {\n                button: 0,\n                // account for 8px <body> margin by default\n                clientX: 9,\n                pointerId: 4,\n                bubbles: true,\n                cancelable: true,\n            })\n        );\n        await elementUpdated(el);\n\n        expect(pointerId).to.equal(4);\n        expect(el.value).to.equal(70);\n        expect(el.dragging, 'handle is no longer being dragged').to.be.false;\n    });\n    it('can be disabled', async () => {\n        let pointerId = -1;\n        const el = await fixture<Slider>(html`\n            <sp-slider disabled></sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.dragging).to.be.false;\n        expect(pointerId).to.equal(-1);\n        expect(el.value).to.equal(50);\n\n        const handle = el.shadowRoot.querySelector('.handle') as HTMLDivElement;\n        handle.setPointerCapture = (id: number) => (pointerId = id);\n\n        handle.dispatchEvent(\n            new PointerEvent('pointerdown', {\n                button: 0,\n                pointerId: 1,\n                cancelable: true,\n            })\n        );\n        await elementUpdated(el);\n\n        expect(el.dragging).to.be.false;\n        expect(pointerId).to.equal(-1);\n\n        const controls = el.shadowRoot.querySelector(\n            '#controls'\n        ) as HTMLDivElement;\n\n        controls.dispatchEvent(\n            new PointerEvent('pointerdown', {\n                button: 0,\n                clientX: 50,\n                pointerId: 1,\n                cancelable: true,\n            })\n        );\n        await elementUpdated(el);\n\n        expect(pointerId).to.equal(-1);\n        expect(el.value).to.equal(50);\n    });\n    it('accepts pointermove events', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider></sp-slider>\n        `);\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(50);\n\n        const handle = el.shadowRoot.querySelector('.handle') as HTMLDivElement;\n\n        const handleBoundingRect = handle.getBoundingClientRect();\n\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        handleBoundingRect.x + handleBoundingRect.width / 2,\n\n                        handleBoundingRect.y + handleBoundingRect.height / 2,\n                    ],\n                },\n                {\n                    type: 'down',\n                },\n            ],\n        });\n        await elementUpdated(el);\n\n        expect(el.dragging, 'is dragging').to.be.true;\n        expect(el.highlight, 'not highlighted').to.be.false;\n\n        handle.dispatchEvent(\n            new PointerEvent('pointermove', {\n                clientX: 0,\n                cancelable: true,\n                bubbles: true,\n                composed: true,\n            })\n        );\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(0);\n    });\n\n    it('changes value when clicking on the track', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider style=\"width: 100px\"></sp-slider>\n        `);\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(50);\n\n        const track = el.shadowRoot.querySelector('#track') as HTMLDivElement;\n        const trackBoundingRect = track.getBoundingClientRect();\n\n        let pointerId = -1;\n        el.track.setPointerCapture = (id: number) => (pointerId = id);\n        el.track.releasePointerCapture = (id: number) => (pointerId = id);\n\n        // Click on the track moves it to value 60\n        track.dispatchEvent(\n            new PointerEvent('pointerdown', {\n                clientX: trackBoundingRect.x + trackBoundingRect.width / 2 + 10,\n                clientY: trackBoundingRect.y + trackBoundingRect.height / 2,\n                pointerId: 1,\n                cancelable: true,\n                bubbles: true,\n                composed: true,\n                button: 0,\n            })\n        );\n        await elementUpdated(el);\n        track.dispatchEvent(\n            new PointerEvent('pointerup', {\n                pointerId: 1,\n                cancelable: true,\n                bubbles: true,\n                composed: true,\n            })\n        );\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(60);\n        expect(pointerId, '1').to.equal(1);\n\n        // Click and drag on the track moves it from value 60 -> 75\n        track.dispatchEvent(\n            new PointerEvent('pointerdown', {\n                clientX: trackBoundingRect.x + trackBoundingRect.width / 2 + 10,\n                clientY: trackBoundingRect.y + trackBoundingRect.height / 2,\n                pointerId: 2,\n                cancelable: true,\n                bubbles: true,\n                composed: true,\n                button: 0,\n            })\n        );\n        track.dispatchEvent(\n            new PointerEvent('pointermove', {\n                clientX: trackBoundingRect.x + trackBoundingRect.width / 2 + 25,\n                clientY: trackBoundingRect.y + trackBoundingRect.height / 2,\n                pointerId: 2,\n                cancelable: true,\n                bubbles: true,\n                composed: true,\n            })\n        );\n        await elementUpdated(el);\n        track.dispatchEvent(\n            new PointerEvent('pointerup', {\n                pointerId: 2,\n                cancelable: true,\n                bubbles: true,\n                composed: true,\n            })\n        );\n        await elementUpdated(el);\n        expect(el.value).to.equal(75);\n    });\n\n    it('dispatches `input` of the animation frame', async () => {\n        const inputSpy = spy();\n        const changeSpy = spy();\n        const el = await fixture<Slider>(html`\n            <sp-slider\n                value=\"50\"\n                style=\"width: 100px\"\n                @input=${(event: Event & { target: Slider }) => {\n                    inputSpy(event.target.value);\n                }}\n                @change=${(event: Event & { target: Slider }) => {\n                    changeSpy(event.target.value);\n                }}\n            ></sp-slider>\n        `);\n        await elementUpdated(el);\n\n        const handle = el.shadowRoot.querySelector('.handle') as HTMLDivElement;\n\n        const handleBoundingRect = handle.getBoundingClientRect();\n\n        expect(inputSpy.callCount, 'start clean').to.equal(0);\n        expect(changeSpy.callCount, 'start clean').to.equal(0);\n\n        let frames = 0;\n        let shouldCountFrames = true;\n        const countFrames = (): void => {\n            if (!shouldCountFrames) return;\n            frames += 1;\n            requestAnimationFrame(countFrames);\n        };\n        countFrames();\n        type Steps = {\n            type: 'move';\n            position: [number, number];\n        }[];\n        const toRight: Steps = [...Array(51).keys()].map((i) => ({\n            type: 'move',\n            position: [9 + i, 30],\n        }));\n        const toLeft: Steps = toRight.slice(0, -1).reverse();\n\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        handleBoundingRect.x + handleBoundingRect.width / 2,\n                        handleBoundingRect.y + handleBoundingRect.height / 2,\n                    ],\n                },\n                {\n                    type: 'down',\n                },\n                ...toRight,\n                ...toLeft,\n                {\n                    type: 'up',\n                },\n            ],\n        });\n        shouldCountFrames = false;\n\n        expect(\n            inputSpy.callCount,\n            'should not have more \"input\"s than frames'\n        ).to.lte(frames);\n        expect(changeSpy.callCount, 'only one change').to.equal(1);\n    });\n\n    it('manages RTL when min != 0', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider min=\"1\" max=\"11\" dir=\"rtl\"></sp-slider>\n        `);\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(6);\n\n        const handle = el.shadowRoot.querySelector('.handle') as HTMLDivElement;\n        const handleBoundingRect = handle.getBoundingClientRect();\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        handleBoundingRect.x + handleBoundingRect.width / 2,\n                        handleBoundingRect.y + handleBoundingRect.height / 2,\n                    ],\n                },\n                {\n                    type: 'down',\n                },\n            ],\n        });\n        await elementUpdated(el);\n\n        expect(el.dragging, 'is dragging').to.be.true;\n        expect(el.highlight, 'not highlighted').to.be.false;\n\n        handle.dispatchEvent(\n            new PointerEvent('pointermove', {\n                clientX: 0,\n                cancelable: true,\n                bubbles: true,\n                composed: true,\n            })\n        );\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(11);\n    });\n\n    it('goes [disabled] while dragging', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider></sp-slider>\n        `);\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(50);\n\n        const handle = el.shadowRoot.querySelector('.handle') as HTMLDivElement;\n        const handleBoundingRect = handle.getBoundingClientRect();\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        handleBoundingRect.x + handleBoundingRect.width / 2,\n                        handleBoundingRect.y + handleBoundingRect.height / 2,\n                    ],\n                },\n                {\n                    type: 'down',\n                },\n            ],\n        });\n        await elementUpdated(el);\n\n        expect(el.dragging, 'is dragging').to.be.true;\n        expect(el.highlight, 'not highlighted').to.be.false;\n        expect(el.value).to.equal(50);\n\n        const inputEvent = oneEvent(el, 'input');\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        handleBoundingRect.x +\n                            handleBoundingRect.width / 2 +\n                            100,\n                        handleBoundingRect.y + handleBoundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n        await inputEvent;\n\n        expect(el.value).to.equal(63);\n\n        el.disabled = true;\n        await elementUpdated(el);\n\n        expect(el.dragging, 'is dragging').to.be.false;\n        expect(el.highlight, 'not highlighted').to.be.false;\n\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        0,\n                        handleBoundingRect.top + handleBoundingRect.height / 2,\n                    ],\n                },\n            ],\n        });\n\n        expect(el.value).to.equal(63);\n    });\n    it('accepts pointermove events in separate interactions', async () => {\n        let pointerId = -1;\n        const el = await fixture<Slider>(html`\n            <sp-slider style=\"width: 100px\"></sp-slider>\n        `);\n        await elementUpdated(el);\n\n        expect(el.value, 'initial').to.equal(50);\n\n        const handle = el.shadowRoot.querySelector('.handle') as HTMLDivElement;\n        el.track.setPointerCapture = (id: number) => (pointerId = id);\n        el.track.releasePointerCapture = (id: number) => (pointerId = id);\n        handle.dispatchEvent(\n            new PointerEvent('pointerdown', {\n                clientX: 58,\n                cancelable: true,\n                button: 0,\n                pointerId: 100,\n                composed: true,\n                bubbles: true,\n            })\n        );\n        await elementUpdated(el);\n        await nextFrame();\n        handle.dispatchEvent(\n            new PointerEvent('pointermove', {\n                clientX: 58,\n                cancelable: true,\n                composed: true,\n                bubbles: true,\n            })\n        );\n        await elementUpdated(el);\n        await nextFrame();\n\n        expect(el.value, 'first pointerdown').to.equal(50);\n        expect(el.dragging, 'is dragging').to.be.true;\n        expect(el.classList.contains('handle-highlight'), 'not highlighted').to\n            .be.false;\n        expect(pointerId).to.equal(100);\n\n        handle.dispatchEvent(\n            new PointerEvent('pointermove', {\n                clientX: 0,\n                cancelable: true,\n                composed: true,\n                bubbles: true,\n            })\n        );\n        await elementUpdated(el);\n        await nextFrame();\n\n        expect(el.value, 'first pointermove').to.equal(0);\n\n        handle.dispatchEvent(\n            new PointerEvent('pointerup', {\n                clientX: 0,\n                cancelable: true,\n                composed: true,\n                bubbles: true,\n            })\n        );\n        await elementUpdated(el);\n\n        expect(el.value, 'first pointerup').to.equal(0);\n        expect(el.dragging, 'is dragging').to.be.false;\n        handle.dispatchEvent(\n            new PointerEvent('pointerdown', {\n                clientX: 58,\n                cancelable: true,\n                button: 0,\n                composed: true,\n                bubbles: true,\n            })\n        );\n        await elementUpdated(el);\n        handle.dispatchEvent(\n            new PointerEvent('pointermove', {\n                clientX: 58,\n                cancelable: true,\n                composed: true,\n                bubbles: true,\n            })\n        );\n        await elementUpdated(el);\n        await nextFrame();\n\n        expect(el.value, 'second pointerdown').to.equal(50);\n        expect(el.dragging, 'is dragging').to.be.true;\n        expect(el.classList.contains('handle-highlight'), 'not highlighted').to\n            .be.false;\n\n        handle.dispatchEvent(\n            new PointerEvent('pointermove', {\n                clientX: 0,\n                cancelable: true,\n                composed: true,\n                bubbles: true,\n            })\n        );\n        await elementUpdated(el);\n        await nextFrame();\n\n        expect(el.value, 'second pointermove').to.equal(0);\n\n        handle.dispatchEvent(\n            new PointerEvent('pointerup', {\n                clientX: 0,\n                cancelable: true,\n                composed: true,\n                bubbles: true,\n            })\n        );\n        await elementUpdated(el);\n\n        expect(el.value, 'second pointerup').to.equal(0);\n        expect(el.dragging, 'is dragging').to.be.false;\n    });\n    it('accepts pointermove events - [step=0]', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider step=\"0\" max=\"20\" style=\"width: 500px; float: left;\">\n                Step = 0\n            </sp-slider>\n        `);\n        await elementUpdated(el);\n        await nextFrame();\n        await nextFrame();\n\n        expect(el.value).to.equal(10);\n\n        const handle = el.shadowRoot.querySelector('.handle') as HTMLDivElement;\n        const handleBoundingRect = handle.getBoundingClientRect();\n        const position: [number, number] = [\n            handleBoundingRect.x + handleBoundingRect.width / 2,\n            handleBoundingRect.y + handleBoundingRect.height / 2,\n        ];\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position,\n                },\n                {\n                    type: 'down',\n                },\n            ],\n        });\n\n        await elementUpdated(el);\n\n        expect(el.highlight, 'with no highlight').to.be.false;\n        expect(el.dragging, 'dragging').to.be.true;\n\n        let inputEvent = oneEvent(el, 'input');\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        200,\n                        handleBoundingRect.y + handleBoundingRect.height + 100,\n                    ],\n                },\n            ],\n        });\n        await inputEvent;\n        await nextFrame();\n\n        expect(el.value).to.equal(8);\n\n        inputEvent = oneEvent(el, 'input');\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [125, position[1]],\n                },\n            ],\n        });\n        await inputEvent;\n\n        expect(el.value).to.equal(5);\n    });\n    it('will not pointermove unless `pointerdown`', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider></sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(50);\n        expect(el.dragging).to.be.false;\n\n        const handle = el.shadowRoot.querySelector('.handle') as HTMLDivElement;\n\n        handle.dispatchEvent(\n            new PointerEvent('pointermove', {\n                clientX: 0,\n                cancelable: true,\n            })\n        );\n        await nextFrame();\n\n        expect(el.value).to.equal(50);\n    });\n    it('responds to input events on the <input/> element', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider></sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(50);\n\n        const input = el.shadowRoot.querySelector('.input') as HTMLInputElement;\n\n        input.value = '0';\n        input.dispatchEvent(new Event('change'));\n\n        expect(el.value).to.equal(0);\n    });\n    it('accepts variants', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider variant=\"tick\"></sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('tick');\n        expect(el.getAttribute('variant')).to.equal('tick');\n\n        el.variant = 'ramp';\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('ramp');\n        expect(el.getAttribute('variant')).to.equal('ramp');\n\n        el.setAttribute('variant', 'filled');\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('filled');\n        expect(el.getAttribute('variant')).to.equal('filled');\n\n        el.removeAttribute('variant');\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('');\n        expect(el.hasAttribute('variant')).to.be.false;\n    });\n    it('validates variants', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider variant=\"other\"></sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('');\n        expect(el.hasAttribute('variant')).to.be.false;\n\n        el.variant = 'tick';\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('tick');\n        expect(el.getAttribute('variant')).to.equal('tick');\n\n        el.variant = 'tick';\n\n        await elementUpdated(el);\n\n        expect(el.variant).to.equal('tick');\n        expect(el.getAttribute('variant')).to.equal('tick');\n    });\n    it('renders fill from the centerPoint of the track when fill-start has no value', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider\n                max=\"20\"\n                variant=\"filled\"\n                fill-start\n                min=\"0\"\n                value=\"10\"\n                step=\"1\"\n            ></sp-slider>\n        `);\n\n        await elementUpdated(el);\n        await nextFrame();\n        await nextFrame();\n        const fillElement = el.shadowRoot.querySelector(\n            '.fill'\n        ) as HTMLDivElement;\n\n        expect(fillElement).to.exist;\n        expect(fillElement.style.left).to.equal('50%');\n        expect(fillElement.style.width).to.equal('0%');\n        expect(el.values).to.deep.equal({ value: 10 });\n    });\n    it('renders fill from value when fill-start has value=0', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider\n                max=\"150\"\n                variant=\"filled\"\n                fill-start=\"0\"\n                min=\"-50\"\n                value=\"25\"\n                step=\"1\"\n            ></sp-slider>\n        `);\n\n        await elementUpdated(el);\n        await nextFrame();\n        await nextFrame();\n        const fillElement = el.shadowRoot.querySelector(\n            '.fill'\n        ) as HTMLDivElement;\n\n        expect(fillElement).to.exist;\n        expect(fillElement.style.left).to.equal('25%');\n        expect(fillElement.style.width).to.equal('12.5%');\n        expect(el.values).to.deep.equal({ value: 25 });\n    });\n    it('renders fill from fill-start point', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider max=\"100\" fill-start=\"15\" min=\"0\" value=\"10\"></sp-slider>\n        `);\n\n        await elementUpdated(el);\n        await nextFrame();\n        await nextFrame();\n        const fillElement = el.shadowRoot.querySelector(\n            '.fill'\n        ) as HTMLDivElement;\n\n        expect(fillElement).to.exist;\n        expect(fillElement.style.left).to.equal('10%');\n        expect(fillElement.style.width).to.equal('5%');\n        expect(el.values).to.deep.equal({ value: 10 });\n\n        const handle = el.shadowRoot.querySelector('.handle') as HTMLDivElement;\n        const handleBoundingRect = handle.getBoundingClientRect();\n        const position: [number, number] = [\n            handleBoundingRect.x + handleBoundingRect.width / 2,\n            handleBoundingRect.y + handleBoundingRect.height / 2,\n        ];\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position,\n                },\n                {\n                    type: 'down',\n                },\n            ],\n        });\n\n        await elementUpdated(el);\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        200,\n                        handleBoundingRect.y + handleBoundingRect.height + 100,\n                    ],\n                },\n            ],\n        });\n        await nextFrame();\n\n        expect(el.value).to.equal(24);\n    });\n    it('renders fill from fill-start point with given normalization function', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider\n                max=\"100\"\n                fill-start=\"0\"\n                min=\"-50\"\n                value=\"-25\"\n                .normalization=${{\n                    toNormalized: (value: number): number => {\n                        if (value === 0) return 0.5;\n                        return value < 0\n                            ? 0.5 - (value / -50) * 0.5\n                            : 0.5 + (value / 100) * 0.5;\n                    },\n                    fromNormalized: (value: number): number => {\n                        if (value === 0.5) return 0;\n                        return value < 0.5\n                            ? (1 - value / 0.5) * -50\n                            : ((value - 0.5) / 0.5) * 100;\n                    },\n                }}\n            ></sp-slider>\n        `);\n\n        await elementUpdated(el);\n        await nextFrame();\n        await nextFrame();\n        const fillElement = el.shadowRoot.querySelector(\n            '.fill'\n        ) as HTMLDivElement;\n\n        expect(fillElement).to.exist;\n        expect(fillElement.style.left).to.equal('25%');\n        expect(fillElement.style.width).to.equal('25%');\n        expect(el.values).to.deep.equal({ value: -25 });\n    });\n    it('has a `focusElement`', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider></sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        const input = el.focusElement as HTMLInputElement;\n        expect(input).to.not.be.undefined;\n        expect(input.type).to.equal('range');\n    });\n    it('displays result of getAriaValueText', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider\n                value=\"50\"\n                min=\"0\"\n                max=\"100\"\n                .getAriaHandleText=${(value: number) => `${value}%`}\n            ></sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        const input = el.focusElement as HTMLInputElement;\n        expect(input.getAttribute('aria-valuetext')).to.equal('50%');\n\n        el.value = 100;\n        await elementUpdated(el);\n\n        expect(input.getAttribute('aria-valuetext')).to.equal('100%');\n    });\n    it('displays Intl.formatNumber results', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider\n                value=\".5\"\n                min=\"0\"\n                max=\"1\"\n                .formatOptions=${{ style: 'percent' }}\n            ></sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        const input = el.focusElement as HTMLInputElement;\n        expect(input.getAttribute('aria-valuetext')).to.equal('50%');\n\n        el.value = 100;\n        await elementUpdated(el);\n\n        expect(input.getAttribute('aria-valuetext')).to.equal('100%');\n    });\n    it('obeys language property', async () => {\n        const [languageContext, updateLanguage] = createLanguageContext('de');\n        let el = await fixture<Slider>(html`\n            <sp-slider\n                value=\"2.44\"\n                min=\"0\"\n                max=\"10\"\n                step=\"0.01\"\n                @sp-language-context=${languageContext}\n                .formatOptions=${{ maximumFractionDigits: 2 }}\n            ></sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        let input = el.focusElement as HTMLInputElement;\n        expect(\n            input.getAttribute('aria-valuetext'),\n            'First German number'\n        ).to.equal('2,44');\n\n        updateLanguage('en');\n        await elementUpdated(el);\n\n        expect(\n            input.getAttribute('aria-valuetext'),\n            'First English number'\n        ).to.equal('2.44');\n\n        updateLanguage('de');\n        el = await fixture<Slider>(html`\n            <sp-slider min=\"0\" max=\"10\" @sp-language-context=${languageContext}>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    step=\"0.01\"\n                    value=\"2.44\"\n                    .formatOptions=${{ maximumFractionDigits: 2 }}\n                    @sp-language-context=${languageContext}\n                ></sp-slider-handle>\n            </sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        input = el.focusElement as HTMLInputElement;\n        expect(\n            input.getAttribute('aria-valuetext'),\n            'Second German number'\n        ).to.equal('2,44');\n\n        updateLanguage('en');\n        await elementUpdated(el);\n\n        expect(\n            input.getAttribute('aria-valuetext'),\n            'Second English number'\n        ).to.equal('2.44');\n    });\n    it('uses fallback ariaValueText', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider value=\"50\" min=\"0\" max=\"100\"></sp-slider>\n        `);\n\n        await elementUpdated(el);\n        (\n            el as unknown as {\n                getAriaValueText: boolean;\n            }\n        ).getAriaValueText = false;\n\n        const input = el.focusElement as HTMLInputElement;\n        await elementUpdated(el);\n\n        expect(input.getAttribute('aria-valuetext')).to.equal('50');\n    });\n    it('supports units not included in Intl.NumberFormatOptions', async () => {\n        let el = await fixture<Slider>(html`\n            <sp-slider\n                value=\"50\"\n                min=\"0\"\n                max=\"100\"\n                format-options='{\"style\": \"unit\", \"unit\": \"px\"}'\n            ></sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        const input = el.focusElement as HTMLInputElement;\n        await elementUpdated(el);\n\n        expect(input.getAttribute('aria-valuetext')).to.equal('50px');\n\n        el = await fixture<Slider>(html`\n            <sp-slider\n                value=\"5\"\n                step=\"1\"\n                min=\"0\"\n                max=\"255\"\n                format-options='{\"style\": \"unit\", \"unit\": \"px\"}'\n            >\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"min\"\n                    label=\"Minimum\"\n                    value=\"5\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"max\"\n                    label=\"Maximum\"\n                    value=\"250\"\n                ></sp-slider-handle>\n            </sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        let shadowRoot = el.shadowRoot as ShadowRoot;\n        expect(shadowRoot.querySelector('input#input-0[aria-valuetext=\"5px\"]'))\n            .to.exist;\n        expect(\n            shadowRoot.querySelector('input#input-1[aria-valuetext=\"250px\"]')\n        ).to.exist;\n\n        el = await fixture<Slider>(html`\n            <sp-slider value=\"5\" step=\"1\" min=\"0\" max=\"255\">\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"min\"\n                    label=\"Minimum\"\n                    value=\"5\"\n                    format-options='{\"style\": \"unit\", \"unit\": \"px\"}'\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"max\"\n                    label=\"Maximum\"\n                    value=\"250\"\n                    format-options='{\"style\": \"unit\", \"unit\": \"px\"}'\n                ></sp-slider-handle>\n            </sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        shadowRoot = el.shadowRoot as ShadowRoot;\n        expect(shadowRoot.querySelector('input#input-0[aria-valuetext=\"5px\"]'))\n            .to.exist;\n        expect(\n            shadowRoot.querySelector('input#input-1[aria-valuetext=\"250px\"]')\n        ).to.exist;\n    });\n    it('accepts min/max/value in the same timing', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider></sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(50);\n\n        el.min = 0;\n        el.max = 200;\n        el.value = 200;\n\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(200);\n\n        el.value = 500;\n        el.min = 0;\n        el.max = 500;\n\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(500);\n\n        el.value = -100;\n        el.min = -100;\n        el.max = 500;\n\n        await elementUpdated(el);\n\n        expect(el.value).to.equal(-100);\n    });\n    it('returns values for handles', async () => {\n        let el = await fixture<Slider>(html`\n            <sp-slider>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"a\"\n                    min=\"0\"\n                    value=\"10\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    id=\"middle-handle\"\n                    slot=\"handle\"\n                    name=\"b\"\n                    value=\"20\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"c\"\n                    value=\"30\"\n                    max=\"100\"\n                ></sp-slider-handle>\n            </sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.values).to.deep.equal({ a: 10, b: 20, c: 30 });\n\n        const middleHandle = el.querySelector('#middle-handle') as SliderHandle;\n        middleHandle.value = 22;\n\n        await elementUpdated(el);\n\n        expect(el.values).to.deep.equal({ a: 10, b: 22, c: 30 });\n\n        el = await fixture<Slider>(html`\n            <sp-slider value=\"10\" min=\"0\" max=\"100\"></sp-slider>\n        `);\n        expect(el.values).to.deep.equal({ value: 10 });\n\n        el = await fixture<Slider>(html`\n            <sp-slider min=\"0\" max=\"100\">\n                <sp-slider-handle slot=\"handle\" value=\"10\"></sp-slider-handle>\n            </sp-slider>\n        `);\n        expect(el.values).to.deep.equal({ handle1: 10 });\n    });\n    it('clamps values for multi-handle slider', async () => {\n        const el = await fixture<Slider>(html`\n            <sp-slider min=\"0\" max=\"100\">\n                <sp-slider-handle\n                    id=\"first-handle\"\n                    max=\"next\"\n                    slot=\"handle\"\n                    name=\"a\"\n                    value=\"10\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    id=\"middle-handle\"\n                    min=\"previous\"\n                    max=\"next\"\n                    slot=\"handle\"\n                    name=\"b\"\n                    value=\"20\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    id=\"last-handle\"\n                    min=\"previous\"\n                    slot=\"handle\"\n                    name=\"c\"\n                    value=\"30\"\n                ></sp-slider-handle>\n            </sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.values).to.deep.equal({ a: 10, b: 20, c: 30 });\n\n        const firstHandle = el.querySelector('#first-handle') as SliderHandle;\n        const middleHandle = el.querySelector('#middle-handle') as SliderHandle;\n        const lastHandle = el.querySelector('#last-handle') as SliderHandle;\n\n        firstHandle.value = 25;\n        await elementUpdated(el);\n        expect(el.values).to.deep.equal({ a: 20, b: 20, c: 30 });\n\n        firstHandle.value = 10;\n        await elementUpdated(el);\n        middleHandle.value = 5;\n        await elementUpdated(el);\n        expect(el.values).to.deep.equal({ a: 10, b: 10, c: 30 });\n\n        lastHandle.value = 11;\n        await elementUpdated(el);\n        expect(el.values).to.deep.equal({ a: 10, b: 10, c: 11 });\n\n        lastHandle.value = 7;\n        await elementUpdated(el);\n        expect(el.values).to.deep.equal({ a: 10, b: 10, c: 10 });\n    });\n    it('builds both handles from a <template>', async () => {\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <sp-slider variant=\"range\" step=\"1\" id=\"price\" name=\"price\" label=\"Max Price\" min=\"35425\" max=\"86610\">\n                <sp-slider-handle slot=\"handle\" name=\"min\" label=\"Minimum\" max=\"next\" value=\"35425\"></sp-slider-handle>\n                <sp-slider-handle slot=\"handle\" name=\"max\" label=\"Maximum\" min=\"previous\" value=\"86610\"></sp-slider-handle>\n            </sp-slider>\n        `;\n        const el = await fixture<HTMLDivElement>(html`\n            <div></div>\n        `);\n\n        el.appendChild(template.content.cloneNode(true));\n        await waitUntil(() => {\n            return el.querySelector('sp-slider')?.shadowRoot != null;\n        });\n        // Sliders take several frames to fully upgrade\n        await nextFrame();\n\n        const createdHandles =\n            el\n                .querySelector('sp-slider')\n                ?.shadowRoot.querySelectorAll('.handle') || [];\n        expect(createdHandles).to.have.lengthOf(2);\n    });\n    it('enforces next/previous max/min', async () => {\n        let el = await fixture<Slider>(html`\n            <sp-slider min=\"0\" max=\"100\">\n                <sp-slider-handle\n                    id=\"first-handle\"\n                    max=\"next\"\n                    slot=\"handle\"\n                    name=\"a\"\n                    value=\"10\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    id=\"middle-handle\"\n                    min=\"previous\"\n                    max=\"next\"\n                    slot=\"handle\"\n                    name=\"b\"\n                    value=\"20\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    id=\"last-handle\"\n                    min=\"previous\"\n                    slot=\"handle\"\n                    name=\"c\"\n                    value=\"30\"\n                ></sp-slider-handle>\n            </sp-slider>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.values).to.deep.equal({ a: 10, b: 20, c: 30 });\n\n        let firstHandle = el.querySelector('#first-handle') as SliderHandle;\n        let lastHandle = el.querySelector('#last-handle') as SliderHandle;\n\n        let firstInput = el.shadowRoot.querySelector(\n            '.handle[name=\"a\"] > input'\n        ) as HTMLInputElement;\n        let middleInput = el.shadowRoot.querySelector(\n            '.handle[name=\"b\"] > input'\n        ) as HTMLInputElement;\n        let lastInput = el.shadowRoot.querySelector(\n            '.handle[name=\"c\"] > input'\n        ) as HTMLInputElement;\n\n        expect(firstInput.min).to.equal('0');\n        expect(firstInput.max).to.equal('20');\n\n        expect(middleInput.min).to.equal('10');\n        expect(middleInput.max).to.equal('30');\n\n        expect(lastInput.min).to.equal('20');\n        expect(lastInput.max).to.equal('100');\n\n        firstHandle.value = 15;\n        lastHandle.value = 85;\n\n        await elementUpdated(el);\n        await elementUpdated(el);\n\n        expect(firstInput.min).to.equal('0');\n        expect(firstInput.max).to.equal('20');\n\n        expect(middleInput.min).to.equal('15');\n        expect(middleInput.max).to.equal('85');\n\n        expect(lastInput.min).to.equal('20');\n        expect(lastInput.max).to.equal('100');\n\n        el = await fixture<Slider>(html`\n            <sp-slider>\n                <sp-slider-handle\n                    id=\"first-handle\"\n                    min=\"0\"\n                    max=\"next\"\n                    slot=\"handle\"\n                    name=\"a\"\n                    value=\"10\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    id=\"middle-handle\"\n                    min=\"previous\"\n                    max=\"next\"\n                    slot=\"handle\"\n                    name=\"b\"\n                    value=\"20\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    id=\"last-handle\"\n                    min=\"previous\"\n                    max=\"100\"\n                    slot=\"handle\"\n                    name=\"c\"\n                    value=\"30\"\n                ></sp-slider-handle>\n            </sp-slider>\n        `);\n\n        firstInput = el.shadowRoot.querySelector(\n            '.handle[name=\"a\"] > input'\n        ) as HTMLInputElement;\n        middleInput = el.shadowRoot.querySelector(\n            '.handle[name=\"b\"] > input'\n        ) as HTMLInputElement;\n        lastInput = el.shadowRoot.querySelector(\n            '.handle[name=\"c\"] > input'\n        ) as HTMLInputElement;\n\n        expect(firstInput.min).to.equal('0');\n        expect(firstInput.max).to.equal('20');\n\n        expect(middleInput.min).to.equal('10');\n        expect(middleInput.max).to.equal('30');\n\n        expect(lastInput.min).to.equal('20');\n        expect(lastInput.max).to.equal('100');\n\n        firstHandle = el.querySelector('#first-handle') as SliderHandle;\n        lastHandle = el.querySelector('#last-handle') as SliderHandle;\n\n        firstHandle.min = 5;\n        lastHandle.max = 95;\n\n        await elementUpdated(el);\n        await elementUpdated(el);\n\n        expect(firstInput.min).to.equal('5');\n        expect(firstInput.max).to.equal('20');\n\n        expect(lastInput.min).to.equal('20');\n        expect(lastInput.max).to.equal('95');\n    });\n    it('sends keyboard events to active handle', async () => {\n        // let pointerId = -1;\n\n        const el = await fixture<Slider>(html`\n            <sp-slider step=\"1\" min=\"0\" max=\"100\">\n                <sp-slider-handle\n                    id=\"first-handle\"\n                    max=\"next\"\n                    slot=\"handle\"\n                    name=\"a\"\n                    value=\"10\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    id=\"middle-handle\"\n                    min=\"previous\"\n                    max=\"next\"\n                    slot=\"handle\"\n                    name=\"b\"\n                    value=\"20\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    id=\"last-handle\"\n                    min=\"previous\"\n                    slot=\"handle\"\n                    name=\"c\"\n                    value=\"30\"\n                ></sp-slider-handle>\n            </sp-slider>\n        `);\n\n        await elementUpdated(el);\n        expect(el.values).to.deep.equal({ a: 10, b: 20, c: 30 });\n\n        const lastHandle = el.querySelector('#last-handle') as SliderHandle;\n        lastHandle.focus();\n\n        await sendKeys({\n            press: 'ArrowDown',\n        });\n        await elementUpdated(el);\n        expect(el.values).to.deep.equal({ a: 10, b: 20, c: 29 });\n    });\n    it('resets to default value on double click after moving pointer', async () => {\n        const inputSpy = spy();\n        const changeSpy = spy();\n\n        const el = await fixture<Slider>(html`\n            <sp-slider\n                style=\"width: 100px\"\n                value=\"50\"\n                default-value=\"50\"\n                @input=${(event: Event & { target: Slider }) => {\n                    inputSpy(event.target.value);\n                }}\n                @change=${(event: Event & { target: Slider }) => {\n                    changeSpy(event.target.value);\n                }}\n            ></sp-slider>\n        `);\n        await elementUpdated(el);\n        expect(el.value, 'initial').to.equal(50);\n\n        const handle = el.shadowRoot.querySelector('.handle') as HTMLDivElement;\n        const handleBoundingRect = handle.getBoundingClientRect();\n        const position: [number, number] = [\n            handleBoundingRect.x + handleBoundingRect.width / 2,\n            handleBoundingRect.y + handleBoundingRect.height / 2,\n        ];\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position,\n                },\n                {\n                    type: 'down',\n                },\n            ],\n        });\n\n        await elementUpdated(el);\n        await sendMouse({\n            steps: [\n                {\n                    type: 'move',\n                    position: [\n                        150,\n                        handleBoundingRect.y + handleBoundingRect.height + 100,\n                    ],\n                },\n                {\n                    type: 'up',\n                },\n            ],\n        });\n\n        await elementUpdated(el);\n\n        // since we've moved the pointer, the new value should be 100\n        expect(el.value).to.equal(100);\n\n        inputSpy.resetHistory();\n        changeSpy.resetHistory();\n\n        handle.dispatchEvent(\n            new PointerEvent('dblclick', {\n                clientX: 0,\n                cancelable: true,\n                button: 0,\n                composed: true,\n                bubbles: true,\n            })\n        );\n\n        await elementUpdated(el);\n\n        expect(\n            el.value,\n            'reset to default value on double click after moving pointer'\n        ).to.equal(50);\n\n        // input and change events should have been fired\n        expect(inputSpy.callCount).to.equal(1);\n        expect(changeSpy.callCount).to.equal(1);\n    });\n    it('manages escape key interactions correctly in an overlaid context', async () => {\n        const inputSpy = spy();\n        const changeSpy = spy();\n\n        const el = await fixture<HTMLDivElement>(html`\n            <div>\n                <sp-button id=\"trigger\">Overlay Trigger</sp-button>\n                <sp-overlay trigger=\"trigger@click\" placement=\"bottom\">\n                    <sp-popover>\n                        <sp-slider\n                            style=\"width: 100px\"\n                            value=\"70\"\n                            default-value=\"50\"\n                            @input=${(event: Event & { target: Slider }) => {\n                                inputSpy(event.target.value);\n                            }}\n                            @change=${(event: Event & { target: Slider }) => {\n                                changeSpy(event.target.value);\n                            }}\n                        ></sp-slider>\n                    </sp-popover>\n                </sp-overlay>\n            </div>\n        `);\n\n        await elementUpdated(el);\n\n        // open the overlay\n        const trigger = el.querySelector('#trigger') as HTMLButtonElement;\n        const opened = oneEvent(el, 'sp-opened');\n        trigger.click();\n        await opened;\n\n        // current slider value should be 70\n        const slider = el.querySelector('sp-slider') as Slider;\n        expect(slider.value).to.equal(70);\n\n        slider.focus();\n        // send escape key\n        await sendKeys({\n            press: 'Escape',\n        });\n\n        await elementUpdated(el);\n\n        // now the slider value should be 50\n        expect(slider.value).to.equal(50);\n\n        // input and change events should have been fired\n        expect(inputSpy.callCount).to.equal(1);\n        expect(changeSpy.callCount).to.equal(1);\n\n        // and the overlay should be in open state\n        const overlay = el.querySelector('sp-overlay') as Overlay;\n        expect(overlay.open).to.be.true;\n\n        const closed = oneEvent(el, 'sp-closed');\n        // send escape key again\n        await sendKeys({\n            press: 'Escape',\n        });\n        await closed;\n\n        // now the overlay should be closed\n        expect(overlay.open).to.be.false;\n    });\n\n    describe('dev mode', () => {\n        let consoleWarnStub!: ReturnType<typeof stub>;\n        before(() => {\n            window.__swc.verbose = true;\n            consoleWarnStub = stub(console, 'warn');\n        });\n        afterEach(() => {\n            consoleWarnStub.resetHistory();\n            window.__swc.issuedWarnings = new Set<BrandedSWCWarningID>();\n        });\n        after(() => {\n            window.__swc.verbose = false;\n            consoleWarnStub.restore();\n        });\n\n        it('warns in Dev Mode when using the default slot for text labels', async () => {\n            const el = await fixture<Slider>(html`\n                <sp-slider min=\"0\" max=\"100\" value=\"50\">\n                    This is a deprecated text label\n                </sp-slider>\n            `);\n\n            await elementUpdated(el);\n\n            expect(consoleWarnStub.called).to.be.true;\n            const spyCall = consoleWarnStub.getCall(0);\n            expect(\n                (spyCall.args.at(0) as string).includes('default slot'),\n                'confirm \"default slot\" in message'\n            ).to.be.true;\n            expect(spyCall.args.at(-1), 'confirm `data` shape').to.deep.equal({\n                data: {\n                    localName: 'sp-slider',\n                    level: 'deprecation',\n                    type: 'api',\n                },\n            });\n        });\n\n        it('warns in Dev Mode when `min=\"previous\"` is leveraged on first handle', async () => {\n            window.__swc.issuedWarnings = new Set<BrandedSWCWarningID>();\n            const el = await fixture<Slider>(html`\n                <sp-slider min=\"0\" max=\"100\">\n                    <sp-slider-handle\n                        id=\"first-handle\"\n                        min=\"previous\"\n                        max=\"next\"\n                        slot=\"handle\"\n                        name=\"a\"\n                        value=\"10\"\n                    ></sp-slider-handle>\n                    <sp-slider-handle\n                        id=\"middle-handle\"\n                        min=\"previous\"\n                        max=\"next\"\n                        slot=\"handle\"\n                        name=\"b\"\n                        value=\"20\"\n                    ></sp-slider-handle>\n                    <sp-slider-handle\n                        id=\"last-handle\"\n                        min=\"previous\"\n                        slot=\"handle\"\n                        name=\"c\"\n                        value=\"30\"\n                    ></sp-slider-handle>\n                </sp-slider>\n            `);\n\n            await elementUpdated(el);\n\n            expect(consoleWarnStub.called).to.be.true;\n            const spyCall = consoleWarnStub.getCall(0);\n            expect(\n                (spyCall.args.at(0) as string).includes('previous'),\n                'confirm \"previous\" in message'\n            ).to.be.true;\n            expect(spyCall.args.at(-1), 'confirm `data` shape').to.deep.equal({\n                data: {\n                    localName: 'sp-slider',\n                    type: 'api',\n                    level: 'default',\n                },\n            });\n        });\n\n        it('warns in Dev Mode when `max=\"next\"` is leveraged on last handle', async () => {\n            window.__swc.issuedWarnings = new Set<BrandedSWCWarningID>();\n            const el = await fixture<Slider>(html`\n                <sp-slider min=\"0\" max=\"100\">\n                    <sp-slider-handle\n                        id=\"first-handle\"\n                        max=\"next\"\n                        slot=\"handle\"\n                        name=\"a\"\n                        value=\"10\"\n                    ></sp-slider-handle>\n                    <sp-slider-handle\n                        id=\"middle-handle\"\n                        min=\"previous\"\n                        max=\"next\"\n                        slot=\"handle\"\n                        name=\"b\"\n                        value=\"20\"\n                    ></sp-slider-handle>\n                    <sp-slider-handle\n                        id=\"last-handle\"\n                        min=\"previous\"\n                        max=\"next\"\n                        slot=\"handle\"\n                        name=\"c\"\n                        value=\"30\"\n                    ></sp-slider-handle>\n                </sp-slider>\n            `);\n\n            await elementUpdated(el);\n\n            expect(consoleWarnStub.called).to.be.true;\n            const spyCall = consoleWarnStub.getCall(0);\n            expect(\n                (spyCall.args.at(0) as string).includes('next'),\n                'confirm \"next\" in message'\n            ).to.be.true;\n            expect(spyCall.args.at(-1), 'confirm `data` shape').to.deep.equal({\n                data: {\n                    localName: 'sp-slider',\n                    type: 'api',\n                    level: 'default',\n                },\n            });\n        });\n    });\n});\n"],
  "mappings": "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",
  "names": ["_a"]
}
