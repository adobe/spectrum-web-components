{
  "version": 3,
  "sources": ["SliderHandle.ts"],
  "sourcesContent": ["/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { PropertyValues } from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\nimport { Focusable } from '@spectrum-web-components/shared/src/focusable.js';\nimport {\n    LanguageResolutionController,\n    languageResolverUpdatedSymbol,\n} from '@spectrum-web-components/reactive-controllers/src/LanguageResolution.js';\nimport {\n    NumberFormatOptions,\n    NumberFormatter,\n} from '@internationalized/number';\nimport { HandleController } from './HandleController.js';\n\nexport type HandleMin = number | 'previous';\nexport type HandleMax = number | 'next';\n\nexport type HandleValues = {\n    name: string;\n    value: number;\n}[];\n\nexport type SliderNormalization = {\n    toNormalized: (value: number, min: number, max: number) => number;\n    fromNormalized: (value: number, min: number, max: number) => number;\n};\n\nexport const defaultNormalization: SliderNormalization = {\n    toNormalized(value: number, min: number, max: number) {\n        return (value - min) / (max - min);\n    },\n    fromNormalized(value: number, min: number, max: number) {\n        return value * (max - min) + min;\n    },\n};\n\nconst MinConverter = {\n    fromAttribute: (value: string): number | 'previous' => {\n        if (value === 'previous') return value;\n        return parseFloat(value);\n    },\n    toAttribute: (value: 'previous' | number): string => {\n        return value.toString();\n    },\n};\n\nconst MaxConverter = {\n    fromAttribute: (value: string): number | 'next' => {\n        if (value === 'next') return value;\n        return parseFloat(value);\n    },\n    toAttribute: (value: 'next' | number): string => {\n        return value.toString();\n    },\n};\n\n/**\n * @element sp-slider-handle\n *\n * @fires input - The value of the element has changed.\n * @fires change - An alteration to the value of the element has been committed by the user.\n */\nexport class SliderHandle extends Focusable {\n    public handleController?: HandleController;\n\n    public get handleName(): string {\n        return this.name;\n    }\n\n    public override get focusElement(): HTMLElement {\n        /* c8 ignore next */\n        return this.handleController?.inputForHandle(this) ?? this;\n    }\n\n    _forcedUnit = '';\n\n    /**\n     * By default, the value of a Slider Handle will be halfway between its\n     * `min` and `max` values, or the `min` value when `max` is less than `min`.\n     */\n    @property({ type: Number })\n    public value!: number;\n\n    /**\n     * Set the default value of the handle. Setting this property will cause the\n     * handle to reset to the default value on double click or pressing the `escape` key.\n     */\n    @property({ type: Number, attribute: 'default-value' })\n    public defaultValue!: number;\n\n    @property({ type: Boolean, reflect: true })\n    public dragging = false;\n\n    @property({ type: Boolean })\n    public highlight = false;\n\n    @property({ type: String })\n    public name = '';\n\n    @property({ reflect: true, converter: MinConverter })\n    public min?: number | 'previous';\n\n    @property({ reflect: true, converter: MaxConverter })\n    public max?: number | 'next';\n\n    @property({ type: Number, reflect: true })\n    public step?: number;\n\n    @property({ type: Object, attribute: 'format-options' })\n    public formatOptions?: NumberFormatOptions;\n\n    @property({ type: String })\n    public label = '';\n\n    @property({ attribute: false })\n    public getAriaHandleText: (\n        value: number,\n        numberFormat: NumberFormatter\n    ) => string = (value, numberFormat) => {\n        return numberFormat.format(value);\n    };\n\n    private languageResolver = new LanguageResolutionController(this);\n\n    protected override update(changes: PropertyValues): void {\n        if (!this.hasUpdated) {\n            const { max, min } = this as { max: number; min: number };\n            if (this.value == null) {\n                if (!isNaN(max) && !isNaN(min)) {\n                    this.value = max < min ? min : min + (max - min) / 2;\n                    this.handleController?.hostUpdate();\n                }\n            }\n        }\n\n        if (\n            changes.has('formatOptions') ||\n            changes.has(languageResolverUpdatedSymbol)\n        ) {\n            delete this._numberFormatCache;\n        }\n        if (changes.has('value')) {\n            const oldValue = changes.get('value');\n            if (oldValue != null) {\n                this.updateComplete.then(() => {\n                    this.handleController?.setValueFromHandle(this);\n                });\n            }\n        }\n        this.handleController?.handleHasChanged(this);\n        super.update(changes);\n    }\n\n    protected override firstUpdated(\n        changedProperties: PropertyValues<this>\n    ): void {\n        super.firstUpdated(changedProperties);\n        this.dispatchEvent(new CustomEvent('sp-slider-handle-ready'));\n    }\n\n    @property({ attribute: false })\n    public normalization: SliderNormalization = defaultNormalization;\n\n    public dispatchInputEvent(): void {\n        const inputEvent = new Event('input', {\n            bubbles: true,\n            composed: true,\n        });\n\n        this.dispatchEvent(inputEvent);\n    }\n\n    protected _numberFormatCache:\n        | { numberFormat: NumberFormatter; language: string }\n        | undefined;\n    protected getNumberFormat(): NumberFormatter {\n        /* c8 ignore next */\n        if (\n            !this._numberFormatCache ||\n            this.languageResolver.language !== this._numberFormatCache.language\n        ) {\n            let numberFormatter: NumberFormatter;\n            try {\n                numberFormatter = new NumberFormatter(\n                    this.languageResolver.language,\n                    this.formatOptions\n                );\n                this._forcedUnit = '';\n                // numberFormatter.format(1);\n            } catch (error) {\n                const {\n                    style,\n                    unit,\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    unitDisplay,\n                    ...formatOptionsNoUnit\n                } = this.formatOptions || {};\n                if (style === 'unit') {\n                    this._forcedUnit = unit as string;\n                }\n                numberFormatter = new NumberFormatter(\n                    this.languageResolver.language,\n                    formatOptionsNoUnit\n                );\n            }\n            this._numberFormatCache = {\n                language: this.languageResolver.language,\n                numberFormat: numberFormatter,\n            };\n        }\n        /* c8 ignore next */\n        return this._numberFormatCache?.numberFormat;\n    }\n\n    public get numberFormat(): NumberFormatter | undefined {\n        if (!this.formatOptions) return;\n        return this.getNumberFormat();\n    }\n}\n"],
  "mappings": "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",
  "names": ["property", "Focusable", "LanguageResolutionController", "languageResolverUpdatedSymbol", "NumberFormatter", "value", "min", "max", "MinConverter", "MaxConverter", "numberFormat", "_a", "_b", "changes", "changedProperties", "inputEvent", "numberFormatter", "error", "style", "unit", "unitDisplay", "formatOptionsNoUnit", "__decorateClass"]
}
