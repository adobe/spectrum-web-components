{
  "version": 3,
  "sources": ["slider.stories.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { html, TemplateResult } from '@spectrum-web-components/base';\n\nimport '@spectrum-web-components/slider/sp-slider.js';\nimport '@spectrum-web-components/slider/sp-slider-handle.js';\nimport '@spectrum-web-components/popover/sp-popover.js';\nimport '@spectrum-web-components/dialog/sp-dialog.js';\nimport {\n    Slider,\n    SliderHandle,\n    variants,\n} from '@spectrum-web-components/slider';\nimport { spreadProps } from '../../../test/lit-helpers.js';\nimport '@spectrum-web-components/overlay/overlay-trigger.js';\n\nexport default {\n    component: 'sp-slider',\n    title: 'Slider',\n    argTypes: {\n        onInput: { action: 'input' },\n        onChange: { action: 'change' },\n        variant: {\n            name: 'Variant',\n            description: 'Determines the style of slider.',\n            table: {\n                type: { summary: 'string' },\n                defaultValue: { summary: undefined },\n            },\n            control: {\n                type: 'inline-radio',\n                options: [undefined, ...variants],\n            },\n        },\n        tickStep: {\n            name: 'Tick Step',\n            description: 'Tick spacing on slider.',\n            table: {\n                type: { summary: 'number' },\n                defaultValue: { summary: 0.1 },\n            },\n            control: {\n                type: 'number',\n            },\n        },\n        labelVisibility: {\n            name: 'Label Visibility',\n            description: 'The labels visibily available in the UI',\n            table: {\n                type: { summary: '\"text\" | \"value\" | \"none\" | undefined' },\n                defaultValue: { summary: undefined },\n            },\n            control: {\n                type: 'text',\n            },\n        },\n    },\n    args: {\n        variant: undefined,\n        tickStep: 0.1,\n        labelVisibility: undefined,\n        min: undefined,\n        max: undefined,\n        value: undefined,\n        step: undefined,\n    },\n};\n\nexport interface StoryArgs {\n    variant?: string;\n    tickStep?: number;\n    labelVisibility?: string;\n    onInput?: (val: string) => void;\n    onChange?: (val: string) => void;\n    min?: number;\n    max?: number;\n    value?: number;\n    step?: number;\n    [prop: string]: unknown;\n}\n\nconst handleEvent =\n    ({ onInput, onChange }: StoryArgs) =>\n    (event: Event): void => {\n        const { value } = event.target as Slider;\n        if (onInput && event.type === 'input') {\n            onInput(value.toString());\n        } else if (onChange && event.type === 'change') {\n            onChange(value.toString());\n        }\n    };\n\nconst handleHandleEvent =\n    ({ onInput, onChange }: StoryArgs) =>\n    (event: Event): void => {\n        const target = event.target as SliderHandle;\n        if (target.value != null) {\n            if (typeof target.value === 'object') {\n                const value = JSON.stringify(target.value, null, 2);\n                if (onInput && event.type === 'input') {\n                    onInput(value);\n                } else if (onChange && event.type === 'change') {\n                    onChange(value);\n                }\n            } else {\n                const value = `${target.name}: ${target.value}`;\n                if (onInput && event.type === 'input') {\n                    onInput(value);\n                } else if (onChange && event.type === 'change') {\n                    onChange(value);\n                }\n            }\n        }\n    };\n\nexport const Default = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin-inline: 20px;\">\n            <sp-slider\n                max=\"1\"\n                min=\"0\"\n                value=\".5\"\n                step=\"0.01\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: 'percent' }}\n                ...=${spreadProps(args)}\n            >\n                Opacity\n            </sp-slider>\n        </div>\n    `;\n};\n\nexport const Filled = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin-inline: 20px;\">\n            <sp-slider\n                max=\"1\"\n                variant=\"filled\"\n                min=\"0\"\n                value=\".7\"\n                step=\"0.01\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: 'percent' }}\n                ...=${spreadProps(args)}\n            >\n                Slider Label\n            </sp-slider>\n        </div>\n    `;\n};\n\nexport const HasADefaultValue = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin-inline: 20px;\">\n            <sp-slider\n                max=\"1\"\n                min=\"0\"\n                value=\".5\"\n                step=\"0.01\"\n                default-value=\"0.2\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: 'percent' }}\n                ...=${spreadProps(args)}\n            >\n                double click or press escape key to reset\n            </sp-slider>\n        </div>\n    `;\n};\n\nexport const FillStart = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin-inline: 20px;\">\n            <sp-slider\n                max=\"1\"\n                fill-start\n                variant=\"filled\"\n                min=\"0\"\n                value=\".7\"\n                step=\"0.01\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: 'percent' }}\n                ...=${spreadProps(args)}\n            >\n                Slider label\n            </sp-slider>\n        </div>\n    `;\n};\n\nexport const FillStartWithValue = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin-inline: 20px;\">\n            <sp-slider\n                max=\"1\"\n                min=\"0\"\n                value=\".7\"\n                step=\"0.1\"\n                fill-start=\"0.3\"\n                variant=\"filled\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: 'percent' }}\n                ...=${spreadProps(args)}\n            >\n                Value Greater than Fill Start\n            </sp-slider>\n        </div>\n        <div style=\"width: 500px; margin-inline: 20px;\">\n            <sp-slider\n                max=\"20\"\n                min=\"0\"\n                value=\"5\"\n                step=\"1\"\n                fill-start=\"15\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: 'number' }}\n                ...=${spreadProps(args)}\n            >\n                Value Less than Fill Start\n            </sp-slider>\n        </div>\n    `;\n};\n\nexport const FillStartWithNegativeMinRange = (\n    args: StoryArgs = {}\n): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin-inline: 20px;\">\n            <sp-slider\n                max=\"150\"\n                min=\"-50\"\n                value=\"25\"\n                step=\"1\"\n                fill-start=\"0\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: 'number' }}\n                ...=${spreadProps(args)}\n            >\n                Fill start with \"0\" and within range -50 to 150\n            </sp-slider>\n        </div>\n        <div style=\"width: 500px; margin-inline: 20px;\">\n            <sp-slider\n                max=\"100\"\n                min=\"-50\"\n                value=\"-25\"\n                step=\"1\"\n                fill-start=\"0\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: 'number' }}\n                .normalization=${{\n                    toNormalized: (value: number): number => {\n                        if (value === 0) return 0.5;\n                        return value < 0\n                            ? 0.5 - (value / -50) * 0.5\n                            : 0.5 + (value / 100) * 0.5;\n                    },\n                    fromNormalized: (value: number): number => {\n                        if (value === 0.5) return 0;\n                        return value < 0.5\n                            ? (1 - value / 0.5) * -50\n                            : ((value - 0.5) / 0.5) * 100;\n                    },\n                }}\n                ...=${spreadProps(args)}\n            >\n                Fill start with \"0\" and normalization function within range -50\n                to 100\n            </sp-slider>\n        </div>\n    `;\n};\n\nexport const autofocus = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin-inline: 20px;\">\n            <sp-slider\n                autofocus\n                max=\"1\"\n                min=\"0\"\n                value=\".5\"\n                step=\"0.01\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: 'percent' }}\n                ...=${spreadProps(args)}\n            >\n                Opacity\n            </sp-slider>\n        </div>\n    `;\n};\n\nexport const minimalDOM = (): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider>Opacity</sp-slider>\n        </div>\n    `;\n};\n\nexport const noVisibleTextLabel = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                max=\"1\"\n                min=\"0\"\n                value=\".5\"\n                step=\"0.01\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: 'percent' }}\n                ...=${spreadProps(args)}\n            >\n                Opacity\n            </sp-slider>\n        </div>\n    `;\n};\nnoVisibleTextLabel.args = {\n    labelVisibility: 'value',\n};\n\nexport const noVisibleValueLabel = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                max=\"1\"\n                min=\"0\"\n                value=\"0\"\n                step=\"0.01\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: 'percent' }}\n                ...=${spreadProps(args)}\n            >\n                Opacity\n            </sp-slider>\n        </div>\n    `;\n};\nnoVisibleValueLabel.args = {\n    labelVisibility: 'text',\n};\n\nexport const noVisibleLabels = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                max=\"1\"\n                min=\"0\"\n                value=\".5\"\n                step=\"0.01\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: 'percent' }}\n                ...=${spreadProps(args)}\n            >\n                Opacity\n            </sp-slider>\n        </div>\n    `;\n};\nnoVisibleLabels.args = {\n    labelVisibility: 'none',\n};\n\nexport const px = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                max=\"360\"\n                min=\"0\"\n                value=\"90\"\n                step=\"1\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{\n                    style: 'unit',\n                    unit: 'px',\n                }}\n                ...=${spreadProps(args)}\n            >\n                Angle\n            </sp-slider>\n        </div>\n    `;\n};\n\nclass NumberFieldDefined extends HTMLElement {\n    constructor() {\n        super();\n        this.numberFieldLoaderPromise = new Promise((res) => {\n            customElements.whenDefined('sp-number-field').then(() => {\n                res(true);\n            });\n        });\n    }\n\n    private numberFieldLoaderPromise: Promise<boolean> = Promise.resolve(false);\n\n    get updateComplete(): Promise<boolean> {\n        return this.numberFieldLoaderPromise;\n    }\n}\n\ncustomElements.define('number-field-defined', NumberFieldDefined);\n\nconst editableDecorator = (story: () => TemplateResult): TemplateResult => {\n    return html`\n        ${story()}\n        <number-field-defined></number-field-defined>\n    `;\n};\n\nexport const max20 = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 200px; margin: 12px 20px;\">\n            <sp-slider\n                editable\n                max=\"20\"\n                min=\"0\"\n                value=\"5\"\n                step=\"1\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                ...=${spreadProps(args)}\n            >\n                Max 20\n            </sp-slider>\n        </div>\n    `;\n};\nmax20.swc_vrt = {\n    skip: true,\n};\n\nmax20.parameters = {\n    // Disables Chromatic's snapshotting on a global level\n    chromatic: { disableSnapshot: true },\n};\n\nexport const editable = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                editable\n                max=\"360\"\n                min=\"0\"\n                value=\"90\"\n                step=\"1\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{\n                    style: 'unit',\n                    unit: 'degree',\n                    unitDisplay: 'narrow',\n                }}\n                ...=${spreadProps(args)}\n            >\n                Angle\n            </sp-slider>\n        </div>\n    `;\n};\n\neditable.decorators = [editableDecorator];\n\nimport '@spectrum-web-components/slider/sp-slider.js';\nimport '@spectrum-web-components/overlay/overlay-trigger.js';\nimport '@spectrum-web-components/button/sp-button.js';\nimport '@spectrum-web-components/tray/sp-tray.js';\n\nexport const Multiple = (args: StoryArgs): TemplateResult => {\n    const updateSliderConfig = (\n        min: number,\n        max: number,\n        value: number,\n        step: number\n    ): void => {\n        const slider = document.querySelector('sp-slider');\n        if (slider) {\n            slider.value = value;\n            slider.min = min;\n            slider.max = max;\n            slider.step = step;\n        }\n    };\n\n    return html`\n        <overlay-trigger type=\"modal\">\n            <sp-button slot=\"trigger\" variant=\"secondary\">\n                Toggle menu\n            </sp-button>\n            <sp-tray slot=\"click-content\">\n                <div style=\"padding: 8px; width: 100%\">\n                    <sp-slider\n                        label=\"Slider Label\"\n                        min=${args.min}\n                        max=${args.max}\n                        value=${args.value}\n                        step=${args.step}\n                        variant=\"filled\"\n                        hide-stepper\n                        editable\n                    ></sp-slider>\n                    <div\n                        style=\"display: grid; gap: 8px; padding: 8px; width: 50%; margin: auto;\"\n                    >\n                        <sp-button\n                            size=\"s\"\n                            @click=${() =>\n                                updateSliderConfig(0.25, 4, 0.75, 0.01)}\n                        >\n                            Duration\n                        </sp-button>\n                        <sp-button\n                            size=\"s\"\n                            @click=${() => updateSliderConfig(2, 100, 2, 1)}\n                        >\n                            Personality\n                        </sp-button>\n                        <sp-button\n                            size=\"s\"\n                            @click=${() => updateSliderConfig(2, 25, 3, 1)}\n                        >\n                            Intensity\n                        </sp-button>\n                    </div>\n                </div>\n            </sp-tray>\n        </overlay-trigger>\n    `;\n};\n\nMultiple.args = {\n    min: 0.25,\n    max: 4,\n    value: 0.75,\n    step: 0.01,\n};\n\nexport const editableWithDefaultValue = (\n    args: StoryArgs = {}\n): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                editable\n                max=\"360\"\n                min=\"0\"\n                value=\"90\"\n                step=\"1\"\n                default-value=\"180\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{\n                    style: 'unit',\n                    unit: 'degree',\n                    unitDisplay: 'narrow',\n                }}\n                ...=${spreadProps(args)}\n            >\n                Angle\n            </sp-slider>\n        </div>\n    `;\n};\n\neditableWithDefaultValue.swc_vrt = {\n    skip: true,\n};\n\neditableWithDefaultValue.parameters = {\n    // Disables Chromatic's snapshotting on a global level\n    chromatic: { disableSnapshot: true },\n};\n\nexport const editableWithFractionValue = (\n    args: StoryArgs = {}\n): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                editable\n                max=\"255\"\n                min=\"0.1\"\n                value=\"0.5\"\n                step=\"0.01\"\n                default-value=\"18\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                ...=${spreadProps(args)}\n            >\n                Angle\n            </sp-slider>\n        </div>\n    `;\n};\n\neditableWithFractionValue.swc_vrt = {\n    skip: true,\n};\n\neditableWithFractionValue.parameters = {\n    // Disables Chromatic's snapshotting on a global level\n    chromatic: { disableSnapshot: true },\n};\n\nexport const editableDisabled = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                editable\n                disabled\n                max=\"360\"\n                min=\"0\"\n                value=\"90\"\n                step=\"1\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{\n                    style: 'unit',\n                    unit: 'degree',\n                    unitDisplay: 'narrow',\n                }}\n                ...=${spreadProps(args)}\n            >\n                Angle\n            </sp-slider>\n        </div>\n    `;\n};\n\neditable.decorators = [editableDecorator];\n\nexport const editableCustom = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div\n            style=\"width: 500px; margin: 12px 20px; --mod-stepper-width: 150px;\"\n        >\n            <sp-slider\n                editable\n                max=\"24\"\n                min=\"0\"\n                value=\"12.75\"\n                step=\"0.25\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: 'unit', unit: 'hour' }}\n                ...=${spreadProps(args)}\n            >\n                Hours\n            </sp-slider>\n        </div>\n    `;\n};\n\neditableCustom.decorators = [editableDecorator];\n\nexport const editableWithoutVisibleLabels = (\n    args: StoryArgs = {}\n): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                editable\n                max=\"1\"\n                min=\"0\"\n                value=\".5\"\n                step=\"0.01\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: 'percent' }}\n                ...=${spreadProps(args)}\n            >\n                Opacity\n            </sp-slider>\n        </div>\n    `;\n};\n\neditableWithoutVisibleLabels.args = {\n    labelVisibility: 'none',\n};\n\nexport const hideStepper = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                editable\n                hide-stepper\n                max=\"1\"\n                min=\"0\"\n                value=\".5\"\n                step=\"0.01\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: 'percent' }}\n                ...=${spreadProps(args)}\n            >\n                Opacity\n            </sp-slider>\n        </div>\n    `;\n};\n\nhideStepper.decorators = [editableDecorator];\n\nexport const Gradient = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <style>\n            sp-slider {\n                --mod-slider-track-color: linear-gradient(\n                    to right,\n                    red,\n                    green 100%\n                );\n            }\n            sp-slider[dir='rtl'] {\n                --mod-slider-track-color: linear-gradient(\n                    to left,\n                    red,\n                    green 100%\n                );\n            }\n        </style>\n        <div\n            style=\"\n                width: 500px;\n                margin: 12px 20px;\n            \"\n        >\n            <sp-slider\n                label=\"Opacity\"\n                max=\"100\"\n                min=\"0\"\n                value=\"50\"\n                id=\"opacity-slider\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                ...=${spreadProps(args)}\n            ></sp-slider>\n        </div>\n    `;\n};\nGradient.args = {\n    variant: undefined,\n};\n\nexport const tick = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <sp-slider\n            label=\"Slider Label\"\n            variant=\"tick\"\n            min=\"0\"\n            max=\"92\"\n            ...=${spreadProps(args)}\n        ></sp-slider>\n        <sp-slider\n            label=\"Slider Label\"\n            variant=\"tick\"\n            min=\"0\"\n            max=\"92\"\n            ...=${spreadProps(args)}\n        ></sp-slider>\n    `;\n};\ntick.args = {\n    variant: 'tick',\n    tickStep: 5,\n};\n\nexport const tickLabels = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <sp-slider\n            label=\"Slider Label\"\n            tick-labels\n            variant=\"tick\"\n            min=\"50\"\n            max=\"75\"\n            ...=${spreadProps(args)}\n        ></sp-slider>\n        <sp-slider\n            label=\"Slider Label\"\n            tick-labels\n            variant=\"tick\"\n            min=\"50\"\n            max=\"75\"\n            ...=${spreadProps(args)}\n        ></sp-slider>\n    `;\n};\ntickLabels.args = {\n    variant: 'tick',\n    tickStep: 5,\n};\n\nexport const Disabled = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                disabled\n                value=\"5\"\n                step=\"0.5\"\n                min=\"0\"\n                max=\"20\"\n                label=\"Intensity\"\n                ...=${spreadProps(args)}\n            ></sp-slider>\n        </div>\n    `;\n};\n\nexport const Quiet = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                editable\n                hide-stepper\n                quiet\n                value=\"5\"\n                step=\"0.5\"\n                min=\"0\"\n                max=\"20\"\n                label=\"Intensity\"\n                ...=${spreadProps(args)}\n            ></sp-slider>\n        </div>\n    `;\n};\n\nexport const inPopover = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <sp-popover open style=\"min-width: 0\">\n            <sp-dialog no-divider>\n                <sp-slider\n                    editable\n                    hide-stepper\n                    quiet\n                    value=\"5\"\n                    step=\"0.5\"\n                    min=\"0\"\n                    max=\"20\"\n                    label=\"Intensity\"\n                    ...=${spreadProps(args)}\n                ></sp-slider>\n            </sp-dialog>\n        </sp-popover>\n    `;\n};\n\nexport const Indeterminate = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                editable\n                indeterminate\n                value=\"5\"\n                step=\"0.5\"\n                min=\"0\"\n                max=\"20\"\n                label=\"Intensity\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                ...=${spreadProps(args)}\n            ></sp-slider>\n        </div>\n    `;\n};\n\nexport const ExplicitHandle = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                step=\"0.5\"\n                min=\"0\"\n                max=\"20\"\n                @input=${handleHandleEvent(args)}\n                @change=${handleHandleEvent(args)}\n                ...=${spreadProps(args)}\n            >\n                Intensity\n                <sp-slider-handle slot=\"handle\" value=\"5\"></sp-slider-handle>\n            </sp-slider>\n        </div>\n    `;\n};\n\nexport const TwoHandles = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                value=\"5\"\n                step=\"1\"\n                min=\"0\"\n                max=\"255\"\n                @input=${handleHandleEvent(args)}\n                @change=${handleHandleEvent(args)}\n                ...=${spreadProps(args)}\n            >\n                Output Levels\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"min\"\n                    label=\"Minimum\"\n                    value=\"5\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"max\"\n                    label=\"Maximum\"\n                    value=\"250\"\n                ></sp-slider-handle>\n            </sp-slider>\n        </div>\n    `;\n};\nTwoHandles.args = {\n    variant: 'range',\n    tickStep: 10,\n};\n\nexport const TwoHandlesPt = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                value=\"5\"\n                step=\"1\"\n                min=\"0\"\n                max=\"255\"\n                @input=${handleHandleEvent(args)}\n                @change=${handleHandleEvent(args)}\n                .formatOptions=${{\n                    style: 'unit',\n                    unit: 'pt',\n                }}\n                ...=${spreadProps(args)}\n            >\n                Output Levels\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"min\"\n                    label=\"Minimum\"\n                    value=\"5\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"max\"\n                    label=\"Maximum\"\n                    value=\"250\"\n                ></sp-slider-handle>\n            </sp-slider>\n        </div>\n    `;\n};\nTwoHandlesPt.args = {\n    variant: 'range',\n    tickStep: 10,\n};\n\nexport const ThreeHandlesPc = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                value=\"5\"\n                step=\"1\"\n                min=\"0\"\n                max=\"255\"\n                @input=${handleHandleEvent(args)}\n                @change=${handleHandleEvent(args)}\n                .formatOptions=${{ style: 'unit', unit: 'pc' }}\n                ...=${spreadProps(args)}\n            >\n                Output Levels\n                <sp-slider-handle\n                    slot=\"handle\"\n                    value=\"5\"\n                    label=\"Low\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    value=\"133\"\n                    label=\"Mid\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    value=\"250\"\n                    label=\"High\"\n                ></sp-slider-handle>\n            </sp-slider>\n        </div>\n    `;\n};\nThreeHandlesPc.args = {\n    variant: 'range',\n};\n\nexport const ThreeHandlesOrdered = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                step=\"1\"\n                min=\"0\"\n                max=\"255\"\n                @input=${handleHandleEvent(args)}\n                @change=${handleHandleEvent(args)}\n                ...=${spreadProps(args)}\n            >\n                Output Levels\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"low\"\n                    label=\"Low\"\n                    value=\"5\"\n                    max=\"next\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"mid\"\n                    label=\"Mid\"\n                    value=\"100\"\n                    min=\"previous\"\n                    max=\"next\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"high\"\n                    label=\"High\"\n                    value=\"250\"\n                    min=\"previous\"\n                ></sp-slider-handle>\n            </sp-slider>\n        </div>\n    `;\n};\nThreeHandlesOrdered.args = {\n    variant: 'range',\n    tickStep: 10,\n};\n\n// This is a very complex example from an actual application.\n//\n// The first and last handles go from 0 to 255 in a linear fashion.\n// The last and first handles are ordered so that the last handle\n// must be greater than or equal to the first handle.\n//\n// The middle handle's range goes from 9.99 to 0.01, counting down.\n// the middle handle's limits are set by the outer handles such that\n// the position of the left handle is the staring value (9.99) for the\n// middle handle. And the position of the right handle is the end\n// value (0.01). That means that the middle handle will move\n// proportionally as you move the outer handles.\n//\n// The two other interesting features of the middle handle are that\n// it counts down, and that it does so exponentially for the first\n// half of its range.\n//\n// Because the specification for the <input> tag in HTML says that the\n// min should be less than the max, we do a double normalization to make\n// this work. The middle handle is considered to go between 0 and 1,\n// where 0 is the left handle's position and 1 is the right handle's\n// position. We then do the appropriate calculation to convert that\n// value into one between 9.99 and 0.01 for display to the user.\n//\n// One iteresting thing to note is that the normalization function\n// can also be used to enforce clamping.\n//\nexport const ThreeHandlesComplex = (args: StoryArgs = {}): TemplateResult => {\n    const values: { [key: string]: number } = {\n        black: 50,\n        gray: 4.98,\n        white: 225,\n    };\n    const handleEvent =\n        ({ onInput, onChange }: StoryArgs) =>\n        (event: Event): void => {\n            const target = event.target as SliderHandle;\n            if (target.value != null) {\n                if (typeof target.value === 'object') {\n                    const value = JSON.stringify(target.value, null, 2);\n                    if (onInput && event.type === 'input') {\n                        onInput(value);\n                    } else if (onChange && event.type === 'change') {\n                        onChange(value);\n                    }\n                } else {\n                    const value = `${target.name}: ${target.value}`;\n                    if (onInput && event.type === 'input') {\n                        onInput(value);\n                    } else if (onChange && event.type === 'change') {\n                        onChange(value);\n                    }\n                }\n                values[target.name] = target.value;\n            }\n        };\n    const grayNormalization = {\n        toNormalized(value: number) {\n            const normalizedBlack = values.black / 255;\n            const normalizedWhite = values.white / 255;\n            const clamped = Math.max(Math.min(value, 1), 0);\n            return (\n                clamped * (normalizedWhite - normalizedBlack) + normalizedBlack\n            );\n        },\n        fromNormalized(value: number) {\n            const normalizedBlack = values.black / 255;\n            const normalizedWhite = values.white / 255;\n            const clamped = Math.max(\n                Math.min(value, normalizedWhite),\n                normalizedBlack\n            );\n\n            return (\n                (clamped - normalizedBlack) /\n                (normalizedWhite - normalizedBlack)\n            );\n        },\n    };\n    const blackNormalization = {\n        toNormalized(value: number) {\n            const clamped = Math.min(value, values.white);\n            return clamped / 255;\n        },\n        fromNormalized(value: number) {\n            const denormalized = value * 255;\n            return Math.min(denormalized, values.white);\n        },\n    };\n    const whiteNormalization = {\n        toNormalized(value: number) {\n            const clamped = Math.max(value, values.black);\n            return clamped / 255;\n        },\n        fromNormalized(value: number) {\n            const denormalized = value * 255;\n            return Math.max(denormalized, values.black);\n        },\n    };\n    const computeGray = (value: number): string => {\n        let result = 1.0;\n        if (value > 0.5) {\n            result = Math.max(2 * (1 - value), 0.01);\n        } else if (value < 0.5) {\n            result = ((1 - 2 * value) * (Math.sqrt(9.99) - 1) + 1) ** 2;\n        }\n        const formatOptions = {\n            maximumFractionDigits: 2,\n            minimumFractionDigits: 2,\n        };\n        return new Intl.NumberFormat(navigator.language, formatOptions).format(\n            result\n        );\n    };\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                step=\"1\"\n                min=\"0\"\n                max=\"255\"\n                @input=${handleEvent}\n                @change=${handleEvent}\n                ...=${spreadProps(args)}\n            >\n                Output Levels\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"black\"\n                    label=\"Black\"\n                    value=${values.black}\n                    .normalization=${blackNormalization}\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"gray\"\n                    label=\"Gray\"\n                    value=\"0.215\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.005\"\n                    .normalization=${grayNormalization}\n                    .getAriaHandleText=${computeGray}\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"white\"\n                    label=\"White\"\n                    value=${values.white}\n                    .normalization=${whiteNormalization}\n                ></sp-slider-handle>\n            </sp-slider>\n        </div>\n    `;\n};\nThreeHandlesComplex.args = {\n    variant: 'range',\n    tickStep: 10,\n};\n\nexport const focusTabDemo = (args: StoryArgs = {}): TemplateResult => {\n    const value = 50;\n    const min = 0;\n    const max = 100;\n    const step = 1;\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px 20px;\">\n            <sp-slider\n                value=\"${value}\"\n                step=\"${step}\"\n                min=\"${min}\"\n                max=\"${max}\"\n                label=\"Opacity\"\n                id=\"opacity-slider-opacity\"\n                ...=${spreadProps(args)}\n            ></sp-slider>\n        </div>\n        <div style=\"width: 500px; margin: 20px;\">\n            <sp-slider\n                value=\"${value}\"\n                step=\"${step}\"\n                min=\"${min}\"\n                max=\"${max}\"\n                label=\"Lightness\"\n                id=\"opacity-slider-lightness\"\n                ...=${spreadProps(args)}\n            ></sp-slider>\n        </div>\n        <div style=\"width: 500px; margin: 20px 20px 12px;\">\n            <sp-slider\n                value=\"${value}\"\n                step=\"${step}\"\n                min=\"${min}\"\n                max=\"${max}\"\n                label=\"Saturation\"\n                id=\"opacity-slider-saturation\"\n                ...=${spreadProps(args)}\n            ></sp-slider>\n        </div>\n    `;\n};\n\nexport const WithPopover = (args: StoryArgs = {}): TemplateResult => {\n    return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                id=\"slider-with-popover\"\n                label=\"Slider without Popover\"\n                variant=\"filled\"\n                max=\"100\"\n                min=\"0\"\n                step=\"5\"\n                value=\"50\"\n                editable\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                ...=${spreadProps(args)}\n            ></sp-slider>\n            <overlay-trigger placement=\"top\">\n                <sp-slider\n                    slot=\"trigger\"\n                    id=\"slider-with-popover\"\n                    label=\"Label in attribute\"\n                    variant=\"filled\"\n                    max=\"100\"\n                    min=\"0\"\n                    step=\"5\"\n                    value=\"50\"\n                    editable\n                    @input=${handleEvent(args)}\n                    @change=${handleEvent(args)}\n                    ...=${spreadProps(args)}\n                ></sp-slider>\n                <sp-popover slot=\"hover-content\" tip>\n                    Hover content for the slider\n                </sp-popover>\n            </overlay-trigger>\n\n            <overlay-trigger placement=\"top\">\n                <sp-slider\n                    slot=\"trigger\"\n                    id=\"slider-with-popover\"\n                    variant=\"filled\"\n                    max=\"100\"\n                    min=\"0\"\n                    step=\"5\"\n                    value=\"50\"\n                    editable\n                    @input=${handleEvent(args)}\n                    @change=${handleEvent(args)}\n                    ...=${spreadProps(args)}\n                >\n                    Label in slot\n                </sp-slider>\n                <sp-popover slot=\"hover-content\" tip>\n                    Hover content for the slider\n                </sp-popover>\n            </overlay-trigger>\n        </div>\n    `;\n};\n\nWithPopover.args = {\n    variant: 'filled',\n};\n\nWithPopover.parameters = {\n    docs: {\n        description: {\n            story: 'A slider with a popover that appears on hover.',\n        },\n    },\n};\n"],
  "mappings": "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",
  "names": ["handleEvent"]
}
