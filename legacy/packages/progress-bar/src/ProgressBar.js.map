{
  "version": 3,
  "sources": ["ProgressBar.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    nothing,\n    PropertyValues,\n    SizedMixin,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\n\nimport { getLabelFromSlot } from '@spectrum-web-components/shared/src/get-label-from-slot.js';\nimport { ObserveSlotText } from '@spectrum-web-components/shared/src/observe-slot-text.js';\nimport { LanguageResolutionController } from '@spectrum-web-components/reactive-controllers/src/LanguageResolution.js';\nimport '@spectrum-web-components/field-label/sp-field-label.js';\nimport styles from './progress-bar.css.js';\n\n/**\n * @element sp-progress-bar\n */\nexport class ProgressBar extends SizedMixin(\n    ObserveSlotText(SpectrumElement, ''),\n    {\n        noDefaultSize: true,\n    }\n) {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    @property({ type: Boolean, reflect: true })\n    public indeterminate = false;\n\n    @property({ type: String, reflect: true })\n    public label = '';\n\n    private languageResolver = new LanguageResolutionController(this);\n\n    @property({ type: Boolean, reflect: true, attribute: 'over-background' })\n    public overBackground = false;\n\n    @property({ type: Boolean, reflect: true, attribute: 'side-label' })\n    public sideLabel = false;\n\n    @property({ type: Number })\n    public progress = 0;\n\n    @property({ reflect: true, attribute: 'static-color' })\n    public staticColor?: 'white';\n\n    @query('slot')\n    private slotEl!: HTMLSlotElement;\n\n    protected override render(): TemplateResult {\n        return html`\n            ${this.slotHasContent || this.label\n                ? html`\n                      <sp-field-label size=${this.size} class=\"label\">\n                          ${this.slotHasContent ? html`` : this.label}\n\n                          <slot @slotchange=${this.handleSlotchange}></slot>\n                      </sp-field-label>\n                  `\n                : html``}\n            ${this.label\n                ? html`\n                      ${this.indeterminate\n                          ? nothing\n                          : html`\n                                <sp-field-label\n                                    size=${this.size}\n                                    class=\"percentage\"\n                                >\n                                    ${new Intl.NumberFormat(\n                                        this.languageResolver.language,\n                                        {\n                                            style: 'percent',\n                                            unitDisplay: 'narrow',\n                                        }\n                                    ).format(this.progress / 100)}\n                                </sp-field-label>\n                            `}\n                  `\n                : nothing}\n            <div class=\"track\">\n                <div\n                    class=\"fill\"\n                    style=\"transform: scaleX(calc(${this.progress} / 100));\"\n                ></div>\n            </div>\n        `;\n    }\n\n    protected handleSlotchange(): void {\n        const labelFromSlot = getLabelFromSlot(this.label, this.slotEl);\n        if (labelFromSlot) {\n            this.label = labelFromSlot;\n        }\n    }\n\n    protected override firstUpdated(changes: PropertyValues): void {\n        super.firstUpdated(changes);\n        if (!this.hasAttribute('role')) {\n            this.setAttribute('role', 'progressbar');\n        }\n    }\n\n    protected override updated(changes: PropertyValues): void {\n        super.updated(changes);\n        if (changes.has('indeterminate')) {\n            if (this.indeterminate) {\n                this.removeAttribute('aria-valuemin');\n                this.removeAttribute('aria-valuemax');\n                this.removeAttribute('aria-valuenow');\n            } else {\n                this.setAttribute('aria-valuemin', '0');\n                this.setAttribute('aria-valuemax', '100');\n            }\n        }\n        if (!this.indeterminate && changes.has('progress')) {\n            this.setAttribute('aria-valuenow', '' + this.progress);\n        }\n        if (changes.has('label')) {\n            if (this.label.length) {\n                this.setAttribute('aria-label', this.label);\n            } else if (\n                changes.get('label') === this.getAttribute('aria-label')\n            ) {\n                this.removeAttribute('aria-label');\n            }\n        }\n\n        if (window.__swc.DEBUG) {\n            if (\n                !this.label &&\n                !this.getAttribute('aria-label') &&\n                !this.getAttribute('aria-labelledby') &&\n                !this.slotHasContent\n            ) {\n                window.__swc.warn(\n                    this,\n                    '<sp-progress-bar> elements need one of the following to be accessible:',\n                    'https://opensource.adobe.com/spectrum-web-components/components/progress-bar/#accessibility',\n                    {\n                        type: 'accessibility',\n                        issues: [\n                            'value supplied to the \"label\" attribute, which will be displayed visually as part of the element, or',\n                            'text content supplied directly to the <sp-progress-circle> element, or',\n                            'value supplied to the \"aria-label\" attribute, which will only be provided to screen readers, or',\n                            'an element ID reference supplied to the \"aria-labelledby\" attribute, which will be provided by screen readers and will need to be managed manually by the parent application.',\n                        ],\n                    }\n                );\n            }\n        }\n    }\n}\n"],
  "mappings": "qNAYA,OAEI,QAAAA,EACA,WAAAC,EAEA,cAAAC,EACA,mBAAAC,MAEG,gCACP,OACI,YAAAC,EACA,SAAAC,MACG,kDAEP,OAAS,oBAAAC,MAAwB,6DACjC,OAAS,mBAAAC,MAAuB,2DAChC,OAAS,gCAAAC,MAAoC,0EAC7C,MAAO,yDACP,OAAOC,MAAY,wBAKZ,aAAM,oBAAoBP,EAC7BK,EAAgBJ,EAAiB,EAAE,EACnC,CACI,cAAe,EACnB,CACJ,CAAE,CALK,kCAWH,KAAO,cAAgB,GAGvB,KAAO,MAAQ,GAEf,KAAQ,iBAAmB,IAAIK,EAA6B,IAAI,EAGhE,KAAO,eAAiB,GAGxB,KAAO,UAAY,GAGnB,KAAO,SAAW,EAnBlB,WAA2B,QAAyB,CAChD,MAAO,CAACC,CAAM,CAClB,CAyBmB,QAAyB,CACxC,OAAOT;AAAA,cACD,KAAK,gBAAkB,KAAK,MACxBA;AAAA,6CAC2B,KAAK,IAAI;AAAA,4BAC1B,KAAK,eAAiBA,IAAS,KAAK,KAAK;AAAA;AAAA,8CAEvB,KAAK,gBAAgB;AAAA;AAAA,oBAGjDA,GAAM;AAAA,cACV,KAAK,MACDA;AAAA,wBACM,KAAK,cACDC,EACAD;AAAA;AAAA,2CAEe,KAAK,IAAI;AAAA;AAAA;AAAA,sCAGd,IAAI,KAAK,aACP,KAAK,iBAAiB,SACtB,CACI,MAAO,UACP,YAAa,QACjB,CACJ,EAAE,OAAO,KAAK,SAAW,GAAG,CAAC;AAAA;AAAA,6BAEpC;AAAA,oBAEXC,CAAO;AAAA;AAAA;AAAA;AAAA,oDAI2B,KAAK,QAAQ;AAAA;AAAA;AAAA,SAI7D,CAEU,kBAAyB,CAC/B,MAAMS,EAAgBJ,EAAiB,KAAK,MAAO,KAAK,MAAM,EAC1DI,IACA,KAAK,MAAQA,EAErB,CAEmB,aAAaC,EAA+B,CAC3D,MAAM,aAAaA,CAAO,EACrB,KAAK,aAAa,MAAM,GACzB,KAAK,aAAa,OAAQ,aAAa,CAE/C,CAEmB,QAAQA,EAA+B,CACtD,MAAM,QAAQA,CAAO,EACjBA,EAAQ,IAAI,eAAe,IACvB,KAAK,eACL,KAAK,gBAAgB,eAAe,EACpC,KAAK,gBAAgB,eAAe,EACpC,KAAK,gBAAgB,eAAe,IAEpC,KAAK,aAAa,gBAAiB,GAAG,EACtC,KAAK,aAAa,gBAAiB,KAAK,IAG5C,CAAC,KAAK,eAAiBA,EAAQ,IAAI,UAAU,GAC7C,KAAK,aAAa,gBAAiB,GAAK,KAAK,QAAQ,EAErDA,EAAQ,IAAI,OAAO,IACf,KAAK,MAAM,OACX,KAAK,aAAa,aAAc,KAAK,KAAK,EAE1CA,EAAQ,IAAI,OAAO,IAAM,KAAK,aAAa,YAAY,GAEvD,KAAK,gBAAgB,YAAY,EA2B7C,CACJ,CA7HWC,EAAA,CADNR,EAAS,CAAE,KAAM,QAAS,QAAS,EAAK,CAAC,GAVjC,YAWF,6BAGAQ,EAAA,CADNR,EAAS,CAAE,KAAM,OAAQ,QAAS,EAAK,CAAC,GAbhC,YAcF,qBAKAQ,EAAA,CADNR,EAAS,CAAE,KAAM,QAAS,QAAS,GAAM,UAAW,iBAAkB,CAAC,GAlB/D,YAmBF,8BAGAQ,EAAA,CADNR,EAAS,CAAE,KAAM,QAAS,QAAS,GAAM,UAAW,YAAa,CAAC,GArB1D,YAsBF,yBAGAQ,EAAA,CADNR,EAAS,CAAE,KAAM,MAAO,CAAC,GAxBjB,YAyBF,wBAGAQ,EAAA,CADNR,EAAS,CAAE,QAAS,GAAM,UAAW,cAAe,CAAC,GA3B7C,YA4BF,2BAGCQ,EAAA,CADPP,EAAM,MAAM,GA9BJ,YA+BD",
  "names": ["html", "nothing", "SizedMixin", "SpectrumElement", "property", "query", "getLabelFromSlot", "ObserveSlotText", "LanguageResolutionController", "styles", "labelFromSlot", "changes", "__decorateClass"]
}
