{
  "version": 3,
  "sources": ["progress-bar.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { elementUpdated, expect, fixture, html } from '@open-wc/testing';\n\nimport '@spectrum-web-components/progress-bar/sp-progress-bar.js';\nimport { ProgressBar } from '@spectrum-web-components/progress-bar';\nimport { stub } from 'sinon';\nimport { testForLitDevWarnings } from '../../../test/testing-helpers.js';\nimport { createLanguageContext } from '../../../tools/reactive-controllers/test/helpers.js';\n\ndescribe('ProgressBar', () => {\n    testForLitDevWarnings(\n        async () =>\n            await fixture<ProgressBar>(html`\n                <sp-progress-bar label=\"Loading\"></sp-progress-bar>\n            `)\n    );\n    it('loads default progress-bar accessibly', async () => {\n        const el = await fixture<ProgressBar>(html`\n            <sp-progress-bar label=\"Loading\"></sp-progress-bar>\n        `);\n\n        await elementUpdated(el);\n        expect(el).to.not.be.undefined;\n\n        await expect(el).to.be.accessible();\n    });\n\n    it('accepts label from `slot`', async () => {\n        const el = await fixture<ProgressBar>(html`\n            <sp-progress-bar role=\"progressbar\">\n                Label From Slot\n            </sp-progress-bar>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.getAttribute('label')).to.equal('Label From Slot');\n    });\n\n    it('handles label attribute changes', async () => {\n        const el = await fixture<ProgressBar>(html`\n            <sp-progress-bar label=\"label\" indeterminate>\n                content\n            </sp-progress-bar>\n        `);\n\n        await elementUpdated(el);\n        el.setAttribute('label', '');\n        await elementUpdated(el);\n\n        expect(el.getAttribute('label')).to.equal('');\n        el.setAttribute('label', 'label1');\n        await elementUpdated(el);\n        expect(el.getAttribute('label')).to.equal('label1');\n    });\n\n    it('renders label when content is absent', async () => {\n        const el = await fixture<ProgressBar>(html`\n            <sp-progress-bar label=\"myLabel\" indeterminate></sp-progress-bar>\n        `);\n        expect(el.getAttribute('label')).to.equal('myLabel');\n    });\n\n    it('renders nothing when both content and label is absent', async () => {\n        const el = await fixture<ProgressBar>(html`\n            <sp-progress-bar label=\"myLabel\" indeterminate></sp-progress-bar>\n        `);\n        el.removeAttribute('label');\n        el.shadowRoot.textContent = '';\n        expect(el.getAttribute('label')).to.equal(null);\n        expect(el.shadowRoot.textContent?.trim()).to.equal('');\n    });\n\n    it('accepts a changing progress', async () => {\n        const el = await fixture<ProgressBar>(html`\n            <sp-progress-bar label=\"Changing value\"></sp-progress-bar>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.hasAttribute('aria-valuenow')).to.be.true;\n        expect(el.getAttribute('aria-valuenow')).to.equal('0');\n\n        el.progress = 50;\n\n        await elementUpdated(el);\n\n        expect(el.hasAttribute('aria-valuenow')).to.be.true;\n        expect(el.getAttribute('aria-valuenow')).to.equal('50');\n\n        el.progress = 100;\n\n        await elementUpdated(el);\n\n        expect(el.hasAttribute('aria-valuenow')).to.be.true;\n        expect(el.getAttribute('aria-valuenow')).to.equal('100');\n    });\n    it('loads - [indeterminate]', async () => {\n        const el = await fixture<ProgressBar>(html`\n            <sp-progress-bar indeterminate label=\"Loading\"></sp-progress-bar>\n        `);\n\n        await elementUpdated(el);\n        expect(el).to.not.be.undefined;\n\n        await expect(el).to.be.accessible();\n    });\n    it('accepts user `role`', async () => {\n        const el = await fixture<ProgressBar>(html`\n            <sp-progress-bar\n                role=\"progressbar\"\n                label=\"With user role\"\n            ></sp-progress-bar>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.getAttribute('role')).to.equal('progressbar');\n    });\n    it('returns to indeterminate', async () => {\n        const el = await fixture<ProgressBar>(html`\n            <sp-progress-bar\n                progress=\"50\"\n                label=\"Sometimes indeterminate\"\n            ></sp-progress-bar>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.hasAttribute('aria-valuenow')).to.be.true;\n        expect(el.getAttribute('aria-valuenow')).to.equal('50');\n\n        el.indeterminate = true;\n\n        await elementUpdated(el);\n\n        expect(el.hasAttribute('aria-valuenow')).to.be.false;\n    });\n\n    describe('dev mode', () => {\n        let consoleWarnStub!: ReturnType<typeof stub>;\n        before(() => {\n            window.__swc.verbose = true;\n            consoleWarnStub = stub(console, 'warn');\n        });\n        afterEach(() => {\n            consoleWarnStub.resetHistory();\n        });\n        after(() => {\n            window.__swc.verbose = false;\n            consoleWarnStub.restore();\n        });\n\n        it('warns in Dev Mode when accessible attributes are not leveraged', async () => {\n            const el = await fixture<ProgressBar>(html`\n                <sp-progress-bar progress=\"50\"></sp-progress-bar>\n            `);\n\n            await elementUpdated(el);\n\n            expect(consoleWarnStub.called).to.be.true;\n            const spyCall = consoleWarnStub.getCall(0);\n            expect(\n                (spyCall.args.at(0) as string).includes('accessible'),\n                'confirm accessibility-centric message'\n            ).to.be.true;\n            expect(spyCall.args.at(-1), 'confirm `data` shape').to.deep.equal({\n                data: {\n                    localName: 'sp-progress-bar',\n                    type: 'accessibility',\n                    level: 'default',\n                },\n            });\n        });\n        it('resolves a language (en-US)', async () => {\n            const [languageContext] = createLanguageContext('en-US');\n            const test = await fixture(html`\n                <div @sp-language-context=${languageContext}>\n                    <sp-progress-bar\n                        label=\"Changing Value\"\n                        progress=\"45\"\n                    ></sp-progress-bar>\n                </div>\n            `);\n            const el = test.querySelector('sp-progress-bar') as ProgressBar;\n            const percentage = el.shadowRoot.querySelector(\n                '.percentage'\n            ) as HTMLElement;\n            expect(percentage.textContent?.search('%')).to.not.equal(-1);\n        });\n\n        it('resolves a language (ar-sa)', async () => {\n            const [languageContext] = createLanguageContext('ar-sa');\n            const test = await fixture(html`\n                <div @sp-language-context=${languageContext}>\n                    <sp-progress-bar\n                        label=\"Changing Value\"\n                        progress=\"45\"\n                    ></sp-progress-bar>\n                </div>\n            `);\n            const el = test.querySelector('sp-progress-bar') as ProgressBar;\n            const percentage = el.shadowRoot.querySelector(\n                '.percentage'\n            ) as HTMLElement;\n            expect(percentage.textContent?.search('\u066A')).to.not.equal(-1);\n        });\n\n        it('accepts `aria-label`', async () => {\n            const el = await fixture<ProgressBar>(html`\n                <sp-progress-bar aria-label=\"Loading\"></sp-progress-bar>\n            `);\n\n            await elementUpdated(el);\n\n            expect(el.hasAttribute('aria-label')).to.be.true;\n            expect(el.getAttribute('aria-label')).to.equal('Loading');\n        });\n        it('sets `aria-label` to equal `label` if `label` is set', async () => {\n            const el = await fixture<ProgressBar>(html`\n                <sp-progress-bar label=\"Loading\"></sp-progress-bar>\n            `);\n\n            await elementUpdated(el);\n\n            expect(el.hasAttribute('aria-label')).to.be.true;\n            expect(el.getAttribute('aria-label')).to.equal('Loading');\n        });\n        it('does not remove `aria-label` if set independently of `label`', async () => {\n            const el = await fixture<ProgressBar>(html`\n                <sp-progress-bar\n                    label=\"\"\n                    aria-label=\"Loading\"\n                ></sp-progress-bar>\n            `);\n\n            await elementUpdated(el);\n\n            expect(el.hasAttribute('aria-label')).to.be.true;\n            expect(el.getAttribute('aria-label')).to.equal('Loading');\n        });\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
