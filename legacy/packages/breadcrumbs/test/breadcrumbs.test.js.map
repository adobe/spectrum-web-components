{
  "version": 3,
  "sources": ["breadcrumbs.test.ts"],
  "sourcesContent": ["/*\nCopyright 2024 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    oneEvent,\n} from '@open-wc/testing';\n\nimport { spy } from 'sinon';\nimport { ActionMenu } from '@spectrum-web-components/action-menu';\nimport {\n    Breadcrumbs,\n    BreadcrumbSelectDetail,\n} from '@spectrum-web-components/breadcrumbs';\nimport { getBreadcrumbs } from '../stories/template.js';\nimport { testForLitDevWarnings } from '../../../test/testing-helpers.js';\n\nimport '@spectrum-web-components/breadcrumbs/sp-breadcrumbs.js';\nimport '@spectrum-web-components/breadcrumbs/sp-breadcrumb-item.js';\nimport { sendKeys } from '@web/test-runner-commands';\n\ndescribe('Breadcrumbs', () => {\n    testForLitDevWarnings(\n        async () =>\n            await fixture<Breadcrumbs>(html`\n                <sp-breadcrumbs>${getBreadcrumbs(4)}</sp-breadcrumbs>\n            `)\n    );\n    it('should render accessibly', async () => {\n        const el = await fixture<Breadcrumbs>(html`\n            <sp-breadcrumbs>${getBreadcrumbs(4)}</sp-breadcrumbs>\n        `);\n\n        await elementUpdated(el);\n        await expect(el).to.be.accessible();\n\n        // Default role and aria-label.\n        expect(el.getAttribute('role')).to.equal('navigation');\n        expect(el.getAttribute('aria-label')).to.equal('Breadcrumbs');\n\n        // Reacts to changes of `label` attribute.\n        el.label = 'My breadcrumbs';\n        await elementUpdated(el);\n        expect(el.getAttribute('aria-label')).to.equal('My breadcrumbs');\n    });\n    it('should display all breadcrumbs if max-visible-items >= nr. or slotted breadcrumb items', async () => {\n        const el = await fixture<Breadcrumbs>(html`\n            <sp-breadcrumbs>${getBreadcrumbs(4)}</sp-breadcrumbs>\n        `);\n\n        await elementUpdated(el);\n\n        const breadcrumbs = el.querySelectorAll('sp-breadcrumb-item');\n        breadcrumbs.forEach((breadcrumb) => {\n            expect(breadcrumb).to.be.displayed;\n        });\n    });\n    it('should collapse breadcrumbs if max-visible-items < nr. or slotted breadcrumb items', async () => {\n        const el = await fixture<Breadcrumbs>(html`\n            <sp-breadcrumbs max-visible-items=${3}>\n                ${getBreadcrumbs(4)}\n            </sp-breadcrumbs>\n        `);\n\n        await elementUpdated(el);\n\n        const breadcrumbs = el.querySelectorAll('sp-breadcrumb-item');\n        expect(breadcrumbs[0]).not.to.be.displayed;\n        expect(breadcrumbs[1]).to.be.displayed;\n        expect(breadcrumbs[2]).to.be.displayed;\n        expect(breadcrumbs[3]).to.be.displayed;\n\n        const menu = el.shadowRoot.querySelector(\n            'sp-action-menu'\n        ) as ActionMenu;\n        expect(menu).to.exist;\n\n        menu.click();\n        await elementUpdated(menu);\n        expect(menu.open).to.be.true;\n\n        const menuitems = menu.querySelectorAll('sp-menu-item');\n        expect(menuitems.length).to.equal(4);\n        expect(menu.getAttribute('value')).to.equal('3');\n    });\n    it('should respect max-visible-items when adding items dynamically', async () => {\n        const el = await fixture<Breadcrumbs>(html`\n            <sp-breadcrumbs max-visible-items=${3}>\n                ${getBreadcrumbs(4)}\n            </sp-breadcrumbs>\n        `);\n\n        // let's verify that we have 3 breadcrumbs visible and 1 hidden\n        const breadcrumbs = el.querySelectorAll('sp-breadcrumb-item');\n        expect(breadcrumbs.length).to.equal(4);\n        expect(breadcrumbs[0]).not.to.be.displayed;\n        expect(breadcrumbs[1]).to.be.displayed;\n        expect(breadcrumbs[2]).to.be.displayed;\n        expect(breadcrumbs[3]).to.be.displayed;\n\n        // let's add one more item to the breadcrumbs directly\n        const newItem = document.createElement('sp-breadcrumb-item');\n        newItem.textContent = 'New item';\n        el.appendChild(newItem);\n        await elementUpdated(el);\n\n        // let's verify that we have 3 breadcrumbs visible and 2 hidden\n        const newBreadcrumbs = el.querySelectorAll('sp-breadcrumb-item');\n        expect(newBreadcrumbs.length).to.equal(5);\n        expect(newBreadcrumbs[0]).not.to.be.displayed;\n        expect(newBreadcrumbs[1]).not.to.be.displayed;\n        expect(newBreadcrumbs[2]).to.be.displayed;\n        expect(newBreadcrumbs[3]).to.be.displayed;\n        expect(newBreadcrumbs[4]).to.be.displayed;\n    });\n    it('should always show the first breadcrumb if slot=\"root\" is populated', async () => {\n        const el = await fixture<Breadcrumbs>(html`\n            <sp-breadcrumbs max-visible-items=${3}>\n                <sp-breadcrumb-item value=\"Home\" slot=\"root\">\n                    Home\n                </sp-breadcrumb-item>\n                ${getBreadcrumbs(4)}\n            </sp-breadcrumbs>\n        `);\n\n        await elementUpdated(el);\n\n        const breadcrumbs = el.querySelectorAll('sp-breadcrumb-item');\n        expect(breadcrumbs[0]).to.be.displayed;\n        expect(breadcrumbs[1]).not.to.be.displayed;\n        expect(breadcrumbs[2]).to.be.displayed;\n        expect(breadcrumbs[3]).to.be.displayed;\n        expect(breadcrumbs[4]).to.be.displayed;\n\n        const menu = el.shadowRoot.querySelector(\n            'sp-action-menu'\n        ) as ActionMenu;\n        expect(menu).to.exist;\n    });\n    it('should emit a change event on breadcrumb click if no href is provided', async () => {\n        const changeSpy = spy();\n\n        const el = await fixture<Breadcrumbs>(html`\n            <sp-breadcrumbs\n                max-visible-items=${3}\n                @change=${(\n                    event: Event & { detail: BreadcrumbSelectDetail }\n                ) => {\n                    changeSpy(event.detail.value);\n                }}\n            >\n                ${getBreadcrumbs(4)}\n            </sp-breadcrumbs>\n        `);\n\n        await elementUpdated(el);\n\n        // Simulate a click from the visible breadcrumb.\n        const breadcrumbs = el.querySelectorAll('sp-breadcrumb-item');\n        breadcrumbs[1].click();\n\n        expect(changeSpy).to.have.been.calledOnce;\n        expect(changeSpy).to.have.been.calledWith('1');\n\n        changeSpy.resetHistory();\n\n        // Simulate a click from the menu dropdown.\n        const menu = el.shadowRoot.querySelector(\n            'sp-action-menu'\n        ) as ActionMenu;\n        expect(menu).to.exist;\n\n        const opened = oneEvent(el, 'sp-opened');\n        menu.click();\n        await elementUpdated(menu);\n        await opened;\n\n        const closed = oneEvent(el, 'sp-closed');\n        const menuitems = menu.querySelectorAll('sp-menu-item');\n        menuitems[0].click();\n        await closed;\n\n        expect(menu.open).to.be.false;\n\n        await elementUpdated(el);\n        expect(changeSpy).to.have.been.calledOnce;\n        expect(changeSpy).to.have.been.calledWith('0');\n    });\n\n    it('should emit a change event on Enter keypress', async () => {\n        const changeSpy = spy();\n\n        const el = await fixture<Breadcrumbs>(html`\n            <sp-breadcrumbs\n                @change=${(\n                    event: Event & { detail: BreadcrumbSelectDetail }\n                ) => {\n                    changeSpy(event.detail.value);\n                }}\n            >\n                ${getBreadcrumbs(4)}\n            </sp-breadcrumbs>\n        `);\n\n        await elementUpdated(el);\n\n        // Simulate a click from the visible breadcrumb.\n        const breadcrumbs = el.querySelectorAll('sp-breadcrumb-item');\n\n        breadcrumbs[1].focus();\n        await sendKeys({ press: 'Enter' });\n\n        expect(changeSpy).to.have.been.calledOnce;\n        expect(changeSpy).to.have.been.calledWith('1');\n    });\n});\n"],
  "mappings": ";AAWA;AAAA,EACI;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACG;AAEP,SAAS,WAAW;AAMpB,SAAS,sBAAsB;AAC/B,SAAS,6BAA6B;AAEtC,OAAO;AACP,OAAO;AACP,SAAS,gBAAgB;AAEzB,SAAS,eAAe,MAAM;AAC1B;AAAA,IACI,YACI,MAAM,QAAqB;AAAA,kCACL,eAAe,CAAC,CAAC;AAAA,aACtC;AAAA,EACT;AACA,KAAG,4BAA4B,YAAY;AACvC,UAAM,KAAK,MAAM,QAAqB;AAAA,8BAChB,eAAe,CAAC,CAAC;AAAA,SACtC;AAED,UAAM,eAAe,EAAE;AACvB,UAAM,OAAO,EAAE,EAAE,GAAG,GAAG,WAAW;AAGlC,WAAO,GAAG,aAAa,MAAM,CAAC,EAAE,GAAG,MAAM,YAAY;AACrD,WAAO,GAAG,aAAa,YAAY,CAAC,EAAE,GAAG,MAAM,aAAa;AAG5D,OAAG,QAAQ;AACX,UAAM,eAAe,EAAE;AACvB,WAAO,GAAG,aAAa,YAAY,CAAC,EAAE,GAAG,MAAM,gBAAgB;AAAA,EACnE,CAAC;AACD,KAAG,0FAA0F,YAAY;AACrG,UAAM,KAAK,MAAM,QAAqB;AAAA,8BAChB,eAAe,CAAC,CAAC;AAAA,SACtC;AAED,UAAM,eAAe,EAAE;AAEvB,UAAM,cAAc,GAAG,iBAAiB,oBAAoB;AAC5D,gBAAY,QAAQ,CAAC,eAAe;AAChC,aAAO,UAAU,EAAE,GAAG,GAAG;AAAA,IAC7B,CAAC;AAAA,EACL,CAAC;AACD,KAAG,sFAAsF,YAAY;AACjG,UAAM,KAAK,MAAM,QAAqB;AAAA,gDACE,CAAC;AAAA,kBAC/B,eAAe,CAAC,CAAC;AAAA;AAAA,SAE1B;AAED,UAAM,eAAe,EAAE;AAEvB,UAAM,cAAc,GAAG,iBAAiB,oBAAoB;AAC5D,WAAO,YAAY,CAAC,CAAC,EAAE,IAAI,GAAG,GAAG;AACjC,WAAO,YAAY,CAAC,CAAC,EAAE,GAAG,GAAG;AAC7B,WAAO,YAAY,CAAC,CAAC,EAAE,GAAG,GAAG;AAC7B,WAAO,YAAY,CAAC,CAAC,EAAE,GAAG,GAAG;AAE7B,UAAM,OAAO,GAAG,WAAW;AAAA,MACvB;AAAA,IACJ;AACA,WAAO,IAAI,EAAE,GAAG;AAEhB,SAAK,MAAM;AACX,UAAM,eAAe,IAAI;AACzB,WAAO,KAAK,IAAI,EAAE,GAAG,GAAG;AAExB,UAAM,YAAY,KAAK,iBAAiB,cAAc;AACtD,WAAO,UAAU,MAAM,EAAE,GAAG,MAAM,CAAC;AACnC,WAAO,KAAK,aAAa,OAAO,CAAC,EAAE,GAAG,MAAM,GAAG;AAAA,EACnD,CAAC;AACD,KAAG,kEAAkE,YAAY;AAC7E,UAAM,KAAK,MAAM,QAAqB;AAAA,gDACE,CAAC;AAAA,kBAC/B,eAAe,CAAC,CAAC;AAAA;AAAA,SAE1B;AAGD,UAAM,cAAc,GAAG,iBAAiB,oBAAoB;AAC5D,WAAO,YAAY,MAAM,EAAE,GAAG,MAAM,CAAC;AACrC,WAAO,YAAY,CAAC,CAAC,EAAE,IAAI,GAAG,GAAG;AACjC,WAAO,YAAY,CAAC,CAAC,EAAE,GAAG,GAAG;AAC7B,WAAO,YAAY,CAAC,CAAC,EAAE,GAAG,GAAG;AAC7B,WAAO,YAAY,CAAC,CAAC,EAAE,GAAG,GAAG;AAG7B,UAAM,UAAU,SAAS,cAAc,oBAAoB;AAC3D,YAAQ,cAAc;AACtB,OAAG,YAAY,OAAO;AACtB,UAAM,eAAe,EAAE;AAGvB,UAAM,iBAAiB,GAAG,iBAAiB,oBAAoB;AAC/D,WAAO,eAAe,MAAM,EAAE,GAAG,MAAM,CAAC;AACxC,WAAO,eAAe,CAAC,CAAC,EAAE,IAAI,GAAG,GAAG;AACpC,WAAO,eAAe,CAAC,CAAC,EAAE,IAAI,GAAG,GAAG;AACpC,WAAO,eAAe,CAAC,CAAC,EAAE,GAAG,GAAG;AAChC,WAAO,eAAe,CAAC,CAAC,EAAE,GAAG,GAAG;AAChC,WAAO,eAAe,CAAC,CAAC,EAAE,GAAG,GAAG;AAAA,EACpC,CAAC;AACD,KAAG,uEAAuE,YAAY;AAClF,UAAM,KAAK,MAAM,QAAqB;AAAA,gDACE,CAAC;AAAA;AAAA;AAAA;AAAA,kBAI/B,eAAe,CAAC,CAAC;AAAA;AAAA,SAE1B;AAED,UAAM,eAAe,EAAE;AAEvB,UAAM,cAAc,GAAG,iBAAiB,oBAAoB;AAC5D,WAAO,YAAY,CAAC,CAAC,EAAE,GAAG,GAAG;AAC7B,WAAO,YAAY,CAAC,CAAC,EAAE,IAAI,GAAG,GAAG;AACjC,WAAO,YAAY,CAAC,CAAC,EAAE,GAAG,GAAG;AAC7B,WAAO,YAAY,CAAC,CAAC,EAAE,GAAG,GAAG;AAC7B,WAAO,YAAY,CAAC,CAAC,EAAE,GAAG,GAAG;AAE7B,UAAM,OAAO,GAAG,WAAW;AAAA,MACvB;AAAA,IACJ;AACA,WAAO,IAAI,EAAE,GAAG;AAAA,EACpB,CAAC;AACD,KAAG,yEAAyE,YAAY;AACpF,UAAM,YAAY,IAAI;AAEtB,UAAM,KAAK,MAAM,QAAqB;AAAA;AAAA,oCAEV,CAAC;AAAA,0BACX,CACN,UACC;AACD,gBAAU,MAAM,OAAO,KAAK;AAAA,IAChC,CAAC;AAAA;AAAA,kBAEC,eAAe,CAAC,CAAC;AAAA;AAAA,SAE1B;AAED,UAAM,eAAe,EAAE;AAGvB,UAAM,cAAc,GAAG,iBAAiB,oBAAoB;AAC5D,gBAAY,CAAC,EAAE,MAAM;AAErB,WAAO,SAAS,EAAE,GAAG,KAAK,KAAK;AAC/B,WAAO,SAAS,EAAE,GAAG,KAAK,KAAK,WAAW,GAAG;AAE7C,cAAU,aAAa;AAGvB,UAAM,OAAO,GAAG,WAAW;AAAA,MACvB;AAAA,IACJ;AACA,WAAO,IAAI,EAAE,GAAG;AAEhB,UAAM,SAAS,SAAS,IAAI,WAAW;AACvC,SAAK,MAAM;AACX,UAAM,eAAe,IAAI;AACzB,UAAM;AAEN,UAAM,SAAS,SAAS,IAAI,WAAW;AACvC,UAAM,YAAY,KAAK,iBAAiB,cAAc;AACtD,cAAU,CAAC,EAAE,MAAM;AACnB,UAAM;AAEN,WAAO,KAAK,IAAI,EAAE,GAAG,GAAG;AAExB,UAAM,eAAe,EAAE;AACvB,WAAO,SAAS,EAAE,GAAG,KAAK,KAAK;AAC/B,WAAO,SAAS,EAAE,GAAG,KAAK,KAAK,WAAW,GAAG;AAAA,EACjD,CAAC;AAED,KAAG,gDAAgD,YAAY;AAC3D,UAAM,YAAY,IAAI;AAEtB,UAAM,KAAK,MAAM,QAAqB;AAAA;AAAA,0BAEpB,CACN,UACC;AACD,gBAAU,MAAM,OAAO,KAAK;AAAA,IAChC,CAAC;AAAA;AAAA,kBAEC,eAAe,CAAC,CAAC;AAAA;AAAA,SAE1B;AAED,UAAM,eAAe,EAAE;AAGvB,UAAM,cAAc,GAAG,iBAAiB,oBAAoB;AAE5D,gBAAY,CAAC,EAAE,MAAM;AACrB,UAAM,SAAS,EAAE,OAAO,QAAQ,CAAC;AAEjC,WAAO,SAAS,EAAE,GAAG,KAAK,KAAK;AAC/B,WAAO,SAAS,EAAE,GAAG,KAAK,KAAK,WAAW,GAAG;AAAA,EACjD,CAAC;AACL,CAAC;",
  "names": []
}
