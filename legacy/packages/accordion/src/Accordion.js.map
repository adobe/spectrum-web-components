{
  "version": 3,
  "sources": ["Accordion.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    SizedMixin,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    queryAssignedNodes,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { FocusGroupController } from '@spectrum-web-components/reactive-controllers/src/FocusGroup.js';\n\nimport { AccordionItem } from './AccordionItem.js';\n\nimport styles from './accordion.css.js';\n\n/**\n * @element sp-accordion\n * @slot - The sp-accordion-item children to display.\n */\nexport class Accordion extends SizedMixin(SpectrumElement, {\n    noDefaultSize: true,\n}) {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    /**\n     * Allows multiple accordion items to be opened at the same time\n     */\n    @property({ type: Boolean, reflect: true, attribute: 'allow-multiple' })\n    public allowMultiple = false;\n\n    /**\n     * Sets the spacing between the content to borders of an accordion item\n     */\n    @property({ type: String, reflect: true })\n    public density?: 'compact' | 'spacious';\n\n    @queryAssignedNodes()\n    private defaultNodes!: NodeListOf<AccordionItem>;\n\n    private get items(): AccordionItem[] {\n        return [...(this.defaultNodes || [])].filter(\n            (node: HTMLElement) => typeof node.tagName !== 'undefined'\n        ) as AccordionItem[];\n    }\n\n    focusGroupController = new FocusGroupController<AccordionItem>(this, {\n        direction: 'vertical',\n        elements: () => this.items,\n        isFocusableElement: (el: AccordionItem) => !el.disabled,\n    });\n\n    public override focus(): void {\n        this.focusGroupController.focus();\n    }\n\n    private async onToggle(event: Event): Promise<void> {\n        const target = event.target as AccordionItem;\n        // Let the event pass through the DOM so that it can be\n        // prevented from the outside if a user so desires.\n        await 0;\n        if (this.allowMultiple || event.defaultPrevented) {\n            // No toggling when `allowMultiple` or the user prevents it.\n            return;\n        }\n        const items = [...this.items] as AccordionItem[];\n        /* c8 ignore next 3 */\n        if (items && !items.length) {\n            // no toggling when there aren't items.\n            return;\n        }\n        items.forEach((item) => {\n            if (item !== target) {\n                // Close all the items that didn't dispatch the event.\n                item.open = false;\n            }\n        });\n    }\n\n    private handleSlotchange(): void {\n        this.focusGroupController.clearElementCache();\n        this.items.forEach((item) => {\n            item.size = this.size;\n        });\n    }\n\n    protected override updated(changed: PropertyValues<this>): void {\n        super.updated(changed);\n        if (\n            changed.has('size') &&\n            (!!changed.get('size') || this.size !== 'm')\n        ) {\n            this.items.forEach((item) => {\n                item.size = this.size;\n            });\n        }\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <slot\n                @slotchange=${this.handleSlotchange}\n                @sp-accordion-item-toggle=${this.onToggle}\n            ></slot>\n        `;\n    }\n}\n"],
  "mappings": "qNAYA,OAEI,QAAAA,EAEA,cAAAC,EACA,mBAAAC,MAEG,gCACP,OACI,YAAAC,EACA,sBAAAC,MACG,kDACP,OAAS,wBAAAC,MAA4B,kEAIrC,OAAOC,MAAY,qBAMZ,aAAM,kBAAkBL,EAAWC,EAAiB,CACvD,cAAe,EACnB,CAAC,CAAE,CAFI,kCAWH,KAAO,cAAgB,GAiBvB,0BAAuB,IAAIG,EAAoC,KAAM,CACjE,UAAW,WACX,SAAU,IAAM,KAAK,MACrB,mBAAqBE,GAAsB,CAACA,EAAG,QACnD,CAAC,EA7BD,WAA2B,QAAyB,CAChD,MAAO,CAACD,CAAM,CAClB,CAiBA,IAAY,OAAyB,CACjC,MAAO,CAAC,GAAI,KAAK,cAAgB,CAAC,CAAE,EAAE,OACjCE,GAAsB,OAAOA,EAAK,SAAY,WACnD,CACJ,CAQgB,OAAc,CAC1B,KAAK,qBAAqB,MAAM,CACpC,CAEA,MAAc,SAASC,EAA6B,CAChD,MAAMC,EAASD,EAAM,OAIrB,GADA,KAAM,GACF,KAAK,eAAiBA,EAAM,iBAE5B,OAEJ,MAAME,EAAQ,CAAC,GAAG,KAAK,KAAK,EAExBA,GAAS,CAACA,EAAM,QAIpBA,EAAM,QAASC,GAAS,CAChBA,IAASF,IAETE,EAAK,KAAO,GAEpB,CAAC,CACL,CAEQ,kBAAyB,CAC7B,KAAK,qBAAqB,kBAAkB,EAC5C,KAAK,MAAM,QAASA,GAAS,CACzBA,EAAK,KAAO,KAAK,IACrB,CAAC,CACL,CAEmB,QAAQC,EAAqC,CAC5D,MAAM,QAAQA,CAAO,EAEjBA,EAAQ,IAAI,MAAM,IACfA,EAAQ,IAAI,MAAM,GAAK,KAAK,OAAS,MAExC,KAAK,MAAM,QAASD,GAAS,CACzBA,EAAK,KAAO,KAAK,IACrB,CAAC,CAET,CAEmB,QAAyB,CACxC,OAAOZ;AAAA;AAAA,8BAEe,KAAK,gBAAgB;AAAA,4CACP,KAAK,QAAQ;AAAA;AAAA,SAGrD,CACJ,CA7EWc,EAAA,CADNX,EAAS,CAAE,KAAM,QAAS,QAAS,GAAM,UAAW,gBAAiB,CAAC,GAV9D,UAWF,6BAMAW,EAAA,CADNX,EAAS,CAAE,KAAM,OAAQ,QAAS,EAAK,CAAC,GAhBhC,UAiBF,uBAGCW,EAAA,CADPV,EAAmB,GAnBX,UAoBD",
  "names": ["html", "SizedMixin", "SpectrumElement", "property", "queryAssignedNodes", "FocusGroupController", "styles", "el", "node", "event", "target", "items", "item", "changed", "__decorateClass"]
}
