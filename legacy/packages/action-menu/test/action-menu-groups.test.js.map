{
  "version": 3,
  "sources": ["action-menu-groups.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { elementUpdated, expect, oneEvent } from '@open-wc/testing';\nimport { fixture } from '../../../test/testing-helpers.js';\nimport { sendKeys } from '@web/test-runner-commands';\n\nimport { groupsWithSelects } from '../stories/action-menu.stories.js';\nimport { ActionMenu } from '@spectrum-web-components/action-menu';\nimport { MenuItem } from '@spectrum-web-components/menu';\n\ndescribe('Action Menu - Groups', () => {\n    it('throws focus into the Menu when opened', async function () {\n        const el = await fixture<ActionMenu>(\n            groupsWithSelects({ onChange: () => {} })\n        );\n\n        const firstItem = el.querySelector('sp-menu-item') as MenuItem;\n\n        expect(firstItem.focused).to.be.false;\n        expect(document.activeElement === firstItem).to.be.false;\n\n        const opened = oneEvent(el, 'sp-opened');\n        el.focus();\n        await sendKeys({\n            press: 'ArrowDown',\n        });\n        await opened;\n\n        expect(firstItem.focused).to.be.true;\n        expect(\n            document.activeElement === firstItem,\n            document.activeElement?.localName\n        ).to.be.true;\n    });\n\n    it('toggles child group with `selects=\"multiple\"`', async function () {\n        this.retries(0);\n        const el = await fixture<ActionMenu>(\n            groupsWithSelects({ onChange: () => {} })\n        );\n\n        const multipleGroup = el.querySelector(\n            '[selects=\"multiple\"]'\n        ) as HTMLElement;\n        const firstItem = multipleGroup.querySelector(\n            'sp-menu-item'\n        ) as MenuItem;\n\n        expect(firstItem.selected, 'before opening: first item selected?').to.be.false;\n\n        let opened = oneEvent(el, 'sp-opened');\n        el.focus();\n        await sendKeys({\n            press: 'ArrowDown',\n        });\n        await opened;\n        expect(el.open, 'first opened: open?').to.be.true;\n\n        await sendKeys({\n            press: 'ArrowUp',\n        });\n        await elementUpdated(el);\n\n        let closed = oneEvent(el, 'sp-closed');\n        await sendKeys({\n            press: 'Enter',\n        });\n        await closed;\n\n        await elementUpdated(el);\n        await elementUpdated(firstItem);\n\n        expect(el.open, 'first closed: open?').to.be.false;\n        expect(firstItem.selected, 'after select: first item selected?').to.be.true;\n        expect(document.activeElement === el, document.activeElement?.localName)\n            .to.be.true;\n\n        opened = oneEvent(el, 'sp-opened');\n        await sendKeys({\n            press: 'ArrowDown',\n        });\n        await opened;\n        expect(el.open, 'reopened: open?').to.be.true;\n\n        closed = oneEvent(el, 'sp-closed');\n        await sendKeys({\n            press: 'Enter',\n        });\n        await closed;\n\n        await elementUpdated(el);\n        await elementUpdated(firstItem);\n\n        expect(el.open, 'reclosed: open?').to.be.false;\n        expect(firstItem.selected, 'after deselect: first item selected?').to.be.false;\n    });\n});\n"],
  "mappings": ";AAYA,SAAS,gBAAgB,QAAQ,gBAAgB;AACjD,SAAS,eAAe;AACxB,SAAS,gBAAgB;AAEzB,SAAS,yBAAyB;AAIlC,SAAS,wBAAwB,MAAM;AACnC,KAAG,0CAA0C,iBAAkB;AArBnE;AAsBQ,UAAM,KAAK,MAAM;AAAA,MACb,kBAAkB,EAAE,UAAU,MAAM;AAAA,MAAC,EAAE,CAAC;AAAA,IAC5C;AAEA,UAAM,YAAY,GAAG,cAAc,cAAc;AAEjD,WAAO,UAAU,OAAO,EAAE,GAAG,GAAG;AAChC,WAAO,SAAS,kBAAkB,SAAS,EAAE,GAAG,GAAG;AAEnD,UAAM,SAAS,SAAS,IAAI,WAAW;AACvC,OAAG,MAAM;AACT,UAAM,SAAS;AAAA,MACX,OAAO;AAAA,IACX,CAAC;AACD,UAAM;AAEN,WAAO,UAAU,OAAO,EAAE,GAAG,GAAG;AAChC;AAAA,MACI,SAAS,kBAAkB;AAAA,OAC3B,cAAS,kBAAT,mBAAwB;AAAA,IAC5B,EAAE,GAAG,GAAG;AAAA,EACZ,CAAC;AAED,KAAG,iDAAiD,iBAAkB;AA7C1E;AA8CQ,SAAK,QAAQ,CAAC;AACd,UAAM,KAAK,MAAM;AAAA,MACb,kBAAkB,EAAE,UAAU,MAAM;AAAA,MAAC,EAAE,CAAC;AAAA,IAC5C;AAEA,UAAM,gBAAgB,GAAG;AAAA,MACrB;AAAA,IACJ;AACA,UAAM,YAAY,cAAc;AAAA,MAC5B;AAAA,IACJ;AAEA,WAAO,UAAU,UAAU,sCAAsC,EAAE,GAAG,GAAG;AAEzE,QAAI,SAAS,SAAS,IAAI,WAAW;AACrC,OAAG,MAAM;AACT,UAAM,SAAS;AAAA,MACX,OAAO;AAAA,IACX,CAAC;AACD,UAAM;AACN,WAAO,GAAG,MAAM,qBAAqB,EAAE,GAAG,GAAG;AAE7C,UAAM,SAAS;AAAA,MACX,OAAO;AAAA,IACX,CAAC;AACD,UAAM,eAAe,EAAE;AAEvB,QAAI,SAAS,SAAS,IAAI,WAAW;AACrC,UAAM,SAAS;AAAA,MACX,OAAO;AAAA,IACX,CAAC;AACD,UAAM;AAEN,UAAM,eAAe,EAAE;AACvB,UAAM,eAAe,SAAS;AAE9B,WAAO,GAAG,MAAM,qBAAqB,EAAE,GAAG,GAAG;AAC7C,WAAO,UAAU,UAAU,oCAAoC,EAAE,GAAG,GAAG;AACvE,WAAO,SAAS,kBAAkB,KAAI,cAAS,kBAAT,mBAAwB,SAAS,EAClE,GAAG,GAAG;AAEX,aAAS,SAAS,IAAI,WAAW;AACjC,UAAM,SAAS;AAAA,MACX,OAAO;AAAA,IACX,CAAC;AACD,UAAM;AACN,WAAO,GAAG,MAAM,iBAAiB,EAAE,GAAG,GAAG;AAEzC,aAAS,SAAS,IAAI,WAAW;AACjC,UAAM,SAAS;AAAA,MACX,OAAO;AAAA,IACX,CAAC;AACD,UAAM;AAEN,UAAM,eAAe,EAAE;AACvB,UAAM,eAAe,SAAS;AAE9B,WAAO,GAAG,MAAM,iBAAiB,EAAE,GAAG,GAAG;AACzC,WAAO,UAAU,UAAU,sCAAsC,EAAE,GAAG,GAAG;AAAA,EAC7E,CAAC;AACL,CAAC;",
  "names": []
}
