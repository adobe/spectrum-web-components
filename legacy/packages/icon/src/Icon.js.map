{
  "version": 3,
  "sources": ["Icon.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { html, TemplateResult } from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { ifDefined } from '@spectrum-web-components/base/src/directives.js';\n\nimport { IconsetRegistry } from '@spectrum-web-components/iconset/src/iconset-registry.js';\n\nimport { IconBase } from './IconBase.js';\n\n/**\n * @element sp-icon\n */\nexport class Icon extends IconBase {\n    @property()\n    public src?: string;\n\n    @property()\n    public name?: string;\n\n    @query('#container')\n    private iconContainer?: HTMLElement;\n\n    private updateIconPromise?: Promise<void>;\n\n    public override connectedCallback(): void {\n        super.connectedCallback();\n        window.addEventListener('sp-iconset-added', this.iconsetListener);\n    }\n\n    public override disconnectedCallback(): void {\n        super.disconnectedCallback();\n        window.removeEventListener('sp-iconset-added', this.iconsetListener);\n    }\n\n    public override firstUpdated(): void {\n        this.updateIconPromise = this.updateIcon();\n    }\n\n    public override attributeChangedCallback(\n        name: string,\n        old: string,\n        value: string\n    ): void {\n        super.attributeChangedCallback(name, old, value);\n        this.updateIconPromise = this.updateIcon(); // any of our attributes change, update our icon\n    }\n\n    private iconsetListener = (event: CustomEvent): void => {\n        if (!this.name) {\n            return;\n        }\n        // parse the icon name to get iconset name\n        const icon = this.parseIcon(this.name);\n        if (event.detail.name === icon.iconset) {\n            this.updateIconPromise = this.updateIcon();\n        }\n    };\n\n    private announceIconImageSrcError(): void {\n        this.dispatchEvent(\n            new Event('error', {\n                cancelable: false,\n                bubbles: false,\n                composed: false,\n            })\n        );\n    }\n\n    protected override render(): TemplateResult {\n        if (this.name) {\n            return html`\n                <div id=\"container\"></div>\n            `;\n        } else if (this.src) {\n            return html`\n                <img\n                    src=\"${this.src}\"\n                    alt=${ifDefined(this.label)}\n                    @error=${this.announceIconImageSrcError}\n                />\n            `;\n        }\n        return super.render();\n    }\n\n    private async updateIcon(): Promise<void> {\n        if (this.updateIconPromise) {\n            await this.updateIconPromise;\n        }\n        if (!this.name) {\n            return Promise.resolve();\n        }\n        // parse the icon name to get iconset name\n        const icon = this.parseIcon(this.name);\n        // try to retrieve the iconset\n        const iconset = IconsetRegistry.getInstance().getIconset(icon.iconset);\n        if (!iconset) {\n            // we can stop here as there's nothing to be done till we get the iconset\n            return Promise.resolve();\n        }\n        if (!this.iconContainer) {\n            return Promise.resolve();\n        }\n        this.iconContainer.innerHTML = '';\n        return iconset.applyIconToElement(\n            this.iconContainer,\n            icon.icon,\n            this.size || '',\n            this.label ? this.label : ''\n        );\n    }\n\n    private parseIcon(icon: string): { iconset: string; icon: string } {\n        const iconParts = icon.split(':');\n        let iconsetName = 'default';\n        let iconName = icon;\n        if (iconParts.length > 1) {\n            iconsetName = iconParts[0];\n            iconName = iconParts[1];\n        }\n        return { iconset: iconsetName, icon: iconName };\n    }\n\n    protected override async getUpdateComplete(): Promise<boolean> {\n        const complete = (await super.getUpdateComplete()) as boolean;\n        await this.updateIconPromise;\n        return complete;\n    }\n}\n"],
  "mappings": "qNAYA,OAAS,QAAAA,MAA4B,gCACrC,OACI,YAAAC,EACA,SAAAC,MACG,kDACP,OAAS,aAAAC,MAAiB,kDAE1B,OAAS,mBAAAC,MAAuB,2DAEhC,OAAS,YAAAC,MAAgB,gBAKlB,aAAM,aAAaA,CAAS,CAA5B,kCAmCH,KAAQ,gBAAmBC,GAA6B,CACpD,GAAI,CAAC,KAAK,KACN,OAGJ,MAAMC,EAAO,KAAK,UAAU,KAAK,IAAI,EACjCD,EAAM,OAAO,OAASC,EAAK,UAC3B,KAAK,kBAAoB,KAAK,WAAW,EAEjD,EAhCgB,mBAA0B,CACtC,MAAM,kBAAkB,EACxB,OAAO,iBAAiB,mBAAoB,KAAK,eAAe,CACpE,CAEgB,sBAA6B,CACzC,MAAM,qBAAqB,EAC3B,OAAO,oBAAoB,mBAAoB,KAAK,eAAe,CACvE,CAEgB,cAAqB,CACjC,KAAK,kBAAoB,KAAK,WAAW,CAC7C,CAEgB,yBACZC,EACAC,EACAC,EACI,CACJ,MAAM,yBAAyBF,EAAMC,EAAKC,CAAK,EAC/C,KAAK,kBAAoB,KAAK,WAAW,CAC7C,CAaQ,2BAAkC,CACtC,KAAK,cACD,IAAI,MAAM,QAAS,CACf,WAAY,GACZ,QAAS,GACT,SAAU,EACd,CAAC,CACL,CACJ,CAEmB,QAAyB,CACxC,OAAI,KAAK,KACEV;AAAA;AAAA,cAGA,KAAK,IACLA;AAAA;AAAA,2BAEQ,KAAK,GAAG;AAAA,0BACTG,EAAU,KAAK,KAAK,CAAC;AAAA,6BAClB,KAAK,yBAAyB;AAAA;AAAA,cAI5C,MAAM,OAAO,CACxB,CAEA,MAAc,YAA4B,CAItC,GAHI,KAAK,mBACL,MAAM,KAAK,kBAEX,CAAC,KAAK,KACN,OAAO,QAAQ,QAAQ,EAG3B,MAAMI,EAAO,KAAK,UAAU,KAAK,IAAI,EAE/BI,EAAUP,EAAgB,YAAY,EAAE,WAAWG,EAAK,OAAO,EAKrE,MAJI,CAACI,GAID,CAAC,KAAK,cACC,QAAQ,QAAQ,GAE3B,KAAK,cAAc,UAAY,GACxBA,EAAQ,mBACX,KAAK,cACLJ,EAAK,KACL,KAAK,MAAQ,GACb,KAAK,MAAQ,KAAK,MAAQ,EAC9B,EACJ,CAEQ,UAAUA,EAAiD,CAC/D,MAAMK,EAAYL,EAAK,MAAM,GAAG,EAChC,IAAIM,EAAc,UACdC,EAAWP,EACf,OAAIK,EAAU,OAAS,IACnBC,EAAcD,EAAU,CAAC,EACzBE,EAAWF,EAAU,CAAC,GAEnB,CAAE,QAASC,EAAa,KAAMC,CAAS,CAClD,CAEA,MAAyB,mBAAsC,CAC3D,MAAMC,EAAY,MAAM,MAAM,kBAAkB,EAChD,aAAM,KAAK,kBACJA,CACX,CACJ,CAlHWC,EAAA,CADNf,EAAS,GADD,KAEF,mBAGAe,EAAA,CADNf,EAAS,GAJD,KAKF,oBAGCe,EAAA,CADPd,EAAM,YAAY,GAPV,KAQD",
  "names": ["html", "property", "query", "ifDefined", "IconsetRegistry", "IconBase", "event", "icon", "name", "old", "value", "iconset", "iconParts", "iconsetName", "iconName", "complete", "__decorateClass"]
}
