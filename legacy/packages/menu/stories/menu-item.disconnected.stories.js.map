{
  "version": 3,
  "sources": ["menu-item.disconnected.stories.ts"],
  "sourcesContent": ["/*\nCopyright 2023 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { html, LitElement, TemplateResult } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { when } from 'lit/directives/when.js';\n\nimport '@spectrum-web-components/picker/sp-picker.js';\nimport '@spectrum-web-components/button/sp-button.js';\nimport { SpectrumMixin } from '@spectrum-web-components/base';\n\nenum BlendModeValue {\n    normal = 2,\n    multiply = 3,\n    screen = 7,\n}\n\ninterface BlendModeOption {\n    value: BlendModeValue;\n    title: string;\n    subtitle: string;\n    thumbnail: string;\n}\n\nconst XElement = SpectrumMixin(LitElement);\n\nclass MyContainer extends XElement {\n    @state()\n    private _counter = 0;\n\n    private _handleClick(): void {\n        this._counter += 1;\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <div>\n                ${when(\n                    this._counter % 2 === 0,\n                    () => html`\n                        <my-view1></my-view1>\n                    `,\n                    () => html`\n                        <my-view2></my-view2>\n                    `\n                )}\n                <sp-button\n                    variant=\"primary\"\n                    size=\"m\"\n                    @click=${this._handleClick}\n                >\n                    Switch views\n                </sp-button>\n            </div>\n        `;\n    }\n}\n\ncustomElements.define('my-container', MyContainer);\n\nclass MyView1 extends XElement {\n    protected override render(): TemplateResult {\n        const blendModeOptions = [\n            {\n                value: BlendModeValue.normal,\n                title: 'Normal 1',\n                subtitle: 'No effect applied',\n            },\n            {\n                value: BlendModeValue.multiply,\n                title: 'Multiply',\n                subtitle: 'Darken shadows with contrast and details',\n            },\n            {\n                value: BlendModeValue.screen,\n                title: 'Screen',\n                subtitle: 'Brighten highlights with contrast and details',\n            },\n        ];\n        return html`\n            View 1\n            <my-picker\n                .blendMode=${BlendModeValue.normal}\n                .blendModeOptions=${blendModeOptions}\n                dir=\"ltr\"\n            ></my-picker>\n        `;\n    }\n}\n\ncustomElements.define('my-view1', MyView1);\n\nclass MyView2 extends XElement {\n    protected override render(): TemplateResult {\n        const blendModeOptions = [\n            {\n                value: BlendModeValue.normal,\n                title: 'Normal 2',\n                subtitle: 'No effect applied',\n            },\n            {\n                value: BlendModeValue.multiply,\n                title: 'Multiply',\n                subtitle: 'Darken shadows with contrast and details',\n            },\n            {\n                value: BlendModeValue.screen,\n                title: 'Screen',\n                subtitle: 'Brighten highlights with contrast and details',\n            },\n        ];\n        return html`\n            View 2\n            <my-picker\n                .blendMode=${BlendModeValue.normal}\n                .blendModeOptions=${blendModeOptions}\n            ></my-picker>\n        `;\n    }\n}\n\ncustomElements.define('my-view2', MyView2);\n\nclass MyPicker extends XElement {\n    @property({ type: Array })\n    public blendModeOptions: BlendModeOption[] = [];\n\n    @property()\n    public blendMode: number = BlendModeValue.normal;\n\n    private _renderBlendOptions(): TemplateResult {\n        return html`\n            ${repeat(\n                this.blendModeOptions,\n                // This is intentional so that repeat directive will add instead of\n                // update existing DOM which will then trigger error in\n                // MenuItem.childrenItem\n                // Using .value for the key will workaround the issue\n                (blendModeOption) => blendModeOption,\n                (blendModeOption: BlendModeOption) => html`\n                    <sp-menu-item value=${blendModeOption.value}>\n                        ${blendModeOption.title}\n                        <span slot=\"value\">${blendModeOption.subtitle}</span>\n                    </sp-menu-item>\n                `\n            )}\n        `;\n    }\n    protected override render(): TemplateResult {\n        return html`\n            <sp-picker\n                id=\"blendMode\"\n                size=\"l\"\n                label=\"Blend\"\n                value=${this.blendMode}\n            >\n                ${this._renderBlendOptions()}\n            </sp-picker>\n        `;\n    }\n}\n\ncustomElements.define('my-picker', MyPicker);\n\nexport default {\n    component: 'sp-menu-item',\n    title: 'Menu Item/Disconnected',\n};\n\nexport const disconnectedChildItems = (): TemplateResult => html`\n    <my-container></my-container>\n`;\n\ndisconnectedChildItems.swc_vrt = {\n    skip: true,\n};\n\ndisconnectedChildItems.parameters = {\n    // Disables Chromatic's snapshotting on a global level\n    chromatic: { disableSnapshot: true },\n};\n"],
  "mappings": "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",
  "names": ["BlendModeValue"]
}
