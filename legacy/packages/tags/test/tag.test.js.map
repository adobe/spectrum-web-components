{
  "version": 3,
  "sources": ["tag.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { elementUpdated, expect, fixture } from '@open-wc/testing';\nimport { html } from 'lit/static-html.js';\nimport { spy, stub } from 'sinon';\n\nimport '@spectrum-web-components/tags/sp-tag.js';\nimport '@spectrum-web-components/tags/sp-tags.js';\nimport { Tag } from '@spectrum-web-components/tags';\nimport { ClearButton } from '@spectrum-web-components/button';\nimport {\n    backspaceEvent,\n    deleteEvent,\n    enterEvent,\n    spaceEvent,\n    testForLitDevWarnings,\n} from '../../../test/testing-helpers.js';\n\ndescribe('Tag', () => {\n    testForLitDevWarnings(\n        async () =>\n            await fixture<Tag>(\n                html`\n                    <sp-tags>\n                        <sp-tag>Tag 1</sp-tag>\n                        <sp-tag invalid>Tag 2</sp-tag>\n                        <sp-tag disabled>Tag 3</sp-tag>\n                        <sp-tag deletable>Tag 4</sp-tag>\n                    </sp-tags>\n                `\n            )\n    );\n    it('loads default tags accessibly', async () => {\n        const el = await fixture<Tag>(\n            html`\n                <sp-tags>\n                    <sp-tag>Tag 1</sp-tag>\n                    <sp-tag invalid>Tag 2</sp-tag>\n                    <sp-tag disabled>Tag 3</sp-tag>\n                    <sp-tag deletable>Tag 4</sp-tag>\n                </sp-tags>\n            `\n        );\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('[disabled] manages [aria-disabled]', async () => {\n        const el = await fixture<Tag>(\n            html`\n                <sp-tags>\n                    <sp-tag>Tag 1</sp-tag>\n                    <sp-tag invalid>Tag 2</sp-tag>\n                    <sp-tag disabled>Tag 3</sp-tag>\n                    <sp-tag deletable>Tag 4</sp-tag>\n                </sp-tags>\n            `\n        );\n        const notDisabled = el.querySelector('sp-tag') as Tag;\n        const disabled = el.querySelector('[disabled]') as Tag;\n\n        await elementUpdated(disabled);\n\n        expect(notDisabled.hasAttribute('aria-disabled')).to.be.false;\n        expect(disabled.hasAttribute('aria-disabled')).to.be.true;\n        expect(disabled.getAttribute('aria-disabled')).to.equal('true');\n    });\n    it('dispatches `delete` events on click', async () => {\n        const deleteSpy = spy();\n        const handleDelete = (): void => deleteSpy();\n        const el = await fixture<Tag>(\n            html`\n                <sp-tag @delete=${handleDelete} deletable>Tag 1</sp-tag>\n            `\n        );\n\n        await elementUpdated(el);\n\n        expect(deleteSpy.called).to.be.false;\n\n        const root: HTMLElement | DocumentFragment = el.shadowRoot\n            ? el.shadowRoot\n            : el;\n        const deleteButton = root.querySelector(\n            'sp-clear-button'\n        ) as ClearButton;\n        deleteButton.click();\n\n        await elementUpdated(el);\n\n        expect(deleteSpy.called).to.be.true;\n        expect(deleteSpy.callCount).to.equal(1);\n    });\n    it('does not dispatch `delete` events when [readonly]', async () => {\n        const deleteSpy = spy();\n        const handleDelete = (): void => deleteSpy();\n        const el = await fixture<Tag>(\n            html`\n                <sp-tag @delete=${handleDelete} deletable readonly>\n                    Tag 1\n                </sp-tag>\n            `\n        );\n\n        await elementUpdated(el);\n\n        expect(deleteSpy.called).to.be.false;\n\n        const root: HTMLElement | DocumentFragment = el.shadowRoot\n            ? el.shadowRoot\n            : el;\n        const deleteButton = root.querySelector(\n            'sp-clear-button'\n        ) as ClearButton;\n        deleteButton.click();\n\n        await elementUpdated(el);\n\n        expect(deleteSpy.called).to.be.false;\n    });\n    it('dispatches `delete` events on keyboard input', async () => {\n        const deleteSpy = spy();\n        const handleDelete = (): void => deleteSpy();\n        let expectedEventCount = 0;\n        const el = await fixture<Tag>(\n            html`\n                <sp-tag @delete=${handleDelete}>Tag 1</sp-tag>\n            `\n        );\n        const testKeyboardEvent = async (\n            event: KeyboardEvent\n        ): Promise<void> => {\n            expectedEventCount += 1;\n\n            el.dispatchEvent(event);\n            await elementUpdated(el);\n\n            expect(deleteSpy.called).to.be.true;\n            expect(\n                deleteSpy.callCount,\n                `Accepts \"${event.code}\" key input`\n            ).to.equal(expectedEventCount);\n        };\n\n        await elementUpdated(el);\n\n        expect(deleteSpy.called).to.be.false;\n\n        el.dispatchEvent(new FocusEvent('focusin'));\n        await elementUpdated(el);\n\n        el.dispatchEvent(deleteEvent());\n        await elementUpdated(el);\n\n        expect(deleteSpy.called).to.be.false;\n\n        el.deletable = true;\n        await elementUpdated(el);\n\n        el.dispatchEvent(enterEvent());\n        await elementUpdated(el);\n\n        expect(deleteSpy.called).to.be.false;\n\n        testKeyboardEvent(deleteEvent());\n        testKeyboardEvent(spaceEvent());\n        testKeyboardEvent(backspaceEvent());\n\n        el.dispatchEvent(new FocusEvent('focusout'));\n        await elementUpdated(el);\n\n        el.dispatchEvent(deleteEvent());\n        expect(\n            deleteSpy.callCount,\n            'Does not respond after `focusout`'\n        ).to.equal(expectedEventCount);\n    });\n    it('can have delete event prevented', async () => {\n        const deleteSpy = spy();\n        const handleDelete = (event: Event): void => {\n            event.preventDefault();\n            deleteSpy();\n        };\n        const el = await fixture<Tag>(\n            html`\n                <sp-tag deletable @delete=${handleDelete}>Tag</sp-tag>\n            `\n        );\n\n        const removeStub = stub(el, 'remove');\n\n        await elementUpdated(el);\n\n        expect(deleteSpy.called).to.be.false;\n\n        const deleteButton = el.shadowRoot.querySelector(\n            'sp-clear-button'\n        ) as ClearButton;\n        deleteButton.click();\n\n        expect(deleteSpy.callCount).to.equal(1);\n        expect(removeStub.called).to.be.false;\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
