{
  "version": 3,
  "sources": ["Tags.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { queryAssignedNodes } from '@spectrum-web-components/base/src/decorators.js';\nimport { FocusVisiblePolyfillMixin } from '@spectrum-web-components/shared/src/focus-visible.js';\nimport { RovingTabindexController } from '@spectrum-web-components/reactive-controllers/src/RovingTabindex.js';\n\nimport { Tag } from './Tag.js';\n\nimport styles from './tags.css.js';\n\n/**\n * @element sp-tags\n *\n * @slot - Tag elements to manage as a group\n */\nexport class Tags extends FocusVisiblePolyfillMixin(SpectrumElement) {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    @queryAssignedNodes()\n    public defaultNodes!: Node[];\n\n    public get tags(): Tag[] {\n        return this.defaultNodes.filter(\n            (node) => (node as HTMLElement) instanceof Tag\n        ) as Tag[];\n    }\n\n    rovingTabindexController = new RovingTabindexController<Tag>(this, {\n        focusInIndex: (elements: Tag[]) => {\n            return elements.findIndex((el) => {\n                return !el.disabled && el.deletable;\n            });\n        },\n        elements: () => this.tags,\n        isFocusableElement: (el: Tag) => !el.disabled && el.deletable,\n    });\n\n    constructor() {\n        super();\n        this.addEventListener('focusin', this.handleFocusin);\n    }\n\n    public override focus(): void {\n        this.rovingTabindexController.focus();\n    }\n\n    private handleFocusin = (): void => {\n        this.addEventListener('focusout', this.handleFocusout);\n        this.addEventListener('keydown', this.handleKeydown);\n    };\n\n    private handleKeydown = (event: KeyboardEvent): void => {\n        const { code } = event;\n        if (code !== 'PageUp' && code !== 'PageDown') return;\n\n        const circularIndexedElement = <T extends HTMLElement>(\n            list: T[],\n            index: number\n        ): T => list[(list.length + index) % list.length];\n        const tagsSiblings = [\n            ...(this.getRootNode() as Document).querySelectorAll<Tags>(\n                'sp-tags'\n            ),\n        ];\n        if (tagsSiblings.length < 2) {\n            return;\n        }\n        event.preventDefault();\n        const currentIndex = tagsSiblings.indexOf(this);\n        const offset = code === 'PageUp' ? -1 : 1;\n        let nextTagsIndex = currentIndex + offset;\n        let nextTags = circularIndexedElement(tagsSiblings, nextTagsIndex);\n        while (!nextTags.tags.length) {\n            nextTagsIndex += offset;\n            nextTags = circularIndexedElement(tagsSiblings, nextTagsIndex);\n        }\n        nextTags.focus();\n    };\n\n    private handleFocusout = (): void => {\n        this.removeEventListener('keydown', this.handleKeydown);\n        this.removeEventListener('focusout', this.handleFocusout);\n    };\n\n    private handleSlotchange(): void {\n        this.rovingTabindexController.clearElementCache();\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <slot @slotchange=${this.handleSlotchange}></slot>\n        `;\n    }\n\n    protected override firstUpdated(): void {\n        if (!this.hasAttribute('role')) {\n            this.setAttribute('role', 'list');\n        }\n        if (!this.hasAttribute('aria-label')) {\n            this.setAttribute('aria-label', 'Tags');\n        }\n    }\n}\n"],
  "mappings": "qNAYA,OAEI,QAAAA,EACA,mBAAAC,MAEG,gCACP,OAAS,sBAAAC,MAA0B,kDACnC,OAAS,6BAAAC,MAAiC,uDAC1C,OAAS,4BAAAC,MAAgC,sEAEzC,OAAS,OAAAC,MAAW,WAEpB,OAAOC,MAAY,gBAOZ,aAAM,aAAaH,EAA0BF,CAAe,CAAE,CAwBjE,aAAc,CACV,MAAM,EAXV,8BAA2B,IAAIG,EAA8B,KAAM,CAC/D,aAAeG,GACJA,EAAS,UAAWC,GAChB,CAACA,EAAG,UAAYA,EAAG,SAC7B,EAEL,SAAU,IAAM,KAAK,KACrB,mBAAqBA,GAAY,CAACA,EAAG,UAAYA,EAAG,SACxD,CAAC,EAWD,KAAQ,cAAgB,IAAY,CAChC,KAAK,iBAAiB,WAAY,KAAK,cAAc,EACrD,KAAK,iBAAiB,UAAW,KAAK,aAAa,CACvD,EAEA,KAAQ,cAAiBC,GAA+B,CACpD,KAAM,CAAE,KAAAC,CAAK,EAAID,EACjB,GAAIC,IAAS,UAAYA,IAAS,WAAY,OAE9C,MAAMC,EAAyB,CAC3BC,EACAC,IACID,GAAMA,EAAK,OAASC,GAASD,EAAK,MAAM,EAC1CE,EAAe,CACjB,GAAI,KAAK,YAAY,EAAe,iBAChC,SACJ,CACJ,EACA,GAAIA,EAAa,OAAS,EACtB,OAEJL,EAAM,eAAe,EACrB,MAAMM,EAAeD,EAAa,QAAQ,IAAI,EACxCE,EAASN,IAAS,SAAW,GAAK,EACxC,IAAIO,EAAgBF,EAAeC,EAC/BE,EAAWP,EAAuBG,EAAcG,CAAa,EACjE,KAAO,CAACC,EAAS,KAAK,QAClBD,GAAiBD,EACjBE,EAAWP,EAAuBG,EAAcG,CAAa,EAEjEC,EAAS,MAAM,CACnB,EAEA,KAAQ,eAAiB,IAAY,CACjC,KAAK,oBAAoB,UAAW,KAAK,aAAa,EACtD,KAAK,oBAAoB,WAAY,KAAK,cAAc,CAC5D,EA3CI,KAAK,iBAAiB,UAAW,KAAK,aAAa,CACvD,CA1BA,WAA2B,QAAyB,CAChD,MAAO,CAACZ,CAAM,CAClB,CAKA,IAAW,MAAc,CACrB,OAAO,KAAK,aAAa,OACpBa,GAAUA,aAAgCd,CAC/C,CACJ,CAiBgB,OAAc,CAC1B,KAAK,yBAAyB,MAAM,CACxC,CAwCQ,kBAAyB,CAC7B,KAAK,yBAAyB,kBAAkB,CACpD,CAEmB,QAAyB,CACxC,OAAOL;AAAA,gCACiB,KAAK,gBAAgB;AAAA,SAEjD,CAEmB,cAAqB,CAC/B,KAAK,aAAa,MAAM,GACzB,KAAK,aAAa,OAAQ,MAAM,EAE/B,KAAK,aAAa,YAAY,GAC/B,KAAK,aAAa,aAAc,MAAM,CAE9C,CACJ,CAnFWoB,EAAA,CADNlB,EAAmB,GALX,KAMF",
  "names": ["html", "SpectrumElement", "queryAssignedNodes", "FocusVisiblePolyfillMixin", "RovingTabindexController", "Tag", "styles", "elements", "el", "event", "code", "circularIndexedElement", "list", "index", "tagsSiblings", "currentIndex", "offset", "nextTagsIndex", "nextTags", "node", "__decorateClass"]
}
