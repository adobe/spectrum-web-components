{
  "version": 3,
  "sources": ["color-field.test.ts"],
  "sourcesContent": ["/*\nCopyright 2023 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { elementUpdated, expect, fixture } from '@open-wc/testing';\nimport { ColorField } from '@spectrum-web-components/color-field';\n\nimport { testForLitDevWarnings } from '../../../test/testing-helpers.js';\nimport { Template } from '../stories/template.js';\n\ndescribe('ColorField', () => {\n    testForLitDevWarnings(async () => await fixture<ColorField>(Template({})));\n    it('loads default color-field accessibly', async () => {\n        const el = await fixture<ColorField>(\n            Template({ label: 'Enter color value' })\n        );\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n\n    it('returns empty string from getColorValue when valid is false', async () => {\n        const el = await fixture<ColorField>(Template({}));\n\n        // Set an invalid color value\n        el.value = 'invalid-color';\n        await elementUpdated(el);\n\n        // Ensure the element is invalid\n        expect(el.checkValidity()).to.be.false;\n\n        // Check that getColorValue returns an empty string\n        expect(el.getColorValue()).to.equal('');\n    });\n\n    it('validates rgba color values', async () => {\n        const el = await fixture<ColorField>(Template({}));\n\n        el.value = 'rgba(255, 0, 0, 1)';\n        expect(el.checkValidity()).to.be.true;\n\n        el.value = 'rgba(255, 0, 0, 0.5)';\n        expect(el.checkValidity()).to.be.true;\n\n        el.value = 'rgba(255, 0, 0)';\n\n        expect(el.checkValidity()).to.be.false;\n    });\n\n    it('updates cachedColor when value changes', async () => {\n        const el = await fixture<ColorField>(Template({}));\n\n        // Initial value\n        el.value = '#ff0000';\n        await elementUpdated(el);\n        expect(el.getColorValue()).to.equal('rgb(100% 0% 0%)');\n\n        // Change to a different valid color\n        el.value = '#00ff00';\n        await elementUpdated(el);\n        expect(el.getColorValue()).to.equal('rgb(0% 100% 0%)');\n\n        // Change to an invalid color\n        el.value = 'invalid-color';\n        await elementUpdated(el);\n        //expect(el.getColorValue()).to.equal('');\n\n        // Change back to a valid color\n        el.value = '#0000ff';\n        await elementUpdated(el);\n        expect(el.getColorValue()).to.equal('rgb(0% 0% 100%)');\n    });\n\n    it('validates hex color values', async () => {\n        const el = await fixture<ColorField>(Template({}));\n\n        el.value = '#ff0000';\n        expect(el.checkValidity()).to.be.true;\n\n        el.value = '#008000aa';\n        expect(el.checkValidity()).to.be.true;\n\n        el.value = '#f00a';\n        expect(el.checkValidity()).to.be.true;\n\n        el.value = '#f00';\n        expect(el.checkValidity()).to.be.true;\n\n        el.value = '##F00000000000';\n        expect(el.checkValidity()).to.be.false;\n\n        el.value = '#ff00000.3';\n        expect(el.checkValidity()).to.be.false;\n    });\n\n    it('validates hsl color values', async () => {\n        const el = await fixture<ColorField>(Template({}));\n\n        el.value = 'hsl(120, 100%, 50%)';\n        expect(el.checkValidity()).to.be.true;\n\n        el.value = 'hsl(120, 50%, 50%)';\n        expect(el.checkValidity()).to.be.true;\n\n        el.value = 'hsl(120, 50%)';\n        expect(el.checkValidity()).to.be.false;\n    });\n\n    it('validates hsv color values', async () => {\n        const el = await fixture<ColorField>(Template({}));\n\n        el.value = 'hsv(120, 100%, 50%)';\n        expect(el.checkValidity()).to.be.true;\n\n        el.value = 'hsv(120, 50%, 50%)';\n        expect(el.checkValidity()).to.be.true;\n\n        el.value = 'hsv(120, 50%)';\n        expect(el.checkValidity()).to.be.false;\n    });\n\n    it('handles invalid color values', async () => {\n        const el = await fixture<ColorField>(Template({}));\n\n        el.value = 'not a color';\n        await elementUpdated(el);\n\n        expect(el.checkValidity()).to.be.false;\n    });\n\n    it('renders color handle when viewColor is true', async () => {\n        const el = await fixture<ColorField>(Template({}));\n\n        el.viewColor = true;\n        await elementUpdated(el);\n\n        el.value = '#ff0000';\n        await elementUpdated(el);\n        await elementUpdated(el);\n\n        const colorHandle = el.shadowRoot.querySelector('sp-color-handle');\n        expect(colorHandle).to.not.be.null;\n    });\n\n    it('does not render color handle when viewColor is false', async () => {\n        const el = await fixture<ColorField>(Template({}));\n\n        el.viewColor = false;\n        await elementUpdated(el);\n\n        const colorHandle = el.shadowRoot.querySelector('sp-color-handle');\n        expect(colorHandle).to.be.null;\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
