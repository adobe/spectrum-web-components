{
  "version": 3,
  "sources": ["dialog-base.stories.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { html, TemplateResult } from '@spectrum-web-components/base';\nimport '@spectrum-web-components/button/sp-button.js';\nimport '@spectrum-web-components/checkbox/sp-checkbox.js';\nimport '@spectrum-web-components/dialog/sp-dialog-base.js';\nimport '@spectrum-web-components/dialog/sp-dialog.js';\nimport { trigger } from '@spectrum-web-components/overlay';\nimport { alertDestructive } from './dialog.stories.js';\nimport { portrait } from './images.js';\nimport {\n    disabledButtonWithOverlayDecorator,\n    withOverlayDecorator,\n} from './index.js';\n\nexport default {\n    title: 'Dialog Base',\n    component: 'sp-dialog-base',\n};\n\nexport const slotted = (): TemplateResult => html`\n    <sp-dialog-base\n        underlay\n        @click=${(event: Event) => {\n            if ((event.target as HTMLElement).localName === 'sp-button') {\n                (event.target as HTMLElement).dispatchEvent(\n                    new Event('close', { bubbles: true, composed: true })\n                );\n            }\n        }}\n    >\n        ${alertDestructive()}\n    </sp-dialog-base>\n`;\nslotted.decorators = [withOverlayDecorator];\n\nexport const disabledButton = (): TemplateResult => {\n    return html`\n        <sp-dialog-base\n            underlay\n            @click=${(event: Event) => {\n                if ((event.target as HTMLElement).localName === 'sp-button') {\n                    (event.target as HTMLElement).dispatchEvent(\n                        new Event('close', { bubbles: true, composed: true })\n                    );\n                }\n            }}\n            @sp-opened=${({ target }: Event & { target: HTMLElement }) => {\n                let count = 5;\n                const timer = setInterval(() => {\n                    count -= 1;\n                    if (!count) {\n                        (\n                            document.querySelector(\n                                '#changing-header'\n                            ) as HTMLElement\n                        ).textContent =\n                            'The button in this dialog is now enabled';\n                        (\n                            document.querySelector(\n                                '#changing-button'\n                            ) as HTMLButtonElement\n                        ).disabled = false;\n                        clearInterval(timer);\n                        target.dispatchEvent(new Event('countdown-complete'));\n                    }\n                    (\n                        document.querySelector('.time') as HTMLElement\n                    ).textContent = count.toString();\n                }, 1000);\n            }}\n            @close=${() => {\n                (\n                    document.querySelector('#changing-header') as HTMLElement\n                ).textContent = 'The button in this dialog is disabled';\n                (\n                    document.querySelector(\n                        '#changing-button'\n                    ) as HTMLButtonElement\n                ).disabled = true;\n                (document.querySelector('.time') as HTMLElement).textContent =\n                    '5';\n            }}\n        >\n            <sp-dialog size=\"s\">\n                <h2 slot=\"heading\" id=\"changing-header\">\n                    The button in this dialog is disabled\n                </h2>\n                <p>\n                    After about\n                    <span class=\"time\">5</span>\n                    seconds the button with be enabled.\n                </p>\n                <sp-button disabled slot=\"button\" id=\"changing-button\">\n                    Ok\n                </sp-button>\n            </sp-dialog>\n        </sp-dialog-base>\n    `;\n};\n\ndisabledButton.decorators = [disabledButtonWithOverlayDecorator];\n\nexport const notAgain = (): TemplateResult => html`\n    <sp-dialog-base\n        underlay\n        @click=${(event: Event) => {\n            if ((event.target as HTMLElement).localName === 'sp-button') {\n                (event.target as HTMLElement).dispatchEvent(\n                    new Event('close', { bubbles: true, composed: true })\n                );\n            }\n        }}\n    >\n        <sp-dialog size=\"s\">\n            <h2 slot=\"heading\">A thing is about to happen</h2>\n            <p>Something that might happen a lot is about to happen.</p>\n            <p>\n                The click events for the \"OK\" button are bound to the story not\n                to the components in specific.\n            </p>\n            <sp-button variant=\"secondary\" treatment=\"fill\" slot=\"button\">\n                Ok\n            </sp-button>\n            <sp-checkbox slot=\"footer\">Don't show me this again</sp-checkbox>\n        </sp-dialog>\n    </sp-dialog-base>\n`;\nnotAgain.decorators = [withOverlayDecorator];\n\nexport const moreCustom = (): TemplateResult => html`\n    <sp-dialog-base\n        underlay\n        @click=${(event: Event) => {\n            if ((event.target as HTMLElement).localName === 'sp-button') {\n                (event.target as HTMLElement).dispatchEvent(\n                    new Event('close', { bubbles: true, composed: true })\n                );\n            }\n        }}\n    >\n        <div style=\"display: flex;\">\n            <div\n                style=\"\n                display: grid;\n                place-content: center;\n                grid-template-columns: calc(100% - 40px);\n                grid-template-rows: calc(100% - 40px);\n            \"\n            >\n                <img\n                    src=${portrait}\n                    alt=\"\"\n                    style=\"\n                        width: 100%;\n                        height: 100%;\n                        object-fit: contain;\n                        object-placement: center;\n                    \"\n                />\n            </div>\n            <sp-dialog size=\"s\">\n                <h2 slot=\"heading\">Look at that image</h2>\n                <p>\n                    Its position has been customized beyond the language of\n                    Spectrum. Be careful with all this power. There's no\n                    \"mobile\" default for delivering content like this.\n                </p>\n                <sp-button variant=\"accent\" treatment=\"outline\" slot=\"button\">\n                    Ok\n                </sp-button>\n            </sp-dialog>\n        </div>\n    </sp-dialog-base>\n`;\nmoreCustom.decorators = [withOverlayDecorator];\n\nexport const fullyCustom = (): TemplateResult => html`\n    <sp-dialog-base\n        underlay\n        @click=${(event: Event) => {\n            if ((event.target as HTMLElement).localName === 'button') {\n                (event.target as HTMLElement).dispatchEvent(\n                    new Event('close', { bubbles: true, composed: true })\n                );\n            }\n        }}\n    >\n        <div id=\"fully-custom-dialog\">\n            <style>\n                #fully-custom-dialog {\n                    margin: 1em;\n                }\n            </style>\n            <h2>Custom headline</h2>\n            <p>\n                The click events for the \"Done\" button are bound to the story\n                not to the components in specific.\n            </p>\n            <p>\n                This is a demonstration of what is possible with\n                &lt;sp-dialog-base&gt;, only, and should not be seen as an\n                endorsement for fully custom dialog UIs.\n            </p>\n            <p>Fully open content area, for whatever DOM you would like.</p>\n            <button>Done</button>\n        </div>\n    </sp-dialog-base>\n`;\nfullyCustom.decorators = [withOverlayDecorator];\n\nexport const lazyLoaded = (): TemplateResult => {\n    const template = (): TemplateResult => html`\n        <sp-dialog-base\n            underlay\n            @click=${(event: Event) => {\n                if ((event.target as HTMLElement).localName === 'sp-button') {\n                    (event.target as HTMLElement).dispatchEvent(\n                        new Event('close', { bubbles: true, composed: true })\n                    );\n                }\n            }}\n        >\n            <sp-dialog size=\"m\">\n                <h2 slot=\"heading\">This is a heading</h2>\n                <p>\n                    The click on the \"OK\" button should close the overlay with\n                    the correct animation (duration).\n                </p>\n                <sp-button variant=\"secondary\" treatment=\"fill\" slot=\"button\">\n                    Ok\n                </sp-button>\n            </sp-dialog>\n        </sp-dialog-base>\n    `;\n\n    return html`\n        <sp-button\n            variant=\"primary\"\n            ${trigger(template, {\n                open: false,\n                triggerInteraction: 'click',\n            })}\n        >\n            Open dialog\n        </sp-button>\n    `;\n};\n\nlazyLoaded.swc_vrt = {\n    skip: true,\n};\n"],
  "mappings": "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",
  "names": []
}
