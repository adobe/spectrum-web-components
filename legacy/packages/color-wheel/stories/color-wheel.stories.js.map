{
  "version": 3,
  "sources": ["color-wheel.stories.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { html, TemplateResult } from '@spectrum-web-components/base';\n\nimport '@spectrum-web-components/color-wheel/sp-color-wheel.js';\n\nexport default {\n    title: 'Color/Wheel',\n    component: 'sp-color-wheel',\n};\n\nexport const Default = (): TemplateResult => {\n    return html`\n        <sp-color-wheel></sp-color-wheel>\n    `;\n};\n\nexport const sized = (): TemplateResult => {\n    return html`\n        <sp-color-wheel style=\"width: 300px; height: 300px;\"></sp-color-wheel>\n    `;\n};\n\nexport const wheelDisabled = (): TemplateResult => {\n    return html`\n        <sp-color-wheel disabled></sp-color-wheel>\n    `;\n};\n\nexport const canvas = (): TemplateResult => {\n    return html`\n        <sp-color-wheel>\n            <canvas slot=\"gradient\"></canvas>\n        </sp-color-wheel>\n    `;\n};\n\nclass CanvasWriter extends HTMLElement {\n    writeToCanvas(): void {\n        const { previousElementSibling } = this;\n        if (previousElementSibling) {\n            const canvas = previousElementSibling.querySelector(\n                'canvas[slot=\"gradient\"]'\n            ) as HTMLCanvasElement;\n\n            if (canvas) {\n                canvas.width = canvas.offsetWidth;\n                canvas.height = canvas.offsetHeight;\n                const context = canvas.getContext('2d');\n                if (context) {\n                    context.rect(0, 0, canvas.width, canvas.height);\n\n                    const width = canvas.width;\n                    const height = canvas.height;\n                    const centerX = width / 2;\n                    const centerY = height / 2;\n                    const ringSize = centerX - 18;\n\n                    for (let i = 0; i < 360; i += Math.PI / 8) {\n                        const rad = (i * (2 * Math.PI)) / 360;\n                        context.strokeStyle = `hsla(${i}, 100%, 50%, 1.0)`;\n                        context.beginPath();\n                        context.moveTo(\n                            centerX + ringSize * Math.cos(rad),\n                            centerY + ringSize * Math.sin(rad)\n                        );\n                        context.lineTo(\n                            centerX + centerX * Math.cos(rad),\n                            centerY + centerY * Math.sin(rad)\n                        );\n                        context.stroke();\n                    }\n                }\n            }\n        }\n    }\n\n    constructor() {\n        super();\n        this.writeStatePromise = new Promise((res) => {\n            requestAnimationFrame(() => {\n                this.writeToCanvas();\n                res(true);\n            });\n        });\n    }\n\n    private writeStatePromise: Promise<boolean> = Promise.resolve(false);\n\n    get updateComplete(): Promise<boolean> {\n        return this.writeStatePromise;\n    }\n}\n\ncustomElements.define('wheel-canvas-writer', CanvasWriter);\n\ncanvas.decorators = [\n    (story: () => TemplateResult): TemplateResult => {\n        return html`\n            ${story()}\n            <wheel-canvas-writer></wheel-canvas-writer>\n        `;\n    },\n];\n"],
  "mappings": ";AAYA,SAAS,YAA4B;AAErC,OAAO;AAEP,eAAe;AAAA,EACX,OAAO;AAAA,EACP,WAAW;AACf;AAEO,aAAM,UAAU,MAAsB;AACzC,SAAO;AAAA;AAAA;AAGX;AAEO,aAAM,QAAQ,MAAsB;AACvC,SAAO;AAAA;AAAA;AAGX;AAEO,aAAM,gBAAgB,MAAsB;AAC/C,SAAO;AAAA;AAAA;AAGX;AAEO,aAAM,SAAS,MAAsB;AACxC,SAAO;AAAA;AAAA;AAAA;AAAA;AAKX;AAEA,MAAM,qBAAqB,YAAY;AAAA,EAwCnC,cAAc;AACV,UAAM;AASV,SAAQ,oBAAsC,QAAQ,QAAQ,KAAK;AAR/D,SAAK,oBAAoB,IAAI,QAAQ,CAAC,QAAQ;AAC1C,4BAAsB,MAAM;AACxB,aAAK,cAAc;AACnB,YAAI,IAAI;AAAA,MACZ,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA,EA/CA,gBAAsB;AAClB,UAAM,EAAE,uBAAuB,IAAI;AACnC,QAAI,wBAAwB;AACxB,YAAMA,UAAS,uBAAuB;AAAA,QAClC;AAAA,MACJ;AAEA,UAAIA,SAAQ;AACR,QAAAA,QAAO,QAAQA,QAAO;AACtB,QAAAA,QAAO,SAASA,QAAO;AACvB,cAAM,UAAUA,QAAO,WAAW,IAAI;AACtC,YAAI,SAAS;AACT,kBAAQ,KAAK,GAAG,GAAGA,QAAO,OAAOA,QAAO,MAAM;AAE9C,gBAAM,QAAQA,QAAO;AACrB,gBAAM,SAASA,QAAO;AACtB,gBAAM,UAAU,QAAQ;AACxB,gBAAM,UAAU,SAAS;AACzB,gBAAM,WAAW,UAAU;AAE3B,mBAAS,IAAI,GAAG,IAAI,KAAK,KAAK,KAAK,KAAK,GAAG;AACvC,kBAAM,MAAO,KAAK,IAAI,KAAK,MAAO;AAClC,oBAAQ,cAAc,QAAQ,CAAC;AAC/B,oBAAQ,UAAU;AAClB,oBAAQ;AAAA,cACJ,UAAU,WAAW,KAAK,IAAI,GAAG;AAAA,cACjC,UAAU,WAAW,KAAK,IAAI,GAAG;AAAA,YACrC;AACA,oBAAQ;AAAA,cACJ,UAAU,UAAU,KAAK,IAAI,GAAG;AAAA,cAChC,UAAU,UAAU,KAAK,IAAI,GAAG;AAAA,YACpC;AACA,oBAAQ,OAAO;AAAA,UACnB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAcA,IAAI,iBAAmC;AACnC,WAAO,KAAK;AAAA,EAChB;AACJ;AAEA,eAAe,OAAO,uBAAuB,YAAY;AAEzD,OAAO,aAAa;AAAA,EAChB,CAAC,UAAgD;AAC7C,WAAO;AAAA,cACD,MAAM,CAAC;AAAA;AAAA;AAAA,EAGjB;AACJ;",
  "names": ["canvas"]
}
