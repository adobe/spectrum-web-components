{
  "version": 3,
  "sources": ["SplitView.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    LitElement,\n    nothing,\n    PropertyValues,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    classMap,\n    ifDefined,\n} from '@spectrum-web-components/base/src/directives.js';\nimport {\n    property,\n    query,\n    state,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { streamingListener } from '@spectrum-web-components/base/src/streaming-listener.js';\nimport { randomID } from '@spectrum-web-components/shared/src/random-id.js';\n\nimport { WithSWCResizeObserver } from './types';\n\nimport styles from './split-view.css.js';\n\nconst DEFAULT_MAX_SIZE = 3840;\n\nconst SPLITTERSIZE = 2;\n\nconst ARROW_KEY_CHANGE_VALUE = 10;\n\nconst PAGEUPDOWN_KEY_CHANGE_VALUE = 50;\n\nconst COLLAPSE_THREASHOLD = 50;\n\n/**\n * @element sp-split-view\n *\n * @slot Two sibling elements to be sized by the element attritubes\n * @fires change - Announces the new position of the splitter\n */\nexport class SplitView extends SpectrumElement {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    @state()\n    public controlledEl?: HTMLElement;\n\n    @property({ type: Boolean, reflect: true })\n    public vertical = false;\n\n    @property({ type: Boolean, reflect: true })\n    public resizable = false;\n\n    @property({ type: Boolean, reflect: true })\n    public collapsible = false;\n\n    /** The minimum size of the primary pane */\n    @property({ type: Number, attribute: 'primary-min' })\n    public primaryMin = 0;\n\n    /** The maximum size of the primary pane */\n    @property({ type: Number, attribute: 'primary-max' })\n    public primaryMax = DEFAULT_MAX_SIZE;\n\n    /**\n     * The start size of the primary pane, can be a real pixel number|string, percentage or \"auto\"\n     * For example: \"100\", \"120px\", \"75%\" or \"auto\" are valid values\n     * @type {number |\u00A0number + \"px\" | number + \"%\" | \"auto\"}\n     * @attr\n     */\n    @property({ type: String, attribute: 'primary-size' })\n    public primarySize?: string;\n\n    /** The minimum size of the secondary pane */\n    @property({ type: Number, attribute: 'secondary-min' })\n    public secondaryMin = 0;\n\n    /** The maximum size of the secondary pane */\n    @property({ type: Number, attribute: 'secondary-max' })\n    public secondaryMax = DEFAULT_MAX_SIZE;\n\n    /** The current splitter position of split-view */\n    @property({ type: Number, reflect: true, attribute: 'splitter-pos' })\n    public splitterPos?: number;\n\n    /** The current size of first pane of split-view */\n    @property({ type: String, attribute: false })\n    private firstPaneSize = 'auto';\n\n    @property()\n    public label?: string;\n\n    @property({ type: Boolean, attribute: false })\n    private enoughChildren = false;\n\n    @property({ type: Number })\n    private viewSize = 0;\n\n    @query('slot')\n    private paneSlot!: HTMLSlotElement;\n\n    @query('#splitter')\n    private splitter!: HTMLDivElement;\n\n    private offset = 0;\n\n    private minPos = 0;\n\n    private maxPos = DEFAULT_MAX_SIZE;\n\n    private observer?: WithSWCResizeObserver['ResizeObserver'];\n\n    private rect?: DOMRect;\n\n    private _splitterSize?: number;\n\n    public constructor() {\n        super();\n        const RO = (window as unknown as WithSWCResizeObserver).ResizeObserver;\n        if (RO) {\n            this.observer = new RO(() => {\n                this.rect = undefined;\n                this.updateMinMax();\n            });\n        }\n    }\n\n    public override connectedCallback(): void {\n        super.connectedCallback();\n        this.observer?.observe(this);\n    }\n\n    public override disconnectedCallback(): void {\n        this.observer?.unobserve(this);\n        super.disconnectedCallback();\n    }\n\n    /**\n     * @private\n     **/\n    public get splitterSize(): number {\n        if (!this._splitterSize) {\n            this._splitterSize =\n                (this.splitter &&\n                    Math.round(\n                        parseFloat(\n                            window\n                                .getComputedStyle(this.splitter)\n                                .getPropertyValue(\n                                    this.vertical ? 'height' : 'width'\n                                )\n                        )\n                    )) ||\n                SPLITTERSIZE;\n        }\n        return this._splitterSize;\n    }\n\n    protected override render(): TemplateResult {\n        const splitterClasses = {\n            'is-resized-start': this.splitterPos === this.minPos,\n            'is-resized-end': (this.splitterPos &&\n                this.splitterPos > this.splitterSize &&\n                this.splitterPos === this.maxPos) as boolean,\n            'is-collapsed-start': this.splitterPos === 0,\n            'is-collapsed-end': (this.splitterPos &&\n                this.splitterPos >=\n                    Math.max(\n                        this.splitterSize,\n                        this.viewSize - this.splitterSize\n                    )) as boolean,\n        };\n        const label = this.resizable\n            ? this.label || 'Resize the panels'\n            : undefined;\n\n        return html`\n            <slot\n                id=${ifDefined(\n                    this.resizable ? this.controlledEl?.id : undefined\n                )}\n                @slotchange=${this.onContentSlotChange}\n                style=\"--spectrum-split-view-first-pane-size: ${this\n                    .firstPaneSize}\"\n            ></slot>\n            ${this.enoughChildren\n                ? html`\n                      <div\n                          id=\"splitter\"\n                          class=${classMap(splitterClasses)}\n                          role=\"separator\"\n                          aria-controls=${ifDefined(\n                              this.resizable ? this.controlledEl?.id : undefined\n                          )}\n                          aria-label=${ifDefined(label)}\n                          aria-orientation=${this.vertical\n                              ? 'horizontal'\n                              : 'vertical'}\n                          aria-valuenow=${Math.round(\n                              (parseFloat(this.firstPaneSize) / this.viewSize) *\n                                  100\n                          )}\n                          tabindex=${ifDefined(\n                              this.resizable ? '0' : undefined\n                          )}\n                          @keydown=${this.onKeydown}\n                          ${streamingListener({\n                              start: ['pointerdown', this.onPointerdown],\n                              streamInside: ['pointermove', this.onPointermove],\n                              end: [\n                                  [\n                                      'pointerup',\n                                      'pointercancel',\n                                      'pointerleave',\n                                  ],\n                                  this.onPointerup,\n                              ],\n                          })}\n                      >\n                          ${this.resizable\n                              ? html`\n                                    <div id=\"gripper\"></div>\n                                `\n                              : nothing}\n                      </div>\n                  `\n                : nothing}\n        `;\n    }\n\n    private controlledElIDApplied = false;\n\n    private onContentSlotChange(\n        event: Event & { target: HTMLSlotElement }\n    ): void {\n        if (this.controlledEl && this.controlledElIDApplied) {\n            this.controlledEl.removeAttribute('id');\n            this.controlledElIDApplied = false;\n        }\n        this.controlledEl = event.target.assignedElements()[0] as HTMLElement;\n        if (this.controlledEl && !this.controlledEl.id) {\n            this.controlledEl.id = `${this.tagName.toLowerCase()}-${randomID()}`;\n            this.controlledElIDApplied = true;\n        }\n        this.enoughChildren = this.children.length > 1;\n        this.checkResize();\n    }\n\n    private onPointerdown(event: PointerEvent): void {\n        if (!this.resizable || (event.button && event.button !== 0)) {\n            event.preventDefault();\n            return;\n        }\n        this.splitter.setPointerCapture(event.pointerId);\n        this.offset = this.getOffset();\n    }\n\n    private onPointermove(event: PointerEvent): void {\n        event.preventDefault();\n        let pos =\n            this.vertical || this.isLTR\n                ? this.getPosition(event) - this.offset\n                : this.offset - this.getPosition(event);\n        if (this.collapsible && pos < this.minPos - COLLAPSE_THREASHOLD) {\n            pos = 0;\n        }\n        if (this.collapsible && pos > this.maxPos + COLLAPSE_THREASHOLD) {\n            pos = this.viewSize - this.splitterSize;\n        }\n        this.updatePosition(pos);\n    }\n\n    private onPointerup(event: PointerEvent): void {\n        this.splitter.releasePointerCapture(event.pointerId);\n    }\n\n    private getOffset(): number {\n        if (!this.rect) {\n            this.rect = this.getBoundingClientRect();\n        }\n        const offsetX = this.isLTR ? this.rect.left : this.rect.right;\n        return this.vertical ? this.rect.top : offsetX;\n    }\n\n    private getPosition(event: PointerEvent): number {\n        return this.vertical ? event.clientY : event.clientX;\n    }\n\n    private movePosition(event: KeyboardEvent, offset: number): void {\n        event.preventDefault();\n        if (this.splitterPos !== undefined) {\n            this.updatePosition(this.splitterPos + offset);\n        }\n    }\n\n    private onKeydown(event: KeyboardEvent): void {\n        if (!this.resizable) {\n            return;\n        }\n        let direction = 0;\n        const isLTRorVertical = this.isLTR || this.vertical;\n        switch (event.key) {\n            case 'Home':\n                event.preventDefault();\n                this.updatePosition(this.collapsible ? 0 : this.minPos);\n                return;\n            case 'End':\n                event.preventDefault();\n                this.updatePosition(\n                    this.collapsible\n                        ? this.viewSize - this.splitterSize\n                        : this.maxPos\n                );\n                return;\n            case 'ArrowLeft':\n                direction = isLTRorVertical ? -1 : 1;\n                break;\n            case 'ArrowRight':\n                direction = isLTRorVertical ? 1 : -1;\n                break;\n            case 'ArrowUp':\n                direction = this.vertical ? -1 : 1;\n                break;\n            case 'ArrowDown':\n                direction = this.vertical ? 1 : -1;\n                break;\n            case 'PageUp':\n                direction = this.vertical ? -1 : 1;\n                break;\n            case 'PageDown':\n                direction = this.vertical ? 1 : -1;\n                break;\n        }\n        if (direction !== 0) {\n            const moveBy = event.key.startsWith('Page')\n                ? PAGEUPDOWN_KEY_CHANGE_VALUE\n                : ARROW_KEY_CHANGE_VALUE;\n            this.movePosition(event, moveBy * direction);\n        }\n    }\n\n    private async checkResize(): Promise<void> {\n        if (!this.enoughChildren) {\n            return;\n        }\n        this.updateMinMax();\n        if (this.splitterPos === undefined) {\n            const startPos = await this.calcStartPos();\n            this.updatePosition(startPos);\n        }\n    }\n\n    private updateMinMax(): void {\n        this.viewSize = this.vertical ? this.offsetHeight : this.offsetWidth;\n        this.minPos = Math.max(\n            this.primaryMin,\n            this.viewSize - this.secondaryMax\n        );\n        this.maxPos = Math.min(\n            this.primaryMax,\n            this.viewSize - Math.max(this.secondaryMin, this.splitterSize)\n        );\n    }\n\n    private updatePosition(x: number): void {\n        let pos = this.getLimitedPosition(x);\n        if (this.collapsible && x <= 0) {\n            pos = 0;\n        }\n        if (\n            this.collapsible &&\n            x > this.maxPos &&\n            x >= this.viewSize - this.splitterSize\n        ) {\n            pos = this.viewSize - this.splitterSize;\n        }\n        if (pos !== this.splitterPos) {\n            this.splitterPos = pos;\n            this.dispatchChangeEvent();\n        }\n    }\n\n    private getLimitedPosition(input: number): number {\n        if (input <= this.minPos) {\n            return this.minPos;\n        }\n        if (input >= this.maxPos) {\n            return this.maxPos;\n        }\n        return Math.max(this.minPos, Math.min(this.maxPos, input));\n    }\n\n    private async calcStartPos(): Promise<number> {\n        if (\n            this.primarySize !== undefined &&\n            /^\\d+(px)?$/.test(this.primarySize)\n        ) {\n            return parseInt(this.primarySize, 10);\n        }\n        if (this.primarySize !== undefined && /^\\d+%$/.test(this.primarySize)) {\n            return (parseInt(this.primarySize, 10) * this.viewSize) / 100;\n        }\n        if (this.primarySize === 'auto') {\n            this.firstPaneSize = 'auto';\n            const nodes = this.paneSlot.assignedNodes({ flatten: true });\n            const firstEl = nodes.find(\n                (node) => node instanceof HTMLElement\n            ) as LitElement;\n            if (typeof firstEl.updateComplete !== 'undefined') {\n                await firstEl.updateComplete;\n            }\n            if (firstEl) {\n                const size = window\n                    .getComputedStyle(firstEl)\n                    .getPropertyValue(this.vertical ? 'height' : 'width');\n                const size_i = parseFloat(size);\n                if (!isNaN(size_i)) {\n                    return this.getLimitedPosition(Math.ceil(size_i));\n                }\n            }\n        }\n        return this.viewSize / 2;\n    }\n\n    private dispatchChangeEvent(): void {\n        const changeEvent = new Event('change', {\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(changeEvent);\n    }\n\n    protected override willUpdate(changed: PropertyValues): void {\n        if (!this.hasUpdated || changed.has('primarySize')) {\n            this.splitterPos = undefined;\n            this.checkResize();\n        }\n        if (\n            changed.has('splitterPos') &&\n            this.splitterPos !== undefined &&\n            this.enoughChildren\n        ) {\n            this.firstPaneSize = `${Math.round(this.splitterPos)}px`;\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["html", "nothing", "SpectrumElement", "classMap", "ifDefined", "property", "query", "state", "streamingListener", "randomID", "styles", "DEFAULT_MAX_SIZE", "SPLITTERSIZE", "ARROW_KEY_CHANGE_VALUE", "PAGEUPDOWN_KEY_CHANGE_VALUE", "COLLAPSE_THREASHOLD", "RO", "_a", "_b", "splitterClasses", "label", "event", "pos", "offsetX", "offset", "direction", "isLTRorVertical", "moveBy", "startPos", "x", "input", "firstEl", "node", "size", "size_i", "changeEvent", "changed", "__decorateClass"]
}
