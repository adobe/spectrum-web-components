{
  "version": 3,
  "sources": ["iconset-registry.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { Iconset } from './iconset.js';\nexport interface IconsetAddedDetail {\n    name: string;\n    iconset: Iconset;\n}\nexport interface IconsetRemovedDetail {\n    name: string;\n}\n\nexport class IconsetRegistry {\n    // singleton getter\n    public static getInstance(): IconsetRegistry {\n        if (!IconsetRegistry.instance) {\n            IconsetRegistry.instance = new IconsetRegistry();\n        }\n        return IconsetRegistry.instance;\n    }\n    private static instance: IconsetRegistry;\n\n    private iconsetMap = new Map<string, Iconset>();\n\n    public addIconset(name: string, iconset: Iconset): void {\n        this.iconsetMap.set(name, iconset);\n\n        // dispatch a sp-iconset-added event on window to let everyone know we have a new iconset\n        // note we're using window here for efficiency since we don't need to bubble through the dom since everyone\n        // will know where to look for this event\n        const event = new CustomEvent('sp-iconset-added', {\n            bubbles: true,\n            composed: true,\n            detail: { name, iconset },\n        });\n        // we're dispatching this event in the next tick to allow the iconset to finish any slotchange or other event\n        // listeners caused by connection to the dom and first render to complete, this way any icons listening for\n        // this iconset will be able to access the completed iconset\n        setTimeout(() => window.dispatchEvent(event), 0);\n    }\n    public removeIconset(name: string): void {\n        this.iconsetMap.delete(name);\n        // dispatch a sp-iconset-removed event on window to let everyone know we have a new iconset\n        // note we're using window here for efficiency since we don't need to bubble through the dom since everyone\n        // will know where to look for this event\n        const event = new CustomEvent('sp-iconset-removed', {\n            bubbles: true,\n            composed: true,\n            detail: { name },\n        });\n        // we're dispatching this event in the next tick To keep the event model consistent with the added event\n        setTimeout(() => window.dispatchEvent(event), 0);\n    }\n    public getIconset(name: string): Iconset | undefined {\n        return this.iconsetMap.get(name);\n    }\n}\n\ndeclare global {\n    interface GlobalEventHandlersEventMap {\n        'sp-iconset-added': CustomEvent<IconsetAddedDetail>;\n        'sp-iconset-removed': CustomEvent<IconsetRemovedDetail>;\n    }\n}\n"],
  "mappings": "aAoBO,aAAM,eAAgB,CAAtB,cAUH,KAAQ,WAAa,IAAI,IARzB,OAAc,aAA+B,CACzC,OAAK,gBAAgB,WACjB,gBAAgB,SAAW,IAAI,iBAE5B,gBAAgB,QAC3B,CAKO,WAAWA,EAAcC,EAAwB,CACpD,KAAK,WAAW,IAAID,EAAMC,CAAO,EAKjC,MAAMC,EAAQ,IAAI,YAAY,mBAAoB,CAC9C,QAAS,GACT,SAAU,GACV,OAAQ,CAAE,KAAAF,EAAM,QAAAC,CAAQ,CAC5B,CAAC,EAID,WAAW,IAAM,OAAO,cAAcC,CAAK,EAAG,CAAC,CACnD,CACO,cAAcF,EAAoB,CACrC,KAAK,WAAW,OAAOA,CAAI,EAI3B,MAAME,EAAQ,IAAI,YAAY,qBAAsB,CAChD,QAAS,GACT,SAAU,GACV,OAAQ,CAAE,KAAAF,CAAK,CACnB,CAAC,EAED,WAAW,IAAM,OAAO,cAAcE,CAAK,EAAG,CAAC,CACnD,CACO,WAAWF,EAAmC,CACjD,OAAO,KAAK,WAAW,IAAIA,CAAI,CACnC,CACJ",
  "names": ["name", "iconset", "event"]
}
