{
  "version": 3,
  "sources": ["InteractionController.ts"],
  "sourcesContent": ["/*\nCopyright 2024 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    ReactiveController,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { AbstractOverlay } from '@spectrum-web-components/overlay/src/AbstractOverlay';\nimport { Overlay } from '@spectrum-web-components/overlay/src/Overlay.js';\nimport { PickerBase } from './Picker.dev.js'\n\nexport enum InteractionTypes {\n    'desktop',\n    'mobile',\n}\nexport const SAFARI_FOCUS_RING_CLASS = 'remove-focus-ring-safari-hack';\n\nexport class InteractionController implements ReactiveController {\n    abortController!: AbortController;\n\n    public preventNextToggle: 'no' | 'maybe' | 'yes' = 'no';\n    public pointerdownState = false;\n    public enterKeydownOn: EventTarget | null = null;\n\n    public container!: TemplateResult;\n\n    get activelyOpening(): boolean {\n        return false;\n    }\n\n    private _open = false;\n\n    public get open(): boolean {\n        return this._open;\n    }\n\n    /**\n     * Set `open`\n     */\n    public set open(open: boolean) {\n        if (this._open === open) return;\n        this._open = open;\n\n        if (this.overlay) {\n            this.host.open = open;\n            return;\n        }\n\n        // When there is no Overlay and `open` is moving to `true`, lazily import/create\n        // an Overlay and apply that state to it.\n        customElements\n            .whenDefined('sp-overlay')\n            .then(async (): Promise<void> => {\n                const { Overlay } = await import(\n                    '@spectrum-web-components/overlay/src/Overlay.js'\n                );\n                this.overlay = new Overlay();\n                this.host.open = true;\n                this.host.requestUpdate();\n            });\n        import('@spectrum-web-components/overlay/sp-overlay.js');\n    }\n\n    private _overlay!: AbstractOverlay;\n\n    public get overlay(): AbstractOverlay {\n        return this._overlay;\n    }\n\n    public set overlay(overlay: AbstractOverlay | undefined) {\n        if (!overlay) return;\n        if (this.overlay === overlay) return;\n        this._overlay = overlay;\n        this.initOverlay();\n    }\n\n    type!: InteractionTypes;\n\n    constructor(\n        public target: HTMLElement,\n        public host: PickerBase\n    ) {\n        this.target = target;\n        this.host = host;\n        this.host.addController(this);\n        this.init();\n    }\n\n    releaseDescription(): void {}\n\n    protected handleBeforetoggle(\n        event: Event & {\n            target: Overlay;\n            newState: 'open' | 'closed';\n        }\n    ): void {\n        if (event.composedPath()[0] !== event.target) {\n            return;\n        }\n        if (event.newState === 'closed') {\n            if (this.preventNextToggle === 'no') {\n                this.open = false;\n            } else if (!this.pointerdownState) {\n                // Prevent browser driven closure while opening the Picker\n                // and the expected event series has not completed.\n                this.overlay?.manuallyKeepOpen();\n            }\n        }\n        if (!this.open) {\n            this.host.optionsMenu.updateSelectedItemIndex();\n            this.host.optionsMenu.closeDescendentOverlays();\n        }\n    }\n\n    initOverlay(): void {\n        if (this.overlay) {\n            this.overlay.addEventListener('beforetoggle', (event: Event) => {\n                this.handleBeforetoggle(\n                    event as Event & {\n                        target: Overlay;\n                        newState: 'open' | 'closed';\n                    }\n                );\n            });\n            this.overlay.type =\n                this.host.isMobile.matches && !this.host.forcePopover\n                    ? 'modal'\n                    : 'auto';\n            this.overlay.triggerElement = this.host as HTMLElement;\n            this.overlay.placement =\n                this.host.isMobile.matches && !this.host.forcePopover\n                    ? undefined\n                    : this.host.placement;\n            // We should not be applying open is set programmatically via the picker's open.property.\n            // Focus should only be applied if a user action causes the menu to open. Otherwise,\n            // we could be pulling focus from a user when an picker with an open menu loads.\n            this.overlay.receivesFocus = 'false';\n            this.overlay.willPreventClose =\n                this.preventNextToggle !== 'no' && this.open;\n            this.overlay.addEventListener(\n                'slottable-request',\n                this.host.handleSlottableRequest\n            );\n        }\n    }\n\n    public handlePointerdown(_event: PointerEvent): void {}\n\n    public handleButtonFocus(event: FocusEvent): void {\n        // When focus comes from a pointer event, and the related target is the Menu,\n        // we don't want to reopen the Menu.\n        if (\n            this.preventNextToggle === 'maybe' &&\n            event.relatedTarget === this.host.optionsMenu\n        ) {\n            this.preventNextToggle = 'yes';\n        }\n        if (this.preventNextToggle === 'no') this.host.close();\n    }\n\n    public handleActivate(_event: Event): void {}\n\n    /* c8 ignore next 3 */\n    init(): void {}\n\n    abort(): void {\n        this.releaseDescription();\n        this.abortController?.abort();\n    }\n\n    hostConnected(): void {\n        this.init();\n        this.host.addEventListener('sp-opened', () => {\n            /**\n             * set shouldSupportDragAndSelect to false for mobile\n             * to prevent click event being captured behind the menu-tray\n             * we do this here because the menu gets reinitialized on overlay open\n             */\n            this.host.optionsMenu.shouldSupportDragAndSelect =\n                !this.host.isMobile.matches;\n        });\n        this.host.addEventListener('sp-closed', () => {\n            if (\n                !this.open &&\n                this.host.optionsMenu.matches(':focus-within') &&\n                !this.host.button.matches(':focus')\n            ) {\n                this.host.button.focus();\n            }\n        });\n    }\n\n    hostDisconnected(): void {\n        this.abortController?.abort();\n    }\n\n    public hostUpdated(): void {\n        if (\n            this.overlay &&\n            this.host.dependencyManager.loaded &&\n            this.host.open !== this.overlay.open\n        ) {\n            this.overlay.willPreventClose = this.preventNextToggle !== 'no';\n            this.overlay.open = this.host.open;\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["InteractionTypes", "Overlay"]
}
