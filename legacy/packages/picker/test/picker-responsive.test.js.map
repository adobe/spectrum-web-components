{
  "version": 3,
  "sources": ["picker-responsive.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    nextFrame,\n    oneEvent,\n    waitUntil,\n} from '@open-wc/testing';\nimport '@spectrum-web-components/field-label/sp-field-label.js';\nimport '@spectrum-web-components/menu/sp-menu-divider.js';\nimport '@spectrum-web-components/menu/sp-menu-item.js';\nimport { Picker } from '@spectrum-web-components/picker';\nimport '@spectrum-web-components/picker/sync/sp-picker.js';\nimport { setViewport } from '@web/test-runner-commands';\nimport { spreadProps } from '../../../test/lit-helpers.js';\nimport { sendMouse } from '../../../test/plugins/browser.js';\nimport { isChrome } from '@spectrum-web-components/shared';\n\ndescribe('Picker, responsive', () => {\n    let el: Picker;\n    const pickerFixture = async (args?: {\n        forcePopover: boolean;\n    }): Promise<Picker> => {\n        const test = await fixture<HTMLDivElement>(html`\n            <div>\n                <sp-field-label for=\"picker\">Where do you live?</sp-field-label>\n                <sp-picker\n                    id=\"picker\"\n                    style=\"width: 200px; --spectrum-alias-ui-icon-chevron-size-100: 10px;\"\n                    ${spreadProps(args || {})}\n                >\n                    <sp-menu-item>Deselect</sp-menu-item>\n                    <sp-menu-item value=\"option-2\">Select Inverse</sp-menu-item>\n                    <sp-menu-item>Feather...</sp-menu-item>\n                    <sp-menu-item>Select and Mask...</sp-menu-item>\n                    <sp-menu-divider></sp-menu-divider>\n                    <sp-menu-item>Save Selection</sp-menu-item>\n                    <sp-menu-item disabled>Make Work Path</sp-menu-item>\n                </sp-picker>\n            </div>\n        `);\n\n        return test.querySelector('sp-picker') as Picker;\n    };\n\n    describe('container', () => {\n        beforeEach(async () => {\n            el = await pickerFixture();\n            await elementUpdated(el);\n        });\n\n        it('is a Tray in mobile', async () => {\n            /**\n             * This is a hack to set the `isMobile` property to true so that we can test the MobileController\n             */\n            el.isMobile.matches = true;\n            el.bindEvents();\n\n            /**\n             * While we can set the view port, but not `(hover: none) and (pointer: coarse)`\n             * which prevents us from testing this at unit time. Hopefully there will be\n             * a future version of Playwright and/or @web/test-runner that does allow this.\n             * See: https://github.com/microsoft/playwright/issues/11781\n             **/\n            await setViewport({ width: 360, height: 640 });\n            // Allow viewport update to propagate.\n            await nextFrame();\n\n            const opened = oneEvent(el, 'sp-opened');\n\n            const boundingRect = el.button.getBoundingClientRect();\n            sendMouse({\n                steps: [\n                    {\n                        type: 'click',\n                        position: [\n                            boundingRect.x + boundingRect.width / 2,\n                            boundingRect.y + boundingRect.height / 2,\n                        ],\n                    },\n                ],\n            });\n\n            await opened;\n\n            const tray = el.shadowRoot.querySelector('sp-tray');\n            const popover = el.shadowRoot.querySelector('sp-popover');\n\n            expect(tray).to.not.be.null;\n            expect(popover).to.be.null;\n        });\n\n        it('is a Popover in desktop', async () => {\n            await setViewport({ width: 701, height: 640 });\n            // Allow viewport update to propagate.\n            await nextFrame();\n            await nextFrame();\n\n            const opened = oneEvent(el, 'sp-opened');\n            el.open = true;\n            await opened;\n\n            const popover = el.shadowRoot.querySelector('sp-popover');\n            const tray = el.shadowRoot.querySelector('sp-tray');\n\n            expect(popover).to.not.be.null;\n            expect(tray).to.be.null;\n        });\n    });\n\n    describe('forcePopover', () => {\n        beforeEach(async () => {\n            el = await pickerFixture({ forcePopover: true });\n            await elementUpdated(el);\n        });\n\n        it('is a Popover in mobile', async function () {\n            // This test is flaky in chrome on ci so we're skipping it for now\n            if (isChrome()) {\n                return;\n            }\n\n            /**\n             * This is a hack to set the `isMobile` property to true so that we can test the MobileController\n             */\n            el.isMobile.matches = true;\n            el.bindEvents();\n            await elementUpdated(el);\n\n            /**\n             * While we can set the view port, but not `(hover: none) and (pointer: coarse)`\n             * which prevents us from testing this at unit time. Hopefully there will be\n             * a future version of Playwright and/or @web/test-runner that does allow this.\n             * See: https://github.com/microsoft/playwright/issues/11781\n             **/\n            await setViewport({ width: 360, height: 640 });\n\n            // Wait until the element is fully updated after viewport change\n            await waitUntil(\n                () => el.offsetWidth > 0,\n                'Element should be visible'\n            );\n            await elementUpdated(el);\n\n            // Setup event listener before clicking\n            const opened = oneEvent(el, 'sp-opened');\n\n            const boundingRect = el.button.getBoundingClientRect();\n            sendMouse({\n                steps: [\n                    {\n                        type: 'click',\n                        position: [\n                            boundingRect.x + boundingRect.width / 2,\n                            boundingRect.y + boundingRect.height / 2,\n                        ],\n                    },\n                ],\n            });\n\n            // Wait for element to update after click\n            await elementUpdated(el);\n\n            // Wait for the opened event with a more explicit error message\n            await opened.catch(() => {\n                throw new Error(\n                    'sp-opened event was not fired within the timeout period'\n                );\n            });\n\n            // Wait until the popover is actually in the DOM\n            await waitUntil(\n                () => el.shadowRoot.querySelector('sp-popover') !== null,\n                'Popover should be present in the DOM'\n            );\n\n            const tray = el.shadowRoot.querySelector('sp-tray');\n            const popover = el.shadowRoot.querySelector('sp-popover');\n\n            expect(popover).to.not.be.null;\n            expect(tray).to.be.null;\n        });\n\n        it('is a Popover in desktop', async () => {\n            await setViewport({ width: 701, height: 640 });\n            // Allow viewport update to propagate.\n            await nextFrame();\n            await nextFrame();\n\n            const opened = oneEvent(el, 'sp-opened');\n            el.open = true;\n            await opened;\n\n            const popover = el.shadowRoot.querySelector('sp-popover');\n            const tray = el.shadowRoot.querySelector('sp-tray');\n\n            expect(tray).to.be.null;\n            expect(popover).to.not.be.null;\n        });\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
