{
  "version": 3,
  "sources": ["tabs.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport '@spectrum-web-components/tabs/sp-tabs.js';\nimport '@spectrum-web-components/tabs/sp-tab.js';\nimport '@spectrum-web-components/tabs/sp-tab-panel.js';\nimport { Tab, TabPanel, Tabs } from '@spectrum-web-components/tabs';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-checkmark.js';\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    nextFrame,\n    waitUntil,\n} from '@open-wc/testing';\nimport { html } from 'lit/static-html.js';\nimport { LitElement, TemplateResult } from '@spectrum-web-components/base';\nimport {\n    arrowDownEvent,\n    arrowLeftEvent,\n    arrowRightEvent,\n    arrowUpEvent,\n    enterEvent,\n    spaceEvent,\n} from '../../../test/testing-helpers.js';\nimport { sendKeys } from '@web/test-runner-commands';\n\nconst createTabs = async (): Promise<Tabs> => {\n    const tabs = await fixture<Tabs>(html`\n        <sp-tabs selected=\"first\">\n            <sp-tab label=\"Tab 1\" value=\"first\"></sp-tab>\n            <sp-tab label=\"Tab 2\" value=\"second\"></sp-tab>\n            <sp-tab label=\"Tab 3\" value=\"third\"></sp-tab>\n            <sp-tab-panel value=\"first\">First tab content</sp-tab-panel>\n            <sp-tab-panel value=\"second\">Second tab content</sp-tab-panel>\n            <sp-tab-panel value=\"third\">Third tab content</sp-tab-panel>\n        </sp-tabs>\n    `);\n    await elementUpdated(tabs);\n    return tabs;\n};\n\ndescribe('Tabs', () => {\n    it('loads accessibly', async () => {\n        const tabs = await createTabs();\n\n        const tabList = tabs.querySelectorAll('sp-tab');\n\n        expect(tabList).to.exist;\n        expect(tabList.length).to.equal(3);\n\n        await expect(tabs).to.be.accessible();\n    });\n\n    it('loads accessibly w/o panels', async () => {\n        const tabs = await fixture<Tabs>(html`\n            <sp-tabs selected=\"first\">\n                <sp-tab value=\"first\">Tab 1</sp-tab>\n                <sp-tab value=\"second\">Tab 2</sp-tab>\n                <sp-tab value=\"third\">Tab 3</sp-tab>\n            </sp-tabs>\n        `);\n\n        const tabList = tabs.querySelectorAll('sp-tab');\n\n        expect(tabList).to.exist;\n        expect(tabList.length).to.equal(3);\n\n        await expect(tabs).to.be.accessible();\n    });\n\n    it('can be disabled', async () => {\n        const tabs = await createTabs();\n        const tab = tabs.querySelector('[label=\"Tab 3\"]') as Tab;\n        tabs.disabled = true;\n        await elementUpdated(tabs);\n        expect(tabs.selected).to.equal('first');\n        tab.click();\n        await elementUpdated(tabs);\n        expect(tabs.selected).to.equal('first');\n    });\n\n    it('can have disabled state set to true and then to false', async () => {\n        const tabs = await createTabs();\n        tabs.disabled = true;\n        await elementUpdated(tabs);\n\n        expect(tabs.selected).to.equal('first');\n        const selectedTab = tabs.querySelector('sp-tab[selected]') as Tab;\n        expect(selectedTab.disabled).to.be.true;\n\n        const anotherTab = tabs.querySelector('[label=\"Tab 3\"]') as Tab;\n        anotherTab.click();\n        await elementUpdated(tabs);\n        expect(tabs.selected).to.equal('first');\n\n        tabs.disabled = false;\n        await elementUpdated(tabs);\n        expect(tabs.selected).to.equal('first');\n        expect(selectedTab.disabled).to.be.false;\n    });\n\n    it('can have disabled sp-tab children', async () => {\n        const tabs = await createTabs();\n        const tab2 = tabs.querySelector('[label=\"Tab 2\"]') as Tab;\n        const tab3 = tabs.querySelector('[label=\"Tab 3\"]') as Tab;\n        tab3.disabled = true;\n        await elementUpdated(tab3);\n        expect(tabs.selected).to.equal('first');\n        tab3.click();\n        await elementUpdated(tabs);\n        expect(tabs.selected).to.equal('first');\n        tab2.click();\n        await elementUpdated(tabs);\n        expect(tabs.selected).to.equal('second');\n    });\n\n    it('reflects selected tab with selected property', async () => {\n        const tabs = await createTabs();\n\n        const firstTab = tabs.querySelector('sp-tab[value=first]') as Tab;\n        const secondTab = tabs.querySelector('sp-tab[value=second]') as Tab;\n        const thirdTab = tabs.querySelector('sp-tab[value=third]') as Tab;\n        const firstPanel = tabs.querySelector(\n            'sp-tab-panel[value=first]'\n        ) as TabPanel;\n        const secondPanel = tabs.querySelector(\n            'sp-tab-panel[value=second]'\n        ) as TabPanel;\n        const thirdPanel = tabs.querySelector(\n            'sp-tab-panel[value=third]'\n        ) as TabPanel;\n\n        expect(firstTab.selected, 'first: 1, selected').to.be.true;\n        expect(firstPanel.selected, 'first panel: 1, selected').to.be.true;\n        expect(secondTab.selected, 'second: 1, not selected').to.be.false;\n        expect(secondPanel.selected, 'second panel: 1, not selected').to.be\n            .false;\n        expect(thirdTab.selected, 'third: 1, not selected').to.be.false;\n        expect(thirdPanel.selected, 'third panel: 1, not selected').to.be.false;\n        expect(tabs.selected).to.equal(firstTab.value);\n\n        secondTab.click();\n        await elementUpdated(tabs);\n\n        expect(firstTab.selected, 'first: 2, not selected').to.be.false;\n        expect(firstPanel.selected, 'first panel: 2, not selected').to.be.false;\n        expect(secondTab.selected, 'second: 2, selected').to.be.true;\n        expect(secondTab.selected, 'first panel: 2, selected').to.be.true;\n        expect(thirdTab.selected, 'third: 2, not selected').to.be.false;\n        expect(thirdTab.selected, 'first panel: 2, not selected').to.be.false;\n        expect(tabs.selected).to.equal(secondTab.value);\n\n        thirdTab.click();\n        await elementUpdated(tabs);\n\n        expect(firstTab.selected, 'first: 3, not selected').to.be.false;\n        expect(firstPanel.selected, 'first panel: 3, not selected').to.be.false;\n        expect(secondTab.selected, 'second: 3, not selected').to.be.false;\n        expect(secondPanel.selected, 'second panel: 3, not selected').to.be\n            .false;\n        expect(thirdTab.selected, 'third: 3, selected').to.be.true;\n        expect(thirdTab.selected, 'first panel: 3, selected').to.be.true;\n        expect(tabs.selected).to.equal(thirdTab.value);\n    });\n\n    it('autofocuses', async () => {\n        const tabs = await fixture<Tabs>(html`\n            <sp-tabs selected=\"second\" autofocus>\n                <sp-tab label=\"Tab 1\" value=\"first\"></sp-tab>\n                <sp-tab label=\"Tab 2\" value=\"second\"></sp-tab>\n                <sp-tab label=\"Tab 3\" value=\"third\"></sp-tab>\n            </sp-tabs>\n        `);\n\n        await elementUpdated(tabs);\n\n        const autoElement = tabs.querySelector('[label=\"Tab 2\"]') as Tab;\n\n        await waitUntil(\n            () => document.activeElement === autoElement,\n            'Autofocused'\n        );\n    });\n\n    it('auto', async () => {\n        const el = await fixture<Tabs>(html`\n            <sp-tabs selected=\"second\" auto>\n                <sp-tab label=\"Tab 1\" value=\"first\"></sp-tab>\n                <sp-tab label=\"Tab 2\" value=\"second\"></sp-tab>\n                <sp-tab label=\"Tab 3\" value=\"third\"></sp-tab>\n            </sp-tabs>\n        `);\n\n        await elementUpdated(el);\n\n        expect(el.selected).to.equal('second');\n        el.focus();\n        await sendKeys({\n            press: 'ArrowLeft',\n        });\n        expect(el.selected).to.equal('first');\n        await sendKeys({\n            press: 'ArrowLeft',\n        });\n        expect(el.selected).to.equal('third');\n        await sendKeys({\n            press: 'ArrowRight',\n        });\n        expect(el.selected).to.equal('first');\n    });\n\n    it('forces only one tab to be selected', async () => {\n        const tabs = await createTabs();\n\n        const selectedTabs = tabs.querySelectorAll('sp-tab[selected]');\n\n        expect(tabs.selected).to.equal('first');\n        expect(selectedTabs.length).to.equal(1);\n    });\n\n    it('de-selects all but first selected tab if multiple selected', async () => {\n        const tabs = await createTabs();\n\n        const tab1 = tabs.querySelector('sp-tab[value=first]') as Tab;\n        const tab2 = tabs.querySelector('sp-tab[value=second]') as Tab;\n        if (!(tab1 instanceof Tab)) throw new Error('tab1 not of type Tab');\n        if (!(tab2 instanceof Tab)) throw new Error('tab2 not of type Tab');\n\n        expect(tabs.selected).to.equal('first');\n        expect(tab1.selected).to.be.true;\n        expect(tab2.selected).to.be.false;\n    });\n\n    it('ensures setting selection updates selected tab', async () => {\n        const tabs = await createTabs();\n\n        const tab1 = tabs.querySelector('sp-tab[value=first]') as Tab;\n        const tab2 = tabs.querySelector('sp-tab[value=second]') as Tab;\n        const tab3 = tabs.querySelector('sp-tab[value=third]') as Tab;\n\n        if (!(tab1 instanceof Tab)) throw new Error('tab1 not of type Tab');\n        if (!(tab2 instanceof Tab)) throw new Error('tab2 not of type Tab');\n        if (!(tab3 instanceof Tab)) throw new Error('tab3 not of type Tab');\n\n        expect(tabs.selected).to.equal('first');\n        expect(tab1.selected, 'first: 1, selected').to.be.true;\n        expect(tab2.selected, 'second: 1, not selected').to.be.false;\n        expect(tab3.selected, 'thurd: 1, not selected').to.be.false;\n\n        tabs.selected = 'second';\n        await elementUpdated(tabs);\n\n        expect(tabs.selected).to.equal('second');\n        expect(tab1.selected, 'first: 2, not selected').to.be.false;\n        expect(tab2.selected, 'second: 2, selected').to.be.true;\n        expect(tab3.selected, 'third: 2, not selected').to.be.false;\n\n        tabs.selected = 'third';\n        await elementUpdated(tabs);\n\n        expect(tabs.selected).to.equal('third');\n        expect(tab1.selected, 'first: 3, not selected').to.be.false;\n        expect(tab2.selected, 'second: 3, not selected').to.be.false;\n        expect(tab3.selected, 'third: 3, selected').to.be.true;\n    });\n\n    it('ensures setting selected and clicking on tab both work together', async () => {\n        const tabs = await createTabs();\n\n        const tab1 = tabs.querySelector('sp-tab[value=first]') as Tab;\n        const tab2 = tabs.querySelector('sp-tab[value=second]') as Tab;\n        const tab3 = tabs.querySelector('sp-tab[value=third]') as Tab;\n\n        if (!(tab1 instanceof Tab)) throw new Error('tab1 not of type Tab');\n        if (!(tab2 instanceof Tab)) throw new Error('tab2 not of type Tab');\n        if (!(tab3 instanceof Tab)) throw new Error('tab3 not of type Tab');\n\n        tab2.click();\n        await elementUpdated(tabs);\n\n        expect(tabs.selected).to.equal('second');\n        expect(tab1.selected).to.be.false;\n        expect(tab2.selected).to.be.true;\n        expect(tab3.selected).to.be.false;\n\n        tabs.selected = 'first';\n        await elementUpdated(tabs);\n\n        expect(tabs.selected).to.equal('first');\n        expect(tab1.selected).to.be.true;\n        expect(tab2.selected).to.be.false;\n        expect(tab3.selected).to.be.false;\n    });\n    it('displays `vertical`', async () => {\n        const el = await fixture<Tabs>(html`\n            <sp-tabs selected=\"first\" direction=\"vertical\">\n                <sp-tab label=\"Tab 1\" value=\"first\"></sp-tab>\n                <sp-tab label=\"Tab 2\" value=\"second\"></sp-tab>\n                <sp-tab label=\"Tab 3\" value=\"third\"></sp-tab>\n            </sp-tabs>\n        `);\n\n        await elementUpdated(el);\n        expect(el.selected).to.be.equal('first');\n\n        el.selected = 'first';\n        await elementUpdated(el);\n        expect(el.selected).to.be.equal('first');\n    });\n    it('displays with nothing `selected`', async () => {\n        const el = await fixture<Tabs>(html`\n            <sp-tabs>\n                <sp-tab label=\"Tab 1\" value=\"first\"></sp-tab>\n                <sp-tab label=\"Tab 2\" value=\"second\"></sp-tab>\n                <sp-tab label=\"Tab 3\" value=\"third\"></sp-tab>\n            </sp-tabs>\n        `);\n\n        await elementUpdated(el);\n        expect(el.selected).to.be.equal('');\n\n        el.selected = 'first';\n        await elementUpdated(el);\n        expect(el.selected).to.be.equal('first');\n    });\n    it('ignores children with no `value`', async () => {\n        const el = await fixture<Tabs>(html`\n            <sp-tabs selected=\"first\">\n                <sp-tab label=\"Tab 1\" value=\"first\"></sp-tab>\n                <div id=\"other\">Other thing</div>\n            </sp-tabs>\n        `);\n\n        await elementUpdated(el);\n        expect(el.selected).to.be.equal('first');\n\n        const otherThing = el.querySelector('#other') as HTMLDivElement;\n        otherThing.click();\n        await elementUpdated(el);\n        expect(el.selected).to.be.equal('first');\n    });\n    it('allows selection to be cancellable', async () => {\n        const cancelSelection = (event: Event): void => event.preventDefault();\n        const el = await fixture<Tabs>(html`\n            <sp-tabs selected=\"first\" @change=${cancelSelection}>\n                <sp-tab label=\"Tab 1\" value=\"first\"></sp-tab>\n                <sp-tab label=\"Tab 2\" value=\"second\"></sp-tab>\n            </sp-tabs>\n        `);\n\n        await elementUpdated(el);\n        expect(el.selected).to.be.equal('first');\n\n        const secondTab = el.querySelector('[value=\"second\"]') as Tab;\n        secondTab.click();\n        await elementUpdated(el);\n        expect(el.selected).to.be.equal('first');\n    });\n    it('accepts keyboard based selection', async () => {\n        const el = await fixture<Tabs>(html`\n            <sp-tabs selected=\"Unknown\">\n                <sp-tab label=\"Tab 1\" value=\"first\">\n                    <sp-icon-checkmark slot=\"icon\"></sp-icon-checkmark>\n                </sp-tab>\n                <sp-tab label=\"Tab 2\" value=\"second\">\n                    <sp-icon-checkmark slot=\"icon\"></sp-icon-checkmark>\n                </sp-tab>\n            </sp-tabs>\n        `);\n        await elementUpdated(el);\n        expect(el.selected).to.be.equal('');\n\n        const firstTab = el.querySelector('[value=\"first\"]') as Tab;\n        const secondTab = el.querySelector('[value=\"second\"]') as Tab;\n        firstTab.dispatchEvent(new FocusEvent('focusin', { bubbles: true }));\n        firstTab.focus();\n\n        await elementUpdated(el);\n        expect(document.activeElement === firstTab, 'Focus first tab').to.be\n            .true;\n\n        firstTab.dispatchEvent(arrowLeftEvent());\n\n        await elementUpdated(el);\n        expect(document.activeElement === secondTab, 'Focus second tab').to.be\n            .true;\n\n        secondTab.dispatchEvent(enterEvent());\n\n        await elementUpdated(el);\n        expect(el.selected).to.be.equal('second');\n\n        secondTab.dispatchEvent(arrowRightEvent());\n\n        await elementUpdated(el);\n        expect(document.activeElement === firstTab, 'Focus first tab').to.be\n            .true;\n\n        firstTab.dispatchEvent(spaceEvent());\n\n        await elementUpdated(el);\n        expect(el.selected).to.be.equal('first');\n\n        firstTab.dispatchEvent(arrowUpEvent());\n\n        await elementUpdated(el);\n        expect(document.activeElement === secondTab, 'Focus second tab').to.be\n            .true;\n\n        secondTab.dispatchEvent(arrowDownEvent());\n\n        await elementUpdated(el);\n        expect(document.activeElement === firstTab, 'Focus first tab').to.be\n            .true;\n    });\n\n    it('accepts keyboard based selection through shadow DOM', async () => {\n        class TabTestEl extends LitElement {\n            protected override render(): TemplateResult {\n                return html`\n                    <sp-tabs selected=\"Unknown\">\n                        <sp-tab label=\"Tab 1\" value=\"first\">\n                            <sp-icon-checkmark slot=\"icon\"></sp-icon-checkmark>\n                        </sp-tab>\n                        <sp-tab label=\"Tab 2\" value=\"second\">\n                            <sp-icon-checkmark slot=\"icon\"></sp-icon-checkmark>\n                        </sp-tab>\n                    </sp-tabs>\n                `;\n            }\n        }\n        customElements.define('tab-test-el', TabTestEl);\n        const el = await fixture<TabTestEl>(html`\n            <tab-test-el></tab-test-el>\n        `);\n\n        await elementUpdated(el);\n        const rootNode = el.shadowRoot as ShadowRoot;\n        const tabsEl = rootNode.querySelector('sp-tabs') as Tabs;\n\n        await elementUpdated(tabsEl);\n        expect(tabsEl.selected).to.be.equal('');\n\n        const firstTab = tabsEl.querySelector('[value=\"first\"]') as Tab;\n        const secondTab = tabsEl.querySelector('[value=\"second\"]') as Tab;\n        firstTab.dispatchEvent(new FocusEvent('focusin', { bubbles: true }));\n        firstTab.focus();\n\n        await elementUpdated(el);\n        let activeElement = rootNode.activeElement as Tab;\n        expect(activeElement === firstTab, 'Focus first tab').to.be.true;\n\n        firstTab.dispatchEvent(arrowLeftEvent());\n\n        await elementUpdated(el);\n        activeElement = rootNode.activeElement as Tab;\n        expect(activeElement === secondTab, 'Focus second tab').to.be.true;\n\n        secondTab.dispatchEvent(enterEvent());\n\n        await elementUpdated(el);\n        expect(tabsEl.selected).to.be.equal('second');\n\n        secondTab.dispatchEvent(arrowRightEvent());\n\n        await elementUpdated(el);\n        activeElement = rootNode.activeElement as Tab;\n        expect(activeElement === firstTab, 'Focus first tab').to.be.true;\n\n        firstTab.dispatchEvent(spaceEvent());\n\n        await elementUpdated(el);\n        expect(tabsEl.selected).to.be.equal('first');\n    });\n    it('accepts keyboard based selection - [direction=\"vertical\"]', async () => {\n        const el = await fixture<Tabs>(html`\n            <sp-tabs selected=\"Unknown\" direction=\"vertical\">\n                <sp-tab label=\"Tab 1\" value=\"first\">\n                    <sp-icon-checkmark slot=\"icon\"></sp-icon-checkmark>\n                </sp-tab>\n                <sp-tab label=\"Tab 2\" value=\"second\">\n                    <sp-icon-checkmark slot=\"icon\"></sp-icon-checkmark>\n                </sp-tab>\n            </sp-tabs>\n        `);\n\n        await elementUpdated(el);\n        expect(el.selected).to.be.equal('');\n\n        const firstTab = el.querySelector('[value=\"first\"]') as Tab;\n        const secondTab = el.querySelector('[value=\"second\"]') as Tab;\n        firstTab.dispatchEvent(new FocusEvent('focusin', { bubbles: true }));\n        firstTab.focus();\n\n        await elementUpdated(el);\n        expect(document.activeElement === firstTab, 'Focus first tab').to.be\n            .true;\n\n        firstTab.dispatchEvent(arrowLeftEvent());\n\n        await elementUpdated(el);\n        expect(document.activeElement === secondTab, 'Focus second tab').to.be\n            .true;\n\n        secondTab.dispatchEvent(enterEvent());\n\n        await elementUpdated(el);\n        expect(el.selected).to.be.equal('second');\n\n        secondTab.dispatchEvent(arrowDownEvent());\n\n        await elementUpdated(el);\n        expect(document.activeElement === firstTab, 'Focus first tab').to.be\n            .true;\n\n        firstTab.dispatchEvent(spaceEvent());\n\n        await elementUpdated(el);\n        expect(el.selected).to.be.equal('first');\n\n        firstTab.dispatchEvent(arrowRightEvent());\n\n        await elementUpdated(el);\n        expect(document.activeElement === secondTab, 'Focus second tab').to.be\n            .true;\n\n        secondTab.dispatchEvent(arrowLeftEvent());\n        expect(document.activeElement === firstTab, 'Focus first tab').to.be\n            .true;\n    });\n    it('selects through slotted DOM', async () => {\n        const el = await fixture<Tabs>(html`\n            <sp-tabs selected=\"first\">\n                <sp-tab value=\"first\">Tab 1</sp-tab>\n                <sp-tab value=\"second\"><span>Tab 2</span></sp-tab>\n            </sp-tabs>\n        `);\n        const span = el.querySelector('span') as HTMLSpanElement;\n        await elementUpdated(el);\n\n        expect(el.selected).to.equal('first');\n\n        span.click();\n        await elementUpdated(el);\n\n        expect(el.selected).to.equal('second');\n    });\n    it('updates selection indicator in response to tab updates', async () => {\n        const el = await fixture<Tabs>(html`\n            <sp-tabs selected=\"first\">\n                <sp-tab value=\"first\">Tab 1</sp-tab>\n                <sp-tab value=\"second\">Tab 2</sp-tab>\n            </sp-tabs>\n        `);\n        const selected = el.querySelector('[value=\"first\"]') as Tab;\n        await elementUpdated(el);\n\n        const extractScaleX = /scaleX\\((.+)\\)/;\n        const initialExec = extractScaleX.exec(\n            el.selectionIndicatorStyle\n        ) as unknown as [string, string];\n        const initialWidth = parseFloat(initialExec[1]);\n        selected.textContent = 'WWWWWWWWWWWWWWWWWWWWWWWWW';\n        await nextFrame();\n        await nextFrame();\n\n        const longerExec = extractScaleX.exec(\n            el.selectionIndicatorStyle\n        ) as unknown as [string, string];\n        const longerWidth = parseFloat(longerExec[1]);\n        expect(initialWidth).to.be.lessThan(longerWidth);\n        selected.textContent = 'W';\n        await nextFrame();\n\n        const shorterExec = extractScaleX.exec(\n            el.selectionIndicatorStyle\n        ) as unknown as [string, string];\n        const shorterWidth = parseFloat(shorterExec[1]);\n        expect(initialWidth).to.be.greaterThan(shorterWidth);\n        expect(longerWidth).to.be.greaterThan(shorterWidth);\n    });\n    it('clicks on #list do not throw', async () => {\n        const tabs = await createTabs();\n        const tabList = (tabs.shadowRoot as ShadowRoot).querySelector(\n            '#list'\n        ) as HTMLDivElement;\n        // exceptions thrown in event listeners do not propagate to caller\n        // we must catch them with window.onerror\n        let hasError = false;\n        const oldOnerror = window.onerror;\n        window.onerror = () => {\n            hasError = true;\n        };\n        tabList.dispatchEvent(new MouseEvent('click'));\n        expect(hasError, 'it should not error').to.be.false;\n        window.onerror = oldOnerror;\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
