{
  "version": 3,
  "sources": ["RadioGroup.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { PropertyValues } from '@spectrum-web-components/base';\nimport {\n    property,\n    queryAssignedNodes,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { FocusVisiblePolyfillMixin } from '@spectrum-web-components/shared/src/focus-visible.js';\nimport { FieldGroup } from '@spectrum-web-components/field-group';\n\nimport { Radio } from './Radio.js';\nimport { RovingTabindexController } from '@spectrum-web-components/reactive-controllers/src/RovingTabindex.js';\n\n/**\n * @element sp-radio-group\n *\n * @slot - The `sp-radio` elements to display/manage in the group.\n * @slot help-text - default or non-negative help text to associate to your form element\n * @slot negative-help-text - negative help text to associate to your form element when `invalid`\n *\n * @fires change - An alteration to the value of the element has been committed by the user.\n */\nexport class RadioGroup extends FocusVisiblePolyfillMixin(FieldGroup) {\n    @property({ type: String })\n    public name = '';\n\n    @queryAssignedNodes()\n    public defaultNodes!: Node[];\n\n    public get buttons(): Radio[] {\n        return this.defaultNodes.filter(\n            (node) => (node as HTMLElement) instanceof Radio\n        ) as Radio[];\n    }\n\n    rovingTabindexController = new RovingTabindexController<Radio>(this, {\n        focusInIndex: (elements: Radio[]) => {\n            return elements.findIndex((el) => {\n                return this.selected\n                    ? !el.disabled && el.value === this.selected\n                    : !el.disabled;\n            });\n        },\n        elementEnterAction: (el: Radio) => {\n            this._setSelected(el.value);\n        },\n        elements: () => this.buttons,\n        isFocusableElement: (el: Radio) => !el.disabled,\n    });\n\n    public override focus(): void {\n        this.rovingTabindexController.focus();\n    }\n\n    private _setSelected(value: string): void {\n        if (value === this.selected) {\n            return;\n        }\n        const oldValue = this.selected;\n        const radio = value\n            ? (this.querySelector(`sp-radio[value=\"${value}\"]`) as Radio)\n            : undefined;\n\n        // If no matching radio, selected is reset to empty string\n        this.selected = radio ? value : '';\n        const applyDefault = this.dispatchEvent(\n            new Event('change', {\n                cancelable: true,\n                bubbles: true,\n                composed: true,\n            })\n        );\n        if (!applyDefault) {\n            this.selected = oldValue;\n            return;\n        }\n        this.validateRadios();\n    }\n\n    @property({ reflect: true })\n    public selected = '';\n\n    protected override willUpdate(changes: PropertyValues<this>): void {\n        if (!this.hasUpdated) {\n            this.setAttribute('role', 'radiogroup');\n            const checkedRadio = this.querySelector(\n                'sp-radio[checked]'\n            ) as Radio;\n            const checkedRadioValue = checkedRadio ? checkedRadio.value : '';\n            // Prefer the checked item over the selected value\n            this.selected = checkedRadioValue || this.selected;\n            // Validate the selected value is actual a radio option\n            if (this.selected && this.selected !== checkedRadioValue) {\n                const selectedRadio = this.querySelector(\n                    `sp-radio[value=\"${this.selected}\"]`\n                ) as Radio;\n                if (selectedRadio) {\n                    selectedRadio.checked = true;\n                }\n            }\n\n            this.shadowRoot.addEventListener('change', (event: Event) => {\n                event.stopPropagation();\n                const target = event.target as Radio;\n                this._setSelected(target.value);\n            });\n        }\n\n        if (changes.has('selected')) {\n            this.validateRadios();\n        }\n    }\n\n    private async validateRadios(): Promise<void> {\n        let validSelection = false;\n        if (!this.hasUpdated) {\n            // Initial validation has to happen after the initial render to allow\n            // the buttons to be queries from the rendered <slot> element\n            await this.updateComplete;\n        }\n        this.buttons.map((button) => {\n            button.checked = this.selected === button.value;\n            validSelection = validSelection || button.checked;\n        });\n        if (!validSelection) {\n            this.selected = '';\n        }\n    }\n\n    protected override handleSlotchange(): void {\n        this.rovingTabindexController.clearElementCache();\n    }\n}\n"],
  "mappings": "qNAaA,OACI,YAAAA,EACA,sBAAAC,MACG,kDACP,OAAS,6BAAAC,MAAiC,uDAC1C,OAAS,cAAAC,MAAkB,uCAE3B,OAAS,SAAAC,MAAa,aACtB,OAAS,4BAAAC,MAAgC,sEAWlC,aAAM,mBAAmBH,EAA0BC,CAAU,CAAE,CAA/D,kCAEH,KAAO,KAAO,GAWd,8BAA2B,IAAIE,EAAgC,KAAM,CACjE,aAAeC,GACJA,EAAS,UAAWC,GAChB,KAAK,SACN,CAACA,EAAG,UAAYA,EAAG,QAAU,KAAK,SAClC,CAACA,EAAG,QACb,EAEL,mBAAqBA,GAAc,CAC/B,KAAK,aAAaA,EAAG,KAAK,CAC9B,EACA,SAAU,IAAM,KAAK,QACrB,mBAAqBA,GAAc,CAACA,EAAG,QAC3C,CAAC,EAgCD,KAAO,SAAW,GAnDlB,IAAW,SAAmB,CAC1B,OAAO,KAAK,aAAa,OACpBC,GAAUA,aAAgCJ,CAC/C,CACJ,CAiBgB,OAAc,CAC1B,KAAK,yBAAyB,MAAM,CACxC,CAEQ,aAAaK,EAAqB,CACtC,GAAIA,IAAU,KAAK,SACf,OAEJ,MAAMC,EAAW,KAAK,SAChBC,EAAQF,EACP,KAAK,cAAc,mBAAmBA,CAAK,IAAI,EAChD,OAWN,GARA,KAAK,SAAWE,EAAQF,EAAQ,GAQ5B,CAPiB,KAAK,cACtB,IAAI,MAAM,SAAU,CAChB,WAAY,GACZ,QAAS,GACT,SAAU,EACd,CAAC,CACL,EACmB,CACf,KAAK,SAAWC,EAChB,MACJ,CACA,KAAK,eAAe,CACxB,CAKmB,WAAWE,EAAqC,CAC/D,GAAI,CAAC,KAAK,WAAY,CAClB,KAAK,aAAa,OAAQ,YAAY,EACtC,MAAMC,EAAe,KAAK,cACtB,mBACJ,EACMC,EAAoBD,EAAeA,EAAa,MAAQ,GAI9D,GAFA,KAAK,SAAWC,GAAqB,KAAK,SAEtC,KAAK,UAAY,KAAK,WAAaA,EAAmB,CACtD,MAAMC,EAAgB,KAAK,cACvB,mBAAmB,KAAK,QAAQ,IACpC,EACIA,IACAA,EAAc,QAAU,GAEhC,CAEA,KAAK,WAAW,iBAAiB,SAAWC,GAAiB,CACzDA,EAAM,gBAAgB,EACtB,MAAMC,EAASD,EAAM,OACrB,KAAK,aAAaC,EAAO,KAAK,CAClC,CAAC,CACL,CAEIL,EAAQ,IAAI,UAAU,GACtB,KAAK,eAAe,CAE5B,CAEA,MAAc,gBAAgC,CAC1C,IAAIM,EAAiB,GAChB,KAAK,YAGN,MAAM,KAAK,eAEf,KAAK,QAAQ,IAAKC,GAAW,CACzBA,EAAO,QAAU,KAAK,WAAaA,EAAO,MAC1CD,EAAiBA,GAAkBC,EAAO,OAC9C,CAAC,EACID,IACD,KAAK,SAAW,GAExB,CAEmB,kBAAyB,CACxC,KAAK,yBAAyB,kBAAkB,CACpD,CACJ,CA5GWE,EAAA,CADNpB,EAAS,CAAE,KAAM,MAAO,CAAC,GADjB,WAEF,oBAGAoB,EAAA,CADNnB,EAAmB,GAJX,WAKF,4BAqDAmB,EAAA,CADNpB,EAAS,CAAE,QAAS,EAAK,CAAC,GAzDlB,WA0DF",
  "names": ["property", "queryAssignedNodes", "FocusVisiblePolyfillMixin", "FieldGroup", "Radio", "RovingTabindexController", "elements", "el", "node", "value", "oldValue", "radio", "changes", "checkedRadio", "checkedRadioValue", "selectedRadio", "event", "target", "validSelection", "button", "__decorateClass"]
}
