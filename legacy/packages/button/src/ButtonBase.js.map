{
  "version": 3,
  "sources": ["ButtonBase.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { LikeAnchor } from '@spectrum-web-components/shared/src/like-anchor.js';\nimport { Focusable } from '@spectrum-web-components/shared/src/focusable.js';\nimport { ObserveSlotText } from '@spectrum-web-components/shared/src/observe-slot-text.js';\nimport buttonStyles from './button-base.css.js';\n\n/**\n * @slot - text content to be displayed in the Button element\n * @slot icon - icon element(s) to display at the start of the button\n */\nexport class ButtonBase extends ObserveSlotText(LikeAnchor(Focusable), '', [\n    'sp-overlay,sp-tooltip',\n]) {\n    public static override get styles(): CSSResultArray {\n        return [buttonStyles];\n    }\n\n    // TODO we need to document this property for consumers,\n    // as it's not a 1:1 equivalent to active\n    @property({ type: Boolean, reflect: true })\n    public active = false;\n\n    /**\n     * The default behavior of the button.\n     * Possible values are: `button` (default), `submit`, and `reset`.\n     */\n    @property({ type: String })\n    public type: 'button' | 'submit' | 'reset' = 'button';\n\n    /**\n     * HTML anchor element that component clicks by proxy\n     */\n    @query('.anchor')\n    private anchorElement!: HTMLAnchorElement;\n\n    public override get focusElement(): HTMLElement {\n        return this;\n    }\n\n    protected get hasLabel(): boolean {\n        return this.slotHasContent;\n    }\n\n    protected get buttonContent(): TemplateResult[] {\n        const content = [\n            html`\n                <slot name=\"icon\" ?icon-only=${!this.hasLabel}></slot>\n            `,\n            html`\n                <span id=\"label\">\n                    <slot @slotchange=${this.manageTextObservedSlot}></slot>\n                </span>\n            `,\n        ];\n        return content;\n    }\n\n    constructor() {\n        super();\n        this.proxyFocus = this.proxyFocus.bind(this);\n\n        this.addEventListener('click', this.handleClickCapture, {\n            capture: true,\n        });\n    }\n\n    private handleClickCapture(event: Event): void | boolean {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            event.stopPropagation();\n            return false;\n        }\n\n        if (this.shouldProxyClick(event as MouseEvent)) {\n            return;\n        }\n    }\n\n    private proxyFocus(): void {\n        this.focus();\n    }\n\n    private shouldProxyClick(event?: MouseEvent): boolean {\n        let handled = false;\n\n        // Don't proxy clicks with modifier keys (Command/Meta, Ctrl, Shift, Alt)\n        if (\n            event &&\n            (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey)\n        ) {\n            return false;\n        }\n\n        if (this.anchorElement) {\n            // Click HTML anchor element by proxy, but only for non-modified clicks\n            this.anchorElement.click();\n            handled = true;\n            // if the button type is `submit` or `reset`\n        } else if (this.type !== 'button') {\n            // create an HTML Button Element by proxy, click it, and remove it\n            const proxy = document.createElement('button');\n            proxy.type = this.type;\n            this.insertAdjacentElement('afterend', proxy);\n            proxy.click();\n            proxy.remove();\n            handled = true;\n        }\n        return handled;\n    }\n\n    public override renderAnchor(): TemplateResult {\n        return html`\n            ${this.buttonContent}\n            ${super.renderAnchor({\n                id: 'button',\n                ariaHidden: true,\n                className: 'button anchor',\n                tabindex: -1,\n            })}\n        `;\n    }\n\n    protected renderButton(): TemplateResult {\n        return html`\n            ${this.buttonContent}\n        `;\n    }\n\n    protected override render(): TemplateResult {\n        return this.href && this.href.length > 0\n            ? this.renderAnchor()\n            : this.renderButton();\n    }\n\n    protected handleKeydown(event: KeyboardEvent): void {\n        const { code } = event;\n        switch (code) {\n            case 'Space':\n                event.preventDefault();\n                // allows button to activate when `Space` is pressed\n                if (typeof this.href === 'undefined') {\n                    this.addEventListener('keyup', this.handleKeyup);\n                    this.active = true;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    private handleKeypress(event: KeyboardEvent): void {\n        const { code } = event;\n        switch (code) {\n            case 'Enter':\n            case 'NumpadEnter':\n                // allows button or link to be activated with `Enter` and `NumpadEnter`\n                this.click();\n                break;\n            default:\n                break;\n        }\n    }\n\n    protected handleKeyup(event: KeyboardEvent): void {\n        const { code } = event;\n        switch (code) {\n            case 'Space':\n                this.removeEventListener('keyup', this.handleKeyup);\n                this.active = false;\n                this.click();\n                break;\n            default:\n                break;\n        }\n    }\n\n    private manageAnchor(): void {\n        // for a link\n        if (this.href && this.href.length > 0) {\n            // if the role is set to button\n            if (\n                !this.hasAttribute('role') ||\n                this.getAttribute('role') === 'button'\n            ) {\n                // change role to link\n                this.setAttribute('role', 'link');\n            }\n            // else for a button\n        } else {\n            // if the role is set to link\n            if (\n                !this.hasAttribute('role') ||\n                this.getAttribute('role') === 'link'\n            ) {\n                // change role to button\n                this.setAttribute('role', 'button');\n            }\n        }\n    }\n\n    protected override firstUpdated(changed: PropertyValues): void {\n        super.firstUpdated(changed);\n        if (!this.hasAttribute('tabindex')) {\n            this.setAttribute('tabindex', '0');\n        }\n        if (changed.has('label')) {\n            if (this.label) {\n                this.setAttribute('aria-label', this.label);\n            } else {\n                this.removeAttribute('aria-label');\n            }\n        }\n        this.manageAnchor();\n        this.addEventListener('keydown', this.handleKeydown);\n        this.addEventListener('keypress', this.handleKeypress);\n    }\n\n    protected override updated(changed: PropertyValues): void {\n        super.updated(changed);\n        if (changed.has('href')) {\n            this.manageAnchor();\n        }\n\n        if (this.anchorElement) {\n            // Ensure the anchor element is not focusable directly via tab\n            this.anchorElement.tabIndex = -1;\n\n            // Make sure it has proper ARIA attributes\n            if (!this.anchorElement.hasAttribute('aria-hidden')) {\n                this.anchorElement.setAttribute('aria-hidden', 'true');\n            }\n\n            // Set up focus delegation\n            this.anchorElement.addEventListener('focus', this.proxyFocus);\n        }\n    }\n    protected override update(changes: PropertyValues): void {\n        super.update(changes);\n        if (changes.has('label')) {\n            if (this.label) {\n                this.setAttribute('aria-label', this.label);\n            } else {\n                this.removeAttribute('aria-label');\n            }\n        }\n    }\n}\n"],
  "mappings": "qNAYA,OAEI,QAAAA,MAGG,gCACP,OACI,YAAAC,EACA,SAAAC,MACG,kDACP,OAAS,cAAAC,MAAkB,qDAC3B,OAAS,aAAAC,MAAiB,mDAC1B,OAAS,mBAAAC,MAAuB,2DAChC,OAAOC,MAAkB,uBAMlB,aAAM,mBAAmBD,EAAgBF,EAAWC,CAAS,EAAG,GAAI,CACvE,uBACJ,CAAC,CAAE,CA6CC,aAAc,CACV,MAAM,EAtCV,KAAO,OAAS,GAOhB,KAAO,KAAsC,SAgCzC,KAAK,WAAa,KAAK,WAAW,KAAK,IAAI,EAE3C,KAAK,iBAAiB,QAAS,KAAK,mBAAoB,CACpD,QAAS,EACb,CAAC,CACL,CAnDA,WAA2B,QAAyB,CAChD,MAAO,CAACE,CAAY,CACxB,CAoBA,IAAoB,cAA4B,CAC5C,OAAO,IACX,CAEA,IAAc,UAAoB,CAC9B,OAAO,KAAK,cAChB,CAEA,IAAc,eAAkC,CAW5C,MAVgB,CACZN;AAAA,+CACmC,CAAC,KAAK,QAAQ;AAAA,cAEjDA;AAAA;AAAA,wCAE4B,KAAK,sBAAsB;AAAA;AAAA,aAG3D,CAEJ,CAWQ,mBAAmBO,EAA8B,CACrD,GAAI,KAAK,SACL,OAAAA,EAAM,eAAe,EACrBA,EAAM,yBAAyB,EAC/BA,EAAM,gBAAgB,EACf,GAGP,KAAK,iBAAiBA,CAAmB,CAGjD,CAEQ,YAAmB,CACvB,KAAK,MAAM,CACf,CAEQ,iBAAiBA,EAA6B,CAClD,IAAIC,EAAU,GAGd,GACID,IACCA,EAAM,SAAWA,EAAM,SAAWA,EAAM,UAAYA,EAAM,QAE3D,MAAO,GAGX,GAAI,KAAK,cAEL,KAAK,cAAc,MAAM,EACzBC,EAAU,WAEH,KAAK,OAAS,SAAU,CAE/B,MAAMC,EAAQ,SAAS,cAAc,QAAQ,EAC7CA,EAAM,KAAO,KAAK,KAClB,KAAK,sBAAsB,WAAYA,CAAK,EAC5CA,EAAM,MAAM,EACZA,EAAM,OAAO,EACbD,EAAU,EACd,CACA,OAAOA,CACX,CAEgB,cAA+B,CAC3C,OAAOR;AAAA,cACD,KAAK,aAAa;AAAA,cAClB,MAAM,aAAa,CACjB,GAAI,SACJ,WAAY,GACZ,UAAW,gBACX,SAAU,EACd,CAAC,CAAC;AAAA,SAEV,CAEU,cAA+B,CACrC,OAAOA;AAAA,cACD,KAAK,aAAa;AAAA,SAE5B,CAEmB,QAAyB,CACxC,OAAO,KAAK,MAAQ,KAAK,KAAK,OAAS,EACjC,KAAK,aAAa,EAClB,KAAK,aAAa,CAC5B,CAEU,cAAcO,EAA4B,CAChD,KAAM,CAAE,KAAAG,CAAK,EAAIH,EACjB,OAAQG,EAAM,CACV,IAAK,QACDH,EAAM,eAAe,EAEjB,OAAO,KAAK,MAAS,cACrB,KAAK,iBAAiB,QAAS,KAAK,WAAW,EAC/C,KAAK,OAAS,IAElB,MACJ,QACI,KACR,CACJ,CAEQ,eAAeA,EAA4B,CAC/C,KAAM,CAAE,KAAAG,CAAK,EAAIH,EACjB,OAAQG,EAAM,CACV,IAAK,QACL,IAAK,cAED,KAAK,MAAM,EACX,MACJ,QACI,KACR,CACJ,CAEU,YAAYH,EAA4B,CAC9C,KAAM,CAAE,KAAAG,CAAK,EAAIH,EACjB,OAAQG,EAAM,CACV,IAAK,QACD,KAAK,oBAAoB,QAAS,KAAK,WAAW,EAClD,KAAK,OAAS,GACd,KAAK,MAAM,EACX,MACJ,QACI,KACR,CACJ,CAEQ,cAAqB,CAErB,KAAK,MAAQ,KAAK,KAAK,OAAS,GAG5B,CAAC,KAAK,aAAa,MAAM,GACzB,KAAK,aAAa,MAAM,IAAM,WAG9B,KAAK,aAAa,OAAQ,MAAM,GAMhC,CAAC,KAAK,aAAa,MAAM,GACzB,KAAK,aAAa,MAAM,IAAM,SAG9B,KAAK,aAAa,OAAQ,QAAQ,CAG9C,CAEmB,aAAaC,EAA+B,CAC3D,MAAM,aAAaA,CAAO,EACrB,KAAK,aAAa,UAAU,GAC7B,KAAK,aAAa,WAAY,GAAG,EAEjCA,EAAQ,IAAI,OAAO,IACf,KAAK,MACL,KAAK,aAAa,aAAc,KAAK,KAAK,EAE1C,KAAK,gBAAgB,YAAY,GAGzC,KAAK,aAAa,EAClB,KAAK,iBAAiB,UAAW,KAAK,aAAa,EACnD,KAAK,iBAAiB,WAAY,KAAK,cAAc,CACzD,CAEmB,QAAQA,EAA+B,CACtD,MAAM,QAAQA,CAAO,EACjBA,EAAQ,IAAI,MAAM,GAClB,KAAK,aAAa,EAGlB,KAAK,gBAEL,KAAK,cAAc,SAAW,GAGzB,KAAK,cAAc,aAAa,aAAa,GAC9C,KAAK,cAAc,aAAa,cAAe,MAAM,EAIzD,KAAK,cAAc,iBAAiB,QAAS,KAAK,UAAU,EAEpE,CACmB,OAAOC,EAA+B,CACrD,MAAM,OAAOA,CAAO,EAChBA,EAAQ,IAAI,OAAO,IACf,KAAK,MACL,KAAK,aAAa,aAAc,KAAK,KAAK,EAE1C,KAAK,gBAAgB,YAAY,EAG7C,CACJ,CAnOWC,EAAA,CADNZ,EAAS,CAAE,KAAM,QAAS,QAAS,EAAK,CAAC,GATjC,WAUF,sBAOAY,EAAA,CADNZ,EAAS,CAAE,KAAM,MAAO,CAAC,GAhBjB,WAiBF,oBAMCY,EAAA,CADPX,EAAM,SAAS,GAtBP,WAuBD",
  "names": ["html", "property", "query", "LikeAnchor", "Focusable", "ObserveSlotText", "buttonStyles", "event", "handled", "proxy", "code", "changed", "changes", "__decorateClass"]
}
