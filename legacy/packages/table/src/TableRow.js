"use strict";var h=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var s=(i,c,e,l)=>{for(var t=l>1?void 0:l?d(c,e):c,a=i.length-1,o;a>=0;a--)(o=i[a])&&(t=(l?o(c,e,t):o(t))||t);return l&&t&&h(c,e,t),t};import{html as n,SpectrumElement as p}from"@spectrum-web-components/base";import{property as r,queryAssignedElements as m}from"@spectrum-web-components/base/src/decorators.js";import u from"./table-row.css.js";export class TableRow extends p{constructor(){super(...arguments);this.role="row";this.selectable=!1;this.selected=!1;this.value=""}static get styles(){return[u]}async handleChange(e){e.target.checkbox&&(this.selected=e.target.checkbox.checked,await 0,e.defaultPrevented&&(this.selected=!this.selected))}handleSlotchange({target:e}){const l=e.assignedElements();this.selectable=!!l.find(t=>t.localName==="sp-table-checkbox-cell")}async manageSelected(){await this.updateComplete,this.selectable?this.setAttribute("aria-selected",this.selected?"true":"false"):this.removeAttribute("aria-selected");const[e]=this.checkboxCells;e&&(e.checked=this.selected)}handleClick(e){if(e.composedPath().find(t=>t.localName==="sp-table-checkbox-cell"))return;const[l]=this.checkboxCells;l&&l.click()}render(){return n`
            <slot
                @change=${this.handleChange}
                @slotchange=${this.handleSlotchange}
            ></slot>
        `}willUpdate(e){e.has("selected")&&this.manageSelected(),e.has("selectable")&&(this.selectable?this.addEventListener("click",this.handleClick):this.removeEventListener("click",this.handleClick))}}s([m({selector:"sp-table-checkbox-cell",flatten:!0})],TableRow.prototype,"checkboxCells",2),s([r({reflect:!0})],TableRow.prototype,"role",2),s([r({type:Boolean})],TableRow.prototype,"selectable",2),s([r({type:Boolean,reflect:!0})],TableRow.prototype,"selected",2),s([r({type:String})],TableRow.prototype,"value",2);
//# sourceMappingURL=TableRow.js.map
