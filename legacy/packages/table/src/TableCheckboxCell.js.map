{
  "version": 3,
  "sources": ["TableCheckboxCell.ts"],
  "sourcesContent": ["/* \nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n    CSSResultArray,\n    html,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport '@spectrum-web-components/checkbox/sp-checkbox.js';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { ifDefined } from '@spectrum-web-components/base/src/directives.js';\nimport styles from './table-checkbox-cell.css.js';\nimport { Checkbox } from '@spectrum-web-components/checkbox';\n\n/**\n * @element sp-table-checkbox-cell\n */\nexport class TableCheckboxCell extends SpectrumElement {\n    public static override get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    /**\n     * Whether or not the checkbox cell is in the table head.\n     */\n    @property({ type: Boolean, reflect: true, attribute: 'head-cell' })\n    public headCell = false;\n\n    @property({ reflect: true })\n    public override role = 'gridcell';\n\n    @query('.checkbox')\n    public checkbox!: Checkbox;\n\n    @property({ type: Boolean })\n    public indeterminate = false;\n\n    @property({ type: Boolean })\n    public checked = false;\n\n    @property({ type: Boolean })\n    public disabled = false;\n\n    @property({ type: Boolean, reflect: true, attribute: 'selects-single' })\n    public selectsSingle = false;\n\n    @property({ type: Boolean, reflect: true })\n    public emphasized = false;\n\n    public override click(): void {\n        this.checkbox.click();\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <sp-checkbox\n                ?checked=${this.checked}\n                ?indeterminate=${this.indeterminate}\n                ?disabled=${this.disabled}\n                ?emphasized=${this.emphasized}\n                aria-hidden=${ifDefined(this.selectsSingle)}\n                class=\"checkbox\"\n            ></sp-checkbox>\n        `;\n    }\n}\n"],
  "mappings": "qNAWA,OAEI,QAAAA,EACA,mBAAAC,MAEG,gCACP,MAAO,mDACP,OACI,YAAAC,EACA,SAAAC,MACG,kDACP,OAAS,aAAAC,MAAiB,kDAC1B,OAAOC,MAAY,+BAMZ,aAAM,0BAA0BJ,CAAgB,CAAhD,kCASH,KAAO,SAAW,GAGlB,KAAgB,KAAO,WAMvB,KAAO,cAAgB,GAGvB,KAAO,QAAU,GAGjB,KAAO,SAAW,GAGlB,KAAO,cAAgB,GAGvB,KAAO,WAAa,GA7BpB,WAA2B,QAAyB,CAChD,MAAO,CAACI,CAAM,CAClB,CA6BgB,OAAc,CAC1B,KAAK,SAAS,MAAM,CACxB,CAEmB,QAAyB,CACxC,OAAOL;AAAA;AAAA,2BAEY,KAAK,OAAO;AAAA,iCACN,KAAK,aAAa;AAAA,4BACvB,KAAK,QAAQ;AAAA,8BACX,KAAK,UAAU;AAAA,8BACfI,EAAU,KAAK,aAAa,CAAC;AAAA;AAAA;AAAA,SAIvD,CACJ,CAvCWE,EAAA,CADNJ,EAAS,CAAE,KAAM,QAAS,QAAS,GAAM,UAAW,WAAY,CAAC,GARzD,kBASF,wBAGSI,EAAA,CADfJ,EAAS,CAAE,QAAS,EAAK,CAAC,GAXlB,kBAYO,oBAGTI,EAAA,CADNH,EAAM,WAAW,GAdT,kBAeF,wBAGAG,EAAA,CADNJ,EAAS,CAAE,KAAM,OAAQ,CAAC,GAjBlB,kBAkBF,6BAGAI,EAAA,CADNJ,EAAS,CAAE,KAAM,OAAQ,CAAC,GApBlB,kBAqBF,uBAGAI,EAAA,CADNJ,EAAS,CAAE,KAAM,OAAQ,CAAC,GAvBlB,kBAwBF,wBAGAI,EAAA,CADNJ,EAAS,CAAE,KAAM,QAAS,QAAS,GAAM,UAAW,gBAAiB,CAAC,GA1B9D,kBA2BF,6BAGAI,EAAA,CADNJ,EAAS,CAAE,KAAM,QAAS,QAAS,EAAK,CAAC,GA7BjC,kBA8BF",
  "names": ["html", "SpectrumElement", "property", "query", "ifDefined", "styles", "__decorateClass"]
}
