{
  "version": 3,
  "sources": ["table.test.ts"],
  "sourcesContent": ["/*\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n    elementUpdated,\n    expect,\n    fixture,\n    html,\n    nextFrame,\n} from '@open-wc/testing';\n\nimport '@spectrum-web-components/theme/sp-theme.js';\nimport '@spectrum-web-components/theme/src/themes.js';\nimport '@spectrum-web-components/table/sp-table.js';\nimport '@spectrum-web-components/table/sp-table-head.js';\nimport '@spectrum-web-components/table/sp-table-head-cell.js';\nimport '@spectrum-web-components/table/sp-table-body.js';\nimport '@spectrum-web-components/table/sp-table-row.js';\nimport '@spectrum-web-components/table/sp-table-cell.js';\nimport type {\n    Table,\n    TableCheckboxCell,\n    TableHead,\n} from '@spectrum-web-components/table';\nimport { elements } from '../stories/table-elements.stories.js';\nimport { spy } from 'sinon';\nimport { ignoreResizeObserverLoopError } from '../../../test/testing-helpers.js';\nimport { styledFixture } from './helpers.js';\n\nignoreResizeObserverLoopError(before, after);\n\ndescribe('Table', () => {\n    it('loads default table accessibly', async () => {\n        const el = await styledFixture<Table>(elements());\n        await nextFrame();\n        await nextFrame();\n        await nextFrame();\n        await nextFrame();\n        await nextFrame();\n        await nextFrame();\n        await expect(el).to.be.accessible();\n    });\n\n    it('can be size `s`', async () => {\n        const el = await fixture<Table>(html`\n            <sp-table size=\"s\">\n                <sp-table-head>\n                    <sp-table-head-cell>Column Title</sp-table-head-cell>\n                    <sp-table-head-cell>Column Title</sp-table-head-cell>\n                    <sp-table-head-cell>Column Title</sp-table-head-cell>\n                </sp-table-head>\n                <sp-table-body style=\"height: 120px\">\n                    <sp-table-row value=\"row1\">\n                        <sp-table-cell>Row Item Alpha</sp-table-cell>\n                        <sp-table-cell>Row Item Alpha</sp-table-cell>\n                        <sp-table-cell>Row Item Alpha</sp-table-cell>\n                    </sp-table-row>\n                    <sp-table-row value=\"row2\">\n                        <sp-table-cell>Row Item Bravo</sp-table-cell>\n                        <sp-table-cell>Row Item Bravo</sp-table-cell>\n                        <sp-table-cell>Row Item Bravo</sp-table-cell>\n                    </sp-table-row>\n                    <sp-table-row value=\"row3\">\n                        <sp-table-cell>Row Item Charlie</sp-table-cell>\n                        <sp-table-cell>Row Item Charlie</sp-table-cell>\n                        <sp-table-cell>Row Item Charlie</sp-table-cell>\n                    </sp-table-row>\n                    <sp-table-row value=\"row4\">\n                        <sp-table-cell>Row Item Delta</sp-table-cell>\n                        <sp-table-cell>Row Item Delta</sp-table-cell>\n                        <sp-table-cell>Row Item Delta</sp-table-cell>\n                    </sp-table-row>\n                    <sp-table-row value=\"row5\">\n                        <sp-table-cell>Row Item Echo</sp-table-cell>\n                        <sp-table-cell>Row Item Echo</sp-table-cell>\n                        <sp-table-cell>Row Item Echo</sp-table-cell>\n                    </sp-table-row>\n                </sp-table-body>\n            </sp-table>\n        `);\n        await elementUpdated(el);\n\n        expect(el.size).to.equal('s');\n    });\n\n    it('dispatches `change` events', async () => {\n        const changeSpy = spy();\n        const el = await fixture<Table>(html`\n            <sp-table\n                size=\"m\"\n                selects=\"multiple\"\n                .selected=${['row1', 'row2']}\n                @change=${({ target }: Event & { target: Table }) => {\n                    changeSpy(target);\n                }}\n            >\n                <sp-table-head>\n                    <sp-table-head-cell>Column Title</sp-table-head-cell>\n                    <sp-table-head-cell>Column Title</sp-table-head-cell>\n                    <sp-table-head-cell>Column Title</sp-table-head-cell>\n                </sp-table-head>\n                <sp-table-body style=\"height: 120px\">\n                    <sp-table-row value=\"row1\">\n                        <sp-table-cell>Row Item Alpha</sp-table-cell>\n                        <sp-table-cell>Row Item Alpha</sp-table-cell>\n                        <sp-table-cell>Row Item Alpha</sp-table-cell>\n                    </sp-table-row>\n                    <sp-table-row value=\"row2\">\n                        <sp-table-cell>Row Item Bravo</sp-table-cell>\n                        <sp-table-cell>Row Item Bravo</sp-table-cell>\n                        <sp-table-cell>Row Item Bravo</sp-table-cell>\n                    </sp-table-row>\n                    <sp-table-row value=\"row3\">\n                        <sp-table-cell>Row Item Charlie</sp-table-cell>\n                        <sp-table-cell>Row Item Charlie</sp-table-cell>\n                        <sp-table-cell>Row Item Charlie</sp-table-cell>\n                    </sp-table-row>\n                    <sp-table-row value=\"row4\">\n                        <sp-table-cell>Row Item Delta</sp-table-cell>\n                        <sp-table-cell>Row Item Delta</sp-table-cell>\n                        <sp-table-cell>Row Item Delta</sp-table-cell>\n                    </sp-table-row>\n                    <sp-table-row value=\"row5\">\n                        <sp-table-cell>Row Item Echo</sp-table-cell>\n                        <sp-table-cell>Row Item Echo</sp-table-cell>\n                        <sp-table-cell>Row Item Echo</sp-table-cell>\n                    </sp-table-row>\n                </sp-table-body>\n            </sp-table>\n        `);\n        const rowThreeCheckboxCell = el.querySelector(\n            '[value=\"row3\"] sp-table-checkbox-cell'\n        ) as TableCheckboxCell;\n\n        const tableHeadCheckboxCell = el.querySelector(\n            'sp-table-head sp-table-checkbox-cell'\n        ) as TableCheckboxCell;\n\n        expect(el.selected).to.deep.equal(['row1', 'row2']);\n\n        rowThreeCheckboxCell.checkbox.click();\n\n        expect(el.selected).to.deep.equal(['row1', 'row2', 'row3']);\n        expect(changeSpy.calledOnce).to.be.true;\n        expect(changeSpy.calledWithExactly(el)).to.be.true;\n\n        changeSpy.resetHistory();\n\n        tableHeadCheckboxCell.checkbox.click();\n\n        expect(el.selected).to.deep.equal([\n            'row1',\n            'row2',\n            'row3',\n            'row4',\n            'row5',\n        ]);\n        expect(changeSpy.calledOnce).to.to.true;\n        expect(changeSpy.calledWithExactly(el)).to.be.true;\n    });\n\n    it('accepts change events dispatched from TableHead `<sp-table-checkbox-cell>`', async () => {\n        const changeSpy = spy();\n        const el = await fixture<Table>(html`\n            <sp-table\n                size=\"m\"\n                selects=\"multiple\"\n                .selected=${['row1', 'row2']}\n                @change=${({ target }: Event & { target: Table }) => {\n                    changeSpy(target);\n                }}\n            >\n                <sp-table-head>\n                    <sp-table-head-cell>Column Title</sp-table-head-cell>\n                    <sp-table-head-cell>Column Title</sp-table-head-cell>\n                    <sp-table-head-cell>Column Title</sp-table-head-cell>\n                </sp-table-head>\n                <sp-table-body style=\"height: 120px\">\n                    <sp-table-row value=\"row1\">\n                        <sp-table-cell>Row Item Alpha</sp-table-cell>\n                        <sp-table-cell>Row Item Alpha</sp-table-cell>\n                        <sp-table-cell>Row Item Alpha</sp-table-cell>\n                    </sp-table-row>\n                    <sp-table-row value=\"row2\">\n                        <sp-table-cell>Row Item Bravo</sp-table-cell>\n                        <sp-table-cell>Row Item Bravo</sp-table-cell>\n                        <sp-table-cell>Row Item Bravo</sp-table-cell>\n                    </sp-table-row>\n                    <sp-table-row value=\"row3\">\n                        <sp-table-cell>Row Item Charlie</sp-table-cell>\n                        <sp-table-cell>Row Item Charlie</sp-table-cell>\n                        <sp-table-cell>Row Item Charlie</sp-table-cell>\n                    </sp-table-row>\n                    <sp-table-row value=\"row4\">\n                        <sp-table-cell>Row Item Delta</sp-table-cell>\n                        <sp-table-cell>Row Item Delta</sp-table-cell>\n                        <sp-table-cell>Row Item Delta</sp-table-cell>\n                    </sp-table-row>\n                    <sp-table-row value=\"row5\">\n                        <sp-table-cell>Row Item Echo</sp-table-cell>\n                        <sp-table-cell>Row Item Echo</sp-table-cell>\n                        <sp-table-cell>Row Item Echo</sp-table-cell>\n                    </sp-table-row>\n                </sp-table-body>\n            </sp-table>\n        `);\n        const tableHeadCheckboxCell = el.querySelector(\n            'sp-table-head sp-table-checkbox-cell'\n        ) as TableCheckboxCell;\n\n        expect(el.selected).to.deep.equal(['row1', 'row2']);\n        expect(tableHeadCheckboxCell.checkbox.indeterminate).to.be.true;\n        expect(tableHeadCheckboxCell.checkbox.checked).to.be.false;\n\n        tableHeadCheckboxCell.checkbox.click();\n        await elementUpdated(el);\n\n        expect(changeSpy.calledOnce).to.be.true;\n        expect(changeSpy.calledWithExactly(el)).to.be.true;\n        expect(tableHeadCheckboxCell.checkbox.checked).to.be.true;\n        expect(tableHeadCheckboxCell.checkbox.indeterminate).to.be.false;\n\n        expect(el.selected).to.deep.equal([\n            'row1',\n            'row2',\n            'row3',\n            'row4',\n            'row5',\n        ]);\n\n        tableHeadCheckboxCell.checkbox.click();\n        await elementUpdated(el);\n\n        expect(el.selected).to.deep.equal([]);\n        expect(tableHeadCheckboxCell.checkbox.checked).to.be.false;\n        expect(tableHeadCheckboxCell.checkbox.indeterminate).to.be.false;\n    });\n\n    it('can be headerless', async () => {\n        const el = await fixture<Table>(html`\n            <sp-table>\n                <sp-table-body style=\"height: 120px\">\n                    <sp-table-row value=\"row1\">\n                        <sp-table-cell>Row Item Alpha</sp-table-cell>\n                        <sp-table-cell>Row Item Alpha</sp-table-cell>\n                        <sp-table-cell>Row Item Alpha</sp-table-cell>\n                    </sp-table-row>\n                    <sp-table-row value=\"row2\">\n                        <sp-table-cell>Row Item Bravo</sp-table-cell>\n                        <sp-table-cell>Row Item Bravo</sp-table-cell>\n                        <sp-table-cell>Row Item Bravo</sp-table-cell>\n                    </sp-table-row>\n                    <sp-table-row value=\"row3\">\n                        <sp-table-cell>Row Item Charlie</sp-table-cell>\n                        <sp-table-cell>Row Item Charlie</sp-table-cell>\n                        <sp-table-cell>Row Item Charlie</sp-table-cell>\n                    </sp-table-row>\n                    <sp-table-row value=\"row4\">\n                        <sp-table-cell>Row Item Delta</sp-table-cell>\n                        <sp-table-cell>Row Item Delta</sp-table-cell>\n                        <sp-table-cell>Row Item Delta</sp-table-cell>\n                    </sp-table-row>\n                    <sp-table-row value=\"row5\">\n                        <sp-table-cell>Row Item Echo</sp-table-cell>\n                        <sp-table-cell>Row Item Echo</sp-table-cell>\n                        <sp-table-cell>Row Item Echo</sp-table-cell>\n                    </sp-table-row>\n                </sp-table-body>\n            </sp-table>\n        `);\n        await elementUpdated(el);\n        expect(el.size).to.equal('m');\n        const tableHead = el.querySelector('sp-table-head') as TableHead;\n        expect(tableHead).to.not.exist;\n        const tableRows = el.querySelectorAll('sp-table-row');\n        expect(tableRows.length).to.equal(5);\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
