{
  "version": 3,
  "sources": ["pending-state.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\n/*\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { expect, fixture, html } from '@open-wc/testing';\nimport {\n    HostWithPendingState,\n    PendingStateController,\n} from '@spectrum-web-components/reactive-controllers/src/PendingState.js';\n\nimport '@spectrum-web-components/progress-circle/sp-progress-circle.js';\nimport '@spectrum-web-components/picker/sp-picker.js';\n\ndescribe('PendingStateController', () => {\n    let host: HostWithPendingState;\n    let controller: PendingStateController<HostWithPendingState>;\n\n    beforeEach(async () => {\n        host = await fixture<HostWithPendingState>(html`\n            <sp-picker aria-label=\"clickable\" pending></sp-picker>\n        `);\n        controller = host.pendingStateController;\n    });\n\n    describe('renderPendingState', () => {\n        it('should change aria-label of host when pending and when not pending', async () => {\n            host = await fixture<HostWithPendingState>(html`\n                <sp-picker></sp-picker>\n            `);\n            controller = host.pendingStateController;\n\n            host.setAttribute('pending', 'true');\n            await host.updateComplete;\n\n            let ariaLabel = host.getAttribute('aria-label');\n            expect(ariaLabel).to.equal('Pending');\n\n            host.removeAttribute('pending');\n            await host.updateComplete;\n\n            ariaLabel = host.getAttribute('aria-label');\n            expect(ariaLabel).to.equal(null);\n\n            host.setAttribute('aria-label', 'clickable');\n            await host.updateComplete;\n            ariaLabel = host.getAttribute('aria-label');\n            expect(ariaLabel).to.equal('clickable');\n            host.setAttribute('pending', 'true');\n\n            await host.updateComplete;\n            ariaLabel = host.getAttribute('aria-label');\n            expect(ariaLabel).to.equal('Pending');\n\n            host.removeAttribute('pending');\n            await host.updateComplete;\n            ariaLabel = host.getAttribute('aria-label');\n            expect(ariaLabel).to.equal('clickable');\n\n            host.setAttribute('pending', 'true');\n            await host.updateComplete;\n            ariaLabel = host.getAttribute('aria-label');\n            expect(ariaLabel).to.equal('Pending');\n        });\n\n        it('should render the pending state UI', async () => {\n            const pendingLabel = 'Custom Pending Label';\n            host.pendingLabel = pendingLabel;\n            const templateResult = controller.renderPendingState();\n\n            const renderedElement = await fixture(html`\n                ${templateResult}\n            `);\n            const expectedElement = await fixture(html`\n                <sp-progress-circle\n                    id=\"loader\"\n                    size=\"s\"\n                    indeterminate\n                    aria-valuetext=${pendingLabel}\n                    class=\"progress-circle\"\n                ></sp-progress-circle>\n            `);\n\n            expect(renderedElement.outerHTML === expectedElement.outerHTML).to\n                .be.true;\n        });\n\n        it('should render the default pending state UI if no label is provided', async () => {\n            host.pendingLabel = undefined;\n            const templateResult = controller.renderPendingState();\n            const renderedElement = await fixture(html`\n                ${templateResult}\n            `);\n            const expectedElement = await fixture(html`\n                <sp-progress-circle\n                    id=\"loader\"\n                    size=\"s\"\n                    indeterminate\n                    aria-valuetext=\"Pending\"\n                    class=\"progress-circle\"\n                ></sp-progress-circle>\n            `);\n\n            const renderedAttributes = renderedElement.attributes;\n            const expectedAttributes = expectedElement.attributes;\n\n            expect(renderedAttributes.length === expectedAttributes.length).to\n                .be.true;\n\n            for (let i = 0; i < renderedAttributes.length; i++) {\n                const renderedAttr = renderedAttributes[i];\n                const expectedAttr = expectedAttributes.getNamedItem(\n                    renderedAttr.name\n                );\n\n                expect(renderedAttr.value === expectedAttr?.value).to.be.true;\n            }\n            expect(host.pending).to.be.true;\n        });\n\n        it('should toggle the pending state on and off and preserve the component state correctly', async () => {\n            // Set initial pending state to true\n            host.setAttribute('pending', 'true');\n            await host.updateComplete;\n            let progressCircle =\n                host.shadowRoot?.querySelector('sp-progress-circle');\n            expect(progressCircle).to.not.be.null;\n            host.removeAttribute('pending');\n            await host.updateComplete;\n            progressCircle =\n                host.shadowRoot?.querySelector('sp-progress-circle');\n            expect(progressCircle).to.be.null;\n            host.setAttribute('pending', 'true');\n            await host.updateComplete;\n            progressCircle =\n                host.shadowRoot?.querySelector('sp-progress-circle');\n            expect(progressCircle).to.not.be.null;\n            const expectedElement = await fixture(html`\n                <sp-progress-circle\n                    id=\"loader\"\n                    size=\"s\"\n                    indeterminate\n                    aria-valuetext=\"Pending\"\n                    class=\"progress-circle\"\n                ></sp-progress-circle>\n            `);\n\n            const renderedAttributes = progressCircle?.attributes;\n            const expectedAttributes = expectedElement.attributes;\n            expect(renderedAttributes?.length === expectedAttributes.length).to\n                .be.true;\n            if (renderedAttributes) {\n                for (let i = 0; i < renderedAttributes.length; i++) {\n                    const renderedAttr = renderedAttributes[i];\n                    const expectedAttr = expectedAttributes.getNamedItem(\n                        renderedAttr.name\n                    );\n\n                    expect(renderedAttr.value === expectedAttr?.value).to.be\n                        .true;\n                }\n            }\n        });\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
