{
  "version": 3,
  "sources": ["truncated.test.ts"],
  "sourcesContent": ["/*\nCopyright 2024 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { expect, fixture, html, oneEvent } from '@open-wc/testing';\nimport { Tooltip } from '@spectrum-web-components/tooltip/src/Tooltip.js';\nimport { sendMouse } from '@web/test-runner-commands';\n\nimport { Truncated } from '../src/index.js';\nimport '../sp-truncated.js';\n\ndescribe('Truncated', () => {\n    it('loads default truncated accessibly', async () => {\n        const el = await fixture<Truncated>(\n            html`\n                <sp-truncated></sp-truncated>\n            `\n        );\n\n        await expect(el).to.be.accessible();\n    });\n    it('renders a tooltip when overflowing', async () => {\n        const p = await fixture(html`\n            <p style=\"width: 20px\">\n                <sp-truncated>This will overflow into a tooltip</sp-truncated>\n            </p>\n        `);\n        const el = p.querySelector('sp-truncated') as Truncated;\n        const tooltip = el.shadowRoot!.querySelector('sp-tooltip') as Tooltip;\n        const rect = el.getBoundingClientRect();\n\n        await sendMouse({\n            type: 'move',\n            position: [Math.round(rect.left + 2), Math.round(rect.top + 2)],\n        });\n        const opened = oneEvent(el, 'sp-opened');\n\n        await opened;\n        expect(tooltip.open).to.be.true;\n    });\n    it('does not render a tooltip when content fits', async () => {\n        const p = await fixture(html`\n            <p style=\"width: 200px\">\n                <sp-truncated>Short</sp-truncated>\n            </p>\n        `);\n        const el = p.querySelector('sp-truncated') as Truncated;\n        const tooltip = el.shadowRoot!.querySelector(\n            'sp-tooltip'\n        ) as Tooltip | null;\n        const rect = el.getBoundingClientRect();\n        await sendMouse({\n            type: 'move',\n            position: [Math.round(rect.left + 2), Math.round(rect.top + 2)],\n        });\n\n        expect(tooltip).to.be.null;\n    });\n    it('detects whether or not custom overflow is specified for optimization', async () => {\n        const defaultOverflow = await fixture<Truncated>(\n            html`\n                <sp-truncated>This will overflow into a tooltip</sp-truncated>\n            `\n        );\n        const customOverflow = await fixture<Truncated>(\n            html`\n                <sp-truncated>\n                    Default\n                    <span slot=\"overflow\">Custom</span>\n                </sp-truncated>\n            `\n        );\n\n        expect(defaultOverflow.hasCustomOverflow).to.be.false;\n        expect(customOverflow.hasCustomOverflow).to.be.true;\n    });\n    it('copies the text when clicked', async () => {\n        const text =\n            'This will overflow into a  tooltiptooltiptooltiptooltipmtooltipv tooltip tooltiptooltip';\n\n        const defaultOverflow = await fixture<Truncated>(\n            html`\n                <p style=\"width: 200px\">\n                    <sp-truncated>${text}</sp-truncated>\n                </p>\n            `\n        );\n\n        const truncated = defaultOverflow.querySelector('sp-truncated');\n        const content = truncated?.shadowRoot.querySelector(\n            '#content'\n        ) as Truncated;\n        content.click();\n        expect(truncated?.hasCopied).to.be.true;\n    });\n});\n"],
  "mappings": ";AAWA,SAAS,QAAQ,SAAS,MAAM,gBAAgB;AAEhD,SAAS,iBAAiB;AAG1B,OAAO;AAEP,SAAS,aAAa,MAAM;AACxB,KAAG,sCAAsC,YAAY;AACjD,UAAM,KAAK,MAAM;AAAA,MACb;AAAA;AAAA;AAAA,IAGJ;AAEA,UAAM,OAAO,EAAE,EAAE,GAAG,GAAG,WAAW;AAAA,EACtC,CAAC;AACD,KAAG,sCAAsC,YAAY;AACjD,UAAM,IAAI,MAAM,QAAQ;AAAA;AAAA;AAAA;AAAA,SAIvB;AACD,UAAM,KAAK,EAAE,cAAc,cAAc;AACzC,UAAM,UAAU,GAAG,WAAY,cAAc,YAAY;AACzD,UAAM,OAAO,GAAG,sBAAsB;AAEtC,UAAM,UAAU;AAAA,MACZ,MAAM;AAAA,MACN,UAAU,CAAC,KAAK,MAAM,KAAK,OAAO,CAAC,GAAG,KAAK,MAAM,KAAK,MAAM,CAAC,CAAC;AAAA,IAClE,CAAC;AACD,UAAM,SAAS,SAAS,IAAI,WAAW;AAEvC,UAAM;AACN,WAAO,QAAQ,IAAI,EAAE,GAAG,GAAG;AAAA,EAC/B,CAAC;AACD,KAAG,+CAA+C,YAAY;AAC1D,UAAM,IAAI,MAAM,QAAQ;AAAA;AAAA;AAAA;AAAA,SAIvB;AACD,UAAM,KAAK,EAAE,cAAc,cAAc;AACzC,UAAM,UAAU,GAAG,WAAY;AAAA,MAC3B;AAAA,IACJ;AACA,UAAM,OAAO,GAAG,sBAAsB;AACtC,UAAM,UAAU;AAAA,MACZ,MAAM;AAAA,MACN,UAAU,CAAC,KAAK,MAAM,KAAK,OAAO,CAAC,GAAG,KAAK,MAAM,KAAK,MAAM,CAAC,CAAC;AAAA,IAClE,CAAC;AAED,WAAO,OAAO,EAAE,GAAG,GAAG;AAAA,EAC1B,CAAC;AACD,KAAG,wEAAwE,YAAY;AACnF,UAAM,kBAAkB,MAAM;AAAA,MAC1B;AAAA;AAAA;AAAA,IAGJ;AACA,UAAM,iBAAiB,MAAM;AAAA,MACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMJ;AAEA,WAAO,gBAAgB,iBAAiB,EAAE,GAAG,GAAG;AAChD,WAAO,eAAe,iBAAiB,EAAE,GAAG,GAAG;AAAA,EACnD,CAAC;AACD,KAAG,gCAAgC,YAAY;AAC3C,UAAM,OACF;AAEJ,UAAM,kBAAkB,MAAM;AAAA,MAC1B;AAAA;AAAA,oCAEwB,IAAI;AAAA;AAAA;AAAA,IAGhC;AAEA,UAAM,YAAY,gBAAgB,cAAc,cAAc;AAC9D,UAAM,UAAU,uCAAW,WAAW;AAAA,MAClC;AAAA;AAEJ,YAAQ,MAAM;AACd,WAAO,uCAAW,SAAS,EAAE,GAAG,GAAG;AAAA,EACvC,CAAC;AACL,CAAC;",
  "names": []
}
