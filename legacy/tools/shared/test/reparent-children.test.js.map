{
  "version": 3,
  "sources": ["reparent-children.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { expect, fixture, html } from '@open-wc/testing';\nimport { reparentChildren } from '@spectrum-web-components/shared/src/reparent-children.js';\n\ndescribe('Reparent Children', () => {\n    it('reparents and returns a single child', async () => {\n        const context = await fixture<HTMLDivElement>(html`\n            <div>\n                <div class=\"source\">\n                    <div class=\"child\"></div>\n                </div>\n                <div class=\"destination\"></div>\n            </div>\n        `);\n\n        const source = context.querySelector('.source') as HTMLDivElement;\n        const child = context.querySelector('.child') as HTMLDivElement;\n        const destination = context.querySelector(\n            '.destination'\n        ) as HTMLDivElement;\n\n        expect(source.children.length).to.equal(1);\n        expect(destination.children.length).to.equal(0);\n        const restore = reparentChildren([child], destination);\n\n        expect(source.children.length).to.equal(0);\n        expect(destination.children.length).to.equal(1);\n\n        restore();\n        expect(source.children.length).to.equal(1);\n        expect(destination.children.length).to.equal(0);\n    });\n\n    it('early exits no children', async () => {\n        const context = await fixture<HTMLDivElement>(html`\n            <div>\n                <div class=\"source\"></div>\n                <div class=\"destination\"></div>\n            </div>\n        `);\n\n        const source = context.querySelector('.source') as HTMLDivElement;\n        const children = [...source.children] as HTMLDivElement[];\n        const destination = context.querySelector(\n            '.destination'\n        ) as HTMLDivElement;\n\n        expect(source.children.length).to.equal(0);\n        expect(destination.children.length).to.equal(0);\n        const restore = reparentChildren(children, destination);\n\n        expect(source.children.length).to.equal(0);\n        expect(destination.children.length).to.equal(0);\n\n        restore();\n        expect(source.children.length).to.equal(0);\n        expect(destination.children.length).to.equal(0);\n    });\n\n    it('reparents and returns multiple child', async () => {\n        const context = await fixture<HTMLDivElement>(html`\n            <div>\n                <div class=\"source\">\n                    <div class=\"child\"></div>\n                    <div class=\"child\"></div>\n                    <div class=\"child\"></div>\n                    <div class=\"child\"></div>\n                    <div class=\"child\"></div>\n                </div>\n                <div class=\"destination\"></div>\n            </div>\n        `);\n\n        const source = context.querySelector('.source') as HTMLDivElement;\n        const { children } = source;\n        const destination = context.querySelector(\n            '.destination'\n        ) as HTMLDivElement;\n\n        expect(source.children.length).to.equal(5);\n        expect(destination.children.length).to.equal(0);\n        const restore = reparentChildren([...children], destination);\n\n        expect(source.children.length).to.equal(0);\n        expect(destination.children.length).to.equal(5);\n\n        restore();\n        expect(source.children.length).to.equal(5);\n        expect(destination.children.length).to.equal(0);\n    });\n\n    it('augments the child via a callback', async () => {\n        const context = await fixture<HTMLDivElement>(html`\n            <div>\n                <div class=\"source\">\n                    <div class=\"child\" slot=\"slot\"></div>\n                </div>\n                <div class=\"destination\"></div>\n            </div>\n        `);\n\n        const child = context.querySelector('.child') as HTMLDivElement;\n        const destination = context.querySelector(\n            '.destination'\n        ) as HTMLDivElement;\n\n        expect(child.getAttribute('slot')).to.equal('slot');\n        const restore = reparentChildren([child], destination, {\n            position: 'beforeend',\n            prepareCallback: (el: Element) => {\n                const slotName = el.slot;\n                el.removeAttribute('slot');\n                return (el: Element) => {\n                    el.slot = slotName;\n                };\n            },\n        });\n\n        expect(child.hasAttribute('slot')).to.be.false;\n\n        restore();\n        expect(child.getAttribute('slot')).to.equal('slot');\n    });\n\n    it('beforeend - reparents and returns multiple children', async () => {\n        const context = await fixture<HTMLDivElement>(html`\n            <div>\n                <div class=\"source\">\n                    <div class=\"child\">1</div>\n                    <div class=\"child\">2</div>\n                    <div class=\"child\">3</div>\n                    <div class=\"child\">4</div>\n                    <div class=\"child\">5</div>\n                </div>\n                <div class=\"destination\">\n                    <div class=\"marker\"></div>\n                </div>\n            </div>\n        `);\n\n        const source = context.querySelector('.source') as HTMLDivElement;\n        const { children } = source;\n        const destination = context.querySelector(\n            '.destination'\n        ) as HTMLDivElement;\n\n        expect(source.children.length).to.equal(5);\n        expect(destination.children.length).to.equal(1);\n        const restore = reparentChildren([...children], destination, {\n            position: 'beforeend',\n        });\n\n        expect(source.children.length).to.equal(0);\n        expect(destination.children.length).to.equal(5 + 1);\n\n        const marker = context.querySelector('.marker') as HTMLDivElement;\n        expect(marker.previousElementSibling).to.be.null;\n        expect(marker.nextElementSibling?.textContent).to.equal('1');\n        expect(destination.lastElementChild?.textContent).to.equal('5');\n\n        restore();\n        expect(source.children.length).to.equal(5);\n        expect(destination.children.length).to.equal(1);\n\n        expect(source.firstElementChild?.textContent).to.equal('1');\n        expect(source.lastElementChild?.textContent).to.equal('5');\n    });\n\n    it('afterbegin - reparents and returns multiple children', async () => {\n        const context = await fixture<HTMLDivElement>(html`\n            <div>\n                <div class=\"source\">\n                    <div class=\"child\">1</div>\n                    <div class=\"child\">2</div>\n                    <div class=\"child\">3</div>\n                    <div class=\"child\">4</div>\n                    <div class=\"child\">5</div>\n                </div>\n                <div class=\"destination\">\n                    <div class=\"marker\"></div>\n                </div>\n            </div>\n        `);\n\n        const source = context.querySelector('.source') as HTMLDivElement;\n        const { children } = source;\n        const destination = context.querySelector(\n            '.destination'\n        ) as HTMLDivElement;\n\n        expect(source.children.length).to.equal(5);\n        expect(destination.children.length).to.equal(1);\n        const restore = reparentChildren([...children], destination, {\n            position: 'afterbegin',\n        });\n\n        expect(source.children.length).to.equal(0);\n        expect(destination.children.length).to.equal(5 + 1);\n\n        const marker = context.querySelector('.marker') as HTMLDivElement;\n        expect(marker.nextElementSibling).to.be.null;\n        expect(marker.previousElementSibling?.textContent).to.equal('5');\n        expect(destination.firstElementChild?.textContent).to.equal('1');\n\n        restore();\n        expect(source.children.length).to.equal(5);\n        expect(destination.children.length).to.equal(1);\n\n        expect(source.firstElementChild?.textContent).to.equal('1');\n        expect(source.lastElementChild?.textContent).to.equal('5');\n    });\n\n    it('beforebegin - reparents and returns multiple children', async () => {\n        const context = await fixture<HTMLDivElement>(html`\n            <div>\n                <div class=\"source\">\n                    <div class=\"child\">1</div>\n                    <div class=\"child\">2</div>\n                    <div class=\"child\">3</div>\n                    <div class=\"child\">4</div>\n                    <div class=\"child\">5</div>\n                </div>\n                <div class=\"marker\"></div>\n                <div class=\"destination\"></div>\n            </div>\n        `);\n\n        const source = context.querySelector('.source') as HTMLDivElement;\n        const { children } = source;\n        const destination = context.querySelector(\n            '.destination'\n        ) as HTMLDivElement;\n\n        expect(source.children.length).to.equal(5);\n        const restore = reparentChildren([...children], destination, {\n            position: 'beforebegin',\n        });\n\n        expect(source.children.length).to.equal(0);\n        expect(destination.children.length).to.equal(0);\n\n        const marker = context.querySelector('.marker') as HTMLDivElement;\n        expect(marker.previousElementSibling).to.not.be.null;\n        expect(marker.nextElementSibling?.textContent).to.equal('1');\n        expect(destination.previousElementSibling?.textContent).to.equal('5');\n\n        restore();\n        expect(source.children.length).to.equal(5);\n        expect(marker.nextElementSibling).to.equal(destination);\n\n        expect(source.firstElementChild?.textContent).to.equal('1');\n        expect(source.lastElementChild?.textContent).to.equal('5');\n    });\n\n    it('afterend - reparents and returns multiple children', async () => {\n        const context = await fixture<HTMLDivElement>(html`\n            <div>\n                <div class=\"source\">\n                    <div class=\"child\">1</div>\n                    <div class=\"child\">2</div>\n                    <div class=\"child\">3</div>\n                    <div class=\"child\">4</div>\n                    <div class=\"child\">5</div>\n                </div>\n                <div class=\"destination\"></div>\n                <div class=\"marker\"></div>\n            </div>\n        `);\n\n        const source = context.querySelector('.source') as HTMLDivElement;\n        const { children } = source;\n        const destination = context.querySelector(\n            '.destination'\n        ) as HTMLDivElement;\n\n        expect(source.children.length).to.equal(5);\n\n        const marker = context.querySelector('.marker') as HTMLDivElement;\n        expect(marker.previousElementSibling).to.equal(destination);\n        expect(marker.nextElementSibling).to.be.null;\n\n        const restore = reparentChildren([...children], destination, {\n            position: 'afterend',\n        });\n\n        expect(source.children.length).to.equal(0);\n        expect(destination.children.length).to.equal(0);\n\n        expect(destination.nextElementSibling?.textContent).to.equal('1');\n        expect(marker.previousElementSibling?.textContent).to.equal('5');\n\n        restore();\n        expect(source.children.length).to.equal(5);\n        expect(marker.previousElementSibling).to.equal(destination);\n\n        expect(source.firstElementChild?.textContent).to.equal('1');\n        expect(source.lastElementChild?.textContent).to.equal('5');\n    });\n});\n"],
  "mappings": ";AAYA,SAAS,QAAQ,SAAS,YAAY;AACtC,SAAS,wBAAwB;AAEjC,SAAS,qBAAqB,MAAM;AAChC,KAAG,wCAAwC,YAAY;AACnD,UAAM,UAAU,MAAM,QAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAO7C;AAED,UAAM,SAAS,QAAQ,cAAc,SAAS;AAC9C,UAAM,QAAQ,QAAQ,cAAc,QAAQ;AAC5C,UAAM,cAAc,QAAQ;AAAA,MACxB;AAAA,IACJ;AAEA,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,YAAY,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAC9C,UAAM,UAAU,iBAAiB,CAAC,KAAK,GAAG,WAAW;AAErD,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,YAAY,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAE9C,YAAQ;AACR,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,YAAY,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAAA,EAClD,CAAC;AAED,KAAG,2BAA2B,YAAY;AACtC,UAAM,UAAU,MAAM,QAAwB;AAAA;AAAA;AAAA;AAAA;AAAA,SAK7C;AAED,UAAM,SAAS,QAAQ,cAAc,SAAS;AAC9C,UAAM,WAAW,CAAC,GAAG,OAAO,QAAQ;AACpC,UAAM,cAAc,QAAQ;AAAA,MACxB;AAAA,IACJ;AAEA,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,YAAY,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAC9C,UAAM,UAAU,iBAAiB,UAAU,WAAW;AAEtD,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,YAAY,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAE9C,YAAQ;AACR,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,YAAY,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAAA,EAClD,CAAC;AAED,KAAG,wCAAwC,YAAY;AACnD,UAAM,UAAU,MAAM,QAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAW7C;AAED,UAAM,SAAS,QAAQ,cAAc,SAAS;AAC9C,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,cAAc,QAAQ;AAAA,MACxB;AAAA,IACJ;AAEA,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,YAAY,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAC9C,UAAM,UAAU,iBAAiB,CAAC,GAAG,QAAQ,GAAG,WAAW;AAE3D,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,YAAY,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAE9C,YAAQ;AACR,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,YAAY,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAAA,EAClD,CAAC;AAED,KAAG,qCAAqC,YAAY;AAChD,UAAM,UAAU,MAAM,QAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAO7C;AAED,UAAM,QAAQ,QAAQ,cAAc,QAAQ;AAC5C,UAAM,cAAc,QAAQ;AAAA,MACxB;AAAA,IACJ;AAEA,WAAO,MAAM,aAAa,MAAM,CAAC,EAAE,GAAG,MAAM,MAAM;AAClD,UAAM,UAAU,iBAAiB,CAAC,KAAK,GAAG,aAAa;AAAA,MACnD,UAAU;AAAA,MACV,iBAAiB,CAAC,OAAgB;AAC9B,cAAM,WAAW,GAAG;AACpB,WAAG,gBAAgB,MAAM;AACzB,eAAO,CAACA,QAAgB;AACpB,UAAAA,IAAG,OAAO;AAAA,QACd;AAAA,MACJ;AAAA,IACJ,CAAC;AAED,WAAO,MAAM,aAAa,MAAM,CAAC,EAAE,GAAG,GAAG;AAEzC,YAAQ;AACR,WAAO,MAAM,aAAa,MAAM,CAAC,EAAE,GAAG,MAAM,MAAM;AAAA,EACtD,CAAC;AAED,KAAG,uDAAuD,YAAY;AAvI1E;AAwIQ,UAAM,UAAU,MAAM,QAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAa7C;AAED,UAAM,SAAS,QAAQ,cAAc,SAAS;AAC9C,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,cAAc,QAAQ;AAAA,MACxB;AAAA,IACJ;AAEA,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,YAAY,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAC9C,UAAM,UAAU,iBAAiB,CAAC,GAAG,QAAQ,GAAG,aAAa;AAAA,MACzD,UAAU;AAAA,IACd,CAAC;AAED,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,YAAY,SAAS,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC;AAElD,UAAM,SAAS,QAAQ,cAAc,SAAS;AAC9C,WAAO,OAAO,sBAAsB,EAAE,GAAG,GAAG;AAC5C,YAAO,YAAO,uBAAP,mBAA2B,WAAW,EAAE,GAAG,MAAM,GAAG;AAC3D,YAAO,iBAAY,qBAAZ,mBAA8B,WAAW,EAAE,GAAG,MAAM,GAAG;AAE9D,YAAQ;AACR,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,YAAY,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAE9C,YAAO,YAAO,sBAAP,mBAA0B,WAAW,EAAE,GAAG,MAAM,GAAG;AAC1D,YAAO,YAAO,qBAAP,mBAAyB,WAAW,EAAE,GAAG,MAAM,GAAG;AAAA,EAC7D,CAAC;AAED,KAAG,wDAAwD,YAAY;AAnL3E;AAoLQ,UAAM,UAAU,MAAM,QAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAa7C;AAED,UAAM,SAAS,QAAQ,cAAc,SAAS;AAC9C,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,cAAc,QAAQ;AAAA,MACxB;AAAA,IACJ;AAEA,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,YAAY,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAC9C,UAAM,UAAU,iBAAiB,CAAC,GAAG,QAAQ,GAAG,aAAa;AAAA,MACzD,UAAU;AAAA,IACd,CAAC;AAED,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,YAAY,SAAS,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC;AAElD,UAAM,SAAS,QAAQ,cAAc,SAAS;AAC9C,WAAO,OAAO,kBAAkB,EAAE,GAAG,GAAG;AACxC,YAAO,YAAO,2BAAP,mBAA+B,WAAW,EAAE,GAAG,MAAM,GAAG;AAC/D,YAAO,iBAAY,sBAAZ,mBAA+B,WAAW,EAAE,GAAG,MAAM,GAAG;AAE/D,YAAQ;AACR,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,YAAY,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAE9C,YAAO,YAAO,sBAAP,mBAA0B,WAAW,EAAE,GAAG,MAAM,GAAG;AAC1D,YAAO,YAAO,qBAAP,mBAAyB,WAAW,EAAE,GAAG,MAAM,GAAG;AAAA,EAC7D,CAAC;AAED,KAAG,yDAAyD,YAAY;AA/N5E;AAgOQ,UAAM,UAAU,MAAM,QAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAY7C;AAED,UAAM,SAAS,QAAQ,cAAc,SAAS;AAC9C,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,cAAc,QAAQ;AAAA,MACxB;AAAA,IACJ;AAEA,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,UAAM,UAAU,iBAAiB,CAAC,GAAG,QAAQ,GAAG,aAAa;AAAA,MACzD,UAAU;AAAA,IACd,CAAC;AAED,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,YAAY,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAE9C,UAAM,SAAS,QAAQ,cAAc,SAAS;AAC9C,WAAO,OAAO,sBAAsB,EAAE,GAAG,IAAI,GAAG;AAChD,YAAO,YAAO,uBAAP,mBAA2B,WAAW,EAAE,GAAG,MAAM,GAAG;AAC3D,YAAO,iBAAY,2BAAZ,mBAAoC,WAAW,EAAE,GAAG,MAAM,GAAG;AAEpE,YAAQ;AACR,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,OAAO,kBAAkB,EAAE,GAAG,MAAM,WAAW;AAEtD,YAAO,YAAO,sBAAP,mBAA0B,WAAW,EAAE,GAAG,MAAM,GAAG;AAC1D,YAAO,YAAO,qBAAP,mBAAyB,WAAW,EAAE,GAAG,MAAM,GAAG;AAAA,EAC7D,CAAC;AAED,KAAG,sDAAsD,YAAY;AAzQzE;AA0QQ,UAAM,UAAU,MAAM,QAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAY7C;AAED,UAAM,SAAS,QAAQ,cAAc,SAAS;AAC9C,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,cAAc,QAAQ;AAAA,MACxB;AAAA,IACJ;AAEA,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAEzC,UAAM,SAAS,QAAQ,cAAc,SAAS;AAC9C,WAAO,OAAO,sBAAsB,EAAE,GAAG,MAAM,WAAW;AAC1D,WAAO,OAAO,kBAAkB,EAAE,GAAG,GAAG;AAExC,UAAM,UAAU,iBAAiB,CAAC,GAAG,QAAQ,GAAG,aAAa;AAAA,MACzD,UAAU;AAAA,IACd,CAAC;AAED,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,YAAY,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AAE9C,YAAO,iBAAY,uBAAZ,mBAAgC,WAAW,EAAE,GAAG,MAAM,GAAG;AAChE,YAAO,YAAO,2BAAP,mBAA+B,WAAW,EAAE,GAAG,MAAM,GAAG;AAE/D,YAAQ;AACR,WAAO,OAAO,SAAS,MAAM,EAAE,GAAG,MAAM,CAAC;AACzC,WAAO,OAAO,sBAAsB,EAAE,GAAG,MAAM,WAAW;AAE1D,YAAO,YAAO,sBAAP,mBAA0B,WAAW,EAAE,GAAG,MAAM,GAAG;AAC1D,YAAO,YAAO,qBAAP,mBAAyB,WAAW,EAAE,GAAG,MAAM,GAAG;AAAA,EAC7D,CAAC;AACL,CAAC;",
  "names": ["el"]
}
