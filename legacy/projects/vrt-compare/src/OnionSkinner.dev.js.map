{
  "version": 3,
  "sources": ["OnionSkinner.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { css, html, SpectrumElement } from '@spectrum-web-components/base';\nimport {\n    property,\n    queryAssignedNodes,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { Slider } from '@spectrum-web-components/slider';\nimport '@spectrum-web-components/slider/sp-slider.js';\nimport '@spectrum-web-components/thumbnail/sp-thumbnail.js';\nimport '@spectrum-web-components/overlay/sync/overlay-trigger.js';\nimport '@spectrum-web-components/tooltip/sp-tooltip.js';\n\nexport class OnionSkinner extends SpectrumElement {\n    @property({ type: Number }) public onionLevel = 0.5;\n\n    @queryAssignedNodes({\n        slot: '',\n        flatten: true,\n    })\n    private assignments!: NodeListOf<HTMLImageElement>;\n\n    private leftThumbnail?: HTMLImageElement;\n    private rightThumbnail?: HTMLImageElement;\n\n    private handleOnionInput(event: Event & { target: Slider }) {\n        this.onionLevel = event.target.value;\n    }\n\n    private handleSlotchange() {\n        const images = [...this.assignments].filter(\n            (node) => node.tagName && node.matches('img')\n        );\n        if (images[0]) {\n            this.leftThumbnail = images[0].cloneNode() as HTMLImageElement;\n            this.leftThumbnail.removeAttribute('slot');\n        }\n        if (images[1]) {\n            this.rightThumbnail = images[1].cloneNode() as HTMLImageElement;\n            this.rightThumbnail.removeAttribute('slot');\n        }\n        if (images.length) {\n            this.requestUpdate();\n        }\n    }\n\n    private allLeft() {\n        this.onionLevel = 0;\n    }\n\n    private allRight() {\n        this.onionLevel = 1;\n    }\n\n    override render() {\n        return html`\n            <slot\n                @slotchange=${this.handleSlotchange}\n                style=\"--onion-level: ${this.onionLevel}\"\n            ></slot>\n            <div class=\"controls\">\n                <overlay-trigger placement=\"top\">\n                    <sp-thumbnail\n                        slot=\"trigger\"\n                        size=\"xl\"\n                        @click=${this.allLeft}\n                    >\n                        ${this.leftThumbnail}\n                    </sp-thumbnail>\n                    <sp-tooltip slot=\"hover-content\">\n                        Baseline screenshot\n                    </sp-tooltip>\n                </overlay-trigger>\n                <sp-slider\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.001\"\n                    .value=${this.onionLevel}\n                    .getAriaValueText=${() => ''}\n                    @input=${this.handleOnionInput}\n                ></sp-slider>\n                <overlay-trigger placement=\"top\">\n                    <sp-thumbnail\n                        slot=\"trigger\"\n                        size=\"xl\"\n                        @click=${this.allRight}\n                    >\n                        ${this.rightThumbnail}\n                    </sp-thumbnail>\n                    <sp-tooltip slot=\"hover-content\">\n                        Current screenshot\n                    </sp-tooltip>\n                </overlay-trigger>\n            </div>\n        `;\n    }\n\n    static override styles = [\n        css`\n            :host {\n                display: grid;\n                grid-template-areas: 'main';\n            }\n            ::slotted(*) {\n                grid-area: main;\n            }\n            ::slotted(:first-child) {\n                opacity: calc(1 - var(--onion-level));\n            }\n            ::slotted(:last-child) {\n                opacity: var(--onion-level);\n            }\n            .controls {\n                display: flex;\n                gap: 1em;\n                margin: 0.25em;\n                align-items: center;\n            }\n            sp-slider {\n                flex-grow: 1;\n            }\n        `,\n    ];\n}\n"],
  "mappings": ";;;;;;;;;;;AAWA,SAAS,KAAK,MAAM,uBAAuB;AAC3C;AAAA,EACI;AAAA,EACA;AAAA,OACG;AAEP,OAAO;AACP,OAAO;AACP,OAAO;AACP,OAAO;AAEA,aAAM,qBAAqB,gBAAgB;AAAA,EAA3C;AAAA;AACyB,SAAO,aAAa;AAAA;AAAA,EAWxC,iBAAiB,OAAmC;AACxD,SAAK,aAAa,MAAM,OAAO;AAAA,EACnC;AAAA,EAEQ,mBAAmB;AACvB,UAAM,SAAS,CAAC,GAAG,KAAK,WAAW,EAAE;AAAA,MACjC,CAAC,SAAS,KAAK,WAAW,KAAK,QAAQ,KAAK;AAAA,IAChD;AACA,QAAI,OAAO,CAAC,GAAG;AACX,WAAK,gBAAgB,OAAO,CAAC,EAAE,UAAU;AACzC,WAAK,cAAc,gBAAgB,MAAM;AAAA,IAC7C;AACA,QAAI,OAAO,CAAC,GAAG;AACX,WAAK,iBAAiB,OAAO,CAAC,EAAE,UAAU;AAC1C,WAAK,eAAe,gBAAgB,MAAM;AAAA,IAC9C;AACA,QAAI,OAAO,QAAQ;AACf,WAAK,cAAc;AAAA,IACvB;AAAA,EACJ;AAAA,EAEQ,UAAU;AACd,SAAK,aAAa;AAAA,EACtB;AAAA,EAEQ,WAAW;AACf,SAAK,aAAa;AAAA,EACtB;AAAA,EAES,SAAS;AACd,WAAO;AAAA;AAAA,8BAEe,KAAK,gBAAgB;AAAA,wCACX,KAAK,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAOtB,KAAK,OAAO;AAAA;AAAA,0BAEnB,KAAK,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAUf,KAAK,UAAU;AAAA,wCACJ,MAAM,EAAE;AAAA,6BACnB,KAAK,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAMjB,KAAK,QAAQ;AAAA;AAAA,0BAEpB,KAAK,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQzC;AA4BJ;AA9Ga,aAoFO,SAAS;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBJ;AA5GmC;AAAA,EAAlC,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GADjB,aAC0B;AAM3B;AAAA,EAJP,mBAAmB;AAAA,IAChB,MAAM;AAAA,IACN,SAAS;AAAA,EACb,CAAC;AAAA,GANQ,aAOD;",
  "names": []
}
