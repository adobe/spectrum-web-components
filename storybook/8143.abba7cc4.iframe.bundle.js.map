{"version":3,"file":"8143.abba7cc4.iframe.bundle.js","mappings":";;;AAiDA;;;;AAIA;AACA;;;;AAIA;;;;AAIA;;AAIA;;AAOA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AAIA;;AAEA;;;;AAIA;;AAEA;AAEA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;;;;;;AAMA;;;;AAIA;;AAEA;;AAEA;;;;ACnEA;;ACAA;AACA;;AAEA;;;AAGA;;;;;;;;;;;ACRA;;ACEA;AACA;;AAEA;;;AAGA;;;;;;;;AC0CA;;AAIA;AAsIA","sources":["webpack://@adobe/spectrum-web-components/./packages/action-menu/src/ActionMenu.dev.js","webpack://@adobe/spectrum-web-components/./packages/action-menu/stories/index.js","webpack://@adobe/spectrum-web-components/./packages/divider/src/divider.css.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons-s2/More.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/elements/IconMore.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons/More.js","webpack://@adobe/spectrum-web-components/./packages/overlay/stories/index.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html\n} from \"@spectrum-web-components/base\";\nimport { state } from \"@spectrum-web-components/base/src/decorators.js\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport { DESCRIPTION_ID, PickerBase } from \"@spectrum-web-components/picker\";\nimport \"@spectrum-web-components/action-button/sp-action-button.js\";\nimport { ObserveSlotPresence } from \"@spectrum-web-components/shared/src/observe-slot-presence.js\";\nimport { ObserveSlotText } from \"@spectrum-web-components/shared/src/observe-slot-text.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-more.js\";\nimport actionMenuStyles from \"./action-menu.css.js\";\nimport { SlottableRequestEvent } from \"@spectrum-web-components/overlay/src/slottable-request-event.js\";\nexport class ActionMenu extends ObserveSlotPresence(\n  ObserveSlotText(PickerBase, \"label\"),\n  '[slot=\"label-only\"]'\n) {\n  constructor() {\n    super(...arguments);\n    this.selects = void 0;\n    this.listRole = \"menu\";\n    this.itemRole = \"menuitem\";\n    this.handleSlottableRequest = (event) => {\n      this.dispatchEvent(new SlottableRequestEvent(event.name, event.data));\n    };\n  }\n  static get styles() {\n    return [actionMenuStyles];\n  }\n  get hasLabel() {\n    return this.slotHasContent;\n  }\n  get labelOnly() {\n    return this.slotContentIsPresent;\n  }\n  get buttonContent() {\n    return [\n      html`\n                ${this.labelOnly ? html`` : html`\n                          <slot\n                              name=\"icon\"\n                              slot=\"icon\"\n                              ?icon-only=${!this.hasLabel}\n                              ?hidden=${this.labelOnly}\n                          >\n                              <sp-icon-more\n                                  class=\"icon\"\n                                  size=${this.size}\n                              ></sp-icon-more>\n                          </slot>\n                      `}\n                <slot name=\"label\" ?hidden=${!this.hasLabel}></slot>\n                <slot name=\"label-only\"></slot>\n            `\n    ];\n  }\n  render() {\n    if (this.tooltipEl) {\n      this.tooltipEl.disabled = this.open;\n    }\n    return html`\n            <sp-action-button\n                aria-describedby=${DESCRIPTION_ID}\n                ?quiet=${this.quiet}\n                ?selected=${this.open}\n                static-color=${ifDefined(this.staticColor)}\n                aria-haspopup=\"true\"\n                aria-controls=${ifDefined(this.open ? \"menu\" : void 0)}\n                aria-expanded=${this.open ? \"true\" : \"false\"}\n                aria-label=${ifDefined(this.label || void 0)}\n                id=\"button\"\n                class=\"button\"\n                size=${this.size}\n                @blur=${this.handleButtonBlur}\n                @focus=${this.handleButtonFocus}\n                @keydown=${{\n      handleEvent: this.handleEnterKeydown,\n      capture: true\n    }}\n                ?disabled=${this.disabled}\n            >\n                ${this.buttonContent}\n            </sp-action-button>\n            <slot\n                name=\"tooltip\"\n                @slotchange=${this.handleTooltipSlotchange}\n            ></slot>\n            ${this.renderMenu} ${this.renderDescriptionSlot}\n        `;\n  }\n  update(changedProperties) {\n    if (changedProperties.has(\"invalid\")) {\n      this.invalid = false;\n    }\n    super.update(changedProperties);\n  }\n  hasAccessibleLabel() {\n    return !!this.label || !!this.getAttribute(\"aria-label\") || !!this.getAttribute(\"aria-labelledby\") || !!this.appliedLabel || this.hasLabel || this.labelOnly;\n  }\n  warnNoLabel() {\n    window.__swc.warn(\n      this,\n      `<${this.localName}> needs one of the following to be accessible:`,\n      \"https://opensource.adobe.com/spectrum-web-components/components/action-menu/#accessibility\",\n      {\n        type: \"accessibility\",\n        issues: [\n          `an <sp-field-label> element with a \\`for\\` attribute referencing the \\`id\\` of the \\`<${this.localName}>\\`, or`,\n          'value supplied to the \"label\" attribute, which will be displayed visually as placeholder text',\n          'text content supplied in a <span> with slot=\"label\", or, text content supplied in a <span> with slot=\"label-only\"',\n          \"which will also be displayed visually as placeholder text.\"\n        ]\n      }\n    );\n  }\n}\n__decorateClass([\n  property({ type: String })\n], ActionMenu.prototype, \"selects\", 2);\n__decorateClass([\n  property({ reflect: true, attribute: \"static-color\" })\n], ActionMenu.prototype, \"staticColor\", 2);\n__decorateClass([\n  state()\n], ActionMenu.prototype, \"labelOnly\", 1);\n//# sourceMappingURL=ActionMenu.dev.js.map\n","\"use strict\";\nimport { html, nothing } from \"@spectrum-web-components/base\";\nimport {\n  ifDefined,\n  unsafeHTML\n} from \"@spectrum-web-components/base/src/directives.js\";\nimport \"@spectrum-web-components/action-menu/sp-action-menu.js\";\nimport \"@spectrum-web-components/icon/sp-icon.js\";\nimport \"@spectrum-web-components/menu/sp-menu-divider.js\";\nimport \"@spectrum-web-components/menu/sp-menu-item.js\";\nimport \"@spectrum-web-components/tooltip/sp-tooltip.js\";\nexport const ActionMenuMarkup = ({\n  align = \"start\",\n  ariaLabel = \"More Actions\",\n  onChange = () => void 0,\n  changeHandler = () => void 0,\n  disabled = false,\n  forcePopover = false,\n  open = false,\n  quiet = false,\n  staticValue = \"\",\n  visibleLabel = \"\",\n  customIcon = \"\",\n  size = \"m\",\n  selects = \"\",\n  selected = false,\n  tooltipDescription = \"\",\n  tooltipPlacement = \"bottom\"\n} = {}) => {\n  return html`\n        <sp-action-menu\n            label=${ariaLabel}\n            ?disabled=${disabled}\n            ?open=${open}\n            ?quiet=${quiet}\n            ?force-popover=${forcePopover}\n            static-color=${ifDefined(\n    staticValue === \"none\" ? void 0 : staticValue\n  )}\n            size=${size}\n            @change=${(event) => {\n    changeHandler(event.target.value);\n    onChange(event.target.value);\n  }}\n            .selects=${selects ? selects : void 0}\n            value=${selected ? \"Select Inverse\" : \"\"}\n            style=${ifDefined(\n    align === \"end\" ? \"float: inline-end;\" : void 0\n  )}\n        >\n            ${customIcon ? unsafeHTML(customIcon) : nothing}\n            ${visibleLabel ? html`\n                      <span slot=\"label\">${visibleLabel}</span>\n                  ` : nothing}\n            <sp-menu-item>Deselect</sp-menu-item>\n            <sp-menu-item ?selected=${selected}>Select Inverse</sp-menu-item>\n            <sp-menu-item>Feather...</sp-menu-item>\n            <sp-menu-item>Select and Mask...</sp-menu-item>\n            <sp-menu-divider></sp-menu-divider>\n            <sp-menu-item>Save Selection</sp-menu-item>\n            <sp-menu-item disabled>Make Work Path</sp-menu-item>\n            ${tooltipDescription ? html`\n                      <sp-tooltip\n                          slot=\"tooltip\"\n                          self-managed\n                          placement=${tooltipPlacement}\n                      >\n                          ${tooltipDescription}\n                      </sp-tooltip>\n                  ` : html``}\n        </sp-action-menu>\n    `;\n};\n//# sourceMappingURL=index.js.map\n","\"use strict\";import{css as r}from\"@spectrum-web-components/base\";const i=r`\n    @media (forced-colors:active){:host{--highcontrast-divider-background-color:CanvasText}}:host{--spectrum-divider-thickness:var(--spectrum-divider-thickness-medium)}:host([size=s]){--spectrum-divider-thickness:var(--spectrum-divider-thickness-small)}:host([size=l]){--spectrum-divider-thickness:var(--spectrum-divider-thickness-large);--spectrum-divider-background-color:var(--spectrum-gray-800)}:host([static-color=white]){--mod-divider-background-color:var(--mod-divider-background-color-medium-static-white,var(--spectrum-divider-background-color-static-white))}:host([static-color=white][size=s]){--mod-divider-background-color:var(--mod-divider-background-color-small-static-white,var(--spectrum-divider-background-color-static-white))}:host([static-color=white][size=l]){--mod-divider-background-color:var(--mod-divider-background-color-large-static-white,var(--spectrum-transparent-white-800))}:host([static-color=black]){--mod-divider-background-color:var(--mod-divider-background-color-medium-static-black,var(--spectrum-divider-background-color-static-black))}:host([static-color=black][size=s]){--mod-divider-background-color:var(--mod-divider-background-color-small-static-black,var(--spectrum-divider-background-color-static-black))}:host([static-color=black][size=l]){--mod-divider-background-color:var(--mod-divider-background-color-large-static-black,var(--spectrum-transparent-black-800))}:host{block-size:var(--mod-divider-thickness,var(--spectrum-divider-thickness));inline-size:100%;border:none;border-width:var(--mod-divider-thickness,var(--spectrum-divider-thickness));border-radius:var(--mod-divider-thickness,var(--spectrum-divider-thickness));background-color:var(--highcontrast-divider-background-color,var(--mod-divider-background-color,var(--spectrum-divider-background-color)));overflow:visible}:host([vertical]){inline-size:var(--mod-divider-thickness,var(--spectrum-divider-thickness));block-size:100%;block-size:var(--mod-divider-vertical-height,100%);margin-block:var(--mod-divider-vertical-margin);align-self:var(--mod-divider-vertical-align)}:host{--spectrum-divider-background-color:var(--system-divider-background-color);--spectrum-divider-background-color-static-white:var(--system-divider-background-color-static-white);--spectrum-divider-background-color-static-black:var(--system-divider-background-color-static-black)}:host{display:block}hr{border:none;margin:0}\n`;export default i;\n//# sourceMappingURL=divider.css.js.map\n","\"use strict\";import{tag as t}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const MoreIcon=({width:r=24,height:l=24,hidden:e=!1,title:c=\"More\"}={})=>t`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"${r}\"\n    height=\"${l}\"\n    viewBox=\"0 0 20 20\"\n    aria-hidden=${e?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${c}\"\n  >\n    <circle cx=\"10\" cy=\"10.02114\" r=\"1.5\" fill=\"currentColor\" />\n    <path\n      d=\"m10,8.5c-.82843,0-1.5.67157-1.5,1.5s.67157,1.5,1.5,1.5,1.5-.67157,1.5-1.5-.67157-1.5-1.5-1.5Z\"\n      fill=\"currentColor\"\n    />\n    <circle cx=\"4\" cy=\"10.02114\" r=\"1.5\" fill=\"currentColor\" />\n    <circle cx=\"4\" cy=\"10\" r=\"1.5\" fill=\"currentColor\" />\n    <circle cx=\"16\" cy=\"10.02114\" r=\"1.5\" fill=\"currentColor\" />\n    <circle cx=\"16\" cy=\"10\" r=\"1.5\" fill=\"currentColor\" />\n  </svg>`;\n//# sourceMappingURL=More.js.map\n","\"use strict\";import{html as e}from\"@spectrum-web-components/base\";import{IconBase as t}from\"@spectrum-web-components/icon\";import{setCustomTemplateLiteralTag as r}from\"../custom-tag.js\";import{MoreIcon as o}from\"../icons-s2/More.js\";import{MoreIcon as l}from\"../icons/More.js\";export class IconMore extends t{render(){return r(e),this.spectrumVersion===2?o({hidden:!this.label,title:this.label}):l({hidden:!this.label,title:this.label})}}\n//# sourceMappingURL=IconMore.js.map\n","\"use strict\";import{tag as c}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const MoreIcon=({width:e=24,height:r=24,hidden:t=!1,title:l=\"More\"}={})=>c`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"${e}\"\n    height=\"${r}\"\n    viewBox=\"0 0 36 36\"\n    aria-hidden=${t?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${l}\"\n  >\n    <circle cx=\"17.8\" cy=\"18.2\" r=\"3.4\" />\n    <circle cx=\"29.5\" cy=\"18.2\" r=\"3.4\" />\n    <circle cx=\"6.1\" cy=\"18.2\" r=\"3.4\" />\n  </svg>`;\n//# sourceMappingURL=More.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nfunction nextFrame() {\n  return new Promise((res) => requestAnimationFrame(() => res()));\n}\nclass IsOverlayOpen extends HTMLElement {\n  constructor() {\n    super();\n    this.sendFocus = async () => {\n      var _a;\n      const selectedItem = (_a = document.querySelector(\"[focusable]\")) == null ? void 0 : _a.querySelector(\"[selected]\");\n      if (selectedItem) {\n        selectedItem.focus();\n        selectedItem.focused = true;\n        await nextFrame();\n        selectedItem.scrollIntoView({ block: \"start\" });\n        await nextFrame();\n      }\n    };\n    this.handleOpened = async (event) => {\n      const overlay = event.target;\n      const actions = [nextFrame(), overlay.updateComplete, this.sendFocus()];\n      await Promise.all(actions);\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      this.ready(true);\n    };\n    this.readyPromise = Promise.resolve(false);\n    this.readyPromise = new Promise((res) => {\n      this.ready = res;\n      this.setup();\n    });\n  }\n  async setup() {\n    await nextFrame();\n    document.addEventListener(\"sp-opened\", this.handleOpened);\n  }\n  get updateComplete() {\n    return this.readyPromise;\n  }\n  // remove event listeners in disconnectCallback\n  disconnectedCallback() {\n    document.removeEventListener(\"sp-opened\", this.handleOpened);\n  }\n}\ncustomElements.define(\"is-overlay-open\", IsOverlayOpen);\nexport const isOverlayOpen = (story) => {\n  return html`\n        ${story()}\n        <is-overlay-open></is-overlay-open>\n    `;\n};\nclass AreIconsPresent extends HTMLElement {\n  constructor() {\n    super();\n    this.overlayTimeout = null;\n    this.sendFocus = async () => {\n      var _a;\n      const selectedItem = (_a = document.querySelector(\"[focusable]\")) == null ? void 0 : _a.querySelector(\"[selected]\");\n      if (selectedItem) {\n        selectedItem.focus();\n        selectedItem.focused = true;\n        await nextFrame();\n        selectedItem.scrollIntoView({ block: \"start\" });\n        await nextFrame();\n      }\n    };\n    this.handleOpened = async (event) => {\n      if (this.overlayTimeout) {\n        clearTimeout(this.overlayTimeout);\n        this.overlayTimeout = null;\n      }\n      const overlay = event.target;\n      const actions = [nextFrame(), overlay.updateComplete, this.sendFocus()];\n      await Promise.all(actions);\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      this.checkIcons();\n    };\n    this.checkIcons = async () => {\n      const icons = [...document.querySelectorAll(\"sp-icon\")];\n      const picker = document.querySelector(\"sp-picker\");\n      if (picker) {\n        const pickerIcon = picker.querySelector(\"sp-icon\");\n        if (pickerIcon) {\n          icons.push(pickerIcon);\n        }\n      }\n      const iconLoadPromises = Array.from(icons).map((icon) => {\n        return new Promise((resolve) => {\n          var _a;\n          if (\"updateComplete\" in icon && typeof ((_a = icon.updateComplete) == null ? void 0 : _a.then) === \"function\") {\n            icon.updateComplete.then(() => {\n              resolve();\n            });\n            return;\n          }\n          const src = icon.getAttribute(\"src\");\n          if (!src) {\n            const imgElement2 = icon.querySelector(\"img\");\n            if (imgElement2) {\n              if (imgElement2.complete) {\n                resolve();\n              } else {\n                imgElement2.addEventListener(\n                  \"load\",\n                  () => {\n                    resolve();\n                  },\n                  { once: true }\n                );\n                imgElement2.addEventListener(\n                  \"error\",\n                  () => {\n                    console.warn(`Failed to load icon image`);\n                    resolve();\n                  },\n                  { once: true }\n                );\n              }\n              return;\n            }\n            resolve();\n            return;\n          }\n          const imgElement = icon.querySelector(\"img\");\n          if (imgElement) {\n            if (imgElement.complete) {\n              resolve();\n            } else {\n              imgElement.addEventListener(\n                \"load\",\n                () => {\n                  resolve();\n                },\n                { once: true }\n              );\n              imgElement.addEventListener(\n                \"error\",\n                () => {\n                  console.warn(\n                    `Failed to load icon image: ${src}`\n                  );\n                  resolve();\n                },\n                { once: true }\n              );\n            }\n            return;\n          }\n          const img = new Image();\n          img.onload = () => resolve();\n          img.onerror = () => {\n            console.warn(`Failed to load icon: ${src}`);\n            resolve();\n          };\n          img.src = src;\n        });\n      });\n      await Promise.all(iconLoadPromises);\n      await nextFrame();\n      this.ready(true);\n    };\n    this.readyPromise = Promise.resolve(false);\n    this.readyPromise = new Promise((res) => {\n      this.ready = res;\n      this.setup();\n    });\n  }\n  async setup() {\n    await nextFrame();\n    document.addEventListener(\"sp-opened\", this.handleOpened);\n  }\n  get updateComplete() {\n    return this.readyPromise;\n  }\n  // remove event listeners in disconnectCallback\n  disconnectedCallback() {\n    document.removeEventListener(\"sp-opened\", this.handleOpened);\n  }\n}\ncustomElements.define(\"are-icons-present\", AreIconsPresent);\nexport const areIconsPresent = (story) => {\n  return html`\n        ${story()}\n        <are-icons-present></are-icons-present>\n    `;\n};\n//# sourceMappingURL=index.js.map\n"],"names":[],"sourceRoot":""}