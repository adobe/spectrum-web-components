{"version":3,"file":"number-field-stories-number-field-stories.fe4ad83d.iframe.bundle.js","mappings":";;;;AAoKA;AACA;AACA;AACA;;AAIA;;;;;;AAoBA;AACA;AACA;AACA;;AAQA;;;;AAcA;;;AAGA;AACA;AACA;AACA;;;AASA;;;;AAQA;AACA;AACA;;AAOA;;;AAOA;AACA;AACA;;AASA;;;;AAQA;AACA;AACA;;AAQA;;;;AAQA;AAIA;AACA;;AAIA;;;;;;AASA;AACA;;AAGA;;;;;;AAYA;AACA;;AAIA;;;;;;AAWA;AACA;;AAIA;;;;;;AAYA;AACA;;AAIA;;;;;;AAWA;AACA;;AAIA;;;;;;;AAYA;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;;;;;;;;;AAYA","sources":["webpack://@adobe/spectrum-web-components/./packages/number-field/stories/number-field.stories.js"],"sourcesContent":["\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport \"@spectrum-web-components/number-field/sp-number-field.js\";\nimport \"@spectrum-web-components/field-label/sp-field-label.js\";\nimport { spreadProps } from \"../../../test/lit-helpers.js\";\nexport default {\n  title: \"Number Field\",\n  component: \"sp-number-field\",\n  args: {\n    disabled: false,\n    readonly: false,\n    quiet: false,\n    value: void 0,\n    placeholder: \"\",\n    min: void 0,\n    max: void 0,\n    step: void 0\n  },\n  argTypes: {\n    disabled: {\n      name: \"disabled\",\n      type: { name: \"boolean\", required: false },\n      description: \"Disable this control. It will not receive focus or events.\",\n      table: {\n        type: { summary: \"boolean\" },\n        defaultValue: { summary: false }\n      },\n      control: {\n        type: \"boolean\"\n      }\n    },\n    indeterminate: {\n      name: \"indeterminate\",\n      type: { name: \"boolean\", required: false },\n      description: \"Whether the value of the Number Field can be determined for display.\",\n      table: {\n        type: { summary: \"boolean\" },\n        defaultValue: { summary: false }\n      },\n      control: {\n        type: \"boolean\"\n      }\n    },\n    readonly: {\n      name: \"readonly\",\n      type: { name: \"boolean\", required: false },\n      description: \"When this control is read only, you will not be able to input an updated value.\",\n      table: {\n        type: { summary: \"boolean\" },\n        defaultValue: { summary: false }\n      },\n      control: {\n        type: \"boolean\"\n      }\n    },\n    quiet: {\n      name: \"quiet\",\n      type: { name: \"boolean\", required: false },\n      description: \"An altered delivery with no background and only a bottom border.\",\n      table: {\n        type: { summary: \"boolean\" },\n        defaultValue: { summary: false }\n      },\n      control: {\n        type: \"boolean\"\n      }\n    },\n    hideStepper: {\n      name: \"hide stepper\",\n      type: { name: \"boolean\", required: false },\n      description: \"Whether to remove the stepper UI from the control.\",\n      table: {\n        type: { summary: \"boolean\" },\n        defaultValue: { summary: false }\n      },\n      control: {\n        type: \"boolean\"\n      }\n    },\n    value: {\n      name: \"value\",\n      type: { name: \"number\", required: false },\n      description: \"Value to apply to the control.\",\n      table: {\n        type: { summary: \"string\" },\n        defaultValue: { summary: void 0 }\n      },\n      control: {\n        type: \"number\"\n      }\n    },\n    step: {\n      name: \"step\",\n      type: { name: \"number\", required: false },\n      description: \"Amount to change the value by when using the stepper or arrow key interactions.\",\n      table: {\n        type: { summary: \"string\" },\n        defaultValue: { summary: void 0 }\n      },\n      control: {\n        type: \"number\"\n      }\n    },\n    stepModifier: {\n      name: \"step modifier\",\n      type: { name: \"number\", required: false },\n      description: \"Amount to scale the step increment/decrement when holding the shift key\",\n      table: {\n        type: { summary: \"number\" },\n        defaultValue: { summary: 10 }\n      },\n      control: {\n        type: \"number\"\n      }\n    },\n    placeholder: {\n      name: \"placeholder\",\n      type: { name: \"string\", required: false },\n      description: \"Placeholder to apply to the control.\",\n      table: {\n        type: { summary: \"string\" }\n      },\n      control: {\n        type: \"text\"\n      }\n    },\n    min: {\n      name: \"min\",\n      type: { name: \"number\", required: false },\n      description: \"The minimum value the control can be set to.\",\n      table: {\n        type: { summary: \"number\" },\n        defaultValue: { summary: void 0 }\n      },\n      control: {\n        type: \"number\"\n      }\n    },\n    max: {\n      name: \"max\",\n      type: { name: \"numer\", required: false },\n      description: \"The maximum value the control can be set to.\",\n      table: {\n        type: { summary: \"number\" },\n        defaultValue: { summary: void 0 }\n      },\n      control: {\n        type: \"number\"\n      }\n    }\n  }\n};\nexport const Default = (args = {}) => {\n  const onChange = args.onChange || (() => {\n    return;\n  });\n  const onInput = args.onInput || (() => {\n    return;\n  });\n  return html`\n        <sp-field-label for=\"default\">Enter a number</sp-field-label>\n        <sp-number-field\n            id=\"default\"\n            ...=${spreadProps(args)}\n            @input=${(event) => onInput(event.target.value)}\n            @change=${(event) => onChange(event.target.value)}\n            style=${ifDefined(args.quiet ? void 0 : \"\")}\n        ></sp-number-field>\n    `;\n};\nDefault.args = {\n  value: 100\n};\nexport const quiet = (args = {}) => Default(args);\nquiet.args = {\n  quiet: true,\n  value: 100\n};\nexport const indeterminate = (args = {}) => Default(args);\nindeterminate.args = {\n  value: 100,\n  indeterminate: true\n};\nexport const decimals = (args) => {\n  return html`\n        <sp-field-label for=\"decimals\">\n            Enter a number with visible decimals\n        </sp-field-label>\n        <sp-number-field\n            id=\"decimals\"\n            ...=${spreadProps(args)}\n            @change=${args.onChange}\n            @input=${args.onInput}\n            .formatOptions=${{\n    signDisplay: \"exceptZero\",\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 2\n  }}\n        ></sp-number-field>\n    `;\n};\ndecimals.args = {\n  value: 19.274\n};\nexport const germanDecimals = (args) => {\n  let currentDir = \"ltr\";\n  let currentSystem = \"spectrum-two\";\n  if (window.__swc_hack_knobs__) {\n    currentDir = window.__swc_hack_knobs__.defaultDirection;\n    currentSystem = window.__swc_hack_knobs__.defaultSystemVariant;\n  }\n  return html`\n        <sp-field-label for=\"decimals\">\n            Enter a number with visible decimals\n        </sp-field-label>\n        <sp-theme lang=\"de\" dir=\"${currentDir}\" system=${currentSystem}>\n            <sp-number-field\n                id=\"decimals\"\n                ...=${spreadProps(args)}\n                @change=${args.onChange}\n                @input=${args.onInput}\n                .formatOptions=${{\n    signDisplay: \"exceptZero\",\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 2\n  }}\n            ></sp-number-field>\n        </sp-theme>\n    `;\n};\ngermanDecimals.args = {\n  value: 19.274\n};\nexport const percents = (args = {}) => {\n  return html`\n        <sp-field-label for=\"percents\">Enter a percentage</sp-field-label>\n        <sp-number-field\n            id=\"percents\"\n            ...=${spreadProps(args)}\n            @change=${args.onChange}\n            .formatOptions=${{\n    style: \"percent\",\n    unitDisplay: \"narrow\"\n  }}\n        ></sp-number-field>\n    `;\n};\npercents.args = {\n  value: 0.372\n};\nexport const currency = (args = {}) => {\n  return html`\n        <sp-field-label for=\"currency\">Enter a value in Euros</sp-field-label>\n        <sp-number-field\n            ...=${spreadProps(args)}\n            @change=${args.onChange}\n            .formatOptions=${{\n    style: \"currency\",\n    currency: \"EUR\",\n    currencyDisplay: \"code\",\n    currencySign: \"accounting\"\n  }}\n        ></sp-number-field>\n    `;\n};\ncurrency.args = {\n  value: 23.19\n};\nexport const units = (args) => {\n  return html`\n        <sp-field-label for=\"units\">Enter a lengths in inches</sp-field-label>\n        <sp-number-field\n            id=\"units\"\n            ...=${spreadProps(args)}\n            @change=${args.onChange}\n            .formatOptions=${{\n    style: \"unit\",\n    unit: \"inch\",\n    unitDisplay: \"long\"\n  }}\n        ></sp-number-field>\n    `;\n};\nunits.args = {\n  value: 24\n};\nexport const pixels = (args) => {\n  return html`\n        <sp-field-label for=\"units\">Enter a lengths in pixels</sp-field-label>\n        <sp-number-field\n            id=\"units\"\n            .formatOptions=${{\n    style: \"unit\",\n    unit: \"px\"\n  }}\n            ...=${spreadProps(args)}\n            @change=${args.onChange}\n        ></sp-number-field>\n    `;\n};\npixels.args = {\n  value: 800\n};\nexport const minMax = (args) => html`\n    <sp-field-label for=\"min-max\">\n        Enter a value between 0 and 255\n    </sp-field-label>\n    <sp-number-field\n        id=\"min-max\"\n        ...=${spreadProps(args)}\n        @change=${args.onChange}\n    ></sp-number-field>\n`;\nminMax.args = {\n  value: 4,\n  min: 0,\n  max: 255\n};\nexport const hideStepper = (args) => {\n  return html`\n        <sp-field-label for=\"hideStepper\">\n            Enter a number without the stepper UI\n        </sp-field-label>\n        <sp-number-field\n            id=\"hideStepper\"\n            ...=${spreadProps(args)}\n            @change=${args.onChange}\n        ></sp-number-field>\n    `;\n};\nhideStepper.args = {\n  hideStepper: true,\n  value: 67\n};\nexport const hideStepperQuiet = (args) => {\n  return html`\n        <sp-field-label for=\"hideStepper\">\n            Enter a number without the stepper UI\n        </sp-field-label>\n        <sp-number-field\n            id=\"hideStepper\"\n            ...=${spreadProps(args)}\n            @change=${args.onChange}\n        ></sp-number-field>\n    `;\n};\nhideStepperQuiet.args = {\n  hideStepper: true,\n  value: 67,\n  quiet: true\n};\nexport const disabled = (args) => {\n  return html`\n        <sp-field-label for=\"disabled\">\n            This Number Field is disabled\n        </sp-field-label>\n        <sp-number-field\n            id=\"disabled\"\n            ...=${spreadProps(args)}\n            @change=${args.onChange}\n        ></sp-number-field>\n    `;\n};\ndisabled.args = {\n  disabled: true,\n  value: 892\n};\nexport const readOnly = (args) => {\n  return html`\n        <sp-field-label for=\"readonly\">\n            You can only read the following value\n        </sp-field-label>\n        <sp-number-field\n            id=\"readonly\"\n            ...=${spreadProps(args)}\n            @change=${args.onChange}\n        ></sp-number-field>\n    `;\n};\nreadOnly.args = {\n  readonly: true,\n  value: \"15\"\n};\nexport const validationIcons = (args) => {\n  return html`\n        <sp-field-label for=\"invalidHiddenStepper\">\n            Invalid Number Field without Stepper\n        </sp-field-label>\n        <sp-number-field\n            invalid\n            id=\"invalidHiddenStepper\"\n            ...=${spreadProps(args)}\n            invalid\n        ></sp-number-field>\n        <sp-field-label for=\"validStepper\">\n            Valid Number Field with Stepper\n        </sp-field-label>\n        <sp-number-field id=\"validStepper\" valid></sp-number-field>\n        <sp-field-label for=\"invalidStepper\">\n            Invalid Number Field with Stepper\n        </sp-field-label>\n        <sp-number-field id=\"invalidStepper\" invalid></sp-number-field>\n    `;\n};\nvalidationIcons.args = {\n  invalid: true,\n  value: \"15\",\n  hideStepper: true\n};\nexport const ScrollingContainer = (args = {}) => {\n  const onChange = args.onChange || (() => {\n    return;\n  });\n  const onInput = args.onInput || (() => {\n    return;\n  });\n  return html`\n        <style>\n            .scroller {\n                height: 140px;\n                width: 200px;\n                overflow-y: scroll;\n                padding: 10px;\n                background: var(--spectrum-gray-50);\n            }\n\n            .scroller > div {\n                height: 1000px;\n            }\n        </style>\n        <div class=\"scroller\">\n            <div>\n                <sp-field-label for=\"default\">Enter a number</sp-field-label>\n                <sp-number-field\n                    id=\"default\"\n                    ...=${spreadProps(args)}\n                    @input=${(event) => onInput(event.target.value)}\n                    @change=${(event) => onChange(event.target.value)}\n                ></sp-number-field>\n                <p>\n                    This box should not scroll when the focus is inside the\n                    number field and field value is changed by using the mouse\n                    wheel.\n                </p>\n            </div>\n        </div>\n    `;\n};\n//# sourceMappingURL=number-field.stories.js.map\n;export const __namedExportsOrder = [\"Default\",\"quiet\",\"indeterminate\",\"decimals\",\"germanDecimals\",\"percents\",\"currency\",\"units\",\"pixels\",\"minMax\",\"hideStepper\",\"hideStepperQuiet\",\"disabled\",\"readOnly\",\"validationIcons\",\"ScrollingContainer\"];"],"names":[],"sourceRoot":""}