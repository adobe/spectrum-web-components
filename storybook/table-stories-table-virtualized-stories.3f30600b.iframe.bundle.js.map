{"version":3,"file":"table-stories-table-virtualized-stories.3f30600b.iframe.bundle.js","mappings":";;AAoBA;AACA;AACA;AACA;ACtBA;;AAqEA;AACA;;;;AAIA;;;;;;;;;;;;;;;;AA2BA;;AAYA;;;;;AASA;AACA;AACA;AAMA;AACA;AACA;AAKA;;;;;;;;;AAeA;;;;;AAUA;AACA;AACA;AAUA;AACA;;;;;;;;;;AAYA;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAaA;;;;;AAqBA;AACA;AACA;;AAWA;AACA;;;;;;;;;;AAYA;AAMA;;;;;;;AAUA","sources":["webpack://@adobe/spectrum-web-components/./packages/table/stories/index.js","webpack://@adobe/spectrum-web-components/./packages/table/stories/table-virtualized.stories.js"],"sourcesContent":["\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nexport function makeItems(count) {\n  const total = count;\n  const items = [];\n  while (count) {\n    count--;\n    items.push({\n      name: String(total - count),\n      date: count\n    });\n  }\n  return items;\n}\nexport const renderItem = (item, index) => {\n  if (item._$rowType$ === 1) {\n    return html`\n            <sp-table-cell>This row has no checkbox!</sp-table-cell>\n        `;\n  }\n  return html`\n        <sp-table-cell>Row Item ${item.name}</sp-table-cell>\n        <sp-table-cell>Row Item ${item.date}</sp-table-cell>\n        <sp-table-cell>Row Item ${index}</sp-table-cell>\n    `;\n};\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/table/sp-table.js\";\nimport \"@spectrum-web-components/table/sp-table-checkbox-cell.js\";\nimport \"@spectrum-web-components/table/sp-table-head.js\";\nimport \"@spectrum-web-components/table/sp-table-head-cell.js\";\nimport \"@spectrum-web-components/table/sp-table-body.js\";\nimport \"@spectrum-web-components/table/sp-table-row.js\";\nimport \"@spectrum-web-components/table/sp-table-cell.js\";\nimport { makeItems, renderItem } from \"./index.js\";\nexport default {\n  title: \"Table/Virtualized\",\n  component: \"sp-table\",\n  argTypes: {\n    onChange: { action: \"change\" },\n    selected: {\n      name: \"selected\",\n      description: \"The array of item values selected by the Table.\",\n      type: { name: \"\", required: false },\n      control: \"text\"\n    },\n    selects: {\n      name: \"selects\",\n      description: 'If the Table accepts a \"single\" or \"multiple\" selection.',\n      control: {\n        type: \"inline-radio\",\n        options: [\"\", \"single\", \"multiple\"]\n      }\n    }\n  },\n  args: {\n    selects: \"\",\n    selected: []\n  }\n};\nclass VirtualTable extends SpectrumElement {\n  constructor() {\n    super();\n    this.items = makeItems(50);\n    this.compareItems = (sortKey, sortDirection) => (a, b) => {\n      const doSortKey = sortKey;\n      if (!isNaN(Number(a[doSortKey]))) {\n        const first = Number(a[doSortKey]);\n        const second = Number(b[doSortKey]);\n        return sortDirection === \"asc\" ? first - second : second - first;\n      } else {\n        const first = String(a[doSortKey]);\n        const second = String(b[doSortKey]);\n        return sortDirection === \"asc\" ? first.localeCompare(second) : second.localeCompare(first);\n      }\n    };\n    this.items.sort(this.compareItems(\"name\", \"desc\"));\n  }\n  render() {\n    return html`\n            <sp-table\n                .items=${this.items}\n                .renderItem=${renderItem}\n                size=\"m\"\n                scroller=\"true\"\n                style=\"height: 200px\"\n                @sorted=${(event) => {\n      const { sortKey, sortDirection } = event.detail;\n      const items = [...this.items];\n      items.sort(\n        this.compareItems(\n          sortKey,\n          sortDirection\n        )\n      );\n      this.items = items;\n    }}\n            >\n                <sp-table-head>\n                    <sp-table-head-cell\n                        sortable\n                        sort-key=\"name\"\n                        sort-direction=\"desc\"\n                    >\n                        Column Title\n                    </sp-table-head-cell>\n                    <sp-table-head-cell sortable sort-key=\"date\">\n                        Column Title\n                    </sp-table-head-cell>\n                    <sp-table-head-cell>Column Title</sp-table-head-cell>\n                </sp-table-head>\n            </sp-table>\n        `;\n  }\n}\n__decorateClass([\n  property({ type: Array })\n], VirtualTable.prototype, \"items\", 2);\ncustomElements.define(\"virtual-table\", VirtualTable);\nconst virtualItems = makeItems(50);\nexport const virtualized = () => {\n  return html`\n        <virtual-table></virtual-table>\n    `;\n};\nexport const virtualizedSingle = (args) => {\n  const onChange = args.onChange || (() => {\n    return;\n  });\n  return html`\n        <sp-table\n            size=\"m\"\n            scroller=\"true\"\n            style=\"height: 300px\"\n            selects=${args.selects}\n            .selected=${args.selected}\n            @change=${({ target }) => {\n    const next = target.nextElementSibling;\n    next.textContent = `Selected: ${JSON.stringify(\n      target.selected\n    )}`;\n  }}\n            .items=${virtualItems}\n            .renderItem=${renderItem}\n            @visibilityChanged=${(event) => onChange({\n    first: event.first,\n    last: event.last,\n    type: \"visibility\"\n  })}\n            @rangeChanged=${(event) => onChange({\n    first: event.first,\n    last: event.last,\n    type: \"range\"\n  })}\n        >\n            <sp-table-head>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n            </sp-table-head>\n        </sp-table>\n        <div>Selected: [\"49\"]</div>\n    `;\n};\nvirtualizedSingle.args = {\n  selects: \"single\",\n  selected: [\"49\"]\n};\nexport const virtualizedMultiple = (args) => {\n  return html`\n        <sp-table\n            size=\"m\"\n            scroller=\"true\"\n            style=\"height: 200px\"\n            selects=${args.selects}\n            .selected=${args.selected}\n            @change=${({ target }) => {\n    const next = target.nextElementSibling;\n    next.textContent = `Selected: ${JSON.stringify(\n      target.selected,\n      null,\n      \" \"\n    )}`;\n    const nextNext = next.nextElementSibling;\n    nextNext.textContent = `Selected Count: ${target.selected.length}`;\n  }}\n            .items=${virtualItems}\n            .renderItem=${renderItem}\n        >\n            <sp-table-head>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n            </sp-table-head>\n        </sp-table>\n        <div>Selected: [\"0\", \"48\"]</div>\n        <div>Selected Count: 2</div>\n    `;\n};\nvirtualizedMultiple.args = {\n  selects: \"multiple\",\n  selected: [\"0\", \"48\"]\n};\nexport const virtualizedCustomValue = (args) => {\n  return html`\n        <sp-table\n            size=\"m\"\n            scroller=\"true\"\n            style=\"height: 200px\"\n            selects=${args.selects}\n            .selected=${args.selected}\n            @change=${args.onChange}\n            .items=${virtualItems}\n            .itemValue=${(item) => \"applied-\" + item.date}\n            .renderItem=${renderItem}\n        >\n            <sp-table-head>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n            </sp-table-head>\n            <sp-table-body></sp-table-body>\n        </sp-table>\n        <div>Selected: [\"0\", \"48\", \"applied-47\"]</div>\n        <div>Selected Count: 2</div>\n    `;\n};\nvirtualizedCustomValue.args = {\n  selected: [\"0\", \"48\", \"applied-47\"],\n  selects: \"multiple\",\n  onChange: ({ target }) => {\n    const next = target.nextElementSibling;\n    next.textContent = `Selected: ${JSON.stringify(\n      target.selected,\n      null,\n      \" \"\n    )}`;\n    const nextNext = next.nextElementSibling;\n    nextNext.textContent = `Selected Count: ${target.selected.length}`;\n  }\n};\nexport const virtualizedCustomRow = (args) => {\n  virtualItems.splice(3, 1, { name: \"Scoobert\", date: 2, _$rowType$: 1 });\n  return html`\n        <sp-table\n            size=\"m\"\n            scroller=\"true\"\n            style=\"height: 200px\"\n            selects=${args.selects}\n            .selected=${args.selected}\n            @change=${({ target }) => {\n    const next = target.nextElementSibling;\n    next.textContent = `Selected: ${JSON.stringify(\n      target.selected,\n      null,\n      \" \"\n    )}`;\n    const nextNext = next.nextElementSibling;\n    nextNext.textContent = `Selected Count: ${target.selected.length}`;\n  }}\n            scroller?=\"false\"\n            .items=${virtualItems}\n            .renderItem=${renderItem}\n        >\n            <sp-table-head>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n            </sp-table-head>\n        </sp-table>\n        <div>Selected: [\"0\", \"48\"]</div>\n        <div>Selected Count: 2</div>\n    `;\n};\nvirtualizedCustomRow.args = {\n  selects: \"multiple\",\n  selected: [\"0\", \"48\"]\n};\nexport const virtualizedNoScroller = () => {\n  return html`\n        <sp-table size=\"m\" .items=${virtualItems} .renderItem=${renderItem}>\n            <sp-table-head>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n                <sp-table-head-cell>Column Title</sp-table-head-cell>\n            </sp-table-head>\n        </sp-table>\n    `;\n};\n//# sourceMappingURL=table-virtualized.stories.js.map\n;export const __namedExportsOrder = [\"virtualized\",\"virtualizedSingle\",\"virtualizedMultiple\",\"virtualizedCustomValue\",\"virtualizedCustomRow\",\"virtualizedNoScroller\"];"],"names":[],"sourceRoot":""}