{"version":3,"file":"8614.39c8ea1e.iframe.bundle.js","mappings":";;AACA;;AA8FA;AAMA;AAEA;;AAIA;;AAGA;;;;AA+DA;;;AAKA;;;AAGA;;AAGA;;ACvLA;AAiDA;AAEA;;ACnDA;;AAgEA;;;;AAOA;AAOA;;;AAIA;;;AAKA;;;AAGA;;AAGA;;AAIA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAGA;;AC7GA","sources":["webpack://@adobe/spectrum-web-components/./packages/alert-dialog/src/AlertDialog.dev.js","webpack://@adobe/spectrum-web-components/./packages/button-group/src/ButtonGroup.dev.js","webpack://@adobe/spectrum-web-components/./packages/dialog/src/Dialog.dev.js","webpack://@adobe/spectrum-web-components/./packages/divider/src/divider.css.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/button/sp-button.js\";\nimport { FocusVisiblePolyfillMixin } from \"@spectrum-web-components/shared/src/focus-visible.js\";\nimport { randomID } from \"@spectrum-web-components/shared/src/random-id.js\";\nimport { conditionAttributeWithId } from \"@spectrum-web-components/base/src/condition-attribute-with-id.js\";\nimport { ResizeController } from \"@lit-labs/observers/resize-controller.js\";\nimport alertStyles from \"./alert-dialog.css.js\";\nexport const alertDialogVariants = [\n  \"confirmation\",\n  \"information\",\n  \"warning\",\n  \"error\",\n  \"destructive\",\n  \"secondary\"\n];\nfunction gatherAppliedIdsFromSlottedChildren(slot, idBase) {\n  const assignedElements = slot.assignedElements();\n  const ids = [];\n  assignedElements.forEach((el) => {\n    if (el.id) {\n      ids.push(el.id);\n    } else {\n      const id = idBase + `-${randomID()}`;\n      el.id = id;\n      ids.push(id);\n    }\n  });\n  return ids;\n}\nconst _AlertDialog = class _AlertDialog extends FocusVisiblePolyfillMixin(SpectrumElement) {\n  constructor() {\n    super(...arguments);\n    this.resizeController = new ResizeController(this, {\n      callback: () => {\n        this.shouldManageTabOrderForScrolling();\n      }\n    });\n    this._variant = \"\";\n    this.labelledbyId = `sp-dialog-label-${_AlertDialog.instanceCount++}`;\n    this.shouldManageTabOrderForScrolling = () => {\n      if (!this.contentElement) return;\n      const { offsetHeight, scrollHeight } = this.contentElement;\n      if (offsetHeight < scrollHeight) {\n        this.contentElement.tabIndex = 0;\n      } else {\n        this.contentElement.removeAttribute(\"tabindex\");\n      }\n    };\n    this.describedbyId = `sp-dialog-description-${_AlertDialog.instanceCount++}`;\n  }\n  static get styles() {\n    return [alertStyles];\n  }\n  set variant(variant) {\n    if (variant === this.variant) {\n      return;\n    }\n    const oldValue = this.variant;\n    if (alertDialogVariants.includes(variant)) {\n      this.setAttribute(\"variant\", variant);\n      this._variant = variant;\n    } else {\n      this.removeAttribute(\"variant\");\n      this._variant = \"\";\n    }\n    this.requestUpdate(\"variant\", oldValue);\n  }\n  get variant() {\n    return this._variant;\n  }\n  renderIcon() {\n    switch (this.variant) {\n      case \"warning\":\n      case \"error\":\n        return html`\n                    <sp-icon-alert class=\"icon\"></sp-icon-alert>\n                `;\n      default:\n        return html``;\n    }\n  }\n  renderHeading() {\n    return html`\n            <slot name=\"heading\" @slotchange=${this.onHeadingSlotchange}></slot>\n        `;\n  }\n  renderContent() {\n    return html`\n            <div class=\"content\">\n                <slot @slotchange=${this.onContentSlotChange}></slot>\n            </div>\n        `;\n  }\n  onHeadingSlotchange({\n    target\n  }) {\n    if (this.conditionLabelledby) {\n      this.conditionLabelledby();\n      delete this.conditionLabelledby;\n    }\n    const ids = gatherAppliedIdsFromSlottedChildren(\n      target,\n      this.labelledbyId\n    );\n    if (ids.length) {\n      this.conditionLabelledby = conditionAttributeWithId(\n        this,\n        \"aria-labelledby\",\n        ids\n      );\n    }\n  }\n  onContentSlotChange({\n    target\n  }) {\n    requestAnimationFrame(() => {\n      this.resizeController.unobserve(this.contentElement);\n      this.resizeController.observe(this.contentElement);\n    });\n    if (this.conditionDescribedby) {\n      this.conditionDescribedby();\n      delete this.conditionDescribedby;\n    }\n    const ids = gatherAppliedIdsFromSlottedChildren(\n      target,\n      this.describedbyId\n    );\n    if (ids.length && ids.length < 4) {\n      this.conditionDescribedby = conditionAttributeWithId(\n        this,\n        \"aria-describedby\",\n        ids\n      );\n    } else if (!ids.length) {\n      const idProvided = !!this.id;\n      if (!idProvided) this.id = this.describedbyId;\n      const conditionDescribedby = conditionAttributeWithId(\n        this,\n        \"aria-describedby\",\n        this.id\n      );\n      this.conditionDescribedby = () => {\n        conditionDescribedby();\n        if (!idProvided) {\n          this.removeAttribute(\"id\");\n        }\n      };\n    }\n  }\n  renderButtons() {\n    return html`\n            <sp-button-group class=\"button-group\">\n                <slot name=\"button\"></slot>\n            </sp-button-group>\n        `;\n  }\n  render() {\n    return html`\n            <div class=\"grid\">\n                <div class=\"header\">\n                    ${this.renderHeading()} ${this.renderIcon()}\n                </div>\n                <sp-divider size=\"m\" class=\"divider\"></sp-divider>\n                ${this.renderContent()} ${this.renderButtons()}\n            </div>\n        `;\n  }\n};\n_AlertDialog.instanceCount = 0;\n__decorateClass([\n  query(\".content\")\n], _AlertDialog.prototype, \"contentElement\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], _AlertDialog.prototype, \"variant\", 1);\nexport let AlertDialog = _AlertDialog;\n//# sourceMappingURL=AlertDialog.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SizedMixin,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport styles from \"./button-group.css.js\";\nexport class ButtonGroup extends SizedMixin(SpectrumElement, {\n  noDefaultSize: true\n}) {\n  constructor() {\n    super(...arguments);\n    this.vertical = false;\n  }\n  static get styles() {\n    return [styles];\n  }\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (changedProperties.has(\"size\")) {\n      this.manageChildrenSize(this.slotElement);\n    }\n  }\n  handleSlotchange({\n    target: slot\n  }) {\n    this.manageChildrenSize(slot);\n  }\n  manageChildrenSize(slot) {\n    const assignedElements = slot.assignedElements();\n    assignedElements.forEach((button) => {\n      button.size = this.size;\n    });\n  }\n  render() {\n    return html`\n            <slot @slotchange=${this.handleSlotchange}></slot>\n        `;\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], ButtonGroup.prototype, \"vertical\", 2);\n__decorateClass([\n  query(\"slot\")\n], ButtonGroup.prototype, \"slotElement\", 2);\n//# sourceMappingURL=ButtonGroup.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/button-group/sp-button-group.js\";\nimport \"@spectrum-web-components/button/sp-close-button.js\";\nimport \"@spectrum-web-components/divider/sp-divider.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js\";\nimport { ObserveSlotPresence } from \"@spectrum-web-components/shared\";\nimport { AlertDialog } from \"@spectrum-web-components/alert-dialog/src/AlertDialog.js\";\nimport { classMap } from \"@spectrum-web-components/base/src/directives.js\";\nimport styles from \"./dialog.css.js\";\nexport class Dialog extends ObserveSlotPresence(AlertDialog, [\n  '[slot=\"hero\"]',\n  '[slot=\"footer\"]',\n  '[slot=\"button\"]'\n]) {\n  constructor() {\n    super(...arguments);\n    this.error = false;\n    this.dismissable = false;\n    this.dismissLabel = \"Close\";\n    this.noDivider = false;\n  }\n  static get styles() {\n    return [styles];\n  }\n  get hasFooter() {\n    return this.getSlotContentPresence('[slot=\"footer\"]');\n  }\n  get hasButtons() {\n    return this.getSlotContentPresence('[slot=\"button\"]');\n  }\n  /* c8 ignore next 3 */\n  get hasHero() {\n    return this.getSlotContentPresence('[slot=\"hero\"]');\n  }\n  close() {\n    this.dispatchEvent(\n      new Event(\"close\", {\n        bubbles: true,\n        composed: true,\n        cancelable: true\n      })\n    );\n  }\n  renderHero() {\n    return html`\n            <slot name=\"hero\"></slot>\n        `;\n  }\n  renderFooter() {\n    return html`\n            <div class=\"footer\">\n                <slot name=\"footer\"></slot>\n            </div>\n        `;\n  }\n  renderButtons() {\n    const classes = {\n      \"button-group\": true,\n      \"button-group--noFooter\": !this.hasFooter\n    };\n    return html`\n            <sp-button-group class=${classMap(classes)}>\n                <slot name=\"button\"></slot>\n            </sp-button-group>\n        `;\n  }\n  renderDismiss() {\n    return html`\n            <sp-close-button\n                class=\"close-button\"\n                label=${this.dismissLabel}\n                quiet\n                size=\"m\"\n                @click=${this.close}\n            ></sp-close-button>\n        `;\n  }\n  render() {\n    return html`\n            <div class=\"grid\">\n                ${this.renderHero()} ${this.renderHeading()}\n                ${this.error ? html`\n                          <sp-icon-alert class=\"type-icon\"></sp-icon-alert>\n                      ` : nothing}\n                ${this.noDivider ? nothing : html`\n                          <sp-divider size=\"m\" class=\"divider\"></sp-divider>\n                      `}\n                ${this.renderContent()}\n                ${this.hasFooter ? this.renderFooter() : nothing}\n                ${this.hasButtons ? this.renderButtons() : nothing}\n                ${this.dismissable ? this.renderDismiss() : nothing}\n            </div>\n        `;\n  }\n  shouldUpdate(changes) {\n    if (changes.has(\"mode\") && !!this.mode) {\n      this.dismissable = false;\n    }\n    if (changes.has(\"dismissable\") && this.dismissable) {\n      this.dismissable = !this.mode;\n    }\n    return super.shouldUpdate(changes);\n  }\n  firstUpdated(changes) {\n    super.firstUpdated(changes);\n    this.setAttribute(\"role\", \"dialog\");\n  }\n  updated(changes) {\n    super.updated(changes);\n  }\n}\n__decorateClass([\n  query(\".close-button\")\n], Dialog.prototype, \"closeButton\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Dialog.prototype, \"error\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Dialog.prototype, \"dismissable\", 2);\n__decorateClass([\n  property({ type: String, reflect: true, attribute: \"dismiss-label\" })\n], Dialog.prototype, \"dismissLabel\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true, attribute: \"no-divider\" })\n], Dialog.prototype, \"noDivider\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], Dialog.prototype, \"mode\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], Dialog.prototype, \"size\", 2);\n//# sourceMappingURL=Dialog.dev.js.map\n","\"use strict\";import{css as r}from\"@spectrum-web-components/base\";const i=r`\n    @media (forced-colors:active){:host{--highcontrast-divider-background-color:CanvasText}}:host{--spectrum-divider-thickness:var(--spectrum-divider-thickness-medium)}:host([size=s]){--spectrum-divider-thickness:var(--spectrum-divider-thickness-small)}:host([size=l]){--spectrum-divider-thickness:var(--spectrum-divider-thickness-large);--spectrum-divider-background-color:var(--spectrum-gray-800)}:host([static-color=white]){--mod-divider-background-color:var(--mod-divider-background-color-medium-static-white,var(--spectrum-divider-background-color-static-white))}:host([static-color=white][size=s]){--mod-divider-background-color:var(--mod-divider-background-color-small-static-white,var(--spectrum-divider-background-color-static-white))}:host([static-color=white][size=l]){--mod-divider-background-color:var(--mod-divider-background-color-large-static-white,var(--spectrum-transparent-white-800))}:host([static-color=black]){--mod-divider-background-color:var(--mod-divider-background-color-medium-static-black,var(--spectrum-divider-background-color-static-black))}:host([static-color=black][size=s]){--mod-divider-background-color:var(--mod-divider-background-color-small-static-black,var(--spectrum-divider-background-color-static-black))}:host([static-color=black][size=l]){--mod-divider-background-color:var(--mod-divider-background-color-large-static-black,var(--spectrum-transparent-black-800))}:host{block-size:var(--mod-divider-thickness,var(--spectrum-divider-thickness));inline-size:100%;border:none;border-width:var(--mod-divider-thickness,var(--spectrum-divider-thickness));border-radius:var(--mod-divider-thickness,var(--spectrum-divider-thickness));background-color:var(--highcontrast-divider-background-color,var(--mod-divider-background-color,var(--spectrum-divider-background-color)));overflow:visible}:host([vertical]){inline-size:var(--mod-divider-thickness,var(--spectrum-divider-thickness));block-size:100%;block-size:var(--mod-divider-vertical-height,100%);margin-block:var(--mod-divider-vertical-margin);align-self:var(--mod-divider-vertical-align)}:host{--spectrum-divider-background-color:var(--system-divider-background-color);--spectrum-divider-background-color-static-white:var(--system-divider-background-color-static-white);--spectrum-divider-background-color-static-black:var(--system-divider-background-color-static-black)}:host{display:block}hr{border:none;margin:0}\n`;export default i;\n//# sourceMappingURL=divider.css.js.map\n"],"names":[],"sourceRoot":""}