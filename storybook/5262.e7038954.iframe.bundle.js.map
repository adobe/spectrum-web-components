{"version":3,"file":"5262.e7038954.iframe.bundle.js","mappings":";;;AAGA;;;AAGA;AACA;AACA;;;;;ACRA;;;ACGA;;;AAGA;AACA;AACA;;;;;;;;;ACwCA;;AC/CA;;AA4BA;;AC5BA;;AAyCA;AACA;AACA;AACA;AACA;;;AAIA;;AChDA;;ACDA;AA4FA;;;;AAIA;;AAGA;;ACnGA;;AAwCA;AACA;;AAGA;;AC5CA;;AA2EA;AACA;;AAGA;;;;ACZA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AAgPA;AAEA;AA2DA;AAEA","sources":["webpack://@adobe/spectrum-web-components/./packages/icons-ui/src/icons-s2/Arrow100.js","webpack://@adobe/spectrum-web-components/./packages/icons-ui/src/elements/IconArrow100.js","webpack://@adobe/spectrum-web-components/./packages/icons-ui/src/icons/Arrow100.js","webpack://@adobe/spectrum-web-components/./packages/table/src/TableBody.dev.js","webpack://@adobe/spectrum-web-components/./packages/table/src/TableCell.dev.js","webpack://@adobe/spectrum-web-components/./packages/table/src/TableCheckboxCell.dev.js","webpack://@adobe/spectrum-web-components/./packages/icon/src/spectrum-icon-arrow.css.js","webpack://@adobe/spectrum-web-components/./packages/table/src/TableHeadCell.dev.js","webpack://@adobe/spectrum-web-components/./packages/table/src/TableHead.dev.js","webpack://@adobe/spectrum-web-components/./packages/table/src/TableRow.dev.js","webpack://@adobe/spectrum-web-components/./packages/table/src/Table.dev.js"],"sourcesContent":["\"use strict\";import{tag as l}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const Arrow100Icon=({width:t=24,height:e=24,hidden:r=!1,title:a=\"Arrow100\"}={})=>l`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 10 10\"\n    aria-hidden=${r?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${a}\"\n    width=\"${t}\"\n    height=\"${e}\"\n  >\n    <path\n      d=\"M9.7 4.387 6.623 1.262a.875.875 0 1 0-1.247 1.226l1.61 1.637H.925a.875.875 0 0 0 0 1.75h6.062l-1.61 1.637a.875.875 0 1 0 1.247 1.226l3.075-3.125a.874.874 0 0 0 0-1.226z\"\n    />\n  </svg>`;\n//# sourceMappingURL=Arrow100.js.map\n","\"use strict\";import{html as e}from\"@spectrum-web-components/base\";import{IconBase as t}from\"@spectrum-web-components/icon\";import{setCustomTemplateLiteralTag as r}from\"../custom-tag.js\";import{Arrow100Icon as o}from\"../icons-s2/Arrow100.js\";import{Arrow100Icon as l}from\"../icons/Arrow100.js\";export class IconArrow100 extends t{render(){return r(e),this.spectrumVersion===2?o({hidden:!this.label,title:this.label}):l({hidden:!this.label,title:this.label})}}\n//# sourceMappingURL=IconArrow100.js.map\n","\"use strict\";import{tag as l}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const Arrow100Icon=({width:t=24,height:e=24,hidden:r=!1,title:a=\"Arrow100\"}={})=>l`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 10 10\"\n    aria-hidden=${r?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${a}\"\n    width=\"${t}\"\n    height=\"${e}\"\n  >\n    <path\n      d=\"M9.7 4.387 6.623 1.262a.875.875 0 1 0-1.247 1.226l1.61 1.637H.925a.875.875 0 0 0 0 1.75h6.062l-1.61 1.637a.875.875 0 1 0 1.247 1.226l3.075-3.125a.874.874 0 0 0 0-1.226z\"\n    />\n  </svg>`;\n//# sourceMappingURL=Arrow100.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport styles from \"./table-body.css.js\";\nimport { MutationController } from \"@lit-labs/observers/mutation-controller.js\";\nexport class TableBody extends SpectrumElement {\n  constructor() {\n    super();\n    this.role = \"rowgroup\";\n    new MutationController(this, {\n      config: {\n        childList: true,\n        subtree: true\n      },\n      callback: () => {\n        requestAnimationFrame(() => {\n          this.shouldHaveTabIndex();\n        });\n      }\n    });\n  }\n  static get styles() {\n    return [styles];\n  }\n  shouldHaveTabIndex() {\n    if (this.offsetHeight < this.scrollHeight) {\n      this.tabIndex = 0;\n    } else {\n      this.removeAttribute(\"tabindex\");\n    }\n  }\n  render() {\n    return html`\n            <slot></slot>\n        `;\n  }\n}\n__decorateClass([\n  property({ reflect: true })\n], TableBody.prototype, \"role\", 2);\n//# sourceMappingURL=TableBody.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport styles from \"./table-cell.css.js\";\nexport class TableCell extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.role = \"gridcell\";\n  }\n  static get styles() {\n    return [styles];\n  }\n  render() {\n    return html`\n            <slot></slot>\n        `;\n  }\n}\n__decorateClass([\n  property({ reflect: true })\n], TableCell.prototype, \"role\", 2);\n//# sourceMappingURL=TableCell.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/checkbox/sp-checkbox.js\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport styles from \"./table-checkbox-cell.css.js\";\nexport class TableCheckboxCell extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.headCell = false;\n    this.role = \"gridcell\";\n    this.indeterminate = false;\n    this.checked = false;\n    this.disabled = false;\n    this.selectsSingle = false;\n    this.emphasized = false;\n  }\n  static get styles() {\n    return [styles];\n  }\n  click() {\n    this.checkbox.click();\n  }\n  render() {\n    return html`\n            <sp-checkbox\n                ?checked=${this.checked}\n                ?indeterminate=${this.indeterminate}\n                ?disabled=${this.disabled}\n                ?emphasized=${this.emphasized}\n                aria-hidden=${ifDefined(this.selectsSingle)}\n                class=\"checkbox\"\n            ></sp-checkbox>\n        `;\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true, attribute: \"head-cell\" })\n], TableCheckboxCell.prototype, \"headCell\", 2);\n__decorateClass([\n  property({ reflect: true })\n], TableCheckboxCell.prototype, \"role\", 2);\n__decorateClass([\n  query(\".checkbox\")\n], TableCheckboxCell.prototype, \"checkbox\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], TableCheckboxCell.prototype, \"indeterminate\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], TableCheckboxCell.prototype, \"checked\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], TableCheckboxCell.prototype, \"disabled\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true, attribute: \"selects-single\" })\n], TableCheckboxCell.prototype, \"selectsSingle\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], TableCheckboxCell.prototype, \"emphasized\", 2);\n//# sourceMappingURL=TableCheckboxCell.dev.js.map\n","\"use strict\";import{css as r}from\"@spectrum-web-components/base\";const o=r`\n    .spectrum-UIIcon-ArrowRight75{--spectrum-icon-size:var(--spectrum-arrow-icon-size-75)}.spectrum-UIIcon-ArrowRight100{--spectrum-icon-size:var(--spectrum-arrow-icon-size-100)}.spectrum-UIIcon-ArrowRight200{--spectrum-icon-size:var(--spectrum-arrow-icon-size-200)}.spectrum-UIIcon-ArrowRight300{--spectrum-icon-size:var(--spectrum-arrow-icon-size-300)}.spectrum-UIIcon-ArrowRight400{--spectrum-icon-size:var(--spectrum-arrow-icon-size-400)}.spectrum-UIIcon-ArrowRight500{--spectrum-icon-size:var(--spectrum-arrow-icon-size-500)}.spectrum-UIIcon-ArrowRight600{--spectrum-icon-size:var(--spectrum-arrow-icon-size-600)}.spectrum-UIIcon-ArrowDown75{--spectrum-icon-size:var(--spectrum-arrow-icon-size-75);transform:rotate(90deg)}.spectrum-UIIcon-ArrowDown100{--spectrum-icon-size:var(--spectrum-arrow-icon-size-100);transform:rotate(90deg)}.spectrum-UIIcon-ArrowDown200{--spectrum-icon-size:var(--spectrum-arrow-icon-size-200);transform:rotate(90deg)}.spectrum-UIIcon-ArrowDown300{--spectrum-icon-size:var(--spectrum-arrow-icon-size-300);transform:rotate(90deg)}.spectrum-UIIcon-ArrowDown400{--spectrum-icon-size:var(--spectrum-arrow-icon-size-400);transform:rotate(90deg)}.spectrum-UIIcon-ArrowDown500{--spectrum-icon-size:var(--spectrum-arrow-icon-size-500);transform:rotate(90deg)}.spectrum-UIIcon-ArrowDown600{--spectrum-icon-size:var(--spectrum-arrow-icon-size-600);transform:rotate(90deg)}.spectrum-UIIcon-ArrowLeft75{--spectrum-icon-size:var(--spectrum-arrow-icon-size-75);transform:rotate(180deg)}.spectrum-UIIcon-ArrowLeft100{--spectrum-icon-size:var(--spectrum-arrow-icon-size-100);transform:rotate(180deg)}.spectrum-UIIcon-ArrowLeft200{--spectrum-icon-size:var(--spectrum-arrow-icon-size-200);transform:rotate(180deg)}.spectrum-UIIcon-ArrowLeft300{--spectrum-icon-size:var(--spectrum-arrow-icon-size-300);transform:rotate(180deg)}.spectrum-UIIcon-ArrowLeft400{--spectrum-icon-size:var(--spectrum-arrow-icon-size-400);transform:rotate(180deg)}.spectrum-UIIcon-ArrowLeft500{--spectrum-icon-size:var(--spectrum-arrow-icon-size-500);transform:rotate(180deg)}.spectrum-UIIcon-ArrowLeft600{--spectrum-icon-size:var(--spectrum-arrow-icon-size-600);transform:rotate(180deg)}.spectrum-UIIcon-ArrowUp75{--spectrum-icon-size:var(--spectrum-arrow-icon-size-75);transform:rotate(270deg)}.spectrum-UIIcon-ArrowUp100{--spectrum-icon-size:var(--spectrum-arrow-icon-size-100);transform:rotate(270deg)}.spectrum-UIIcon-ArrowUp200{--spectrum-icon-size:var(--spectrum-arrow-icon-size-200);transform:rotate(270deg)}.spectrum-UIIcon-ArrowUp300{--spectrum-icon-size:var(--spectrum-arrow-icon-size-300);transform:rotate(270deg)}.spectrum-UIIcon-ArrowUp400{--spectrum-icon-size:var(--spectrum-arrow-icon-size-400);transform:rotate(270deg)}.spectrum-UIIcon-ArrowUp500{--spectrum-icon-size:var(--spectrum-arrow-icon-size-500);transform:rotate(270deg)}.spectrum-UIIcon-ArrowUp600{--spectrum-icon-size:var(--spectrum-arrow-icon-size-600);transform:rotate(270deg)}\n`;export default o;\n//# sourceMappingURL=spectrum-icon-arrow.css.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/icons-ui/icons/sp-icon-arrow100.js\";\nimport styles from \"./table-head-cell.css.js\";\nimport arrowStyles from \"@spectrum-web-components/icon/src/spectrum-icon-arrow.css.js\";\nconst ariaSortValue = (sortDirection) => {\n  const values = {\n    asc: \"ascending\",\n    desc: \"descending\"\n  };\n  return values[sortDirection] || \"none\";\n};\nexport class TableHeadCell extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.active = false;\n    this.role = \"columnheader\";\n    this.sortable = false;\n    this.sortKey = \"\";\n  }\n  static get styles() {\n    return [styles, arrowStyles];\n  }\n  handleKeydown(event) {\n    const { code } = event;\n    switch (code) {\n      case \"Space\":\n        event.preventDefault();\n        this.addEventListener(\"keyup\", this.handleKeyup);\n        this.active = true;\n        break;\n      default:\n        break;\n    }\n  }\n  handleKeypress(event) {\n    const { code } = event;\n    switch (code) {\n      case \"Enter\":\n      case \"NumpadEnter\":\n        this.click();\n        break;\n      default:\n        break;\n    }\n  }\n  handleKeyup(event) {\n    const { code } = event;\n    switch (code) {\n      case \"Space\":\n        this.active = false;\n        this.removeEventListener(\"keyup\", this.handleKeyup);\n        this.click();\n        break;\n      default:\n        break;\n    }\n  }\n  handleClick() {\n    if (!this.sortable) return;\n    if (this.sortDirection) {\n      this.sortDirection = this.sortDirection === \"asc\" ? \"desc\" : \"asc\";\n    } else {\n      this.sortDirection = \"asc\";\n    }\n    this.dispatchEvent(\n      new CustomEvent(\"sorted\", {\n        bubbles: true,\n        detail: {\n          sortDirection: this.sortDirection,\n          sortKey: this.sortKey\n        }\n      })\n    );\n  }\n  render() {\n    const visiblySorted = this.sortable && !!this.sortDirection;\n    return html`\n            ${visiblySorted ? html`\n                      <sp-icon-arrow100\n                          class=\"sortedIcon spectrum-UIIcon-ArrowDown100\"\n                      ></sp-icon-arrow100>\n                  ` : nothing}\n            <slot></slot>\n        `;\n  }\n  firstUpdated(changes) {\n    super.firstUpdated(changes);\n    this.addEventListener(\"click\", this.handleClick);\n    this.addEventListener(\"keydown\", this.handleKeydown);\n    this.addEventListener(\"keypress\", this.handleKeypress);\n  }\n  update(changes) {\n    if (changes.has(\"sortDirection\")) {\n      this.setAttribute(\"aria-sort\", ariaSortValue(this.sortDirection));\n    }\n    if (changes.has(\"sortable\")) {\n      this.tabIndex = this.sortable ? 0 : -1;\n    }\n    super.update(changes);\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], TableHeadCell.prototype, \"active\", 2);\n__decorateClass([\n  property({ reflect: true })\n], TableHeadCell.prototype, \"role\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], TableHeadCell.prototype, \"sortable\", 2);\n__decorateClass([\n  property({ reflect: true, attribute: \"sort-direction\" })\n], TableHeadCell.prototype, \"sortDirection\", 2);\n__decorateClass([\n  property({ attribute: \"sort-key\" })\n], TableHeadCell.prototype, \"sortKey\", 2);\n//# sourceMappingURL=TableHeadCell.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport styles from \"./table-head.css.js\";\nexport class TableHead extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.role = \"row\";\n  }\n  static get styles() {\n    return [styles];\n  }\n  handleSorted({ target }) {\n    const childCells = [...this.children];\n    childCells.forEach((cell) => {\n      if (cell !== target) {\n        cell.sortDirection = void 0;\n      }\n    });\n  }\n  handleChange({\n    target: checkboxCell\n  }) {\n    this.selected = checkboxCell.checkbox.checked || checkboxCell.checkbox.indeterminate;\n  }\n  render() {\n    return html`\n            <slot\n                @sorted=${this.handleSorted}\n                @change=${this.handleChange}\n            ></slot>\n        `;\n  }\n}\n__decorateClass([\n  property({ reflect: true })\n], TableHead.prototype, \"role\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], TableHead.prototype, \"selected\", 2);\n//# sourceMappingURL=TableHead.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  queryAssignedElements\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport styles from \"./table-row.css.js\";\nexport class TableRow extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.role = \"row\";\n    this.selectable = false;\n    this.selected = false;\n    this.value = \"\";\n  }\n  static get styles() {\n    return [styles];\n  }\n  async handleChange(event) {\n    if (!event.target.checkbox) {\n      return;\n    }\n    this.selected = event.target.checkbox.checked;\n    await 0;\n    if (event.defaultPrevented) {\n      this.selected = !this.selected;\n    }\n  }\n  handleSlotchange({\n    target\n  }) {\n    const assignedElements = target.assignedElements();\n    this.selectable = !!assignedElements.find(\n      (el) => el.localName === \"sp-table-checkbox-cell\"\n    );\n  }\n  async manageSelected() {\n    await this.updateComplete;\n    if (this.selectable) {\n      this.setAttribute(\n        \"aria-selected\",\n        this.selected ? \"true\" : \"false\"\n      );\n    } else {\n      this.removeAttribute(\"aria-selected\");\n    }\n    const [checkboxCell] = this.checkboxCells;\n    if (!checkboxCell) return;\n    checkboxCell.checked = this.selected;\n  }\n  handleClick(event) {\n    if (event.composedPath().find(\n      (node) => node.localName === \"sp-table-checkbox-cell\"\n    )) {\n      return;\n    }\n    const [checkboxCell] = this.checkboxCells;\n    if (!checkboxCell) return;\n    checkboxCell.click();\n  }\n  render() {\n    return html`\n            <slot\n                @change=${this.handleChange}\n                @slotchange=${this.handleSlotchange}\n            ></slot>\n        `;\n  }\n  willUpdate(changed) {\n    if (changed.has(\"selected\")) {\n      this.manageSelected();\n    }\n    if (changed.has(\"selectable\")) {\n      if (this.selectable) {\n        this.addEventListener(\"click\", this.handleClick);\n      } else {\n        this.removeEventListener(\"click\", this.handleClick);\n      }\n    }\n  }\n}\n__decorateClass([\n  queryAssignedElements({\n    selector: \"sp-table-checkbox-cell\",\n    flatten: true\n  })\n], TableRow.prototype, \"checkboxCells\", 2);\n__decorateClass([\n  property({ reflect: true })\n], TableRow.prototype, \"role\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], TableRow.prototype, \"selectable\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], TableRow.prototype, \"selected\", 2);\n__decorateClass([\n  property({ type: String })\n], TableRow.prototype, \"value\", 2);\n//# sourceMappingURL=TableRow.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing,\n  render,\n  SizedMixin,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/table/sp-table-body.js\";\nimport \"@spectrum-web-components/table/sp-table-row.js\";\nimport \"@spectrum-web-components/table/sp-table-checkbox-cell.js\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport styles from \"./table.css.js\";\nimport {\n  virtualize,\n  virtualizerRef\n} from \"@lit-labs/virtualizer/virtualize.js\";\nimport {\n  RangeChangedEvent,\n  VisibilityChangedEvent\n} from \"@lit-labs/virtualizer/events.js\";\nexport var RowType = /* @__PURE__ */ ((RowType2) => {\n  RowType2[RowType2[\"ITEM\"] = 0] = \"ITEM\";\n  RowType2[RowType2[\"INFORMATION\"] = 1] = \"INFORMATION\";\n  return RowType2;\n})(RowType || {});\nexport class Table extends SizedMixin(SpectrumElement, {\n  validSizes: [\"s\", \"m\", \"l\", \"xl\"],\n  noDefaultSize: true\n}) {\n  constructor() {\n    super(...arguments);\n    this._renderItem = /* c8 ignore next */\n    () => html``;\n    this.role = \"grid\";\n    this.selected = [];\n    this.selectedSet = /* @__PURE__ */ new Set();\n    this.items = [];\n    this.itemValue = (_item, index) => {\n      return `${index}`;\n    };\n    this.scroller = false;\n    this.emphasized = false;\n    this.quiet = false;\n  }\n  static get styles() {\n    return [styles];\n  }\n  get renderItem() {\n    return this._renderItem;\n  }\n  set renderItem(fn) {\n    this._renderItem = (item, index) => {\n      const value = this.itemValue(item, index);\n      const selected = this.selected.includes(value);\n      const hasCheckbox = this.selects && (item == null ? void 0 : item._$rowType$) !== 1;\n      return html`\n                <sp-table-row\n                    value=${value}\n                    aria-rowindex=${index + 1}\n                    ?selected=${selected}\n                >\n                    ${hasCheckbox ? html`\n                              <sp-table-checkbox-cell\n                                  ?checked=${selected}\n                              ></sp-table-checkbox-cell>\n                          ` : nothing}\n                    ${fn(item, index)}\n                </sp-table-row>\n            `;\n    };\n  }\n  get tableHead() {\n    return this.querySelector(\"sp-table-head\");\n  }\n  get tableRows() {\n    if (this.isVirtualized) {\n      return [];\n    }\n    return [...this.querySelectorAll(\"sp-table-row\")];\n  }\n  get isVirtualized() {\n    return !!this.items.length;\n  }\n  focus() {\n    const sortableHeadCell = this.querySelector(\n      \"sp-table-head-cell[sortable]\"\n    );\n    if (sortableHeadCell) {\n      sortableHeadCell.focus();\n    }\n  }\n  selectAllRows() {\n    if (this.isVirtualized) {\n      this.items.forEach((item, index) => {\n        if (item._$rowType$ !== 1) {\n          this.selectedSet.add(this.itemValue(item, index));\n        }\n      });\n    } else {\n      this.tableRows.forEach((row) => {\n        row.selected = true;\n        this.selectedSet.add(row.value);\n      });\n    }\n    this.selected = [...this.selectedSet];\n    if (!this.tableHeadCheckboxCell) return;\n    this.tableHeadCheckboxCell.checked = true;\n    this.tableHeadCheckboxCell.indeterminate = false;\n  }\n  deselectAllRows() {\n    this.selectedSet.clear();\n    this.selected = [];\n    if (!this.isVirtualized) {\n      const selectedRows = [\n        ...this.querySelectorAll(\"[selected]\")\n      ];\n      selectedRows.forEach((row) => {\n        row.selected = false;\n      });\n    }\n    if (!this.tableHeadCheckboxCell) return;\n    this.tableHeadCheckboxCell.checked = false;\n    this.tableHeadCheckboxCell.indeterminate = false;\n  }\n  manageSelects() {\n    var _a;\n    const checkboxes = this.querySelectorAll(\"sp-table-checkbox-cell\");\n    const checkbox = document.createElement(\"sp-table-checkbox-cell\");\n    if (!!this.selects) {\n      let allSelected = false;\n      if (this.isVirtualized) {\n        allSelected = this.selected.length > 0 && this.selected.length === this.items.length;\n      } else {\n        this.tableRows.forEach((row) => {\n          row.selected = this.selectedSet.has(row.value);\n          if (!row.querySelector(\":scope > sp-table-checkbox-cell\")) {\n            const clonedCheckbox = checkbox.cloneNode();\n            checkbox.emphasized = this.emphasized;\n            row.insertAdjacentElement(\"afterbegin\", clonedCheckbox);\n            checkbox.checked = row.selected;\n          }\n        });\n        allSelected = this.selected.length === this.tableRows.length;\n      }\n      if (!this.tableHeadCheckboxCell) {\n        this.tableHeadCheckboxCell = document.createElement(\n          \"sp-table-checkbox-cell\"\n        );\n        this.tableHeadCheckboxCell.headCell = true;\n        this.tableHeadCheckboxCell.emphasized = this.emphasized;\n        (_a = this.tableHead) == null ? void 0 : _a.insertAdjacentElement(\n          \"afterbegin\",\n          this.tableHeadCheckboxCell\n        );\n      }\n      this.manageHeadCheckbox(allSelected);\n    } else {\n      checkboxes.forEach((box) => {\n        box.remove();\n      });\n      delete this.tableHeadCheckboxCell;\n    }\n  }\n  validateSelected() {\n    const rowValues = /* @__PURE__ */ new Set();\n    if (this.isVirtualized) {\n      this.items.forEach((item, index) => {\n        const value = this.itemValue(item, index);\n        rowValues.add(value);\n      });\n    } else {\n      this.tableRows.forEach((row) => {\n        rowValues.add(row.value);\n      });\n    }\n    const oldSelectedCount = this.selected.length;\n    this.selected = this.selected.filter(\n      (selectedItem) => rowValues.has(selectedItem)\n    );\n    if (oldSelectedCount !== this.selected.length) {\n      this.dispatchEvent(\n        new Event(\"change\", {\n          cancelable: true,\n          bubbles: true,\n          composed: true\n        })\n      );\n    }\n    this.selectedSet = new Set(this.selected);\n  }\n  manageSelected() {\n    this.validateSelected();\n    if (this.isVirtualized) return;\n    this.tableRows.forEach((row) => {\n      row.selected = this.selectedSet.has(row.value);\n    });\n    if (this.tableHeadCheckboxCell) {\n      this.tableHeadCheckboxCell.checked = this.selected.length === this.tableRows.length;\n    }\n  }\n  manageCheckboxes() {\n    var _a, _b, _c;\n    if (!!this.selects) {\n      this.tableHeadCheckboxCell = document.createElement(\n        \"sp-table-checkbox-cell\"\n      );\n      this.tableHeadCheckboxCell.headCell = true;\n      this.tableHeadCheckboxCell.emphasized = this.emphasized;\n      const allSelected = this.selected.length === this.tableRows.length;\n      this.manageHeadCheckbox(allSelected);\n      (_a = this.tableHead) == null ? void 0 : _a.insertAdjacentElement(\n        \"afterbegin\",\n        this.tableHeadCheckboxCell\n      );\n      this.tableRows.forEach((row) => {\n        const checkbox = document.createElement(\n          \"sp-table-checkbox-cell\"\n        );\n        checkbox.emphasized = this.emphasized;\n        row.insertAdjacentElement(\"afterbegin\", checkbox);\n        row.selected = this.selectedSet.has(row.value);\n        checkbox.checked = row.selected;\n      });\n    } else {\n      (_c = (_b = this.tableHead) == null ? void 0 : _b.querySelector(\"sp-table-checkbox-cell\")) == null ? void 0 : _c.remove();\n      this.tableRows.forEach((row) => {\n        var _a2;\n        (_a2 = row.checkboxCells[0]) == null ? void 0 : _a2.remove();\n        if (this.selected.length) {\n          row.selected = this.selectedSet.has(row.value);\n        }\n      });\n    }\n  }\n  manageHeadCheckbox(allSelected) {\n    if (!this.tableHeadCheckboxCell) return;\n    this.tableHeadCheckboxCell.selectsSingle = this.selects === \"single\";\n    this.tableHeadCheckboxCell.emphasized = this.emphasized;\n    this.tableHeadCheckboxCell.checked = allSelected;\n    this.tableHeadCheckboxCell.indeterminate = this.selected.length > 0 && !allSelected;\n  }\n  handleChange(event) {\n    event.stopPropagation();\n    const previousSelectedSet = new Set(this.selectedSet);\n    const previousSelected = [...this.selected];\n    const { target } = event;\n    const { parentElement: rowItem } = target;\n    if (!rowItem.value) {\n      const { checkbox } = target;\n      if (!checkbox) return;\n      if (checkbox.checked || checkbox.indeterminate) {\n        this.selectAllRows();\n      } else {\n        this.deselectAllRows();\n      }\n    } else {\n      switch (this.selects) {\n        case \"single\": {\n          this.deselectAllRows();\n          if (rowItem.selected) {\n            this.selectedSet.add(rowItem.value);\n            this.selected = [...this.selectedSet];\n          }\n          break;\n        }\n        case \"multiple\": {\n          if (rowItem.selected) {\n            this.selectedSet.add(rowItem.value);\n          } else {\n            this.selectedSet.delete(rowItem.value);\n          }\n          this.selected = [...this.selectedSet];\n          const allSelected = this.selected.length === this.tableRows.length;\n          if (!this.tableHeadCheckboxCell)\n            return;\n          this.tableHeadCheckboxCell.checked = allSelected;\n          this.tableHeadCheckboxCell.indeterminate = this.selected.length > 0 && !allSelected;\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n    }\n    const applyDefault = this.dispatchEvent(\n      new Event(\"change\", {\n        cancelable: true,\n        bubbles: true,\n        composed: true\n      })\n    );\n    if (!applyDefault) {\n      event.preventDefault();\n      this.selectedSet = previousSelectedSet;\n      this.selected = previousSelected;\n    }\n  }\n  scrollToIndex(index) {\n    if (index && !!this.tableBody) {\n      const virtualizerParent = this.tableBody;\n      const item = virtualizerParent[virtualizerRef].element(index);\n      if (item) {\n        item.scrollIntoView();\n      }\n    }\n  }\n  render() {\n    return html`\n            <slot @change=${this.handleChange}></slot>\n        `;\n  }\n  willUpdate(changed) {\n    if (!this.hasUpdated) {\n      this.validateSelected();\n      this.manageCheckboxes();\n    }\n    if (changed.has(\"selects\")) {\n      this.manageSelects();\n    }\n    if (changed.has(\"selected\") && this.hasUpdated) {\n      this.manageSelected();\n    }\n  }\n  updated() {\n    if (this.items.length) {\n      this.renderVirtualizedItems();\n    } else {\n      this.removeAttribute(\"aria-rowcount\");\n    }\n  }\n  renderVirtualizedItems() {\n    if (!this.isConnected) return;\n    if (!this.tableBody) {\n      this.tableBody = this.querySelector(\"sp-table-body\");\n      if (!this.tableBody) {\n        this.tableBody = document.createElement(\"sp-table-body\");\n        this.append(this.tableBody);\n      }\n      this.tableBody.addEventListener(\n        \"rangeChanged\",\n        (event) => {\n          this.dispatchEvent(\n            new RangeChangedEvent({\n              first: event.first,\n              last: event.last\n            })\n          );\n        }\n      );\n      this.tableBody.addEventListener(\n        \"visibilityChanged\",\n        (event) => {\n          this.dispatchEvent(\n            new VisibilityChangedEvent({\n              first: event.first,\n              last: event.last\n            })\n          );\n        }\n      );\n    }\n    this.setAttribute(\"aria-rowcount\", `${this.items.length}`);\n    const config = {\n      items: this.items,\n      renderItem: this.renderItem,\n      scroller: this.scroller\n    };\n    render(\n      html`\n                ${virtualize(config)}\n            `,\n      this.tableBody\n    );\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n  }\n}\n__decorateClass([\n  property({ reflect: true })\n], Table.prototype, \"role\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], Table.prototype, \"selects\", 2);\n__decorateClass([\n  property({ type: Array })\n], Table.prototype, \"selected\", 2);\n__decorateClass([\n  property({ type: Array })\n], Table.prototype, \"items\", 2);\n__decorateClass([\n  property({ type: Object })\n], Table.prototype, \"itemValue\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Table.prototype, \"scroller\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Table.prototype, \"emphasized\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Table.prototype, \"quiet\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], Table.prototype, \"density\", 2);\n//# sourceMappingURL=Table.dev.js.map\n"],"names":[],"sourceRoot":""}