{"version":3,"file":"4377.bc851c08.iframe.bundle.js","mappings":";;AACA;;;AAuDA;AACA;;AAGA;;AC3DA;AAgFA;AAEA;;AClFA;;;;AA4EA;;;AAGA;;;;AAIA;;AAEA;AAEA","sources":["webpack://@adobe/spectrum-web-components/./packages/avatar/src/Avatar.dev.js","webpack://@adobe/spectrum-web-components/./packages/tags/src/Tags.dev.js","webpack://@adobe/spectrum-web-components/./packages/tags/src/Tag.dev.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport { LikeAnchor } from \"@spectrum-web-components/shared/src/like-anchor.js\";\nimport { Focusable } from \"@spectrum-web-components/shared/src/focusable.js\";\nimport avatarStyles from \"./avatar.css.js\";\nconst validSizes = [50, 75, 100, 200, 300, 400, 500, 600, 700];\nconst defaultSize = validSizes[2];\nexport class Avatar extends LikeAnchor(Focusable) {\n  constructor() {\n    super(...arguments);\n    this.src = \"\";\n    this._size = defaultSize;\n  }\n  static get styles() {\n    return [avatarStyles];\n  }\n  get focusElement() {\n    return this.anchorElement || this;\n  }\n  get size() {\n    return this._size;\n  }\n  set size(value) {\n    const size = value;\n    const validSize = validSizes.includes(size) ? size : defaultSize;\n    if (validSize) {\n      this.setAttribute(\"size\", `${validSize}`);\n    }\n    if (this._size === validSize) {\n      return;\n    }\n    const oldSize = this._size;\n    this._size = validSize;\n    this.requestUpdate(\"size\", oldSize);\n  }\n  render() {\n    const avatar = html`\n            <img\n                class=\"image\"\n                alt=${ifDefined(this.label || void 0)}\n                src=${this.src}\n            />\n        `;\n    if (this.href) {\n      return this.renderAnchor({\n        id: \"link\",\n        className: \"link\",\n        anchorContent: avatar\n      });\n    }\n    return avatar;\n  }\n  firstUpdated(changes) {\n    super.firstUpdated(changes);\n    if (!this.hasAttribute(\"size\")) {\n      this.setAttribute(\"size\", `${this.size}`);\n    }\n  }\n}\n__decorateClass([\n  query(\"#link\")\n], Avatar.prototype, \"anchorElement\", 2);\n__decorateClass([\n  property()\n], Avatar.prototype, \"src\", 2);\n__decorateClass([\n  property({ type: Number, reflect: true })\n], Avatar.prototype, \"size\", 1);\n//# sourceMappingURL=Avatar.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport { queryAssignedNodes } from \"@spectrum-web-components/base/src/decorators.js\";\nimport { FocusVisiblePolyfillMixin } from \"@spectrum-web-components/shared/src/focus-visible.js\";\nimport { RovingTabindexController } from \"@spectrum-web-components/reactive-controllers/src/RovingTabindex.js\";\nimport { Tag } from \"./Tag.dev.js\";\nimport styles from \"./tags.css.js\";\nexport class Tags extends FocusVisiblePolyfillMixin(SpectrumElement) {\n  constructor() {\n    super();\n    this.rovingTabindexController = new RovingTabindexController(this, {\n      focusInIndex: (elements) => {\n        return elements.findIndex((el) => {\n          return !el.disabled && el.deletable;\n        });\n      },\n      elements: () => this.tags,\n      isFocusableElement: (el) => !el.disabled && el.deletable\n    });\n    this.handleFocusin = () => {\n      this.addEventListener(\"focusout\", this.handleFocusout);\n      this.addEventListener(\"keydown\", this.handleKeydown);\n    };\n    this.handleKeydown = (event) => {\n      const { code } = event;\n      if (code !== \"PageUp\" && code !== \"PageDown\") return;\n      const circularIndexedElement = (list, index) => list[(list.length + index) % list.length];\n      const tagsSiblings = [\n        ...this.getRootNode().querySelectorAll(\n          \"sp-tags\"\n        )\n      ];\n      if (tagsSiblings.length < 2) {\n        return;\n      }\n      event.preventDefault();\n      const currentIndex = tagsSiblings.indexOf(this);\n      const offset = code === \"PageUp\" ? -1 : 1;\n      let nextTagsIndex = currentIndex + offset;\n      let nextTags = circularIndexedElement(tagsSiblings, nextTagsIndex);\n      while (!nextTags.tags.length) {\n        nextTagsIndex += offset;\n        nextTags = circularIndexedElement(tagsSiblings, nextTagsIndex);\n      }\n      nextTags.focus();\n    };\n    this.handleFocusout = () => {\n      this.removeEventListener(\"keydown\", this.handleKeydown);\n      this.removeEventListener(\"focusout\", this.handleFocusout);\n    };\n    this.addEventListener(\"focusin\", this.handleFocusin);\n  }\n  static get styles() {\n    return [styles];\n  }\n  get tags() {\n    return this.defaultNodes.filter(\n      (node) => node instanceof Tag\n    );\n  }\n  focus() {\n    this.rovingTabindexController.focus();\n  }\n  handleSlotchange() {\n    this.rovingTabindexController.clearElementCache();\n  }\n  render() {\n    return html`\n            <slot @slotchange=${this.handleSlotchange}></slot>\n        `;\n  }\n  firstUpdated() {\n    if (!this.hasAttribute(\"role\")) {\n      this.setAttribute(\"role\", \"list\");\n    }\n    if (!this.hasAttribute(\"aria-label\")) {\n      this.setAttribute(\"aria-label\", \"Tags\");\n    }\n  }\n}\n__decorateClass([\n  queryAssignedNodes()\n], Tags.prototype, \"defaultNodes\", 2);\n//# sourceMappingURL=Tags.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing,\n  SizedMixin,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/button/sp-clear-button.js\";\nimport styles from \"./tag.css.js\";\nexport class Tag extends SizedMixin(SpectrumElement, {\n  validSizes: [\"s\", \"m\", \"l\"],\n  noDefaultSize: true\n}) {\n  constructor() {\n    super();\n    this.deletable = false;\n    this.disabled = false;\n    this.readonly = false;\n    this.handleFocusin = () => {\n      this.addEventListener(\"focusout\", this.handleFocusout);\n      this.addEventListener(\"keydown\", this.handleKeydown);\n    };\n    this.handleFocusout = () => {\n      this.removeEventListener(\"keydown\", this.handleKeydown);\n      this.removeEventListener(\"focusout\", this.handleFocusout);\n    };\n    this.handleKeydown = (event) => {\n      if (!this.deletable || this.disabled) {\n        return;\n      }\n      const { code } = event;\n      switch (code) {\n        case \"Backspace\":\n        case \"Space\":\n        case \"Delete\":\n          this.delete();\n        default:\n          return;\n      }\n    };\n    this.addEventListener(\"focusin\", this.handleFocusin);\n  }\n  static get styles() {\n    return [styles];\n  }\n  delete() {\n    if (this.readonly) {\n      return;\n    }\n    const applyDefault = this.dispatchEvent(\n      new Event(\"delete\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true\n      })\n    );\n    if (!applyDefault) {\n      return;\n    }\n    this.remove();\n  }\n  render() {\n    return html`\n            <slot name=\"avatar\"></slot>\n            <slot name=\"icon\"></slot>\n            <span class=\"label\"><slot></slot></span>\n            ${this.deletable ? html`\n                      <sp-clear-button\n                          class=\"clear-button\"\n                          ?disabled=${this.disabled}\n                          label=\"Remove\"\n                          size=\"s\"\n                          tabindex=\"-1\"\n                          @click=${this.delete}\n                      ></sp-clear-button>\n                  ` : nothing}\n        `;\n  }\n  firstUpdated(changes) {\n    super.firstUpdated(changes);\n    if (!this.hasAttribute(\"role\")) {\n      this.setAttribute(\"role\", \"listitem\");\n    }\n    if (this.deletable) {\n      this.setAttribute(\"tabindex\", \"0\");\n    }\n  }\n  updated(changes) {\n    super.updated(changes);\n    if (changes.has(\"disabled\")) {\n      if (this.disabled) {\n        this.setAttribute(\"aria-disabled\", \"true\");\n      } else {\n        this.removeAttribute(\"aria-disabled\");\n      }\n    }\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Tag.prototype, \"deletable\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Tag.prototype, \"disabled\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Tag.prototype, \"readonly\", 2);\n//# sourceMappingURL=Tag.dev.js.map\n"],"names":[],"sourceRoot":""}