{"version":3,"file":"4282.3c12b724.iframe.bundle.js","mappings":";;AACA;;AAgEA;;;;AAOA;AAOA;;;AAIA;;;AAKA;;;AAGA;;AAGA;;AAIA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAGA;;;;ACsCA;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;ACzKA;;ACDA","sources":["webpack://@adobe/spectrum-web-components/./packages/dialog/src/Dialog.dev.js","webpack://@adobe/spectrum-web-components/./packages/dialog/src/DialogBase.dev.js","webpack://@adobe/spectrum-web-components/./packages/modal/src/modal.css.js","webpack://@adobe/spectrum-web-components/./packages/underlay/src/Underlay.dev.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/button-group/sp-button-group.js\";\nimport \"@spectrum-web-components/button/sp-close-button.js\";\nimport \"@spectrum-web-components/divider/sp-divider.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js\";\nimport { ObserveSlotPresence } from \"@spectrum-web-components/shared\";\nimport { AlertDialog } from \"@spectrum-web-components/alert-dialog/src/AlertDialog.js\";\nimport { classMap } from \"@spectrum-web-components/base/src/directives.js\";\nimport styles from \"./dialog.css.js\";\nexport class Dialog extends ObserveSlotPresence(AlertDialog, [\n  '[slot=\"hero\"]',\n  '[slot=\"footer\"]',\n  '[slot=\"button\"]'\n]) {\n  constructor() {\n    super(...arguments);\n    this.error = false;\n    this.dismissable = false;\n    this.dismissLabel = \"Close\";\n    this.noDivider = false;\n  }\n  static get styles() {\n    return [styles];\n  }\n  get hasFooter() {\n    return this.getSlotContentPresence('[slot=\"footer\"]');\n  }\n  get hasButtons() {\n    return this.getSlotContentPresence('[slot=\"button\"]');\n  }\n  /* c8 ignore next 3 */\n  get hasHero() {\n    return this.getSlotContentPresence('[slot=\"hero\"]');\n  }\n  close() {\n    this.dispatchEvent(\n      new Event(\"close\", {\n        bubbles: true,\n        composed: true,\n        cancelable: true\n      })\n    );\n  }\n  renderHero() {\n    return html`\n            <slot name=\"hero\"></slot>\n        `;\n  }\n  renderFooter() {\n    return html`\n            <div class=\"footer\">\n                <slot name=\"footer\"></slot>\n            </div>\n        `;\n  }\n  renderButtons() {\n    const classes = {\n      \"button-group\": true,\n      \"button-group--noFooter\": !this.hasFooter\n    };\n    return html`\n            <sp-button-group class=${classMap(classes)}>\n                <slot name=\"button\"></slot>\n            </sp-button-group>\n        `;\n  }\n  renderDismiss() {\n    return html`\n            <sp-close-button\n                class=\"close-button\"\n                label=${this.dismissLabel}\n                quiet\n                size=\"m\"\n                @click=${this.close}\n            ></sp-close-button>\n        `;\n  }\n  render() {\n    return html`\n            <div class=\"grid\">\n                ${this.renderHero()} ${this.renderHeading()}\n                ${this.error ? html`\n                          <sp-icon-alert class=\"type-icon\"></sp-icon-alert>\n                      ` : nothing}\n                ${this.noDivider ? nothing : html`\n                          <sp-divider size=\"m\" class=\"divider\"></sp-divider>\n                      `}\n                ${this.renderContent()}\n                ${this.hasFooter ? this.renderFooter() : nothing}\n                ${this.hasButtons ? this.renderButtons() : nothing}\n                ${this.dismissable ? this.renderDismiss() : nothing}\n            </div>\n        `;\n  }\n  shouldUpdate(changes) {\n    if (changes.has(\"mode\") && !!this.mode) {\n      this.dismissable = false;\n    }\n    if (changes.has(\"dismissable\") && this.dismissable) {\n      this.dismissable = !this.mode;\n    }\n    return super.shouldUpdate(changes);\n  }\n  firstUpdated(changes) {\n    super.firstUpdated(changes);\n    this.setAttribute(\"role\", \"dialog\");\n  }\n  updated(changes) {\n    super.updated(changes);\n  }\n}\n__decorateClass([\n  query(\".close-button\")\n], Dialog.prototype, \"closeButton\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Dialog.prototype, \"error\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Dialog.prototype, \"dismissable\", 2);\n__decorateClass([\n  property({ type: String, reflect: true, attribute: \"dismiss-label\" })\n], Dialog.prototype, \"dismissLabel\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true, attribute: \"no-divider\" })\n], Dialog.prototype, \"noDivider\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], Dialog.prototype, \"mode\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], Dialog.prototype, \"size\", 2);\n//# sourceMappingURL=Dialog.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/underlay/sp-underlay.js\";\nimport \"@spectrum-web-components/button/sp-button.js\";\nimport \"@spectrum-web-components/dialog/sp-dialog.js\";\nimport modalWrapperStyles from \"@spectrum-web-components/modal/src/modal-wrapper.css.js\";\nimport modalStyles from \"@spectrum-web-components/modal/src/modal.css.js\";\nimport { FocusVisiblePolyfillMixin } from \"@spectrum-web-components/shared\";\nimport { firstFocusableIn } from \"@spectrum-web-components/shared/src/first-focusable-in.js\";\nexport class DialogBase extends FocusVisiblePolyfillMixin(SpectrumElement) {\n  constructor() {\n    super(...arguments);\n    this.dismissable = false;\n    this.open = false;\n    this.responsive = false;\n    this.transitionPromise = Promise.resolve();\n    this.resolveTransitionPromise = () => {\n      return;\n    };\n    this.underlay = false;\n    this.animating = false;\n  }\n  static get styles() {\n    return [modalWrapperStyles, modalStyles];\n  }\n  get dialog() {\n    const dialog = this.shadowRoot.querySelector(\"slot\").assignedElements()[0];\n    if (true) {\n      if (!dialog) {\n        window.__swc.warn(\n          this,\n          `<${this.localName}> expects to be provided dialog content via its default slot.`,\n          \"https://opensource.adobe.com/spectrum-web-components/components/dialog-base/#dialog\"\n        );\n      }\n    }\n    return dialog || this;\n  }\n  async focus() {\n    if (this.shadowRoot) {\n      const firstFocusable = firstFocusableIn(this.dialog);\n      if (firstFocusable) {\n        if (firstFocusable.updateComplete) {\n          await firstFocusable.updateComplete;\n        }\n        firstFocusable.focus();\n      } else {\n        this.dialog.focus();\n      }\n    } else {\n      super.focus();\n    }\n  }\n  overlayWillCloseCallback() {\n    if (!this.open) return this.animating;\n    this.close();\n    return true;\n  }\n  dismiss() {\n    if (!this.dismissable) {\n      return;\n    }\n    this.close();\n  }\n  handleClose(event) {\n    event.stopPropagation();\n    this.close();\n  }\n  close() {\n    this.open = false;\n  }\n  dispatchClosed() {\n    this.dispatchEvent(\n      new Event(\"close\", {\n        bubbles: true\n      })\n    );\n  }\n  handleTransitionEvent(event) {\n    this.dispatchEvent(\n      new TransitionEvent(event.type, {\n        bubbles: true,\n        composed: true,\n        propertyName: event.propertyName\n      })\n    );\n  }\n  handleUnderlayTransitionend(event) {\n    if (!this.open && event.propertyName === \"visibility\") {\n      this.resolveTransitionPromise();\n    }\n    this.handleTransitionEvent(event);\n  }\n  handleModalTransitionend(event) {\n    if (this.open || !this.underlay) {\n      this.resolveTransitionPromise();\n    }\n    this.handleTransitionEvent(event);\n  }\n  get hasTransitionDuration() {\n    const modal = this.shadowRoot.querySelector(\".modal\");\n    const modalTransitionDurations = window.getComputedStyle(modal).transitionDuration;\n    for (const duration of modalTransitionDurations.split(\",\"))\n      if (parseFloat(duration) > 0) return true;\n    const underlay = this.shadowRoot.querySelector(\n      \"sp-underlay\"\n    );\n    if (underlay) {\n      const underlayTransitionDurations = window.getComputedStyle(underlay).transitionDuration;\n      for (const duration of underlayTransitionDurations.split(\",\"))\n        if (parseFloat(duration) > 0) return true;\n    }\n    return false;\n  }\n  update(changes) {\n    if (changes.has(\"open\") && changes.get(\"open\") !== void 0) {\n      const hasTransitionDuration = this.hasTransitionDuration;\n      this.animating = true;\n      this.transitionPromise = new Promise((res) => {\n        this.resolveTransitionPromise = () => {\n          this.animating = false;\n          if (!this.open && hasTransitionDuration)\n            this.dispatchClosed();\n          res();\n        };\n      });\n      if (!this.open && !hasTransitionDuration) this.dispatchClosed();\n    }\n    super.update(changes);\n  }\n  renderDialog() {\n    return html`\n            <slot></slot>\n        `;\n  }\n  render() {\n    return html`\n            ${this.underlay ? html`\n                      <sp-underlay\n                          ?open=${this.open}\n                          @close=${this.dismiss}\n                          @transitionrun=${this.handleTransitionEvent}\n                          @transitionend=${this.handleUnderlayTransitionend}\n                          @transitioncancel=${this.handleTransitionEvent}\n                      ></sp-underlay>\n                  ` : nothing}\n            <div\n                class=\"modal ${this.mode}\"\n                @transitionrun=${this.handleTransitionEvent}\n                @transitionend=${this.handleModalTransitionend}\n                @transitioncancel=${this.handleTransitionEvent}\n                @close=${this.handleClose}\n            >\n                ${this.renderDialog()}\n            </div>\n        `;\n  }\n  updated(changes) {\n    if (changes.has(\"open\")) {\n      if (this.open) {\n        if (\"updateComplete\" in this.dialog && \"shouldManageTabOrderForScrolling\" in this.dialog) {\n          this.dialog.updateComplete.then(() => {\n            this.dialog.shouldManageTabOrderForScrolling();\n          });\n        }\n      }\n    }\n  }\n  /**\n   * Bind the open/close transition into the update complete lifecycle so\n   * that the overlay system can wait for it to be \"visibly ready\" before\n   * attempting to throw focus into the content contained herein. Not\n   * waiting for this can cause small amounts of page scroll to happen\n   * while opening the Tray when focusable content is included: e.g. Menu\n   * elements whose selected Menu Item is not the first Menu Item.\n   */\n  async getUpdateComplete() {\n    const complete = await super.getUpdateComplete();\n    await this.transitionPromise;\n    return complete;\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], DialogBase.prototype, \"dismissable\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], DialogBase.prototype, \"open\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], DialogBase.prototype, \"mode\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], DialogBase.prototype, \"responsive\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], DialogBase.prototype, \"underlay\", 2);\n//# sourceMappingURL=DialogBase.dev.js.map\n","\"use strict\";import{css as a}from\"@spectrum-web-components/base\";const i=a`\n    :host{--spectrum-modal-confirm-entry-animation-duration:var(--mod-modal-confirm-entry-animation-duration,var(--spectrum-animation-duration-500));--spectrum-modal-confirm-entry-animation-delay:var(--mod-overlay-animation-duration-opened,var(--mod-modal-confirm-entry-animation-delay,var(--spectrum-animation-duration-200)));--spectrum-modal-confirm-exit-animation-duration:var(--mod-overlay-animation-duration,var(--mod-modal-confirm-exit-animation-duration,var(--spectrum-animation-duration-100)));--spectrum-modal-confirm-exit-animation-delay:var(--mod-modal-confirm-exit-animation-delay,var(--spectrum-animation-duration-0));--spectrum-modal-fullscreen-margin:var(--mod-modal-fullscreen-margin,32px)}.modal{visibility:hidden;opacity:0;transform:translateY(var(--mod-modal-confirm-entry-animation-distance,var(--spectrum-dialog-confirm-entry-animation-distance)));z-index:1;max-block-size:90vh;max-block-size:var(--mod-modal-max-height,90vh);max-inline-size:90%;max-inline-size:var(--mod-modal-max-width,90%);background:var(--mod-modal-background-color,var(--spectrum-modal-background-color));border-radius:var(--mod-modal-confirm-border-radius,var(--spectrum-corner-radius-100));pointer-events:auto;transition:opacity var(--spectrum-modal-confirm-exit-animation-duration)var(--spectrum-animation-ease-in)var(--spectrum-modal-confirm-exit-animation-delay),visibility var(--spectrum-animation-duration-0)var(--spectrum-animation-linear)calc(var(--spectrum-modal-confirm-exit-animation-delay) + var(--spectrum-modal-confirm-exit-animation-duration)),transform var(--spectrum-animation-duration-0)var(--spectrum-animation-linear)calc(var(--spectrum-modal-confirm-exit-animation-delay) + var(--spectrum-modal-confirm-exit-animation-duration));outline:none;overflow:hidden}:host([open]) .modal{pointer-events:auto;visibility:visible;opacity:1;transition:transform var(--spectrum-modal-confirm-entry-animation-duration)var(--spectrum-animation-ease-out)var(--spectrum-modal-confirm-entry-animation-delay),opacity var(--spectrum-modal-confirm-entry-animation-duration)var(--spectrum-animation-ease-out)var(--spectrum-modal-confirm-entry-animation-delay);transform:translateY(0)}@media only screen and (device-height<=350px),only screen and (device-width<=400px){:host([responsive]) .modal{inline-size:100%;block-size:100%;max-inline-size:100%;max-block-size:100%;border-radius:0}}.fullscreen{max-inline-size:none;max-block-size:none;position:fixed;inset-block-start:var(--spectrum-modal-fullscreen-margin);inset-block-end:var(--spectrum-modal-fullscreen-margin);inset-inline-start:var(--spectrum-modal-fullscreen-margin);inset-inline-end:var(--spectrum-modal-fullscreen-margin)}.fullscreenTakeover{max-inline-size:none;max-block-size:none;box-sizing:border-box;border:none;border-radius:0;position:fixed;inset:0}.fullscreenTakeover,:host([open]) .fullscreenTakeover{transform:none}:host{--spectrum-modal-background-color:var(--system-modal-background-color)}:host{--spectrum-dialog-confirm-exit-animation-duration:var(--swc-test-duration);--spectrum-dialog-confirm-entry-animation-duration:var(--swc-test-duration);--spectrum-modal-confirm-entry-animation-distance:var(--spectrum-dialog-confirm-entry-animation-distance);height:100dvh}.modal{overflow:visible}\n`;export default i;\n//# sourceMappingURL=modal.css.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport styles from \"./underlay.css.js\";\nexport class Underlay extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.canClick = false;\n    this.open = false;\n  }\n  static get styles() {\n    return [styles];\n  }\n  click() {\n    this.dispatchEvent(new Event(\"close\"));\n  }\n  handlePointerdown() {\n    this.canClick = true;\n  }\n  handlePointerup() {\n    if (this.canClick) {\n      this.click();\n    }\n    this.canClick = false;\n  }\n  render() {\n    return html``;\n  }\n  firstUpdated() {\n    this.addEventListener(\"pointerdown\", this.handlePointerdown);\n    this.addEventListener(\"pointerup\", this.handlePointerup);\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Underlay.prototype, \"open\", 2);\n//# sourceMappingURL=Underlay.dev.js.map\n"],"names":[],"sourceRoot":""}