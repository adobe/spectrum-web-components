{"version":3,"file":"meter-stories-meter-stories.7007f74d.iframe.bundle.js","mappings":";;AACA;AA4DA;AACA;AACA;;AAEA;AACA;;;;;AAQA;;;AAIA;;ACjDA;;AAKA;;AAKA;;AAKA;;;AAhCA;AACA;AACA;AACA;;;;;AAKA;;AAyBA;;;;AAtCA","sources":["webpack://@adobe/spectrum-web-components/./packages/meter/src/Meter.dev.js","webpack://@adobe/spectrum-web-components/./packages/meter/stories/meter.stories.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing,\n  SizedMixin,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { getLabelFromSlot } from \"@spectrum-web-components/shared/src/get-label-from-slot.js\";\nimport { ObserveSlotText } from \"@spectrum-web-components/shared/src/observe-slot-text.js\";\nimport { LanguageResolutionController } from \"@spectrum-web-components/reactive-controllers/src/LanguageResolution.js\";\nimport \"@spectrum-web-components/field-label/sp-field-label.js\";\nimport styles from \"./meter.css.js\";\nexport const meterVariants = [\"positive\", \"notice\", \"negative\"];\nexport class Meter extends SizedMixin(ObserveSlotText(SpectrumElement, \"\"), {\n  noDefaultSize: true\n}) {\n  constructor() {\n    super(...arguments);\n    this.progress = 0;\n    this._variant = \"\";\n    this.label = \"\";\n    this.languageResolver = new LanguageResolutionController(this);\n    // called sideLabel\n    this.sideLabel = false;\n  }\n  static get styles() {\n    return [styles];\n  }\n  set variant(variant) {\n    if (variant === this.variant) {\n      return;\n    }\n    const oldValue = this.variant;\n    if (meterVariants.includes(variant)) {\n      this.setAttribute(\"variant\", variant);\n      this._variant = variant;\n    } else {\n      this.removeAttribute(\"variant\");\n      this._variant = \"\";\n    }\n    this.requestUpdate(\"variant\", oldValue);\n  }\n  get variant() {\n    return this._variant;\n  }\n  render() {\n    return html`\n            <sp-field-label size=${this.size} class=\"label\">\n                ${this.slotHasContent ? nothing : this.label}\n                <slot @slotchange=${this.handleSlotchange}>${this.label}</slot>\n            </sp-field-label>\n            <sp-field-label size=${this.size} class=\"percentage\">\n                ${new Intl.NumberFormat(this.languageResolver.language, {\n      style: \"percent\",\n      unitDisplay: \"narrow\"\n    }).format(this.progress / 100)}\n            </sp-field-label>\n            <div class=\"track\">\n                <div\n                    class=\"fill\"\n                    style=\"transform: scaleX(calc(${this.progress} / 100));\"\n                ></div>\n            </div>\n        `;\n  }\n  handleSlotchange() {\n    const labelFromSlot = getLabelFromSlot(this.label, this.slotEl);\n    if (labelFromSlot) {\n      this.label = labelFromSlot;\n    }\n  }\n  firstUpdated(changes) {\n    super.firstUpdated(changes);\n    this.setAttribute(\"role\", \"meter progressbar\");\n  }\n  updated(changes) {\n    super.updated(changes);\n    if (changes.has(\"progress\")) {\n      this.setAttribute(\"aria-valuenow\", \"\" + this.progress);\n    }\n    if (changes.has(\"label\")) {\n      if (this.label.length) {\n        this.setAttribute(\"aria-label\", this.label);\n      } else {\n        this.removeAttribute(\"aria-label\");\n      }\n    }\n  }\n}\n__decorateClass([\n  property({ type: Number })\n], Meter.prototype, \"progress\", 2);\n__decorateClass([\n  property({ type: String })\n], Meter.prototype, \"variant\", 1);\n__decorateClass([\n  property({ type: String, reflect: true })\n], Meter.prototype, \"label\", 2);\n__decorateClass([\n  query(\"slot\")\n], Meter.prototype, \"slotEl\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true, attribute: \"side-label\" })\n], Meter.prototype, \"sideLabel\", 2);\n__decorateClass([\n  property({ reflect: true, attribute: \"static-color\" })\n], Meter.prototype, \"staticColor\", 2);\n//# sourceMappingURL=Meter.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/meter/sp-meter.js\";\nexport default {\n  title: \"Meter\",\n  component: \"sp-meter\"\n};\nconst makeOverBackground = (variant) => (story) => {\n  const color = variant === \"black\" ? \"rgb(181, 209, 211)\" : \"var(--spectrum-seafoam-900)\";\n  return html`\n            <div\n                style=\"\n                    --mod-actionbutton-static-content-color: ${color};\n                    --mod-button-static-content-color: ${color};\n                    background-color: ${color};\n                    color: ${color};\n                    padding: var(--spectrum-font-size-100) var(--spectrum-font-size-400);\n                    display: inline-block;\n                \"\n            >\n                ${story()}\n            </div>\n        `;\n};\nexport const sideLabel = () => {\n  return html`\n        <sp-meter side-label progress=\"50\">Storage Space</sp-meter>\n    `;\n};\nexport const negative = () => {\n  return html`\n        <sp-meter variant=\"negative\" progress=\"95\">Storage Space</sp-meter>\n    `;\n};\nexport const notice = () => {\n  return html`\n        <sp-meter variant=\"notice\" progress=\"73\">Storage Space</sp-meter>\n    `;\n};\nexport const positive = () => {\n  return html`\n        <sp-meter variant=\"positive\" progress=\"50\">Storage Space</sp-meter>\n    `;\n};\nexport const staticWhite = () => {\n  return makeOverBackground(\"white\")(\n    () => html`\n            <sp-meter static-color=\"white\" progress=\"50\">\n                Storage Space\n            </sp-meter>\n        `\n  );\n};\n//# sourceMappingURL=meter.stories.js.map\n;export const __namedExportsOrder = [\"sideLabel\",\"negative\",\"notice\",\"positive\",\"staticWhite\"];"],"names":[],"sourceRoot":""}