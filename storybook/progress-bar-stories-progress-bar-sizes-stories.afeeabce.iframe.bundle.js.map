{"version":3,"file":"progress-bar-stories-progress-bar-sizes-stories.afeeabce.iframe.bundle.js","mappings":";;AACA;AAgEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA;;;AASA;;;;AAIA;;;AAIA;;;;;;AC/EA;;;;;;AASA;;;;;;AASA;;;;;;AAUA","sources":["webpack://@adobe/spectrum-web-components/./packages/progress-bar/src/ProgressBar.dev.js","webpack://@adobe/spectrum-web-components/./packages/progress-bar/stories/progress-bar-sizes.stories.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing,\n  SizedMixin,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { getLabelFromSlot } from \"@spectrum-web-components/shared/src/get-label-from-slot.js\";\nimport { ObserveSlotText } from \"@spectrum-web-components/shared/src/observe-slot-text.js\";\nimport { LanguageResolutionController } from \"@spectrum-web-components/reactive-controllers/src/LanguageResolution.js\";\nimport \"@spectrum-web-components/field-label/sp-field-label.js\";\nimport styles from \"./progress-bar.css.js\";\nexport class ProgressBar extends SizedMixin(\n  ObserveSlotText(SpectrumElement, \"\"),\n  {\n    noDefaultSize: true\n  }\n) {\n  constructor() {\n    super(...arguments);\n    this.indeterminate = false;\n    this.label = \"\";\n    this.languageResolver = new LanguageResolutionController(this);\n    this._overBackground = false;\n    this.sideLabel = false;\n    this.progress = 0;\n  }\n  static get styles() {\n    return [styles];\n  }\n  get overBackground() {\n    return this._overBackground ? \"over-background\" : \"\";\n  }\n  set overBackground(overBackground) {\n    if (overBackground === true) {\n      this.removeAttribute(\"over-background\");\n      this.staticColor = \"white\";\n      if (true) {\n        window.__swc.warn(\n          this,\n          `The \"over-background\" attribute on <${this.localName}> has been deprecated and will be removed in a future release. Use \"static-color='white'\" instead.`,\n          \"https://opensource.adobe.com/spectrum-web-components/components/progress-bar/#variants\",\n          {\n            level: \"deprecation\"\n          }\n        );\n      }\n    }\n  }\n  render() {\n    return html`\n            ${this.slotHasContent || this.label ? html`\n                      <sp-field-label size=${this.size} class=\"label\">\n                          ${this.slotHasContent ? html`` : this.label}\n\n                          <slot @slotchange=${this.handleSlotchange}></slot>\n                      </sp-field-label>\n                  ` : html``}\n            ${this.label ? html`\n                      ${this.indeterminate ? nothing : html`\n                                <sp-field-label\n                                    size=${this.size}\n                                    class=\"percentage\"\n                                >\n                                    ${new Intl.NumberFormat(\n      this.languageResolver.language,\n      {\n        style: \"percent\",\n        unitDisplay: \"narrow\"\n      }\n    ).format(this.progress / 100)}\n                                </sp-field-label>\n                            `}\n                  ` : nothing}\n            <div class=\"track\">\n                <div\n                    class=\"fill\"\n                    style=\"transform: scaleX(calc(${this.progress} / 100));\"\n                ></div>\n            </div>\n        `;\n  }\n  handleSlotchange() {\n    const labelFromSlot = getLabelFromSlot(this.label, this.slotEl);\n    if (labelFromSlot) {\n      this.label = labelFromSlot;\n    }\n  }\n  firstUpdated(changes) {\n    super.firstUpdated(changes);\n    if (!this.hasAttribute(\"role\")) {\n      this.setAttribute(\"role\", \"progressbar\");\n    }\n  }\n  updated(changes) {\n    super.updated(changes);\n    if (changes.has(\"indeterminate\")) {\n      if (this.indeterminate) {\n        this.removeAttribute(\"aria-valuemin\");\n        this.removeAttribute(\"aria-valuemax\");\n        this.removeAttribute(\"aria-valuenow\");\n      } else {\n        this.setAttribute(\"aria-valuemin\", \"0\");\n        this.setAttribute(\"aria-valuemax\", \"100\");\n      }\n    }\n    if (!this.indeterminate && changes.has(\"progress\")) {\n      this.setAttribute(\"aria-valuenow\", \"\" + this.progress);\n    }\n    if (changes.has(\"label\")) {\n      if (this.label.length) {\n        this.setAttribute(\"aria-label\", this.label);\n      } else if (changes.get(\"label\") === this.getAttribute(\"aria-label\")) {\n        this.removeAttribute(\"aria-label\");\n      }\n    }\n    if (true) {\n      if (!this.label && !this.getAttribute(\"aria-label\") && !this.getAttribute(\"aria-labelledby\") && !this.slotHasContent) {\n        window.__swc.warn(\n          this,\n          \"<sp-progress-bar> elements need one of the following to be accessible:\",\n          \"https://opensource.adobe.com/spectrum-web-components/components/progress-bar/#accessibility\",\n          {\n            type: \"accessibility\",\n            issues: [\n              'value supplied to the \"label\" attribute, which will be displayed visually as part of the element, or',\n              \"text content supplied directly to the <sp-progress-circle> element, or\",\n              'value supplied to the \"aria-label\" attribute, which will only be provided to screen readers, or',\n              'an element ID reference supplied to the \"aria-labelledby\" attribute, which will be provided by screen readers and will need to be managed manually by the parent application.'\n            ]\n          }\n        );\n      }\n    }\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], ProgressBar.prototype, \"indeterminate\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], ProgressBar.prototype, \"label\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"over-background\" })\n], ProgressBar.prototype, \"overBackground\", 1);\n__decorateClass([\n  property({ type: Boolean, reflect: true, attribute: \"side-label\" })\n], ProgressBar.prototype, \"sideLabel\", 2);\n__decorateClass([\n  property({ type: Number })\n], ProgressBar.prototype, \"progress\", 2);\n__decorateClass([\n  property({ reflect: true, attribute: \"static-color\" })\n], ProgressBar.prototype, \"staticColor\", 2);\n__decorateClass([\n  query(\"slot\")\n], ProgressBar.prototype, \"slotEl\", 2);\n//# sourceMappingURL=ProgressBar.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/progress-bar/sp-progress-bar.js\";\nexport default {\n  title: \"Progress Bar/Sizes\",\n  component: \"sp-progress-bar\"\n};\nexport const s = () => {\n  return html`\n        <sp-progress-bar\n            label=\"Loading\"\n            progress=\"50\"\n            size=\"s\"\n        ></sp-progress-bar>\n    `;\n};\nexport const m = () => {\n  return html`\n        <sp-progress-bar\n            label=\"Loading\"\n            progress=\"50\"\n            size=\"m\"\n        ></sp-progress-bar>\n    `;\n};\nexport const l = () => {\n  return html`\n        <sp-progress-bar\n            label=\"Loading\"\n            progress=\"50\"\n            size=\"l\"\n        ></sp-progress-bar>\n    `;\n};\nexport const XL = () => {\n  return html`\n        <sp-progress-bar\n            label=\"Loading\"\n            progress=\"50\"\n            size=\"xl\"\n        ></sp-progress-bar>\n    `;\n};\n//# sourceMappingURL=progress-bar-sizes.stories.js.map\n;export const __namedExportsOrder = [\"s\",\"m\",\"l\",\"XL\"];"],"names":[],"sourceRoot":""}