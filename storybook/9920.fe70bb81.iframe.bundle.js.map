{"version":3,"file":"9920.fe70bb81.iframe.bundle.js","mappings":";;;AAqIA;AACA;AAEA;;ACvIA;AA6CA;AAEA;;AAEA;;AAKA;AAmCA;AACA;AAOA;AAGA;AAEA","sources":["webpack://@adobe/spectrum-web-components/./packages/button/src/Button.dev.js","webpack://@adobe/spectrum-web-components/./packages/button/src/ButtonBase.dev.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SizedMixin\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport { ButtonBase } from \"./ButtonBase.dev.js\";\nimport buttonStyles from \"./button.css.js\";\nimport { PendingStateController } from \"@spectrum-web-components/reactive-controllers/src/PendingState.js\";\nexport const VALID_VARIANTS = [\n  \"accent\",\n  \"primary\",\n  \"secondary\",\n  \"negative\",\n  \"white\",\n  \"black\"\n];\nexport const VALID_STATIC_COLORS = [\"white\", \"black\"];\nexport class Button extends SizedMixin(ButtonBase, { noDefaultSize: true }) {\n  /**\n   * Initializes the `PendingStateController` for the Button component.\n   * The `PendingStateController` manages the pending state of the Button.\n   */\n  constructor() {\n    super();\n    this.pendingLabel = \"Pending\";\n    this.pending = false;\n    this._variant = \"accent\";\n    this.treatment = \"fill\";\n    this.noWrap = false;\n    this.pendingStateController = new PendingStateController(this);\n  }\n  static get styles() {\n    return [...super.styles, buttonStyles];\n  }\n  click() {\n    if (this.pending) {\n      return;\n    }\n    super.click();\n  }\n  get variant() {\n    return this._variant;\n  }\n  set variant(variant) {\n    if (variant === this.variant) return;\n    this.requestUpdate(\"variant\", this.variant);\n    switch (variant) {\n      case \"cta\":\n        this._variant = \"accent\";\n        if (true) {\n          window.__swc.warn(\n            this,\n            `The \"cta\" value of the \"variant\" attribute on <${this.localName}> has been deprecated and will be removed in a future release. Use \"variant='accent'\" instead.`,\n            \"https://opensource.adobe.com/spectrum-web-components/components/button/#variants\",\n            { level: \"deprecation\" }\n          );\n        }\n        break;\n      case \"overBackground\":\n        this.removeAttribute(\"variant\");\n        this.staticColor = \"white\";\n        this.treatment = \"outline\";\n        if (true) {\n          window.__swc.warn(\n            this,\n            `The \"overBackground\" value of the \"variant\" attribute on <${this.localName}> has been deprecated and will be removed in a future release. Use \"staticColor='white'\" with \"treatment='outline'\" instead.`,\n            \"https://opensource.adobe.com/spectrum-web-components/components/button\",\n            { level: \"deprecation\" }\n          );\n        }\n        return;\n      case \"white\":\n        this.staticColor = \"white\";\n        if (true) {\n          window.__swc.warn(\n            this,\n            `The \"white\" value of the \"variant\" attribute on <${this.localName}> has been deprecated and will be removed in a future release. Use \"static-color='white'\" instead.`,\n            \"https://opensource.adobe.com/spectrum-web-components/components/button/api\",\n            { level: \"deprecation\" }\n          );\n        }\n        return;\n      case \"black\":\n        this.staticColor = \"black\";\n        if (true) {\n          window.__swc.warn(\n            this,\n            `The \"black\" value of the \"variant\" attribute on <${this.localName}> has been deprecated and will be removed in a future release. Use \"static-color='black'\" instead.`,\n            \"https://opensource.adobe.com/spectrum-web-components/components/button/api\",\n            { level: \"deprecation\" }\n          );\n        }\n        return;\n      case null:\n        return;\n      default:\n        if (!VALID_VARIANTS.includes(variant)) {\n          this._variant = \"accent\";\n        } else {\n          this._variant = variant;\n        }\n        break;\n    }\n    this.setAttribute(\"variant\", this.variant);\n  }\n  set quiet(quiet) {\n    this.treatment = quiet ? \"outline\" : \"fill\";\n  }\n  get quiet() {\n    return this.treatment === \"outline\";\n  }\n  firstUpdated(changes) {\n    super.firstUpdated(changes);\n    if (!this.hasAttribute(\"variant\")) {\n      this.setAttribute(\"variant\", this.variant);\n    }\n    if (this.pending) {\n      this.pendingStateController.hostUpdated();\n    }\n  }\n  renderButton() {\n    return html`\n            ${this.buttonContent}\n            ${this.pendingStateController.renderPendingState()}\n        `;\n  }\n}\n__decorateClass([\n  property({ type: String, attribute: \"pending-label\" })\n], Button.prototype, \"pendingLabel\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true, attribute: true })\n], Button.prototype, \"pending\", 2);\n__decorateClass([\n  property()\n], Button.prototype, \"variant\", 1);\n__decorateClass([\n  property({ reflect: true, attribute: \"static-color\" })\n], Button.prototype, \"staticColor\", 2);\n__decorateClass([\n  property({ reflect: true })\n], Button.prototype, \"treatment\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], Button.prototype, \"quiet\", 1);\n__decorateClass([\n  property({ type: Boolean, attribute: \"no-wrap\", reflect: true })\n], Button.prototype, \"noWrap\", 2);\n//# sourceMappingURL=Button.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { LikeAnchor } from \"@spectrum-web-components/shared/src/like-anchor.js\";\nimport { Focusable } from \"@spectrum-web-components/shared/src/focusable.js\";\nimport { ObserveSlotText } from \"@spectrum-web-components/shared/src/observe-slot-text.js\";\nimport buttonStyles from \"./button-base.css.js\";\nexport class ButtonBase extends ObserveSlotText(LikeAnchor(Focusable), \"\", [\n  \"sp-overlay,sp-tooltip\"\n]) {\n  constructor() {\n    super();\n    this.active = false;\n    this.type = \"button\";\n    this.proxyFocus = this.proxyFocus.bind(this);\n    this.addEventListener(\"click\", this.handleClickCapture, {\n      capture: true\n    });\n  }\n  static get styles() {\n    return [buttonStyles];\n  }\n  get focusElement() {\n    return this;\n  }\n  get hasLabel() {\n    return this.slotHasContent;\n  }\n  get buttonContent() {\n    const content = [\n      html`\n                <slot name=\"icon\" ?icon-only=${!this.hasLabel}></slot>\n            `,\n      html`\n                <span id=\"label\">\n                    <slot @slotchange=${this.manageTextObservedSlot}></slot>\n                </span>\n            `\n    ];\n    return content;\n  }\n  handleClickCapture(event) {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      return false;\n    }\n    if (this.shouldProxyClick(event)) {\n      return;\n    }\n  }\n  proxyFocus() {\n    this.focus();\n  }\n  shouldProxyClick(event) {\n    let handled = false;\n    if (event && (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey)) {\n      return false;\n    }\n    if (this.anchorElement) {\n      this.anchorElement.click();\n      handled = true;\n    } else if (this.type !== \"button\") {\n      const proxy = document.createElement(\"button\");\n      proxy.type = this.type;\n      this.insertAdjacentElement(\"afterend\", proxy);\n      proxy.click();\n      proxy.remove();\n      handled = true;\n    }\n    return handled;\n  }\n  renderAnchor() {\n    return html`\n            ${this.buttonContent}\n            ${super.renderAnchor({\n      id: \"button\",\n      ariaHidden: true,\n      className: \"button anchor\",\n      tabindex: -1\n    })}\n        `;\n  }\n  renderButton() {\n    return html`\n            ${this.buttonContent}\n        `;\n  }\n  render() {\n    return this.href && this.href.length > 0 ? this.renderAnchor() : this.renderButton();\n  }\n  handleKeydown(event) {\n    const { code } = event;\n    switch (code) {\n      case \"Space\":\n        event.preventDefault();\n        if (typeof this.href === \"undefined\") {\n          this.addEventListener(\"keyup\", this.handleKeyup);\n          this.active = true;\n        }\n        break;\n      default:\n        break;\n    }\n  }\n  handleKeypress(event) {\n    const { code } = event;\n    switch (code) {\n      case \"Enter\":\n      case \"NumpadEnter\":\n        this.click();\n        break;\n      default:\n        break;\n    }\n  }\n  handleKeyup(event) {\n    const { code } = event;\n    switch (code) {\n      case \"Space\":\n        this.removeEventListener(\"keyup\", this.handleKeyup);\n        this.active = false;\n        this.click();\n        break;\n      default:\n        break;\n    }\n  }\n  manageAnchor() {\n    if (this.href && this.href.length > 0) {\n      if (!this.hasAttribute(\"role\") || this.getAttribute(\"role\") === \"button\") {\n        this.setAttribute(\"role\", \"link\");\n      }\n    } else {\n      if (!this.hasAttribute(\"role\") || this.getAttribute(\"role\") === \"link\") {\n        this.setAttribute(\"role\", \"button\");\n      }\n    }\n  }\n  firstUpdated(changed) {\n    super.firstUpdated(changed);\n    if (!this.hasAttribute(\"tabindex\")) {\n      this.setAttribute(\"tabindex\", \"0\");\n    }\n    if (changed.has(\"label\")) {\n      if (this.label) {\n        this.setAttribute(\"aria-label\", this.label);\n      } else {\n        this.removeAttribute(\"aria-label\");\n      }\n    }\n    this.manageAnchor();\n    this.addEventListener(\"keydown\", this.handleKeydown);\n    this.addEventListener(\"keypress\", this.handleKeypress);\n  }\n  updated(changed) {\n    super.updated(changed);\n    if (changed.has(\"href\")) {\n      this.manageAnchor();\n    }\n    if (this.anchorElement) {\n      this.anchorElement.tabIndex = -1;\n      if (!this.anchorElement.hasAttribute(\"aria-hidden\")) {\n        this.anchorElement.setAttribute(\"aria-hidden\", \"true\");\n      }\n      this.anchorElement.addEventListener(\"focus\", this.proxyFocus);\n    }\n  }\n  update(changes) {\n    super.update(changes);\n    if (changes.has(\"label\")) {\n      if (this.label) {\n        this.setAttribute(\"aria-label\", this.label);\n      } else {\n        this.removeAttribute(\"aria-label\");\n      }\n    }\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], ButtonBase.prototype, \"active\", 2);\n__decorateClass([\n  property({ type: String })\n], ButtonBase.prototype, \"type\", 2);\n__decorateClass([\n  query(\".anchor\")\n], ButtonBase.prototype, \"anchorElement\", 2);\n//# sourceMappingURL=ButtonBase.dev.js.map\n"],"names":[],"sourceRoot":""}