{"version":3,"file":"1167.59ba1f1a.iframe.bundle.js","mappings":";;;AAsQA;;;;;;AAMA;;AAEA;AACA;;;;;;AAMA;;;;AAIA;;;AAGA;AACA;;AAGA;;;;;;;AAWA;AAGA;;AAEA;AAGA;AAGA;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;AAKA;;AAEA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAMA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;;;;;AAKA;;AAEA;;;AAGA;;;AAGA;;;AAGA;AAGA;AACA;AACA;;AAEA;;AAOA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;;AAGA;;;;;AAKA;;;;;AAKA;;AAGA;;;;ACzZA;AACA;AAdA;AAIA;AAaA;;AAIA;;AC3BA;;;;;;;;;AAwCA;;AAIA;AAEA","sources":["webpack://@adobe/spectrum-web-components/./packages/combobox/src/Combobox.dev.js","webpack://@adobe/spectrum-web-components/./packages/combobox/stories/index.js","webpack://@adobe/spectrum-web-components/./packages/popover/src/Popover.dev.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query,\n  state\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport {\n  ifDefined,\n  live,\n  repeat\n} from \"@spectrum-web-components/base/src/directives.js\";\nimport \"@spectrum-web-components/overlay/sp-overlay.js\";\nimport \"@spectrum-web-components/icons-ui/icons/sp-icon-chevron100.js\";\nimport \"@spectrum-web-components/popover/sp-popover.js\";\nimport \"@spectrum-web-components/menu/sp-menu.js\";\nimport \"@spectrum-web-components/menu/sp-menu-item.js\";\nimport { PendingStateController } from \"@spectrum-web-components/reactive-controllers/src/PendingState.js\";\nimport \"@spectrum-web-components/picker-button/sp-picker-button.js\";\nimport { Textfield } from \"@spectrum-web-components/textfield\";\nimport styles from \"./combobox.css.js\";\nimport chevronStyles from \"@spectrum-web-components/icon/src/spectrum-icon-chevron.css.js\";\nexport class Combobox extends Textfield {\n  /**\n   * Initializes the `PendingStateController` for the Combobox component.\n   * When the pending state changes to `true`, the `open` property of the Combobox is set to `false`.\n   */\n  constructor() {\n    super();\n    this.autocomplete = \"none\";\n    this.availableOptions = [];\n    this.open = false;\n    this.pending = false;\n    this.pendingLabel = \"Pending\";\n    this.overlayOpen = false;\n    this.itemValue = \"\";\n    this.optionEls = [];\n    this.fieldWidth = 0;\n    this.applyFocusElementLabel = (value) => {\n      this.appliedLabel = value;\n    };\n    this._returnItems = () => {\n      return;\n    };\n    this.pendingStateController = new PendingStateController(this);\n  }\n  static get styles() {\n    return [...super.styles, styles, chevronStyles];\n  }\n  focus() {\n    this.focusElement.focus();\n  }\n  click() {\n    this.focus();\n    this.focusElement.click();\n  }\n  scrollToActiveDescendant() {\n    if (!this.activeDescendant) {\n      return;\n    }\n    const activeEl = this.shadowRoot.getElementById(\n      this.activeDescendant.value\n    );\n    if (activeEl) {\n      activeEl.scrollIntoView({ block: \"nearest\" });\n    }\n  }\n  handleComboboxKeydown(event) {\n    if (this.readonly || this.pending) {\n      return;\n    }\n    if (event.altKey && event.code === \"ArrowDown\") {\n      this.open = true;\n    } else if (event.code === \"ArrowDown\") {\n      event.preventDefault();\n      this.open = true;\n      this.activateNextDescendant();\n      this.scrollToActiveDescendant();\n    } else if (event.code === \"ArrowUp\") {\n      event.preventDefault();\n      this.open = true;\n      this.activatePreviousDescendant();\n      this.scrollToActiveDescendant();\n    } else if (event.code === \"Escape\") {\n      if (!this.open) {\n        this.value = \"\";\n      }\n      this.open = false;\n    } else if (event.code === \"Enter\") {\n      this.selectDescendant();\n      this.open = false;\n    } else if (event.code === \"Home\") {\n      this.focusElement.setSelectionRange(0, 0);\n      this.activeDescendant = void 0;\n    } else if (event.code === \"End\") {\n      const { length } = this.value;\n      this.focusElement.setSelectionRange(length, length);\n      this.activeDescendant = void 0;\n    } else if (event.code === \"ArrowLeft\") {\n      this.activeDescendant = void 0;\n    } else if (event.code === \"ArrowRight\") {\n      this.activeDescendant = void 0;\n    }\n  }\n  /**\n   * Convert the flattened array of assigned elements of `slot[name='option']` to\n   * an array of `ComboboxOptions` for use in rendering options in the shadow DOM.s\n   **/\n  handleSlotchange() {\n    this.setOptionsFromSlottedItems();\n    this.itemObserver.disconnect();\n    this.optionEls.map((item) => {\n      this.itemObserver.observe(item, {\n        attributes: true,\n        attributeFilter: [\"id\"],\n        childList: true\n      });\n    });\n  }\n  handleTooltipSlotchange(event) {\n    this.tooltipEl = event.target.assignedElements()[0];\n  }\n  setOptionsFromSlottedItems() {\n    const elements = this.optionSlot.assignedElements({\n      flatten: true\n    });\n    this.optionEls = elements;\n  }\n  activateNextDescendant() {\n    const activeIndex = !this.activeDescendant ? -1 : this.availableOptions.indexOf(this.activeDescendant);\n    let nextActiveIndex = activeIndex;\n    do {\n      nextActiveIndex = (this.availableOptions.length + nextActiveIndex + 1) % this.availableOptions.length;\n      if (nextActiveIndex === activeIndex) break;\n    } while (this.availableOptions[nextActiveIndex].disabled);\n    if (!this.availableOptions[nextActiveIndex].disabled) {\n      this.activeDescendant = this.availableOptions[nextActiveIndex];\n    }\n    this.optionEls.forEach(\n      (el) => {\n        var _a;\n        return el.setAttribute(\n          \"aria-selected\",\n          el.value === ((_a = this.activeDescendant) == null ? void 0 : _a.value) ? \"true\" : \"false\"\n        );\n      }\n    );\n  }\n  activatePreviousDescendant() {\n    const activeIndex = !this.activeDescendant ? 0 : this.availableOptions.indexOf(this.activeDescendant);\n    let previousActiveIndex = activeIndex;\n    do {\n      previousActiveIndex = (this.availableOptions.length + previousActiveIndex - 1) % this.availableOptions.length;\n      if (previousActiveIndex === activeIndex) break;\n    } while (this.availableOptions[previousActiveIndex].disabled);\n    if (!this.availableOptions[previousActiveIndex].disabled) {\n      this.activeDescendant = this.availableOptions[previousActiveIndex];\n    }\n    this.optionEls.forEach(\n      (el) => {\n        var _a;\n        return el.setAttribute(\n          \"aria-selected\",\n          el.value === ((_a = this.activeDescendant) == null ? void 0 : _a.value) ? \"true\" : \"false\"\n        );\n      }\n    );\n  }\n  selectDescendant() {\n    if (!this.activeDescendant) {\n      return;\n    }\n    const activeEl = this.shadowRoot.getElementById(\n      this.activeDescendant.value\n    );\n    if (activeEl) {\n      activeEl.click();\n    }\n  }\n  filterAvailableOptions() {\n    if (this.autocomplete === \"none\" || this.pending) {\n      return;\n    }\n    const valueLowerCase = this.value.toLowerCase();\n    this.availableOptions = (this.options || this.optionEls).filter(\n      (descendant) => {\n        const itemTextLowerCase = descendant.itemText.toLowerCase();\n        return itemTextLowerCase.startsWith(valueLowerCase);\n      }\n    );\n  }\n  handleInput(event) {\n    super.handleInput(event);\n    if (!this.pending) {\n      this.activeDescendant = void 0;\n      this.open = true;\n    }\n  }\n  handleMenuChange(event) {\n    const { target } = event;\n    const selected = (this.options || this.optionEls).find(\n      (item) => item.value === (target == null ? void 0 : target.value)\n    );\n    this.value = (selected == null ? void 0 : selected.itemText) || \"\";\n    event.preventDefault();\n    this.open = false;\n    this._returnItems();\n    this.focus();\n  }\n  handleClosed() {\n    this.open = false;\n    this.overlayOpen = false;\n  }\n  handleOpened() {\n  }\n  toggleOpen() {\n    if (this.readonly || this.pending) {\n      this.open = false;\n      return;\n    }\n    this.open = !this.open;\n    this.inputElement.focus();\n  }\n  shouldUpdate(changed) {\n    var _a, _b;\n    if (changed.has(\"open\")) {\n      if (!this.open) {\n        this.activeDescendant = void 0;\n      } else {\n        this.overlayOpen = true;\n      }\n    }\n    if (changed.has(\"value\")) {\n      this.filterAvailableOptions();\n      this.itemValue = (_b = (_a = this.availableOptions.find(\n        (option) => option.itemText === this.value\n      )) == null ? void 0 : _a.value) != null ? _b : \"\";\n    }\n    return super.shouldUpdate(changed);\n  }\n  onBlur(event) {\n    if (event.relatedTarget && (this.contains(event.relatedTarget) || this.shadowRoot.contains(event.relatedTarget))) {\n      return;\n    }\n    super.onBlur(event);\n  }\n  renderAppliedLabel() {\n    const appliedLabel = this.label || this.appliedLabel;\n    return html`\n            ${this.pending ? html`\n                      <span\n                          aria-hidden=\"true\"\n                          class=\"visually-hidden\"\n                          id=\"pending-label\"\n                      >\n                          ${this.pendingLabel}\n                      </span>\n                  ` : nothing}\n            ${this.value ? html`\n                      <span\n                          aria-hidden=\"true\"\n                          class=\"visually-hidden\"\n                          id=\"applied-label\"\n                      >\n                          ${appliedLabel}\n                      </span>\n                      <slot name=\"label\" id=\"label\">\n                          <span class=\"visually-hidden\" aria-hidden=\"true\">\n                              ${this.value}\n                          </span>\n                      </slot>\n                  ` : html`\n                      <span hidden id=\"applied-label\">${appliedLabel}</span>\n                  `}\n        `;\n  }\n  renderLoader() {\n    import(\"@spectrum-web-components/progress-circle/sp-progress-circle.js\");\n    return html`\n            <sp-progress-circle\n                size=\"s\"\n                indeterminate\n                aria-hidden=\"true\"\n                class=\"progress-circle\"\n            ></sp-progress-circle>\n        `;\n  }\n  renderField() {\n    return html`\n            ${this.renderStateIcons()}\n            <input\n                aria-activedescendant=${ifDefined(\n      this.activeDescendant ? `${this.activeDescendant.value}` : void 0\n    )}\n                aria-autocomplete=${ifDefined(\n      this.autocomplete\n    )}\n                aria-controls=${ifDefined(\n      this.open ? \"listbox-menu\" : void 0\n    )}\n                aria-describedby=\"${this.helpTextId} tooltip\"\n                aria-expanded=\"${this.open ? \"true\" : \"false\"}\"\n                aria-label=${ifDefined(this.label || this.appliedLabel)}\n                aria-labelledby=\"pending-label applied-label label\"\n                aria-invalid=${ifDefined(this.invalid || void 0)}\n                autocomplete=\"off\"\n                @click=${this.toggleOpen}\n                @keydown=${this.handleComboboxKeydown}\n                id=\"input\"\n                class=\"input\"\n                role=\"combobox\"\n                type=\"text\"\n                .value=${live(this.displayValue)}\n                tabindex=\"0\"\n                @sp-closed=${this.handleClosed}\n                @sp-opened=${this.handleOpened}\n                maxlength=${ifDefined(\n      this.maxlength > -1 ? this.maxlength : void 0\n    )}\n                minlength=${ifDefined(\n      this.minlength > -1 ? this.minlength : void 0\n    )}\n                pattern=${ifDefined(this.pattern)}\n                @change=${this.handleChange}\n                @input=${this.handleInput}\n                @focus=${this.onFocus}\n                @blur=${this.onBlur}\n                ?disabled=${this.disabled}\n                ?required=${this.required}\n                ?readonly=${this.readonly}\n            />\n            ${this.pendingStateController.renderPendingState()}\n        `;\n  }\n  render() {\n    if (this.tooltipEl) {\n      this.tooltipEl.disabled = this.open;\n    }\n    return html`\n            ${super.render()}\n            <sp-picker-button\n                aria-controls=\"listbox-menu\"\n                aria-describedby=\"${this.helpTextId} tooltip\"\n                aria-expanded=${this.open ? \"true\" : \"false\"}\n                aria-label=${ifDefined(this.label || this.appliedLabel)}\n                aria-labelledby=\"applied-label label\"\n                @click=${this.toggleOpen}\n                tabindex=\"-1\"\n                class=\"button ${this.focused ? \"focus-visible is-keyboardFocused\" : \"\"}\"\n                ?disabled=${this.disabled}\n                ?focused=${this.focused}\n                ?quiet=${this.quiet}\n                size=${this.size}\n            ></sp-picker-button>\n            <sp-overlay\n                ?open=${this.open}\n                .triggerElement=${this.input}\n                offset=\"0\"\n                placement=\"bottom-start\"\n                .receivesFocus=${\"false\"}\n                role=\"presentation\"\n            >\n                <sp-popover\n                    id=\"listbox\"\n                    ?open=${this.open}\n                    role=\"presentation\"\n                    ?hidden=${this.availableOptions.length === 0}\n                >\n                    <sp-menu\n                        @change=${this.handleMenuChange}\n                        tabindex=\"-1\"\n                        aria-labelledby=\"label applied-label\"\n                        aria-label=${ifDefined(this.label || this.appliedLabel)}\n                        id=\"listbox-menu\"\n                        role=\"listbox\"\n                        selects=${ifDefined(\n      this.autocomplete === \"none\" ? \"single\" : void 0\n    )}\n                        .selected=${this.autocomplete === \"none\" && this.itemValue ? [this.itemValue] : []}\n                        style=\"min-width: ${this.fieldWidth}px;\"\n                        size=${this.size}\n                    >\n                        ${this.overlayOpen ? repeat(\n      this.availableOptions,\n      (option) => option.value,\n      (option) => {\n        var _a, _b;\n        return html`\n                                          <sp-menu-item\n                                              id=\"${option.value}\"\n                                              ?focused=${((_a = this.activeDescendant) == null ? void 0 : _a.value) === option.value}\n                                              aria-selected=${((_b = this.activeDescendant) == null ? void 0 : _b.value) === option.value ? \"true\" : \"false\"}\n                                              .value=${option.value}\n                                              .selected=${option.value === this.itemValue}\n                                              ?disabled=${option.disabled}\n                                          >\n                                              ${option.itemText}\n                                          </sp-menu-item>\n                                      `;\n      }\n    ) : html``}\n                        <slot\n                            hidden\n                            @slotchange=${this.handleSlotchange}\n                        ></slot>\n                    </sp-menu>\n                </sp-popover>\n            </sp-overlay>\n            ${this.renderAppliedLabel()}\n            <slot\n                aria-hidden=\"true\"\n                name=\"tooltip\"\n                id=\"tooltip\"\n                @slotchange=${this.handleTooltipSlotchange}\n            ></slot>\n        `;\n  }\n  firstUpdated(changed) {\n    super.firstUpdated(changed);\n    this.addEventListener(\"focusout\", (event) => {\n      const isMenuItem = event.relatedTarget && this.contains(event.relatedTarget);\n      if (event.target === this && !isMenuItem) {\n        this.focused = false;\n      }\n    });\n    this.resizeObserver = new ResizeObserver((entries) => {\n      this.fieldWidth = entries[0].borderBoxSize[0].inlineSize;\n    });\n    this.resizeObserver.observe(this);\n  }\n  async manageListOverlay() {\n    if (this.open) {\n      this.focused = true;\n      this.focus();\n    }\n  }\n  updated(changed) {\n    var _a;\n    if (changed.has(\"open\") && !this.pending) {\n      this.manageListOverlay();\n    }\n    if (!this.focused && this.open) {\n      this.open = false;\n    }\n    if (changed.has(\"pending\") && this.pending) {\n      this.open = false;\n    }\n    if (changed.has(\"activeDescendant\")) {\n      const previouslyActiveDescendant = changed.get(\n        \"activeDescendant\"\n      );\n      if (previouslyActiveDescendant) {\n        previouslyActiveDescendant.focused = false;\n      }\n      if (this.activeDescendant && typeof this.activeDescendant.focused !== \"undefined\") {\n        this.activeDescendant.focused = true;\n      }\n    }\n    if (changed.has(\"options\") || changed.has(\"optionEls\")) {\n      if ((_a = this.options) == null ? void 0 : _a.every((option) => option.disabled)) {\n        this.disabled = true;\n      }\n      this.availableOptions = this.options || this.optionEls;\n    }\n  }\n  async getUpdateComplete() {\n    const complete = await super.getUpdateComplete();\n    const list = this.shadowRoot.querySelector(\n      \"#listbox\"\n    );\n    if (list) {\n      const descendants = [...list.children];\n      await Promise.all(\n        descendants.map((descendant) => descendant.updateComplete)\n      );\n    }\n    return complete;\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    if (!this.itemObserver) {\n      this.itemObserver = new MutationObserver(\n        this.setOptionsFromSlottedItems.bind(this)\n      );\n    }\n  }\n  disconnectedCallback() {\n    var _a;\n    this.itemObserver.disconnect();\n    this.open = false;\n    (_a = this.resizeObserver) == null ? void 0 : _a.disconnect();\n    this.resizeObserver = void 0;\n    super.disconnectedCallback();\n  }\n}\n__decorateClass([\n  state()\n], Combobox.prototype, \"activeDescendant\", 2);\n__decorateClass([\n  property({ type: String })\n], Combobox.prototype, \"autocomplete\", 2);\n__decorateClass([\n  state()\n], Combobox.prototype, \"availableOptions\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Combobox.prototype, \"open\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Combobox.prototype, \"pending\", 2);\n__decorateClass([\n  property({ type: String, attribute: \"pending-label\" })\n], Combobox.prototype, \"pendingLabel\", 2);\n__decorateClass([\n  query(\"slot:not([name])\")\n], Combobox.prototype, \"optionSlot\", 2);\n__decorateClass([\n  state()\n], Combobox.prototype, \"overlayOpen\", 2);\n__decorateClass([\n  query(\"#input\")\n], Combobox.prototype, \"input\", 2);\n__decorateClass([\n  property({ type: Array })\n], Combobox.prototype, \"options\", 2);\n__decorateClass([\n  state()\n], Combobox.prototype, \"optionEls\", 2);\n__decorateClass([\n  state()\n], Combobox.prototype, \"fieldWidth\", 2);\n//# sourceMappingURL=Combobox.dev.js.map\n","\"use strict\";\nimport {\n  html\n} from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/combobox/sp-combobox.js\";\nimport \"@spectrum-web-components/field-label/sp-field-label.js\";\nimport { spreadProps } from \"../../../test/lit-helpers\";\nconst handleChange = ({ onChange }) => (event) => {\n  const picker = event.target;\n  if (onChange) onChange(picker.value);\n};\nconst handleInput = ({ onInput }) => (event) => {\n  const picker = event.target;\n  if (onInput) onInput(picker.value);\n};\nexport const ComboboxMarkup = (args) => {\n  return html`\n        <sp-field-label for=\"combobox\">Where do you live?</sp-field-label>\n        <sp-combobox\n            id=\"combobox\"\n            .options=${countries}\n            .value=${args.value || \"\"}\n            @change=${handleChange(args)}\n            @input=${handleInput(args)}\n            ${spreadProps(args)}\n        ></sp-combobox>\n    `;\n};\nexport const countries = [\n  { value: \"af\", itemText: \"Afghanistan\" },\n  { value: \"ax\", itemText: \"Aland Islands\" },\n  { value: \"al\", itemText: \"Albania\" },\n  { value: \"dz\", itemText: \"Algeria\" },\n  { value: \"as\", itemText: \"American Samoa\" },\n  { value: \"ad\", itemText: \"Andorra\" },\n  { value: \"ao\", itemText: \"Angola\" },\n  { value: \"ai\", itemText: \"Anguilla\" },\n  { value: \"aq\", itemText: \"Antarctica\" },\n  { value: \"ag\", itemText: \"Antigua and Barbuda\" },\n  { value: \"ar\", itemText: \"Argentina\" },\n  { value: \"ar\", itemText: \"Armenia\" },\n  { value: \"aw\", itemText: \"Aruba\" },\n  { value: \"au\", itemText: \"Australia\" },\n  { value: \"at\", itemText: \"Austria\" },\n  { value: \"az\", itemText: \"Azerbaijan\" },\n  { value: \"bs\", itemText: \"Bahamas\" },\n  { value: \"bh\", itemText: \"Bahrain\" },\n  { value: \"bd\", itemText: \"Bangladesh\" },\n  { value: \"bb\", itemText: \"Barbados\" },\n  { value: \"by\", itemText: \"Belarus\" },\n  { value: \"be\", itemText: \"Belgium\" },\n  { value: \"bz\", itemText: \"Belize\" },\n  { value: \"bj\", itemText: \"Benin\" },\n  { value: \"bm\", itemText: \"Bermuda\" },\n  { value: \"bt\", itemText: \"Bhutan\" },\n  { value: \"bo\", itemText: \"Bolivia\" },\n  { value: \"ba\", itemText: \"Bosnia and Herzegovina\" },\n  { value: \"bw\", itemText: \"Botswana\" },\n  { value: \"bv\", itemText: \"Bouvet Island\" },\n  { value: \"br\", itemText: \"Brazil\" },\n  { value: \"io\", itemText: \"British Indian Ocean Territory\" },\n  { value: \"bn\", itemText: \"Brunei Darussalam\" },\n  { value: \"bg\", itemText: \"Bulgaria\" },\n  { value: \"bf\", itemText: \"Burkina Faso\" },\n  { value: \"bi\", itemText: \"Burundi\" },\n  { value: \"kh\", itemText: \"Cambodia\" },\n  { value: \"cm\", itemText: \"Cameroon\" },\n  { value: \"ca\", itemText: \"Canada\" },\n  { value: \"cv\", itemText: \"Cape Verde\" },\n  { value: \"ky\", itemText: \"Cayman Islands\" },\n  { value: \"cf\", itemText: \"Central African Republic\" },\n  { value: \"td\", itemText: \"Chad\" },\n  { value: \"cl\", itemText: \"Chile\" },\n  { value: \"cn\", itemText: \"China\" },\n  { value: \"cx\", itemText: \"Christmas Island\" },\n  { value: \"cc\", itemText: \"Cocos (Keeling) Islands\" },\n  { value: \"co\", itemText: \"Colombia\" },\n  { value: \"km\", itemText: \"Comoros\" },\n  { value: \"cg\", itemText: \"Congo\" },\n  { value: \"cd\", itemText: \"Congo, The Democratic Republic of the\" },\n  { value: \"ck\", itemText: \"Cook Islands\" },\n  { value: \"cr\", itemText: \"Costa Rica\" },\n  { value: \"ci\", itemText: \"Cote D'Ivoire\" },\n  { value: \"hr\", itemText: \"Croatia\" },\n  { value: \"cu\", itemText: \"Cuba\" },\n  { value: \"cy\", itemText: \"Cyprus\" },\n  { value: \"cz\", itemText: \"Czech Republic\" },\n  { value: \"dk\", itemText: \"Denmark\" },\n  { value: \"dj\", itemText: \"Djibouti\" },\n  { value: \"dm\", itemText: \"Dominica\" },\n  { value: \"do\", itemText: \"Dominican Republic\" },\n  { value: \"ec\", itemText: \"Ecuador\" },\n  { value: \"eg\", itemText: \"Egypt\" },\n  { value: \"sv\", itemText: \"El Salvador\" },\n  { value: \"gq\", itemText: \"Equatorial Guinea\" },\n  { value: \"er\", itemText: \"Eritrea\" },\n  { value: \"ee\", itemText: \"Estonia\" },\n  { value: \"et\", itemText: \"Ethiopia\" },\n  { value: \"fk\", itemText: \"Falkland Islands (Malvinas)\" },\n  { value: \"fo\", itemText: \"Faroe Islands\" },\n  { value: \"fj\", itemText: \"Fiji\" },\n  { value: \"fi\", itemText: \"Finland\" },\n  { value: \"fr\", itemText: \"France\" },\n  { value: \"gf\", itemText: \"French Guiana\" },\n  { value: \"pf\", itemText: \"French Polynesia\" },\n  { value: \"tf\", itemText: \"French Southern Territories\" },\n  { value: \"ga\", itemText: \"Gabon\" },\n  { value: \"gm\", itemText: \"Gambia\" },\n  { value: \"ge\", itemText: \"Georgia\" },\n  { value: \"de\", itemText: \"Germany\" },\n  { value: \"gh\", itemText: \"Ghana\" },\n  { value: \"gi\", itemText: \"Gibraltar\" },\n  { value: \"gr\", itemText: \"Greece\" },\n  { value: \"gl\", itemText: \"Greenland\" },\n  { value: \"gd\", itemText: \"Grenada\" },\n  { value: \"gp\", itemText: \"Guadeloupe\" },\n  { value: \"gu\", itemText: \"Guam\" },\n  { value: \"gt\", itemText: \"Guatemala\" },\n  { value: \"gg\", itemText: \"Guernsey\" },\n  { value: \"gn\", itemText: \"Guinea\" },\n  { value: \"gw\", itemText: \"Guinea-Bissau\" },\n  { value: \"gy\", itemText: \"Guyana\" },\n  { value: \"ht\", itemText: \"Haiti\" },\n  { value: \"hm\", itemText: \"Heard Island and Mcdonald Islands\" },\n  { value: \"va\", itemText: \"Holy See (Vatican City State)\" },\n  { value: \"hn\", itemText: \"Honduras\" },\n  { value: \"hk\", itemText: \"Hong Kong\" },\n  { value: \"hu\", itemText: \"Hungary\" },\n  { value: \"is\", itemText: \"Iceland\" },\n  { value: \"in\", itemText: \"India\" },\n  { value: \"id\", itemText: \"Indonesia\" },\n  { value: \"ir\", itemText: \"Iran, Islamic Republic Of\" },\n  { value: \"iq\", itemText: \"Iraq\" },\n  { value: \"ie\", itemText: \"Ireland\" },\n  { value: \"im\", itemText: \"Isle of Man\" },\n  { value: \"il\", itemText: \"Israel\" },\n  { value: \"it\", itemText: \"Italy\" },\n  { value: \"jm\", itemText: \"Jamaica\" },\n  { value: \"jp\", itemText: \"Japan\" },\n  { value: \"je\", itemText: \"Jersey\" },\n  { value: \"jo\", itemText: \"Jordan\" },\n  { value: \"kz\", itemText: \"Kazakhstan\" },\n  { value: \"ke\", itemText: \"Kenya\" },\n  { value: \"ki\", itemText: \"Kiribati\" },\n  { value: \"kp\", itemText: \"Korea, Democratic People's Republic of\" },\n  { value: \"kr\", itemText: \"Korea, Republic of\" },\n  { value: \"kw\", itemText: \"Kuwait\" },\n  { value: \"kg\", itemText: \"Kyrgyzstan\" },\n  { value: \"la\", itemText: \"Laos\" },\n  { value: \"lv\", itemText: \"Latvia\" },\n  { value: \"lb\", itemText: \"Lebanon\" },\n  { value: \"ls\", itemText: \"Lesotho\" },\n  { value: \"lr\", itemText: \"Liberia\" },\n  { value: \"ly\", itemText: \"Libyan Arab Jamahiriya\" },\n  { value: \"li\", itemText: \"Liechtenstein\" },\n  { value: \"lt\", itemText: \"Lithuania\" },\n  { value: \"lu\", itemText: \"Luxembourg\" },\n  { value: \"mo\", itemText: \"Macao\" },\n  { value: \"mk\", itemText: \"Macedonia, The Former Yugoslav Republic of\" },\n  { value: \"mg\", itemText: \"Madagascar\" },\n  { value: \"mw\", itemText: \"Malawi\" },\n  { value: \"my\", itemText: \"Malaysia\" },\n  { value: \"mv\", itemText: \"Maldives\" },\n  { value: \"ml\", itemText: \"Mali\" },\n  { value: \"mt\", itemText: \"Malta\" },\n  { value: \"mh\", itemText: \"Marshall Islands\" },\n  { value: \"mq\", itemText: \"Martinique\" },\n  { value: \"mr\", itemText: \"Mauritania\" },\n  { value: \"mu\", itemText: \"Mauritius\" },\n  { value: \"yt\", itemText: \"Mayotte\" },\n  { value: \"mx\", itemText: \"Mexico\" },\n  { value: \"fm\", itemText: \"Micronesia, Federated States of\" },\n  { value: \"md\", itemText: \"Moldova, Republic of\" },\n  { value: \"mc\", itemText: \"Monaco\" },\n  { value: \"mn\", itemText: \"Mongolia\" },\n  { value: \"me\", itemText: \"Montenegro\" },\n  { value: \"ms\", itemText: \"Montserrat\" },\n  { value: \"ma\", itemText: \"Morocco\" },\n  { value: \"mz\", itemText: \"Mozambique\" },\n  { value: \"mm\", itemText: \"Myanmar\" },\n  { value: \"na\", itemText: \"Namibia\" },\n  { value: \"nr\", itemText: \"Nauru\" },\n  { value: \"np\", itemText: \"Nepal\" },\n  { value: \"nl\", itemText: \"Netherlands\" },\n  { value: \"an\", itemText: \"Netherlands Antilles\" },\n  { value: \"nc\", itemText: \"New Caledonia\" },\n  { value: \"nz\", itemText: \"New Zealand\" },\n  { value: \"ni\", itemText: \"Nicaragua\" },\n  { value: \"ne\", itemText: \"Niger\" },\n  { value: \"ng\", itemText: \"Nigeria\" },\n  { value: \"nu\", itemText: \"Niue\" },\n  { value: \"nf\", itemText: \"Norfolk Island\" },\n  { value: \"mp\", itemText: \"Northern Mariana Islands\" },\n  { value: \"no\", itemText: \"Norway\" },\n  { value: \"om\", itemText: \"Oman\" },\n  { value: \"pk\", itemText: \"Pakistan\" },\n  { value: \"pw\", itemText: \"Palau\" },\n  { value: \"ps\", itemText: \"Palestinian Territory, Occupied\" },\n  { value: \"pa\", itemText: \"Panama\" },\n  { value: \"pg\", itemText: \"Papua New Guinea\" },\n  { value: \"py\", itemText: \"Paraguay\" },\n  { value: \"pe\", itemText: \"Peru\" },\n  { value: \"ph\", itemText: \"Philippines\" },\n  { value: \"pn\", itemText: \"Pitcairn\" },\n  { value: \"pl\", itemText: \"Poland\" },\n  { value: \"pt\", itemText: \"Portugal\" },\n  { value: \"pr\", itemText: \"Puerto Rico\" },\n  { value: \"qa\", itemText: \"Qatar\" },\n  { value: \"re\", itemText: \"Reunion\" },\n  { value: \"ro\", itemText: \"Romania\" },\n  { value: \"ru\", itemText: \"Russian Federation\" },\n  { value: \"rw\", itemText: \"RWANDA\" },\n  { value: \"sh\", itemText: \"Saint Helena\" },\n  { value: \"kn\", itemText: \"Saint Kitts and Nevis\" },\n  { value: \"lc\", itemText: \"Saint Lucia\" },\n  { value: \"pm\", itemText: \"Saint Pierre and Miquelon\" },\n  { value: \"vc\", itemText: \"Saint Vincent and the Grenadines\" },\n  { value: \"ws\", itemText: \"Samoa\" },\n  { value: \"sm\", itemText: \"San Marino\" },\n  { value: \"st\", itemText: \"Sao Tome and Principe\" },\n  { value: \"sa\", itemText: \"Saudi Arabia\" },\n  { value: \"sn\", itemText: \"Senegal\" },\n  { value: \"rs\", itemText: \"Serbia\" },\n  { value: \"sc\", itemText: \"Seychelles\" },\n  { value: \"sl\", itemText: \"Sierra Leone\" },\n  { value: \"sg\", itemText: \"Singapore\" },\n  { value: \"sk\", itemText: \"Slovakia\" },\n  { value: \"si\", itemText: \"Slovenia\" },\n  { value: \"sb\", itemText: \"Solomon Islands\" },\n  { value: \"so\", itemText: \"Somalia\" },\n  { value: \"za\", itemText: \"South Africa\" },\n  { value: \"gs\", itemText: \"South Georgia and the South Sandwich Islands\" },\n  { value: \"es\", itemText: \"Spain\" },\n  { value: \"lk\", itemText: \"Sri Lanka\" },\n  { value: \"sd\", itemText: \"Sudan\" },\n  { value: \"sr\", itemText: \"Suriname\" },\n  { value: \"sj\", itemText: \"Svalbard and Jan Mayen\" },\n  { value: \"sz\", itemText: \"Swaziland\" },\n  { value: \"se\", itemText: \"Sweden\" },\n  { value: \"ch\", itemText: \"Switzerland\" },\n  { value: \"sy\", itemText: \"Syrian Arab Republic\" },\n  { value: \"tw\", itemText: \"Taiwan\" },\n  { value: \"tj\", itemText: \"Tajikistan\" },\n  { value: \"tz\", itemText: \"Tanzania, United Republic of\" },\n  { value: \"th\", itemText: \"Thailand\" },\n  { value: \"tl\", itemText: \"Timor-Leste\" },\n  { value: \"tg\", itemText: \"Togo\" },\n  { value: \"tk\", itemText: \"Tokelau\" },\n  { value: \"to\", itemText: \"Tonga\" },\n  { value: \"tt\", itemText: \"Trinidad and Tobago\" },\n  { value: \"tn\", itemText: \"Tunisia\" },\n  { value: \"tr\", itemText: \"Turkey\" },\n  { value: \"tm\", itemText: \"Turkmenistan\" },\n  { value: \"tc\", itemText: \"Turks and Caicos Islands\" },\n  { value: \"tv\", itemText: \"Tuvalu\" },\n  { value: \"ug\", itemText: \"Uganda\" },\n  { value: \"ua\", itemText: \"Ukraine\" },\n  { value: \"ae\", itemText: \"United Arab Emirates\" },\n  { value: \"gb\", itemText: \"United Kingdom\" },\n  { value: \"us\", itemText: \"United States\" },\n  { value: \"um\", itemText: \"United States Minor Outlying Islands\" },\n  { value: \"uy\", itemText: \"Uruguay\" },\n  { value: \"uz\", itemText: \"Uzbekistan\" },\n  { value: \"vu\", itemText: \"Vanuatu\" },\n  { value: \"ve\", itemText: \"Venezuela\" },\n  { value: \"vn\", itemText: \"Vietnam\" },\n  { value: \"vg\", itemText: \"Virgin Islands, British\" },\n  { value: \"vi\", itemText: \"Virgin Islands, U.S.\" },\n  { value: \"wf\", itemText: \"Wallis and Futuna\" },\n  { value: \"eh\", itemText: \"Western Sahara\" },\n  { value: \"ye\", itemText: \"Yemen\" },\n  { value: \"zm\", itemText: \"Zambia\" },\n  { value: \"zw\", itemText: \"Zimbabwe\" }\n];\nexport const fruits = [\n  { value: \"apple\", itemText: \"Apple\" },\n  { value: \"banana\", itemText: \"Banana\" },\n  { value: \"cherry\", itemText: \"Cherry\" },\n  { value: \"coconut\", itemText: \"Coconut\" },\n  { value: \"durian\", itemText: \"Durian\" },\n  { value: \"lemon\", itemText: \"Lemon\" },\n  { value: \"lychee\", itemText: \"Lychee\" },\n  { value: \"mango\", itemText: \"Mango\" },\n  { value: \"orange\", itemText: \"Orange\" },\n  { value: \"peach\", itemText: \"Peach\" },\n  { value: \"pear\", itemText: \"Pear\" },\n  { value: \"persimmon\", itemText: \"Persimmon\" }\n];\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport popoverStyles from \"./popover.css.js\";\nexport class Popover extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.open = false;\n    this.tip = false;\n  }\n  static get styles() {\n    return [popoverStyles];\n  }\n  renderTip() {\n    return html`\n            <div id=\"tip\" aria-hidden=\"true\">\n                <svg class=\"tip block\" viewBox=\"0 -0.5 16 9\">\n                    <path class=\"triangle\" d=\"M-1,-1 8,8 17,-1\"></path>\n                </svg>\n                <svg class=\"tip inline\" viewBox=\"0 -0.5 9 16\">\n                    <path class=\"triangle\" d=\"M-1,-1 8,8 -1,17\"></path>\n                </svg>\n            </div>\n        `;\n  }\n  render() {\n    return html`\n            <slot></slot>\n            ${this.tip ? this.renderTip() : nothing}\n        `;\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Popover.prototype, \"open\", 2);\n__decorateClass([\n  property({ reflect: true })\n], Popover.prototype, \"placement\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Popover.prototype, \"tip\", 2);\n__decorateClass([\n  query(\"#tip\")\n], Popover.prototype, \"tipElement\", 2);\n//# sourceMappingURL=Popover.dev.js.map\n"],"names":[],"sourceRoot":""}