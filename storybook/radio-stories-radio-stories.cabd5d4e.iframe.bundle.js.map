{"version":3,"file":"radio-stories-radio-stories.cabd5d4e.iframe.bundle.js","mappings":";;AAwBA;;;;AAIA;AACA;;;;;AAMA;AC6BA;AAEA;AAgBA;AAGA;;AAiBA;AACA;AACA;AACA;;AAIA;;;;;;;AAUA;;;;;;;;;;AAaA;;;;;;;;;;AAaA","sources":["webpack://@adobe/spectrum-web-components/./packages/help-text/src/HelpTextManager.dev.js","webpack://@adobe/spectrum-web-components/./packages/radio/stories/radio.stories.js"],"sourcesContent":["\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport { conditionAttributeWithId } from \"@spectrum-web-components/base/src/condition-attribute-with-id.js\";\nimport { randomID } from \"@spectrum-web-components/shared/src/random-id.js\";\nexport class HelpTextManager {\n  constructor(host, { mode } = { mode: \"internal\" }) {\n    this.mode = \"internal\";\n    this.handleSlotchange = ({\n      target\n    }) => {\n      this.handleHelpText(target);\n      this.handleNegativeHelpText(target);\n    };\n    this.host = host;\n    this.id = `sp-help-text-${randomID()}`;\n    this.mode = mode;\n  }\n  get isInternal() {\n    return this.mode === \"internal\";\n  }\n  render(negative) {\n    return html`\n            <div\n                id=${ifDefined(this.isInternal ? this.id : void 0)}\n                aria-live=\"assertive\"\n            >\n                <slot\n                    name=${negative ? \"negative-help-text\" : `pass-through-help-text-${randomID()}`}\n                    @slotchange=${this.handleSlotchange}\n                >\n                    <slot name=\"help-text\"></slot>\n                </slot>\n            </div>\n        `;\n  }\n  addId() {\n    const id = this.helpTextElement ? this.helpTextElement.id : this.id;\n    this.conditionId = conditionAttributeWithId(\n      this.host,\n      \"aria-describedby\",\n      id\n    );\n    if (this.host.hasAttribute(\"tabindex\")) {\n      this.previousTabindex = parseFloat(\n        this.host.getAttribute(\"tabindex\")\n      );\n    }\n    this.host.tabIndex = 0;\n  }\n  removeId() {\n    if (this.conditionId) {\n      this.conditionId();\n      delete this.conditionId;\n    }\n    if (this.helpTextElement) return;\n    if (this.previousTabindex) {\n      this.host.tabIndex = this.previousTabindex;\n    } else {\n      this.host.removeAttribute(\"tabindex\");\n    }\n  }\n  handleHelpText(target) {\n    if (this.isInternal) return;\n    if (this.helpTextElement && this.helpTextElement.id === this.id) {\n      this.helpTextElement.removeAttribute(\"id\");\n    }\n    this.removeId();\n    const assignedElements = target.assignedElements();\n    const nextHelpTextElement = assignedElements[0];\n    this.helpTextElement = nextHelpTextElement;\n    if (nextHelpTextElement) {\n      if (!nextHelpTextElement.id) {\n        nextHelpTextElement.id = this.id;\n      }\n      this.addId();\n    }\n  }\n  handleNegativeHelpText(target) {\n    if (target.name !== \"negative-help-text\") return;\n    const assignedElements = target.assignedElements();\n    assignedElements.forEach(\n      (el) => el.variant = \"negative\"\n    );\n  }\n}\n//# sourceMappingURL=HelpTextManager.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/radio/sp-radio.js\";\nimport \"@spectrum-web-components/radio/sp-radio-group.js\";\nimport { spreadProps } from \"../../../test/lit-helpers.js\";\nexport default {\n  component: \"sp-radio\",\n  title: \"Radio\",\n  argTypes: {\n    checked: {\n      name: \"checked\",\n      type: { name: \"boolean\", required: false },\n      description: \"Represents when the input is checked\",\n      table: {\n        type: { summary: \"boolean\" },\n        defaultValue: { summary: false }\n      },\n      control: \"boolean\"\n    },\n    disabled: {\n      name: \"disabled\",\n      type: { name: \"boolean\", required: false },\n      description: \"Disable this control. It will not receive focus or events.\",\n      table: {\n        type: { summary: \"boolean\" },\n        defaultValue: { summary: false }\n      },\n      control: {\n        type: \"boolean\"\n      }\n    },\n    emphasized: {\n      name: \"emphasized\",\n      type: { name: \"boolean\", required: false },\n      description: \"Set the button's state to emphasized.\",\n      table: {\n        type: { summary: \"boolean\" },\n        defaultValue: { summary: false }\n      },\n      control: {\n        type: \"boolean\"\n      }\n    },\n    invalid: {\n      name: \"invalid\",\n      type: { name: \"boolean\", required: false },\n      table: {\n        type: { summary: \"boolean\" },\n        defaultValue: { summary: false }\n      },\n      control: {\n        type: \"boolean\"\n      }\n    }\n  },\n  args: {\n    checked: false,\n    disabled: false,\n    emphasized: false,\n    invalid: false\n  }\n};\nfunction renderRadio(args) {\n  return html`\n        <sp-radio ${spreadProps(args)}>Radio</sp-radio>\n    `;\n}\nexport const Default = (args) => renderRadio(args);\nexport const readonly = (args) => renderRadio({\n  ...args,\n  readonly: true\n});\nreadonly.args = {\n  checked: true\n};\nexport const Emphasized = (args) => renderRadio(args);\nEmphasized.args = {\n  checked: true,\n  emphasized: true\n};\nexport const Autofocus = (args) => {\n  return html`\n        <sp-radio autofocus ${spreadProps(args)}>Radio</sp-radio>\n    `;\n};\nexport const Invalid = (args) => renderRadio(args);\nInvalid.args = {\n  invalid: true\n};\nexport const Disabled = (args) => renderRadio(args);\nDisabled.args = {\n  disabled: true\n};\nconst values = {\n  first: 1,\n  second: 2,\n  third: 3,\n  fourth: 4\n};\nexport const groupExample = () => {\n  return html`\n        <sp-radio-group vertical selected=\"1\" name=\"group-example\">\n            <sp-radio value=${values.first}>Option 1</sp-radio>\n            <sp-radio value=${values.second}>Option 2</sp-radio>\n            <sp-radio value=${values.third}>Option 3</sp-radio>\n            <sp-radio value=${values.fourth}>Option 4</sp-radio>\n        </sp-radio-group>\n    `;\n};\nexport const horizontalGroup = () => {\n  return html`\n        <sp-radio-group horizontal selected=\"first\" name=\"group-example\">\n            <sp-radio value=\"first\">Option 1</sp-radio>\n            <sp-radio value=\"second\">Option 2</sp-radio>\n            <sp-radio value=\"third\">Option 3</sp-radio>\n            <sp-radio value=\"fourth\">Option 4</sp-radio>\n        </sp-radio-group>\n    `;\n};\nexport const tabIndexExample = () => {\n  return html`\n        <sp-radio-group vertical name=\"group-example\">\n            <sp-radio emphasized value=\"zero\" tabindex=\"0\">\n                Tab Index 0\n            </sp-radio>\n            <sp-radio disabled value=\"three\" tabindex=\"3\">Tab Index 3</sp-radio>\n            <sp-radio value=\"one\" tabindex=\"1\" autofocus>Tab Index 1</sp-radio>\n            <sp-radio value=\"four\" tabindex=\"4\">Tab Index 4</sp-radio>\n            <sp-radio invalid value=\"two\" tabindex=\"2\">Tab Index 2</sp-radio>\n        </sp-radio-group>\n    `;\n};\nexport const horizontalTabIndexExample = () => {\n  return html`\n        <sp-radio-group horizontal name=\"group-example\">\n            <sp-radio emphasized value=\"zero\" tabindex=\"0\">\n                Tab Index 0\n            </sp-radio>\n            <sp-radio disabled value=\"three\" tabindex=\"3\">Tab Index 3</sp-radio>\n            <sp-radio value=\"one\" tabindex=\"1\" autofocus>Tab Index 1</sp-radio>\n            <sp-radio value=\"four\" tabindex=\"4\">Tab Index 4</sp-radio>\n            <sp-radio invalid value=\"two\" tabindex=\"2\">Tab Index 2</sp-radio>\n        </sp-radio-group>\n    `;\n};\ntabIndexExample.storyName = \"Tab index example\";\n//# sourceMappingURL=radio.stories.js.map\n;export const __namedExportsOrder = [\"Default\",\"readonly\",\"Emphasized\",\"Autofocus\",\"Invalid\",\"Disabled\",\"groupExample\",\"horizontalGroup\",\"tabIndexExample\",\"horizontalTabIndexExample\"];"],"names":[],"sourceRoot":""}