{"version":3,"file":"menu-stories-menu-group-stories.a0e5e3e3.iframe.bundle.js","mappings":";;AAEA;;;;ACDA;AAgEA;AACA;;AAEA;AAEA;;;;;;AC/CA;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;AC/IA;;;;;;;;;AAwCA;;AAIA;AAEA","sources":["webpack://@adobe/spectrum-web-components/./packages/divider/src/divider.css.js","webpack://@adobe/spectrum-web-components/./packages/menu/src/MenuGroup.dev.js","webpack://@adobe/spectrum-web-components/./packages/menu/stories/menu-group.stories.js","webpack://@adobe/spectrum-web-components/./packages/popover/src/Popover.dev.js"],"sourcesContent":["\"use strict\";import{css as r}from\"@spectrum-web-components/base\";const i=r`\n    @media (forced-colors:active){:host{--highcontrast-divider-background-color:CanvasText}}:host{--spectrum-divider-thickness:var(--spectrum-divider-thickness-medium)}:host([size=s]){--spectrum-divider-thickness:var(--spectrum-divider-thickness-small)}:host([size=l]){--spectrum-divider-thickness:var(--spectrum-divider-thickness-large);--spectrum-divider-background-color:var(--spectrum-gray-800)}:host([static-color=white]){--mod-divider-background-color:var(--mod-divider-background-color-medium-static-white,var(--spectrum-divider-background-color-static-white))}:host([static-color=white][size=s]){--mod-divider-background-color:var(--mod-divider-background-color-small-static-white,var(--spectrum-divider-background-color-static-white))}:host([static-color=white][size=l]){--mod-divider-background-color:var(--mod-divider-background-color-large-static-white,var(--spectrum-transparent-white-800))}:host([static-color=black]){--mod-divider-background-color:var(--mod-divider-background-color-medium-static-black,var(--spectrum-divider-background-color-static-black))}:host([static-color=black][size=s]){--mod-divider-background-color:var(--mod-divider-background-color-small-static-black,var(--spectrum-divider-background-color-static-black))}:host([static-color=black][size=l]){--mod-divider-background-color:var(--mod-divider-background-color-large-static-black,var(--spectrum-transparent-black-800))}:host{block-size:var(--mod-divider-thickness,var(--spectrum-divider-thickness));border:none;border-width:var(--mod-divider-thickness,var(--spectrum-divider-thickness));border-radius:var(--mod-divider-thickness,var(--spectrum-divider-thickness));background-color:var(--highcontrast-divider-background-color,var(--mod-divider-background-color,var(--spectrum-divider-background-color)));inline-size:100%;overflow:visible}:host([vertical]){inline-size:var(--mod-divider-thickness,var(--spectrum-divider-thickness));block-size:100%;block-size:var(--mod-divider-vertical-height,100%);margin-block:var(--mod-divider-vertical-margin);align-self:var(--mod-divider-vertical-align)}:host{--spectrum-divider-background-color:var(--system-divider-background-color);--spectrum-divider-background-color-static-white:var(--system-divider-background-color-static-white);--spectrum-divider-background-color-static-black:var(--system-divider-background-color-static-black)}:host{display:block}hr{border:none;margin:0}\n`;export default i;\n//# sourceMappingURL=divider.css.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html\n} from \"@spectrum-web-components/base\";\nimport {\n  queryAssignedNodes,\n  state\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { randomID } from \"@spectrum-web-components/shared/src/random-id.js\";\nimport { Menu } from \"./Menu.dev.js\";\nimport \"@spectrum-web-components/menu/sp-menu.js\";\nimport menuGroupStyles from \"./menu-group.css.js\";\nexport class MenuGroup extends Menu {\n  constructor() {\n    super(...arguments);\n    this.headerId = \"\";\n  }\n  static get styles() {\n    return [...super.styles, menuGroupStyles];\n  }\n  /**\n   * a menu group must have the role `group`\n   * and should never function as a menu\n   */\n  get ownRole() {\n    return \"group\";\n  }\n  /**\n   * only a menu controls roving tabindex;\n   * groups should defer navigation to parent menu\n   */\n  get controlsRovingTabindex() {\n    return false;\n  }\n  updateLabel() {\n    const headerElement = this.headerElements.length ? this.headerElements[0] : void 0;\n    if (headerElement !== this.headerElement) {\n      if (this.headerElement && this.headerElement.id === this.headerId) {\n        this.headerElement.removeAttribute(\"id\");\n      }\n      if (headerElement) {\n        this.headerId = this.headerId || `sp-menu-group-label-${randomID()}`;\n        const headerId = headerElement.id || this.headerId;\n        if (!headerElement.id) {\n          headerElement.id = headerId;\n        }\n        this.setAttribute(\"aria-labelledby\", headerId);\n      } else {\n        this.removeAttribute(\"aria-labelledby\");\n      }\n    }\n    this.headerElement = headerElement;\n  }\n  render() {\n    return html`\n            <span class=\"header\" ?hidden=${!this.headerElement}>\n                <slot name=\"header\" @slotchange=${this.updateLabel}></slot>\n            </span>\n            ${this.renderMenuItemSlot()}\n        `;\n  }\n}\n__decorateClass([\n  queryAssignedNodes({\n    slot: \"header\",\n    flatten: true\n  })\n], MenuGroup.prototype, \"headerElements\", 2);\n__decorateClass([\n  state()\n], MenuGroup.prototype, \"headerElement\", 2);\n//# sourceMappingURL=MenuGroup.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/menu/sp-menu.js\";\nimport \"@spectrum-web-components/menu/sp-menu-divider.js\";\nimport \"@spectrum-web-components/popover/sp-popover.js\";\nimport \"@spectrum-web-components/menu/sp-menu.js\";\nimport \"@spectrum-web-components/menu/sp-menu-item.js\";\nimport \"@spectrum-web-components/menu/sp-menu-divider.js\";\nimport \"@spectrum-web-components/menu/sp-menu-group.js\";\nimport \"./index.js\";\nexport default {\n  component: \"sp-menu\",\n  title: \"Menu Group\"\n};\nexport const complexSlotted = () => {\n  return html`\n        <complex-slotted-menu>\n            <sp-menu-item slot=\"before\" id=\"i-2\">External A</sp-menu-item>\n            <sp-menu-item id=\"i-8\">External 1</sp-menu-item>\n            <sp-menu-item id=\"i-9\">External 2</sp-menu-item>\n        </complex-slotted-menu>\n    `;\n};\nexport const mixed = () => {\n  let style = \"italic\";\n  let weight = \"700\";\n  let color = \"blue\";\n  let decoration = \"overline\";\n  const styleRules = ({\n    style: style2,\n    weight: weight2,\n    color: color2,\n    decoration: decoration2\n  }) => {\n    return `\n        .style-rule {\n            font-weight: ${weight2};\n            font-style: ${style2};\n            color: ${color2};\n            text-decoration: ${decoration2};\n        }\n        `;\n  };\n  const update = (event) => {\n    const { value, id } = event.target;\n    switch (id) {\n      case \"font\":\n        const values = value.split(\",\");\n        style = values.indexOf(\"italic\") > -1 ? \"italic\" : \"normal\";\n        weight = values.indexOf(\"bold\") > -1 ? \"700\" : \"400\";\n        break;\n      case \"color\":\n        color = value;\n        break;\n      case \"decoration\":\n        decoration = value;\n        break;\n    }\n    document.querySelector(\"#output\").textContent = styleRules({\n      style,\n      weight,\n      color,\n      decoration\n    });\n  };\n  return html`\n        <style>\n            sp-popover {\n                position: static;\n                float: left;\n            }\n        </style>\n        <sp-popover open>\n            <sp-menu label=\"Style/Color\" @change=${update}>\n                <sp-menu-group label=\"Font Style\" selects=\"multiple\" id=\"font\">\n                    <sp-menu-item value=\"bold\" selected>Bold</sp-menu-item>\n                    <sp-menu-item value=\"italic\" selected>Italic</sp-menu-item>\n                </sp-menu-group>\n                <sp-menu-divider></sp-menu-divider>\n                <sp-menu-group label=\"Text Color\" selects=\"single\" id=\"color\">\n                    <sp-menu-item value=\"black\">Black</sp-menu-item>\n                    <sp-menu-item value=\"blue\" selected>Blue</sp-menu-item>\n                    <sp-menu-item value=\"red\">Red</sp-menu-item>\n                    <sp-menu-item value=\"green\">Green</sp-menu-item>\n                </sp-menu-group>\n                <sp-menu-divider></sp-menu-divider>\n                <sp-menu-group\n                    label=\"Text Decoration\"\n                    selects=\"single\"\n                    id=\"decoration\"\n                >\n                    <sp-menu-item value=\"none\">None</sp-menu-item>\n                    <sp-menu-item value=\"overline\" selected>\n                        Overline\n                    </sp-menu-item>\n                    <sp-menu-item value=\"line-through\">\n                        Line-through\n                    </sp-menu-item>\n                    <sp-menu-item value=\"underline\">Underline</sp-menu-item>\n                </sp-menu-group>\n            </sp-menu>\n        </sp-popover>\n        <pre\n            id=\"output\"\n            style=\"font-family: var(--spectrum-alias-body-text-font-family);\"\n        >\n            ${styleRules({ style, weight, color, decoration })}\n        </pre\n        >\n    `;\n};\nexport const inherit = () => {\n  return html`\n        <style>\n            sp-popover {\n                position: static;\n                float: left;\n            }\n        </style>\n        <sp-popover open>\n            <sp-menu label=\"Groceries\" selects=\"multiple\">\n                <sp-menu-group label=\"Juice\" selects=\"inherit\">\n                    <sp-menu-item selected>Orange</sp-menu-item>\n                    <sp-menu-item selected>Apple</sp-menu-item>\n                    <sp-menu-item>Grape</sp-menu-item>\n                </sp-menu-group>\n                <sp-menu-divider></sp-menu-divider>\n                <sp-menu-group label=\"Vegetables\" selects=\"inherit\">\n                    <sp-menu-item>Carrots</sp-menu-item>\n                    <sp-menu-item selected>Summer Squash</sp-menu-item>\n                    <sp-menu-item>Zuccini</sp-menu-item>\n                </sp-menu-group>\n                <sp-menu-divider></sp-menu-divider>\n                <sp-menu-group label=\"Dry Goods\" selects=\"inherit\">\n                    <sp-menu-item>Ceral</sp-menu-item>\n                    <sp-menu-item selected>Flour</sp-menu-item>\n                    <sp-menu-item>Salt</sp-menu-item>\n                    <sp-menu-item>Sugar</sp-menu-item>\n                </sp-menu-group>\n            </sp-menu>\n        </sp-popover>\n    `;\n};\n//# sourceMappingURL=menu-group.stories.js.map\n;export const __namedExportsOrder = [\"complexSlotted\",\"mixed\",\"inherit\"];","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport popoverStyles from \"./popover.css.js\";\nexport class Popover extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.open = false;\n    this.tip = false;\n  }\n  static get styles() {\n    return [popoverStyles];\n  }\n  renderTip() {\n    return html`\n            <div id=\"tip\" aria-hidden=\"true\">\n                <svg class=\"tip block\" viewBox=\"0 -0.5 16 9\">\n                    <path class=\"triangle\" d=\"M-1,-1 8,8 17,-1\"></path>\n                </svg>\n                <svg class=\"tip inline\" viewBox=\"0 -0.5 9 16\">\n                    <path class=\"triangle\" d=\"M-1,-1 8,8 -1,17\"></path>\n                </svg>\n            </div>\n        `;\n  }\n  render() {\n    return html`\n            <slot></slot>\n            ${this.tip ? this.renderTip() : nothing}\n        `;\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Popover.prototype, \"open\", 2);\n__decorateClass([\n  property({ reflect: true })\n], Popover.prototype, \"placement\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Popover.prototype, \"tip\", 2);\n__decorateClass([\n  query(\"#tip\")\n], Popover.prototype, \"tipElement\", 2);\n//# sourceMappingURL=Popover.dev.js.map\n"],"names":[],"sourceRoot":""}