{"version":3,"file":"toast-stories-toast-stories.870826a2.iframe.bundle.js","mappings":";;AAEA;AACA;;AAEA;;;AAGA;;;;;;;;;;ACRA;;ACEA;AACA;;AAEA;;;AAGA;;;;;;;;;;;;;;;;ACNA;AACA;;AAEA;;;AAGA;;;;;;;ACNA;;AAEA;AACA;;;AAGA;;;;;;;ACPA;AAmGA;AAEA;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAIA;;;;AAcA;;AAEA;AAMA;;ACxMA;;AAmGA;;;AAIA;;AAIA;;;AAIA;;AAGA;;;AAIA;;AAGA;;;AAIA;AA6BA;;;;;;;;;AASA;;;;;AAMA;;AC3JA;AACA;AACA;AACA;;AAEA;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;AAEA;AACA;;AAQA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;;;;AAOA;;;;;;;;;;AAeA;;AAKA","sources":["webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons-s2/CheckmarkCircle.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/elements/IconCheckmarkCircle.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons-s2/InfoCircle.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons/CheckmarkCircle.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons/Info.js","webpack://@adobe/spectrum-web-components/./packages/overlay/src/OverlayTrigger.dev.js","webpack://@adobe/spectrum-web-components/./packages/toast/src/Toast.dev.js","webpack://@adobe/spectrum-web-components/./packages/toast/stories/toast.stories.js"],"sourcesContent":["\"use strict\";import{tag as a}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const CheckmarkCircleIcon=({width:e=24,height:l=24,hidden:r=!1,title:t=\"Checkmark Circle\"}={})=>a`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"${e}\"\n    height=\"${l}\"\n    viewBox=\"0 0 20 20\"\n    aria-hidden=${r?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${t}\"\n  >\n    <path\n      d=\"M10,18.75c-4.8252,0-8.75-3.9248-8.75-8.75S5.1748,1.25,10,1.25s8.75,3.9248,8.75,8.75-3.9248,8.75-8.75,8.75ZM10,2.75c-3.99805,0-7.25,3.25195-7.25,7.25s3.25195,7.25,7.25,7.25,7.25-3.25195,7.25-7.25-3.25195-7.25-7.25-7.25Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"M9.22266,13.5c-.21191,0-.41504-.08984-.55762-.24805l-2.51074-2.79199c-.27734-.30859-.25195-.78223.05566-1.05957s.78125-.25195,1.05957.05566l1.89355,2.10645,3.4873-4.75586c.24316-.33398.71094-.40918,1.04785-.16113.33398.24414.40625.71387.16113,1.04785l-4.03223,5.5c-.13281.18262-.3418.29492-.56738.30566-.01172.00098-.02441.00098-.03711.00098Z\"\n      fill=\"currentColor\"\n    />\n  </svg>`;\n//# sourceMappingURL=CheckmarkCircle.js.map\n","\"use strict\";import{html as e}from\"@spectrum-web-components/base\";import{IconBase as t}from\"@spectrum-web-components/icon\";import{setCustomTemplateLiteralTag as r}from\"../custom-tag.js\";import{CheckmarkCircleIcon as l}from\"../icons-s2/CheckmarkCircle.js\";import{CheckmarkCircleIcon as a}from\"../icons/CheckmarkCircle.js\";export class IconCheckmarkCircle extends t{render(){return r(e),this.spectrumVersion===2?l({hidden:!this.label,title:this.label}):a({hidden:!this.label,title:this.label})}}\n//# sourceMappingURL=IconCheckmarkCircle.js.map\n","\"use strict\";import{tag as o}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const InfoCircleIcon=({width:r=24,height:t=24,hidden:e=!1,title:l=\"Info Circle\"}={})=>o`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"${r}\"\n    height=\"${t}\"\n    viewBox=\"0 0 20 20\"\n    aria-hidden=${e?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${l}\"\n  >\n    <path\n      d=\"m10,18.75c-4.8252,0-8.75-3.9248-8.75-8.75S5.1748,1.25,10,1.25s8.75,3.9248,8.75,8.75-3.9248,8.75-8.75,8.75Zm0-16c-3.99805,0-7.25,3.25195-7.25,7.25s3.25195,7.25,7.25,7.25,7.25-3.25195,7.25-7.25-3.25195-7.25-7.25-7.25Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"m10.00064,5.26036c.23065-.00813.45538.07387.62661.22862.33033.36505.33033.92102,0,1.28607-.16935.15851-.39483.24308-.62664.23504-.23635.00948-.46589-.08035-.63302-.24775-.16207-.1679-.24916-.39432-.24137-.62755-.01238-.23497.06959-.46515.2277-.6394.17358-.16474.40786-.24988.64671-.23503Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"m10,15.0625c-.41406,0-.75-.33594-.75-.75v-4.83496c0-.41406.33594-.75.75-.75s.75.33594.75.75v4.83496c0,.41406-.33594.75-.75.75Z\"\n      fill=\"currentColor\"\n    />\n  </svg>`;\n//# sourceMappingURL=InfoCircle.js.map\n","\"use strict\";import{tag as r}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const CheckmarkCircleIcon=({width:e=24,height:a=24,hidden:t=!1,title:l=\"Checkmark Circle\"}={})=>r`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"${e}\"\n    height=\"${a}\"\n    viewBox=\"0 0 36 36\"\n    aria-hidden=${t?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${l}\"\n  >\n    <path\n      d=\"M18 2a16 16 0 1 0 16 16A16 16 0 0 0 18 2Zm10.666 9.08L16.018 27.341a1.208 1.208 0 0 1-.875.461c-.024.002-.05.002-.073.002a1.2 1.2 0 0 1-.85-.351l-7.784-7.795a1.2 1.2 0 0 1 0-1.698l1.326-1.325a1.201 1.201 0 0 1 1.695 0l5.346 5.347L25.314 8.473A1.203 1.203 0 0 1 27 8.263l1.455 1.133a1.205 1.205 0 0 1 .211 1.684Z\"\n    />\n  </svg>`;\n//# sourceMappingURL=CheckmarkCircle.js.map\n","\"use strict\";import{tag as l}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const InfoIcon=({width:a=24,height:t=24,hidden:e=!1,title:r=\"Info\"}={})=>l`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height=\"${t}\"\n    viewBox=\"0 0 36 36\"\n    width=\"${a}\"\n    aria-hidden=${e?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${r}\"\n  >\n    <path\n      d=\"M18 2a16 16 0 1 0 16 16A16 16 0 0 0 18 2Zm-.3 4.3a2.718 2.718 0 0 1 2.864 2.824 2.664 2.664 0 0 1-2.864 2.863 2.705 2.705 0 0 1-2.864-2.864A2.717 2.717 0 0 1 17.7 6.3ZM22 27a1 1 0 0 1-1 1h-6a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1h1v-6h-1a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v9h1a1 1 0 0 1 1 1Z\"\n    />\n  </svg>`;\n//# sourceMappingURL=Info.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query,\n  state\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/overlay/sp-overlay.js\";\nimport overlayTriggerStyles from \"./overlay-trigger.css.js\";\nexport class OverlayTrigger extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.offset = 6;\n    this.disabled = false;\n    this.receivesFocus = \"auto\";\n    this.clickContent = [];\n    this.longpressContent = [];\n    this.hoverContent = [];\n    this.targetContent = [];\n  }\n  static get styles() {\n    return [overlayTriggerStyles];\n  }\n  getAssignedElementsFromSlot(slot) {\n    return slot.assignedElements({ flatten: true });\n  }\n  handleTriggerContent(event) {\n    this.targetContent = this.getAssignedElementsFromSlot(event.target);\n  }\n  handleSlotContent(event) {\n    switch (event.target.name) {\n      case \"click-content\":\n        this.clickContent = this.getAssignedElementsFromSlot(\n          event.target\n        );\n        break;\n      case \"longpress-content\":\n        this.longpressContent = this.getAssignedElementsFromSlot(\n          event.target\n        );\n        break;\n      case \"hover-content\":\n        this.hoverContent = this.getAssignedElementsFromSlot(\n          event.target\n        );\n        break;\n    }\n  }\n  handleBeforetoggle(event) {\n    const { target } = event;\n    let type;\n    if (target === this.clickOverlayElement) {\n      type = \"click\";\n    } else if (target === this.longpressOverlayElement) {\n      type = \"longpress\";\n    } else if (target === this.hoverOverlayElement) {\n      type = \"hover\";\n    } else {\n      return;\n    }\n    if (event.newState === \"open\") {\n      this.open = type;\n    } else if (this.open === type) {\n      this.open = void 0;\n    }\n  }\n  update(changes) {\n    var _a, _b, _c, _d, _e, _f;\n    if (changes.has(\"clickContent\")) {\n      this.clickPlacement = ((_a = this.clickContent[0]) == null ? void 0 : _a.getAttribute(\"placement\")) || ((_b = this.clickContent[0]) == null ? void 0 : _b.getAttribute(\n        \"direction\"\n      )) || void 0;\n    }\n    if (changes.has(\"hoverContent\")) {\n      this.hoverPlacement = ((_c = this.hoverContent[0]) == null ? void 0 : _c.getAttribute(\"placement\")) || ((_d = this.hoverContent[0]) == null ? void 0 : _d.getAttribute(\n        \"direction\"\n      )) || void 0;\n    }\n    if (changes.has(\"longpressContent\")) {\n      this.longpressPlacement = ((_e = this.longpressContent[0]) == null ? void 0 : _e.getAttribute(\"placement\")) || ((_f = this.longpressContent[0]) == null ? void 0 : _f.getAttribute(\n        \"direction\"\n      )) || void 0;\n    }\n    super.update(changes);\n  }\n  renderSlot(name) {\n    return html`\n            <slot name=${name} @slotchange=${this.handleSlotContent}></slot>\n        `;\n  }\n  renderClickOverlay() {\n    var _a;\n    const slot = this.renderSlot(\"click-content\");\n    const clickOverlay = html`\n            <sp-overlay\n                id=\"click-overlay\"\n                ?disabled=${this.disabled || !this.clickContent.length}\n                ?open=${this.open === \"click\" && !!this.clickContent.length}\n                .offset=${this.offset}\n                .placement=${this.clickPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${\"click\"}\n                .type=${this.type || \"auto\"}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n        `;\n    if ((_a = this.triggeredBy) == null ? void 0 : _a.includes(\"click\")) {\n      return clickOverlay;\n    }\n    if (!this.clickContent.length) {\n      return slot;\n    } else {\n      return clickOverlay;\n    }\n  }\n  renderHoverOverlay() {\n    var _a;\n    const slot = this.renderSlot(\"hover-content\");\n    const hoverOverlay = html`\n            <sp-overlay\n                id=\"hover-overlay\"\n                ?open=${this.open === \"hover\" && !!this.hoverContent.length}\n                ?disabled=${this.disabled || !this.hoverContent.length || !!this.open && this.open !== \"hover\"}\n                .offset=${this.offset}\n                .placement=${this.hoverPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${\"hover\"}\n                .type=${\"hint\"}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n        `;\n    if ((_a = this.triggeredBy) == null ? void 0 : _a.includes(\"hover\")) {\n      return hoverOverlay;\n    }\n    if (!this.hoverContent.length) {\n      return slot;\n    } else {\n      return hoverOverlay;\n    }\n  }\n  renderLongpressOverlay() {\n    var _a;\n    const slot = this.renderSlot(\"longpress-content\");\n    const longpressOverlay = html`\n            <sp-overlay\n                id=\"longpress-overlay\"\n                ?disabled=${this.disabled || !this.longpressContent.length}\n                ?open=${this.open === \"longpress\" && !!this.longpressContent.length}\n                .offset=${this.offset}\n                .placement=${this.longpressPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${\"longpress\"}\n                .type=${\"auto\"}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n            <slot name=\"longpress-describedby-descriptor\"></slot>\n        `;\n    if ((_a = this.triggeredBy) == null ? void 0 : _a.includes(\"longpress\")) {\n      return longpressOverlay;\n    }\n    if (!this.longpressContent.length) {\n      return slot;\n    } else {\n      return longpressOverlay;\n    }\n  }\n  render() {\n    return html`\n            <slot\n                id=\"trigger\"\n                name=\"trigger\"\n                @slotchange=${this.handleTriggerContent}\n            ></slot>\n            ${[\n      this.renderClickOverlay(),\n      this.renderHoverOverlay(),\n      this.renderLongpressOverlay()\n    ]}\n        `;\n  }\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (!this.triggeredBy) {\n      const issues = [\n        \"You have not specified the `triggeredBy` property. For optimal performance, consider explicitly declaring which overlay types you plan to use.\",\n        'Example: triggered-by=\"click hover\"',\n        \"This helps avoid unnecessary DOM operations and potential race conditions.\"\n      ];\n      window.__swc.warn(\n        this,\n        \"Performance optimization available for <overlay-trigger>:\",\n        \"https://opensource.adobe.com/spectrum-web-components/components/overlay-trigger/#performance-optimization\",\n        { issues }\n      );\n    }\n    if (this.disabled && changedProperties.has(\"disabled\")) {\n      this.open = void 0;\n      return;\n    }\n  }\n  async getUpdateComplete() {\n    const complete = await super.getUpdateComplete();\n    return complete;\n  }\n}\n__decorateClass([\n  property({ attribute: \"triggered-by\" })\n], OverlayTrigger.prototype, \"triggeredBy\", 2);\n__decorateClass([\n  property({ reflect: true })\n], OverlayTrigger.prototype, \"placement\", 2);\n__decorateClass([\n  property()\n], OverlayTrigger.prototype, \"type\", 2);\n__decorateClass([\n  property({ type: Number })\n], OverlayTrigger.prototype, \"offset\", 2);\n__decorateClass([\n  property({ reflect: true })\n], OverlayTrigger.prototype, \"open\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], OverlayTrigger.prototype, \"disabled\", 2);\n__decorateClass([\n  property({ attribute: \"receives-focus\" })\n], OverlayTrigger.prototype, \"receivesFocus\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"clickContent\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"longpressContent\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"hoverContent\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"targetContent\", 2);\n__decorateClass([\n  query(\"#click-overlay\", true)\n], OverlayTrigger.prototype, \"clickOverlayElement\", 2);\n__decorateClass([\n  query(\"#longpress-overlay\", true)\n], OverlayTrigger.prototype, \"longpressOverlayElement\", 2);\n__decorateClass([\n  query(\"#hover-overlay\", true)\n], OverlayTrigger.prototype, \"hoverOverlayElement\", 2);\n//# sourceMappingURL=OverlayTrigger.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/button/sp-close-button.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-info.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-checkmark-circle.js\";\nimport { FocusVisiblePolyfillMixin } from \"@spectrum-web-components/shared/src/focus-visible.js\";\nimport toastStyles from \"./toast.css.js\";\nexport const toastVariants = [\n  \"negative\",\n  \"positive\",\n  \"info\",\n  \"error\",\n  \"warning\"\n];\nexport class Toast extends FocusVisiblePolyfillMixin(SpectrumElement) {\n  constructor() {\n    super(...arguments);\n    this.open = false;\n    this._timeout = null;\n    this._variant = \"\";\n    this.countdownStart = 0;\n    this.nextCount = -1;\n    this.doCountdown = (time) => {\n      if (!this.countdownStart) {\n        this.countdownStart = performance.now();\n      }\n      if (time - this.countdownStart > this._timeout) {\n        this.shouldClose();\n        this.countdownStart = 0;\n      } else {\n        this.countdown();\n      }\n    };\n    this.countdown = () => {\n      cancelAnimationFrame(this.nextCount);\n      this.nextCount = requestAnimationFrame(this.doCountdown);\n    };\n    this.holdCountdown = () => {\n      this.stopCountdown();\n      this.addEventListener(\"focusout\", this.resumeCountdown);\n    };\n    this.resumeCountdown = () => {\n      this.removeEventListener(\"focusout\", this.holdCountdown);\n      this.countdown();\n    };\n  }\n  static get styles() {\n    return [toastStyles];\n  }\n  set timeout(timeout) {\n    const hasTimeout = typeof timeout !== null && timeout > 0;\n    const newTimeout = hasTimeout ? Math.max(6e3, timeout) : null;\n    const oldValue = this.timeout;\n    if (newTimeout && this.countdownStart) {\n      this.countdownStart = performance.now();\n    }\n    this._timeout = newTimeout;\n    this.requestUpdate(\"timeout\", oldValue);\n  }\n  get timeout() {\n    return this._timeout;\n  }\n  set variant(variant) {\n    if (variant === this.variant) {\n      return;\n    }\n    const oldValue = this.variant;\n    if (toastVariants.includes(variant)) {\n      this.setAttribute(\"variant\", variant);\n      this._variant = variant;\n    } else {\n      this.removeAttribute(\"variant\");\n      this._variant = \"\";\n    }\n    this.requestUpdate(\"variant\", oldValue);\n  }\n  get variant() {\n    return this._variant;\n  }\n  //TODO(#4931): Address the deprecated variants or remove the flags\n  renderIcon(variant, iconLabel) {\n    switch (variant) {\n      case \"info\":\n        return html`\n                    <sp-icon-info\n                        label=${iconLabel || \"Information\"}\n                        class=\"type\"\n                    ></sp-icon-info>\n                `;\n      case \"negative\":\n      case \"error\":\n        return html`\n                    <sp-icon-alert\n                        label=${iconLabel || \"Error\"}\n                        class=\"type\"\n                    ></sp-icon-alert>\n                `;\n      case \"warning\":\n        return html`\n                    <sp-icon-alert\n                        label=${iconLabel || \"Warning\"}\n                        class=\"type\"\n                    ></sp-icon-alert>\n                `;\n      case \"positive\":\n        return html`\n                    <sp-icon-checkmark-circle\n                        label=${iconLabel || \"Success\"}\n                        class=\"type\"\n                    ></sp-icon-checkmark-circle>\n                `;\n      default:\n        return html``;\n    }\n  }\n  startCountdown() {\n    this.countdown();\n    this.addEventListener(\"focusin\", this.holdCountdown);\n  }\n  stopCountdown() {\n    cancelAnimationFrame(this.nextCount);\n    this.countdownStart = 0;\n  }\n  shouldClose() {\n    const applyDefault = this.dispatchEvent(\n      new CustomEvent(\"close\", {\n        composed: true,\n        bubbles: true,\n        cancelable: true\n      })\n    );\n    if (applyDefault) {\n      this.close();\n    }\n  }\n  close() {\n    this.open = false;\n  }\n  render() {\n    return html`\n            ${this.renderIcon(this.variant, this.iconLabel)}\n            <div class=\"body\" role=\"alert\">\n                <div class=\"content\">\n                    <slot></slot>\n                </div>\n                <slot name=\"action\"></slot>\n            </div>\n            <div class=\"buttons\">\n                <sp-close-button\n                    @click=${this.shouldClose}\n                    label=\"Close\"\n                    static-color=\"white\"\n                ></sp-close-button>\n            </div>\n        `;\n  }\n  updated(changes) {\n    super.updated(changes);\n    if (changes.has(\"open\")) {\n      if (this.open) {\n        if (this.timeout) {\n          this.startCountdown();\n        }\n      } else {\n        if (this.timeout) {\n          this.stopCountdown();\n        }\n      }\n    }\n    if (changes.has(\"timeout\")) {\n      if (this.timeout !== null && this.open) {\n        this.startCountdown();\n      } else {\n        this.stopCountdown();\n      }\n    }\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Toast.prototype, \"open\", 2);\n__decorateClass([\n  property({ type: Number })\n], Toast.prototype, \"timeout\", 1);\n__decorateClass([\n  property({ type: String })\n], Toast.prototype, \"variant\", 1);\n__decorateClass([\n  property({ type: String, attribute: \"icon-label\" })\n], Toast.prototype, \"iconLabel\", 2);\n//# sourceMappingURL=Toast.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/toast/sp-toast.js\";\nimport \"@spectrum-web-components/button/sp-button.js\";\nimport \"@spectrum-web-components/overlay/sp-overlay.js\";\nimport \"@spectrum-web-components/overlay/overlay-trigger.js\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nconst toast = ({\n  variant = \"\",\n  open = true,\n  content = \"\",\n  timeout = 0,\n  iconLabel = \"\"\n}) => html`\n    <sp-toast\n        variant=${variant}\n        ?open=${open}\n        timeout=${ifDefined(timeout)}\n        .iconLabel=${iconLabel}\n    >\n        ${content}\n        <sp-button\n            slot=\"action\"\n            static-color=\"white\"\n            variant=\"secondary\"\n            treatment=\"outline\"\n        >\n            Undo\n        </sp-button>\n    </sp-toast>\n`;\nexport default {\n  component: \"sp-toast\",\n  title: \"Toast\",\n  args: {\n    content: \"This is a toast message.\",\n    open: true\n  },\n  argTypes: {\n    content: {\n      name: \"content\",\n      type: { name: \"string\", required: false },\n      table: {\n        type: { summary: \"string\" },\n        defaultValue: { summary: \"\" }\n      }\n    },\n    open: {\n      name: \"open\",\n      type: { name: \"boolean\", required: false },\n      table: {\n        type: { summary: \"boolean\" },\n        defaultValue: { summary: false }\n      }\n    },\n    variant: {\n      name: \"variant\",\n      options: [\"\", \"negative\", \"positive\", \"info\", \"error\", \"warning\"],\n      table: {\n        type: { summary: \"string\" },\n        defaultValue: { summary: \"\" }\n      },\n      control: {\n        type: \"select\"\n      }\n    },\n    timeout: {\n      name: \"timeout\",\n      type: { name: \"number\", required: false },\n      table: {\n        type: { summary: \"number\" },\n        defaultValue: { summary: null }\n      }\n    },\n    iconLabel: {\n      name: \"iconLabel\",\n      type: { name: \"string\", required: false },\n      table: {\n        type: { summary: \"string\" },\n        defaultValue: { summary: \"\" }\n      }\n    }\n  }\n};\nexport const Default = ({\n  variant,\n  open,\n  content,\n  timeout,\n  iconLabel\n}) => {\n  return toast({ variant, open, content, timeout, iconLabel });\n};\nconst variantDemo = ({\n  variant,\n  open,\n  content,\n  timeout,\n  iconLabel\n}) => {\n  return toast({ variant, open, content, timeout, iconLabel });\n};\nexport const Positive = (args) => variantDemo({ ...args, variant: \"positive\" });\nexport const Negative = (args) => variantDemo({ ...args, variant: \"negative\" });\nexport const Info = (args) => variantDemo({ ...args, variant: \"info\" });\nexport const Wrapping = (args) => variantDemo({\n  ...args,\n  variant: \"info\",\n  content: \"A new version of Lightroom Classic is now available. Use the Update button below to start using the new version.\"\n});\nconst overlayStyles = html`\n    <style>\n        html,\n        body,\n        #root,\n        #root-inner,\n        sp-story-decorator {\n            height: 100%;\n            margin: 0;\n        }\n\n        sp-story-decorator > div {\n            display: contents;\n        }\n\n        sp-story-decorator::part(container) {\n            display: flex;\n            flex-direction: column;\n            width: 100%;\n            height: 100%;\n            align-items: center;\n            justify-content: center;\n        }\n\n        overlay-trigger {\n            flex: none;\n            margin: 24px 0;\n        }\n\n        .self-managed:nth-child(3) {\n            margin-left: 50px;\n        }\n    </style>\n`;\nconst overlaid = (openPlacement) => {\n  return html`\n        ${overlayStyles}\n        ${[\n    [\"bottom\", \"\"],\n    [\"left\", \"negative\"],\n    [\"right\", \"positive\"],\n    [\"top\", \"info\"]\n  ].map(([placement, variant]) => {\n    return html`\n                <overlay-trigger\n                    placement=${placement}\n                    open=${ifDefined(\n      openPlacement === placement ? \"click\" : void 0\n    )}\n                >\n                    <sp-button label=\"${placement} test\" slot=\"trigger\">\n                        Click for ${variant ? variant : \"toast\"} on the\n                        ${placement}\n                    </sp-button>\n                    <sp-toast slot=\"click-content\" variant=${variant}>\n                        ${placement}\n                    </sp-toast>\n                </overlay-trigger>\n            `;\n  })}\n    `;\n};\nexport const overlaidTop = () => overlaid(\"top\");\nexport const overlaidRight = () => overlaid(\"right\");\nexport const overlaidBottom = () => overlaid(\"bottom\");\nexport const overlaidLeft = () => overlaid(\"left\");\nexport const overlay = (args) => {\n  return html`\n        <style>\n            sp-toast {\n                position: fixed;\n                bottom: 1em;\n                left: 1em;\n            }\n        </style>\n        <sp-button id=\"overlay\">Toggle Toast overlay</sp-button>\n        <sp-overlay trigger=\"overlay@click\" type=\"auto\" open>\n            ${variantDemo({ ...args, variant: \"positive\" })}\n        </sp-overlay>\n    `;\n};\n//# sourceMappingURL=toast.stories.js.map\n;export const __namedExportsOrder = [\"Default\",\"Positive\",\"Negative\",\"Info\",\"Wrapping\",\"overlaidTop\",\"overlaidRight\",\"overlaidBottom\",\"overlaidLeft\",\"overlay\"];"],"names":[],"sourceRoot":""}