{"version":3,"file":"dialog-stories-dialog-wrapper-stories.56a46d02.iframe.bundle.js","mappings":";;;;;;;;;AA8CA;AACA;;;;AAIA;;;;;;;;;;;;;;;;AAgBA;;AAMA;AACA;;;AAGA;;;;;;;;;;;;;;;;;AAiBA;;AAMA;AACA;;;;AAIA;;;;;;;;;;;;;;;;AAgBA;;;AAOA;AACA;;;;;;;;;;;;;;AAcA;AACA;AAMA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;;;AAQA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2GA;;;AAQA;AACA;;;;;;;;;;;;;;;;;;AAkBA;;;AAQA;AACA;;;;;AAKA;;;;;;;;;;;;;;;;;AAiBA;;AAMA;;;;;;;AAOA;AACA;AACA;AACA;;;;AAIA;;AAMA;;;;;;;;AAQA;AACA;AACA;AACA;;;;AAIA;;AAMA;;;;;;AAMA;AACA;AACA;AACA;;;;AAIA;;AAMA;;AAEA;;;;AAIA;;AAMA;;AAEA;AACA;;;;AAIA;;;AAOA;AACA;AACA;;;;AAIA;;;AAOA;AACA;;;;;;;;;;;;AAYA;;;AAIA;;;AAGA;;;;;;AAOA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA;;AC1jBA;AAgCA;;AAEA;;AAGA;ACYA;;AAIA;AAsIA","sources":["webpack://@adobe/spectrum-web-components/./packages/dialog/stories/dialog-wrapper.stories.js","webpack://@adobe/spectrum-web-components/./packages/help-text/src/HelpText.dev.js","webpack://@adobe/spectrum-web-components/./packages/overlay/stories/index.js"],"sourcesContent":["\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport \"@spectrum-web-components/button/sp-button.js\";\nimport \"@spectrum-web-components/field-label/sp-field-label.js\";\nimport \"@spectrum-web-components/help-text/sp-help-text.js\";\nimport \"@spectrum-web-components/textfield/sp-textfield.js\";\nimport \"@spectrum-web-components/tooltip/sp-tooltip.js\";\nimport \"@spectrum-web-components/overlay/overlay-trigger.js\";\nimport \"@spectrum-web-components/dialog/sp-dialog-wrapper.js\";\nimport { landscape } from \"./images.js\";\nimport { isOverlayOpen } from \"../../overlay/stories/index.js\";\nimport \"../../overlay/stories/index.js\";\nexport default {\n  title: \"Dialog Wrapper\",\n  component: \"sp-dialog-wrapper\",\n  argTypes: {\n    onClose: { action: \"close\" },\n    onConfirm: { action: \"confirm\" },\n    onSecondary: { action: \"secondary\" },\n    onCancel: { action: \"cancel\" }\n  }\n};\nconst handleClose = ({ onClose }) => (event) => {\n  if (onClose) onClose(event);\n};\nconst handleConfirm = ({ onConfirm }) => (event) => {\n  if (onConfirm) onConfirm(event);\n};\nconst handleSecondary = ({ onSecondary }) => (event) => {\n  if (onSecondary) onSecondary(event);\n};\nconst handleCancel = ({ onCancel }) => (event) => {\n  if (onCancel) onCancel(event);\n};\nexport const wrapperLabeledHero = (args = {}, context = {}) => {\n  const open = context.viewMode === \"docs\" ? false : true;\n  return html`\n        <style>\n            sp-story-decorator {\n                inset: 0;\n                position: absolute;\n                overflow: hidden;\n            }\n        </style>\n        <sp-dialog-wrapper\n            ?open=${open}\n            hero=${landscape}\n            hero-label=\"Hero Image Alt Text\"\n            dismissable\n            headline=\"Wrapped Dialog w/ Hero Image\"\n            @close=${handleClose(args)}\n            size=\"s\"\n        >\n            Content of the dialog\n        </sp-dialog-wrapper>\n        <sp-button\n            onClick=\"\n                this.previousElementSibling.open = !this.previousElementSibling.open;\n                if (this.previousElementSibling.open) {\n                    this.previousElementSibling.focus();\n                }\n            \"\n            variant=\"primary\"\n        >\n            Toggle Dialog\n        </sp-button>\n    `;\n};\nexport const wrapperDismissable = (args = {}, context = {}) => {\n  const open = context.viewMode === \"docs\" ? false : true;\n  return html`\n        <sp-dialog-wrapper\n            ?open=${open}\n            .hero=${landscape}\n            dismissable\n            headline=\"Wrapped Dialog w/ Hero Image\"\n            @close=${handleClose(args)}\n            size=\"s\"\n            tabindex=\"0\"\n        >\n            Content of the dialog\n        </sp-dialog-wrapper>\n        <sp-button\n            onClick=\"\n                this.previousElementSibling.open = !this.previousElementSibling.open;\n                if (this.previousElementSibling.open) {\n                    this.previousElementSibling.focus();\n                }\n            \"\n            variant=\"primary\"\n        >\n            Toggle Dialog\n        </sp-button>\n    `;\n};\nexport const wrapperDismissableUnderlay = (args = {}, context = {}) => {\n  const open = context.viewMode === \"docs\" ? false : true;\n  return html`\n        <sp-dialog-wrapper\n            ?open=${open}\n            hero=${landscape}\n            dismissable\n            headline=\"Wrapped Dialog w/ Hero Image\"\n            underlay\n            @close=${handleClose(args)}\n            size=\"s\"\n        >\n            Content of the dialog\n        </sp-dialog-wrapper>\n        <sp-button\n            onClick=\"\n                this.previousElementSibling.open = !this.previousElementSibling.open;\n                if (this.previousElementSibling.open) {\n                    this.previousElementSibling.focus();\n                }\n            \"\n            variant=\"primary\"\n        >\n            Toggle Dialog\n        </sp-button>\n    `;\n};\nexport const form = (args = {}, context = {}) => {\n  const open = context.viewMode === \"docs\" ? void 0 : \"click\";\n  return html`\n        <overlay-trigger\n            type=\"modal\"\n            @close=${handleClose(args)}\n            open=${ifDefined(open)}\n        >\n            <sp-button slot=\"trigger\" variant=\"primary\">\n                Toggle Dialog\n            </sp-button>\n            <sp-dialog-wrapper\n                id=\"form-fields\"\n                slot=\"click-content\"\n                headline=\"Add Delivery Address\"\n                underlay\n                size=\"m\"\n                confirm-label=\"Verify Address\"\n                secondary-label=\"Add\"\n                cancel-label=\"Cancel\"\n                @close=${handleClose(args)}\n                @confirm=${({ target }) => {\n    target.dispatchEvent(\n      new Event(\"close\", { bubbles: true, composed: true })\n    );\n    handleConfirm(args);\n  }}\n                @secondary=${({ target }) => {\n    target.dispatchEvent(\n      new Event(\"close\", { bubbles: true, composed: true })\n    );\n    handleSecondary(args);\n  }}\n                @cancel=${({ target }) => {\n    target.dispatchEvent(\n      new Event(\"close\", { bubbles: true, composed: true })\n    );\n    handleCancel(args);\n  }}\n            >\n                <style>\n                    #form-fields div {\n                        display: grid;\n                        row-gap: calc(var(--swc-scale-factor) * 12px);\n                        grid-template-columns: auto auto;\n                    }\n                </style>\n                <div>\n                    <sp-field-label side-aligned=\"end\" for=\"street\">\n                        Street:\n                    </sp-field-label>\n                    <sp-textfield id=\"street\" autofocus></sp-textfield>\n                    <sp-field-label side-aligned=\"end\" for=\"city\">\n                        City:\n                    </sp-field-label>\n                    <sp-textfield id=\"city\"></sp-textfield>\n                    <sp-field-label side-aligned=\"end\" for=\"state\">\n                        State:\n                    </sp-field-label>\n                    <sp-textfield id=\"state\"></sp-textfield>\n                    <sp-field-label side-aligned=\"end\" for=\"zip\">\n                        Zip:\n                    </sp-field-label>\n                    <sp-textfield id=\"zip\"></sp-textfield>\n                    <sp-field-label side-aligned=\"end\" for=\"instructions\">\n                        Special instructions:\n                    </sp-field-label>\n                    <sp-textfield id=\"instructions\" multiline>\n                        <sp-help-text slot=\"help-text\">\n                            For example, gate code or other information to help\n                            the driver find you\n                        </sp-help-text>\n                    </sp-textfield>\n                </div>\n            </sp-dialog-wrapper>\n        </overlay-trigger>\n    `;\n};\nform.decorators = [isOverlayOpen];\nexport const longContent = (args = {}, context = {}) => {\n  const open = context.viewMode === \"docs\" ? void 0 : \"click\";\n  return html`\n        <overlay-trigger\n            type=\"modal\"\n            @close=${handleClose(args)}\n            open=${ifDefined(open)}\n        >\n            <sp-button slot=\"trigger\" variant=\"primary\">\n                Toggle Dialog\n            </sp-button>\n            <sp-dialog-wrapper\n                slot=\"click-content\"\n                headline=\"Dialog title\"\n                dismissable\n                underlay\n                size=\"s\"\n            >\n                <p>\n                    Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n                    Sed ac dolor sit amet purus malesuada congue. Donec quis\n                    nibh at felis congue commodo. Ut enim ad minima veniam, quis\n                    nostrum exercitationem ullam corporis suscipit laboriosam,\n                    nisi ut aliquid ex ea commodi consequatur? Sed ac dolor sit\n                    amet purus malesuada congue. Nam libero tempore, cum soluta\n                    nobis est eligendi optio cumque nihil impedit quo minus id\n                    quod maxime placeat facere possimus, omnis voluptas\n                    assumenda est, omnis dolor repellendus. Nullam sit amet\n                    magna in magna gravida vehicula. Itaque earum rerum hic\n                    tenetur a sapiente delectus, ut aut reiciendis voluptatibus\n                    maiores alias consequatur aut perferendis doloribus\n                    asperiores repellat. Neque porro quisquam est, qui dolorem\n                    ipsum quia dolor sit amet, consectetur, adipisci velit, sed\n                    quia non numquam eius modi tempora incidunt ut labore et\n                    dolore magnam aliquam quaerat voluptatem. Phasellus faucibus\n                    molestie nisl. Vestibulum fermentum tortor id mi. Integer\n                    rutrum, orci vestibulum ullamcorper ultricies, lacus quam\n                    ultricies odio, vitae placerat pede sem sit amet enim.\n                    Maecenas sollicitudin. Nullam rhoncus aliquam metus.\n                </p>\n                <p>\n                    Curabitur ligula sapien, pulvinar a vestibulum quis,\n                    facilisis vel sapien. Fusce nibh. Proin pede metus,\n                    vulputate nec, fermentum fringilla, vehicula vitae, justo.\n                    Aenean placerat. Aliquam erat volutpat. Et harum quidem\n                    rerum facilis est et expedita distinctio. Fusce nibh.\n                    Temporibus autem quibusdam et aut officiis debitis aut rerum\n                    necessitatibus saepe eveniet ut et voluptates repudiandae\n                    sint et molestiae non recusandae. Vestibulum erat nulla,\n                    ullamcorper nec, rutrum non, nonummy ac, erat. Etiam posuere\n                    lacus quis dolor. Mauris elementum mauris vitae tortor.\n                    Nulla turpis magna, cursus sit amet, suscipit a, interdum\n                    id, felis. Nam libero tempore, cum soluta nobis est eligendi\n                    optio cumque nihil impedit quo minus id quod maxime placeat\n                    facere possimus, omnis voluptas assumenda est, omnis dolor\n                    repellendus. Nulla accumsan, elit sit amet varius semper,\n                    nulla mauris mollis quam, tempor suscipit diam nulla vel\n                    leo. Pellentesque sapien.\n                </p>\n                <p>\n                    Curabitur vitae diam non enim vestibulum interdum. Sed elit\n                    dui, pellentesque a, faucibus vel, interdum nec, diam.\n                    Praesent vitae arcu tempor neque lacinia pretium. Ut tempus\n                    purus at lorem. Phasellus rhoncus. Temporibus autem\n                    quibusdam et aut officiis debitis aut rerum necessitatibus\n                    saepe eveniet ut et voluptates repudiandae sint et molestiae\n                    non recusandae. Duis ante orci, molestie vitae vehicula\n                    venenatis, tincidunt ac pede. Integer vulputate sem a nibh\n                    rutrum consequat. Aenean placerat. Cum sociis natoque\n                    penatibus et magnis dis parturient montes, nascetur\n                    ridiculus mus. Sed vel lectus. Donec odio tempus molestie,\n                    porttitor ut, iaculis quis, sem. Class aptent taciti\n                    sociosqu ad litora torquent per conubia nostra, per inceptos\n                    hymenaeos. Integer in sapien. Nullam dapibus fermentum\n                    ipsum.\n                </p>\n                <p>\n                    Integer vulputate sem a nibh rutrum consequat. Class aptent\n                    taciti sociosqu ad litora torquent per conubia nostra, per\n                    inceptos hymenaeos. Duis bibendum, lectus ut viverra\n                    rhoncus, dolor nunc faucibus libero, eget facilisis enim\n                    ipsum id lacus. Aliquam erat volutpat. Aenean id metus id\n                    velit ullamcorper pulvinar. Morbi scelerisque luctus velit.\n                    Aliquam erat volutpat. Temporibus autem quibusdam et aut\n                    officiis debitis aut rerum necessitatibus saepe eveniet ut\n                    et voluptates repudiandae sint et molestiae non recusandae.\n                    Fusce dui leo, imperdiet in, aliquam sit amet, feugiat eu,\n                    orci. Suspendisse sagittis ultrices augue. Nullam justo\n                    enim, consectetuer nec, ullamcorper ac, vestibulum in, elit.\n                    Praesent vitae arcu tempor neque lacinia pretium. Nullam\n                    faucibus mi quis velit. Maecenas aliquet accumsan leo. Morbi\n                    scelerisque luctus velit. Aliquam ornare wisi eu metus.\n                </p>\n                <p>\n                    Sed elit dui, pellentesque a, faucibus vel, interdum nec,\n                    diam. Praesent vitae arcu tempor neque lacinia pretium.\n                    Etiam dictum tincidunt diam. Et harum quidem rerum facilis\n                    est et expedita distinctio. Duis ante orci, molestie vitae\n                    vehicula venenatis, tincidunt ac pede. Integer lacinia.\n                    Excepteur sint occaecat cupidatat non proident, sunt in\n                    culpa qui officia deserunt mollit anim id est laborum.\n                    Mauris tincidunt sem sed arcu. Praesent in mauris eu tortor\n                    porttitor accumsan. Aenean id metus id velit ullamcorper\n                    pulvinar. Donec iaculis gravida nulla. Duis bibendum, lectus\n                    ut viverra rhoncus, dolor nunc faucibus libero, eget\n                    facilisis enim ipsum id lacus. Nulla quis diam. Quisque\n                    porta. Integer rutrum, orci vestibulum ullamcorper\n                    ultricies, lacus quam ultricies odio, vitae placerat pede\n                    sem sit amet enim. Nam sed tellus id magna elementum\n                    tincidunt. In enim a arcu imperdiet malesuada.\n                </p>\n            </sp-dialog-wrapper>\n        </overlay-trigger>\n    `;\n};\nlongContent.decorators = [isOverlayOpen];\nexport const longHeading = (args = {}, context = {}) => {\n  const open = context.viewMode === \"docs\" ? void 0 : \"click\";\n  return html`\n        <overlay-trigger\n            type=\"modal\"\n            @close=${handleClose(args)}\n            open=${ifDefined(open)}\n        >\n            <sp-dialog-wrapper\n                slot=\"click-content\"\n                underlay\n                headline=\"Dialog long long long long long long long long long long long long title\"\n                confirm-label=\"Keep Both\"\n                secondary-label=\"Replace\"\n                cancel-label=\"Cancel\"\n                footer=\"Content for footer\"\n                size=\"m\"\n            >\n                Content of the dialog\n            </sp-dialog-wrapper>\n            <sp-button slot=\"trigger\" variant=\"primary\">\n                Toggle Dialog\n            </sp-button>\n        </overlay-trigger>\n    `;\n};\nlongHeading.decorators = [isOverlayOpen];\nexport const wrapperDismissableUnderlayError = (args = {}, context = {}) => {\n  const open = context.viewMode === \"docs\" ? false : true;\n  return html`\n        <div>\n            <sp-dialog-wrapper\n                ?open=${open}\n                hero=${landscape}\n                dismissable\n                error\n                headline=\"Wrapped Dialog w/ Hero Image\"\n                underlay\n                @close=${handleClose(args)}\n                size=\"s\"\n            >\n                Content of the dialog\n            </sp-dialog-wrapper>\n            <sp-button\n                onClick=\"\n                    this.previousElementSibling.open = !this.previousElementSibling.open;\n                    if (this.previousElementSibling.open) {\n                        this.previousElementSibling.focus();\n                    }\n                \"\n                variant=\"primary\"\n            >\n                Toggle Dialog\n            </sp-button>\n        </div>\n    `;\n};\nexport const wrapperButtons = (args = {}, context = {}) => {\n  const open = context.viewMode === \"docs\" ? false : true;\n  return html`\n        <sp-dialog-wrapper\n            ?open=${open}\n            size=\"l\"\n            headline=\"Wrapped Dialog w/ Buttons\"\n            confirm-label=\"Keep Both\"\n            secondary-label=\"Replace\"\n            cancel-label=\"Cancel\"\n            footer=\"Content for footer\"\n            @close=${handleClose(args)}\n            @confirm=${handleConfirm(args)}\n            @secondary=${handleSecondary(args)}\n            @cancel=${handleCancel(args)}\n        >\n            Content of the dialog\n        </sp-dialog-wrapper>\n    `;\n};\nexport const wrapperButtonsUnderlay = (args = {}, context = {}) => {\n  const open = context.viewMode === \"docs\" ? false : true;\n  return html`\n        <sp-dialog-wrapper\n            ?open=${open}\n            underlay\n            size=\"l\"\n            headline=\"Wrapped Dialog w/ Buttons\"\n            confirm-label=\"Keep Both\"\n            secondary-label=\"Replace\"\n            cancel-label=\"Cancel\"\n            footer=\"Content for footer\"\n            @close=${handleClose(args)}\n            @confirm=${handleConfirm(args)}\n            @secondary=${handleSecondary(args)}\n            @cancel=${handleCancel(args)}\n        >\n            Content of the dialog\n        </sp-dialog-wrapper>\n    `;\n};\nexport const wrapperFullscreen = (args = {}, context = {}) => {\n  const open = context.viewMode === \"docs\" ? false : true;\n  return html`\n        <sp-dialog-wrapper\n            ?open=${open}\n            headline=\"Wrapped Dialog - Fullscreen\"\n            mode=\"fullscreen\"\n            confirm-label=\"Keep Both\"\n            secondary-label=\"Replace\"\n            cancel-label=\"Cancel\"\n            @close=${handleClose(args)}\n            @confirm=${handleConfirm(args)}\n            @secondary=${handleSecondary(args)}\n            @cancel=${handleCancel(args)}\n        >\n            Content of the dialog\n        </sp-dialog-wrapper>\n    `;\n};\nexport const wrapperWithHeadline = (args = {}, context = {}) => {\n  const open = context.viewMode === \"docs\" ? false : true;\n  return html`\n        <sp-dialog-wrapper\n            ?open=${open}\n            headline=\"Headline for dialog\"\n            @close=${handleClose(args)}\n        >\n            Content of the dialog\n        </sp-dialog-wrapper>\n    `;\n};\nexport const wrapperWithHeadlineNoDivider = (args = {}, context = {}) => {\n  const open = context.viewMode === \"docs\" ? false : true;\n  return html`\n        <sp-dialog-wrapper\n            ?open=${open}\n            headline=\"Headline for dialog\"\n            no-divider=${true}\n            @close=${handleClose(args)}\n        >\n            Content of the dialog\n        </sp-dialog-wrapper>\n    `;\n};\nexport const wrapperHeadlineVisibilityNone = (args = {}, context = {}) => {\n  const open = context.viewMode === \"docs\" ? false : true;\n  return html`\n        <sp-dialog-wrapper\n            headline=\"Accessible headline\"\n            .headlineVisibility=${\"none\"}\n            ?open=${open}\n            @close=${handleClose(args)}\n        >\n            Content of the dialog\n        </sp-dialog-wrapper>\n    `;\n};\nexport const tooltips = (args = {}, context = {}) => {\n  const open = context.viewMode === \"docs\" ? void 0 : \"click\";\n  return html`\n        <overlay-trigger\n            type=\"modal\"\n            @close=${handleClose(args)}\n            open=${ifDefined(open)}\n        >\n            <sp-button slot=\"trigger\" variant=\"primary\">\n                Toggle Dialog\n            </sp-button>\n            <sp-dialog-wrapper\n                slot=\"click-content\"\n                headline=\"Dialog title\"\n                dismissable\n                underlay\n                size=\"s\"\n            >\n                ${[1, 2, 3, 4].map(\n    (index) => html`\n                        <overlay-trigger>\n                            <sp-button slot=\"trigger\">\n                                Button with Tooltip ${index}\n                            </sp-button>\n                            <sp-tooltip slot=\"hover-content\">\n                                Tooltip ${index}\n                            </sp-tooltip>\n                        </overlay-trigger>\n                    `\n  )}\n            </sp-dialog-wrapper>\n        </overlay-trigger>\n    `;\n};\ntooltips.decorators = [isOverlayOpen];\nexport const lazyHero = ({ src }) => {\n  const handleOpened = () => {\n    document.querySelector(\"sp-dialog-wrapper\").hero = src;\n  };\n  return html`\n        <overlay-trigger content=\"click\" @sp-opened=${handleOpened}>\n            <sp-button slot=\"trigger\">Toggle Dialog</sp-button>\n            <sp-dialog-wrapper\n                slot=\"click-content\"\n                headline=\"Dialog title\"\n                confirm-label=\"Primary\"\n            >\n                <p>Content of the dialog</p>\n                <ol>\n                    <li>\n                        Select the following checkbox to have the dialog close\n                        when clicking one of its buttons.\n                    </li>\n                    <li>\n                        Select the following checkbox to have the dialog close\n                        when clicking one of its buttons.\n                    </li>\n                    <li>\n                        Select the following checkbox to have the dialog close\n                        when clicking one of its buttons.\n                    </li>\n                    <li>\n                        Select the following checkbox to have the dialog close\n                        when clicking one of its buttons.\n                    </li>\n                    <li>\n                        Select the following checkbox to have the dialog close\n                        when clicking one of its buttons.\n                    </li>\n                    <li>\n                        Select the following checkbox to have the dialog close\n                        when clicking one of its buttons.\n                    </li>\n                    <li>\n                        Select the following checkbox to have the dialog close\n                        when clicking one of its buttons.\n                    </li>\n                    <li>\n                        Select the following checkbox to have the dialog close\n                        when clicking one of its buttons.\n                    </li>\n                    <li>\n                        Select the following checkbox to have the dialog close\n                        when clicking one of its buttons.\n                    </li>\n                    <li>\n                        Select the following checkbox to have the dialog close\n                        when clicking one of its buttons.\n                    </li>\n                    <li>\n                        Select the following checkbox to have the dialog close\n                        when clicking one of its buttons.\n                    </li>\n                </ol>\n            </sp-dialog-wrapper>\n        </overlay-trigger>\n    `;\n};\nlazyHero.args = {\n  src: \"https://dummyimage.com/800x400/000/fff\"\n};\nlazyHero.swc_vrt = {\n  skip: true\n};\nlazyHero.parameters = {\n  // Disables Chromatic's snapshotting on a global level\n  chromatic: { disableSnapshot: true }\n};\n//# sourceMappingURL=dialog-wrapper.stories.js.map\n;export const __namedExportsOrder = [\"wrapperLabeledHero\",\"wrapperDismissable\",\"wrapperDismissableUnderlay\",\"form\",\"longContent\",\"longHeading\",\"wrapperDismissableUnderlayError\",\"wrapperButtons\",\"wrapperButtonsUnderlay\",\"wrapperFullscreen\",\"wrapperWithHeadline\",\"wrapperWithHeadlineNoDivider\",\"wrapperHeadlineVisibilityNone\",\"tooltips\",\"lazyHero\"];","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing,\n  SizedMixin,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js\";\nimport styles from \"./help-text.css.js\";\nexport class HelpText extends SizedMixin(SpectrumElement, {\n  noDefaultSize: true\n}) {\n  constructor() {\n    super(...arguments);\n    this.icon = false;\n    this.variant = \"neutral\";\n  }\n  static get styles() {\n    return [styles];\n  }\n  render() {\n    return html`\n            ${this.variant === \"negative\" && this.icon ? html`\n                      <sp-icon-alert class=\"icon\"></sp-icon-alert>\n                  ` : nothing}\n            <div class=\"text\"><slot></slot></div>\n        `;\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], HelpText.prototype, \"icon\", 2);\n__decorateClass([\n  property({ reflect: true })\n], HelpText.prototype, \"variant\", 2);\n//# sourceMappingURL=HelpText.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nfunction nextFrame() {\n  return new Promise((res) => requestAnimationFrame(() => res()));\n}\nclass IsOverlayOpen extends HTMLElement {\n  constructor() {\n    super();\n    this.sendFocus = async () => {\n      var _a;\n      const selectedItem = (_a = document.querySelector(\"[focusable]\")) == null ? void 0 : _a.querySelector(\"[selected]\");\n      if (selectedItem) {\n        selectedItem.focus();\n        selectedItem.focused = true;\n        await nextFrame();\n        selectedItem.scrollIntoView({ block: \"start\" });\n        await nextFrame();\n      }\n    };\n    this.handleOpened = async (event) => {\n      const overlay = event.target;\n      const actions = [nextFrame(), overlay.updateComplete, this.sendFocus()];\n      await Promise.all(actions);\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      this.ready(true);\n    };\n    this.readyPromise = Promise.resolve(false);\n    this.readyPromise = new Promise((res) => {\n      this.ready = res;\n      this.setup();\n    });\n  }\n  async setup() {\n    await nextFrame();\n    document.addEventListener(\"sp-opened\", this.handleOpened);\n  }\n  get updateComplete() {\n    return this.readyPromise;\n  }\n  // remove event listeners in disconnectCallback\n  disconnectedCallback() {\n    document.removeEventListener(\"sp-opened\", this.handleOpened);\n  }\n}\ncustomElements.define(\"is-overlay-open\", IsOverlayOpen);\nexport const isOverlayOpen = (story) => {\n  return html`\n        ${story()}\n        <is-overlay-open></is-overlay-open>\n    `;\n};\nclass AreIconsPresent extends HTMLElement {\n  constructor() {\n    super();\n    this.overlayTimeout = null;\n    this.sendFocus = async () => {\n      var _a;\n      const selectedItem = (_a = document.querySelector(\"[focusable]\")) == null ? void 0 : _a.querySelector(\"[selected]\");\n      if (selectedItem) {\n        selectedItem.focus();\n        selectedItem.focused = true;\n        await nextFrame();\n        selectedItem.scrollIntoView({ block: \"start\" });\n        await nextFrame();\n      }\n    };\n    this.handleOpened = async (event) => {\n      if (this.overlayTimeout) {\n        clearTimeout(this.overlayTimeout);\n        this.overlayTimeout = null;\n      }\n      const overlay = event.target;\n      const actions = [nextFrame(), overlay.updateComplete, this.sendFocus()];\n      await Promise.all(actions);\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      this.checkIcons();\n    };\n    this.checkIcons = async () => {\n      const icons = [...document.querySelectorAll(\"sp-icon\")];\n      const picker = document.querySelector(\"sp-picker\");\n      if (picker) {\n        const pickerIcon = picker.querySelector(\"sp-icon\");\n        if (pickerIcon) {\n          icons.push(pickerIcon);\n        }\n      }\n      const iconLoadPromises = Array.from(icons).map((icon) => {\n        return new Promise((resolve) => {\n          var _a;\n          if (\"updateComplete\" in icon && typeof ((_a = icon.updateComplete) == null ? void 0 : _a.then) === \"function\") {\n            icon.updateComplete.then(() => {\n              resolve();\n            });\n            return;\n          }\n          const src = icon.getAttribute(\"src\");\n          if (!src) {\n            const imgElement2 = icon.querySelector(\"img\");\n            if (imgElement2) {\n              if (imgElement2.complete) {\n                resolve();\n              } else {\n                imgElement2.addEventListener(\n                  \"load\",\n                  () => {\n                    resolve();\n                  },\n                  { once: true }\n                );\n                imgElement2.addEventListener(\n                  \"error\",\n                  () => {\n                    console.warn(`Failed to load icon image`);\n                    resolve();\n                  },\n                  { once: true }\n                );\n              }\n              return;\n            }\n            resolve();\n            return;\n          }\n          const imgElement = icon.querySelector(\"img\");\n          if (imgElement) {\n            if (imgElement.complete) {\n              resolve();\n            } else {\n              imgElement.addEventListener(\n                \"load\",\n                () => {\n                  resolve();\n                },\n                { once: true }\n              );\n              imgElement.addEventListener(\n                \"error\",\n                () => {\n                  console.warn(\n                    `Failed to load icon image: ${src}`\n                  );\n                  resolve();\n                },\n                { once: true }\n              );\n            }\n            return;\n          }\n          const img = new Image();\n          img.onload = () => resolve();\n          img.onerror = () => {\n            console.warn(`Failed to load icon: ${src}`);\n            resolve();\n          };\n          img.src = src;\n        });\n      });\n      await Promise.all(iconLoadPromises);\n      await nextFrame();\n      this.ready(true);\n    };\n    this.readyPromise = Promise.resolve(false);\n    this.readyPromise = new Promise((res) => {\n      this.ready = res;\n      this.setup();\n    });\n  }\n  async setup() {\n    await nextFrame();\n    document.addEventListener(\"sp-opened\", this.handleOpened);\n  }\n  get updateComplete() {\n    return this.readyPromise;\n  }\n  // remove event listeners in disconnectCallback\n  disconnectedCallback() {\n    document.removeEventListener(\"sp-opened\", this.handleOpened);\n  }\n}\ncustomElements.define(\"are-icons-present\", AreIconsPresent);\nexport const areIconsPresent = (story) => {\n  return html`\n        ${story()}\n        <are-icons-present></are-icons-present>\n    `;\n};\n//# sourceMappingURL=index.js.map\n"],"names":[],"sourceRoot":""}