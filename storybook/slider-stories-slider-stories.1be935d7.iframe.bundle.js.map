{"version":3,"file":"slider-stories-slider-stories.1be935d7.iframe.bundle.js","mappings":";;AACA;;AAgEA;;;;AAOA;AAOA;;;AAIA;;;AAKA;;;AAGA;;AAGA;;AAIA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAGA;;AC7GA;;ACDA;AAmGA;AAEA;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAIA;;;;AAcA;;AAEA;AAMA;;ACxMA;;;;;;;;;AAwCA;;AAIA;AAEA;;;;;;;ACmDA;AACA;AACA;AACA;;;;;AAOA;;;;;;;;AASA;AACA;AACA;AACA;;;;;AAOA;;;;;;;;AASA;AACA;AACA;AACA;;;;;AAOA;;;;;;;;;AAUA;AACA;AACA;AACA;;;;;AAOA;;;;;;;;;AAUA;AACA;AACA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;;;;;AAOA;;;;;;;;AASA;AACA;AACA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AAUA;;;;;;AAQA;;;;;;;;AASA;AACA;AACA;AACA;;;;;AAOA;;;;AAOA;;;;;;;AAQA;AACA;AACA;AACA;;;;;AAOA;;;;;;;AAWA;AACA;AACA;AACA;;;;;AAOA;;;;;;;AAWA;AACA;AACA;AACA;;;;;AAOA;;;;;;;AAWA;AACA;AACA;AAIA;;;;;AAOA;AAiBA;;AAIA;;;;;;;;AASA;AACA;AACA;;;;;AAOA;;;;;;;;AAgBA;AACA;AACA;AAKA;;;;;AAOA;;;;;;;;;AAwBA;AACA;AACA;AACA;;;;;;;;;;AAUA;;;;;;AAMA;;;;;;AAMA;;;;;;;;AAQA;;;;;;;;;AAkBA;AACA;AACA;AAKA;;;;;AAOA;;;;;;;;;AAiBA;AACA;AACA;;;;;AAOA;;;;;;;;;AAiBA;AACA;AACA;AAKA;;;;;AAOA;;;;;;;;;;AAYA;AACA;AACA;AACA;;;;;AAOA;;;;;;;;AAUA;AACA;AACA;AACA;;;;;AAOA;;;;;;;;;AAaA;AACA;AACA;AACA;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;;;AAKA;;;;;;AAUA;;;;;;;AAOA;;AAIA;;;;;;;AAYA;;;;;;;;AAQA;;AAIA;;;;;;;;;AAcA;;;AAKA;;;;;;;;;;;AAYA;;;AAKA;;;;;;;;;;;;AAaA;;;;AAMA;;;;;;;;;;AAWA;AACA;AACA;;;AAKA;;;;;;AAOA;AACA;AACA;;;;;;AAQA;;;;;;;AAQA;AACA;AACA;;;;;;;;;;;;;;;;;AAmBA;;;;;;;AAYA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;;AAmBA;;;;;;;AAYA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;AAUA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;AAyFA;AACA;AACA;;;;;;;AAOA;AACA;;;;;;;;;;AAUA;AAzCA;;;;;;AAgDA;AACA;;;;AAIA;;;AAOA;AAGA;AAFA;AACA;;;AAWA;;;;;AAbA;AAGA;AAFA;AACA;;;AAsBA;;;;;AAxBA;AAGA;AAFA;AACA;;;AAiCA;;;AAKA;;;;;;;;;;;AAYA;AACA;AACA;;;;;;;;;;;;;AAaA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;;;;;;;;;AAWA;;AC3pCA;;AA6FA;AACA;AACA;;;;;AAKA;;;;AAKA;;ACzGA","sources":["webpack://@adobe/spectrum-web-components/./packages/dialog/src/Dialog.dev.js","webpack://@adobe/spectrum-web-components/./packages/modal/src/modal.css.js","webpack://@adobe/spectrum-web-components/./packages/overlay/src/OverlayTrigger.dev.js","webpack://@adobe/spectrum-web-components/./packages/popover/src/Popover.dev.js","webpack://@adobe/spectrum-web-components/./packages/slider/stories/slider.stories.js","webpack://@adobe/spectrum-web-components/./packages/tray/src/Tray.dev.js","webpack://@adobe/spectrum-web-components/./packages/underlay/src/Underlay.dev.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/button-group/sp-button-group.js\";\nimport \"@spectrum-web-components/button/sp-close-button.js\";\nimport \"@spectrum-web-components/divider/sp-divider.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js\";\nimport { ObserveSlotPresence } from \"@spectrum-web-components/shared\";\nimport { AlertDialog } from \"@spectrum-web-components/alert-dialog/src/AlertDialog.js\";\nimport { classMap } from \"@spectrum-web-components/base/src/directives.js\";\nimport styles from \"./dialog.css.js\";\nexport class Dialog extends ObserveSlotPresence(AlertDialog, [\n  '[slot=\"hero\"]',\n  '[slot=\"footer\"]',\n  '[slot=\"button\"]'\n]) {\n  constructor() {\n    super(...arguments);\n    this.error = false;\n    this.dismissable = false;\n    this.dismissLabel = \"Close\";\n    this.noDivider = false;\n  }\n  static get styles() {\n    return [styles];\n  }\n  get hasFooter() {\n    return this.getSlotContentPresence('[slot=\"footer\"]');\n  }\n  get hasButtons() {\n    return this.getSlotContentPresence('[slot=\"button\"]');\n  }\n  /* c8 ignore next 3 */\n  get hasHero() {\n    return this.getSlotContentPresence('[slot=\"hero\"]');\n  }\n  close() {\n    this.dispatchEvent(\n      new Event(\"close\", {\n        bubbles: true,\n        composed: true,\n        cancelable: true\n      })\n    );\n  }\n  renderHero() {\n    return html`\n            <slot name=\"hero\"></slot>\n        `;\n  }\n  renderFooter() {\n    return html`\n            <div class=\"footer\">\n                <slot name=\"footer\"></slot>\n            </div>\n        `;\n  }\n  renderButtons() {\n    const classes = {\n      \"button-group\": true,\n      \"button-group--noFooter\": !this.hasFooter\n    };\n    return html`\n            <sp-button-group class=${classMap(classes)}>\n                <slot name=\"button\"></slot>\n            </sp-button-group>\n        `;\n  }\n  renderDismiss() {\n    return html`\n            <sp-close-button\n                class=\"close-button\"\n                label=${this.dismissLabel}\n                quiet\n                size=\"m\"\n                @click=${this.close}\n            ></sp-close-button>\n        `;\n  }\n  render() {\n    return html`\n            <div class=\"grid\">\n                ${this.renderHero()} ${this.renderHeading()}\n                ${this.error ? html`\n                          <sp-icon-alert class=\"type-icon\"></sp-icon-alert>\n                      ` : nothing}\n                ${this.noDivider ? nothing : html`\n                          <sp-divider size=\"m\" class=\"divider\"></sp-divider>\n                      `}\n                ${this.renderContent()}\n                ${this.hasFooter ? this.renderFooter() : nothing}\n                ${this.hasButtons ? this.renderButtons() : nothing}\n                ${this.dismissable ? this.renderDismiss() : nothing}\n            </div>\n        `;\n  }\n  shouldUpdate(changes) {\n    if (changes.has(\"mode\") && !!this.mode) {\n      this.dismissable = false;\n    }\n    if (changes.has(\"dismissable\") && this.dismissable) {\n      this.dismissable = !this.mode;\n    }\n    return super.shouldUpdate(changes);\n  }\n  firstUpdated(changes) {\n    super.firstUpdated(changes);\n    this.setAttribute(\"role\", \"dialog\");\n  }\n  updated(changes) {\n    super.updated(changes);\n  }\n}\n__decorateClass([\n  query(\".close-button\")\n], Dialog.prototype, \"closeButton\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Dialog.prototype, \"error\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Dialog.prototype, \"dismissable\", 2);\n__decorateClass([\n  property({ type: String, reflect: true, attribute: \"dismiss-label\" })\n], Dialog.prototype, \"dismissLabel\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true, attribute: \"no-divider\" })\n], Dialog.prototype, \"noDivider\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], Dialog.prototype, \"mode\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], Dialog.prototype, \"size\", 2);\n//# sourceMappingURL=Dialog.dev.js.map\n","\"use strict\";import{css as a}from\"@spectrum-web-components/base\";const i=a`\n    :host{--spectrum-modal-confirm-entry-animation-duration:var(--mod-modal-confirm-entry-animation-duration,var(--spectrum-animation-duration-500));--spectrum-modal-confirm-entry-animation-delay:var(--mod-overlay-animation-duration-opened,var(--mod-modal-confirm-entry-animation-delay,var(--spectrum-animation-duration-200)));--spectrum-modal-confirm-exit-animation-duration:var(--mod-overlay-animation-duration,var(--mod-modal-confirm-exit-animation-duration,var(--spectrum-animation-duration-100)));--spectrum-modal-confirm-exit-animation-delay:var(--mod-modal-confirm-exit-animation-delay,var(--spectrum-animation-duration-0));--spectrum-modal-fullscreen-margin:var(--mod-modal-fullscreen-margin,32px)}.modal{visibility:hidden;opacity:0;transform:translateY(var(--mod-modal-confirm-entry-animation-distance,var(--spectrum-dialog-confirm-entry-animation-distance)));z-index:1;max-block-size:90vh;max-block-size:var(--mod-modal-max-height,90vh);max-inline-size:90%;max-inline-size:var(--mod-modal-max-width,90%);background:var(--mod-modal-background-color,var(--spectrum-modal-background-color));border-radius:var(--mod-modal-confirm-border-radius,var(--spectrum-corner-radius-100));pointer-events:auto;transition:opacity var(--spectrum-modal-confirm-exit-animation-duration)var(--spectrum-animation-ease-in)var(--spectrum-modal-confirm-exit-animation-delay),visibility var(--spectrum-animation-duration-0)var(--spectrum-animation-linear)calc(var(--spectrum-modal-confirm-exit-animation-delay) + var(--spectrum-modal-confirm-exit-animation-duration)),transform var(--spectrum-animation-duration-0)var(--spectrum-animation-linear)calc(var(--spectrum-modal-confirm-exit-animation-delay) + var(--spectrum-modal-confirm-exit-animation-duration));outline:none;overflow:hidden}:host([open]) .modal{pointer-events:auto;visibility:visible;opacity:1;transition:transform var(--spectrum-modal-confirm-entry-animation-duration)var(--spectrum-animation-ease-out)var(--spectrum-modal-confirm-entry-animation-delay),opacity var(--spectrum-modal-confirm-entry-animation-duration)var(--spectrum-animation-ease-out)var(--spectrum-modal-confirm-entry-animation-delay);transform:translateY(0)}@media only screen and (device-height<=350px),only screen and (device-width<=400px){:host([responsive]) .modal{inline-size:100%;block-size:100%;max-inline-size:100%;max-block-size:100%;border-radius:0}}.fullscreen{max-inline-size:none;max-block-size:none;position:fixed;inset-block-start:var(--spectrum-modal-fullscreen-margin);inset-block-end:var(--spectrum-modal-fullscreen-margin);inset-inline-start:var(--spectrum-modal-fullscreen-margin);inset-inline-end:var(--spectrum-modal-fullscreen-margin)}.fullscreenTakeover{max-inline-size:none;max-block-size:none;box-sizing:border-box;border:none;border-radius:0;position:fixed;inset:0}.fullscreenTakeover,:host([open]) .fullscreenTakeover{transform:none}:host{--spectrum-modal-background-color:var(--system-modal-background-color)}:host{--spectrum-dialog-confirm-exit-animation-duration:var(--swc-test-duration);--spectrum-dialog-confirm-entry-animation-duration:var(--swc-test-duration);--spectrum-modal-confirm-entry-animation-distance:var(--spectrum-dialog-confirm-entry-animation-distance);height:100dvh}.modal{overflow:visible}\n`;export default i;\n//# sourceMappingURL=modal.css.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query,\n  state\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/overlay/sp-overlay.js\";\nimport overlayTriggerStyles from \"./overlay-trigger.css.js\";\nexport class OverlayTrigger extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.offset = 6;\n    this.disabled = false;\n    this.receivesFocus = \"auto\";\n    this.clickContent = [];\n    this.longpressContent = [];\n    this.hoverContent = [];\n    this.targetContent = [];\n  }\n  static get styles() {\n    return [overlayTriggerStyles];\n  }\n  getAssignedElementsFromSlot(slot) {\n    return slot.assignedElements({ flatten: true });\n  }\n  handleTriggerContent(event) {\n    this.targetContent = this.getAssignedElementsFromSlot(event.target);\n  }\n  handleSlotContent(event) {\n    switch (event.target.name) {\n      case \"click-content\":\n        this.clickContent = this.getAssignedElementsFromSlot(\n          event.target\n        );\n        break;\n      case \"longpress-content\":\n        this.longpressContent = this.getAssignedElementsFromSlot(\n          event.target\n        );\n        break;\n      case \"hover-content\":\n        this.hoverContent = this.getAssignedElementsFromSlot(\n          event.target\n        );\n        break;\n    }\n  }\n  handleBeforetoggle(event) {\n    const { target } = event;\n    let type;\n    if (target === this.clickOverlayElement) {\n      type = \"click\";\n    } else if (target === this.longpressOverlayElement) {\n      type = \"longpress\";\n    } else if (target === this.hoverOverlayElement) {\n      type = \"hover\";\n    } else {\n      return;\n    }\n    if (event.newState === \"open\") {\n      this.open = type;\n    } else if (this.open === type) {\n      this.open = void 0;\n    }\n  }\n  update(changes) {\n    var _a, _b, _c, _d, _e, _f;\n    if (changes.has(\"clickContent\")) {\n      this.clickPlacement = ((_a = this.clickContent[0]) == null ? void 0 : _a.getAttribute(\"placement\")) || ((_b = this.clickContent[0]) == null ? void 0 : _b.getAttribute(\n        \"direction\"\n      )) || void 0;\n    }\n    if (changes.has(\"hoverContent\")) {\n      this.hoverPlacement = ((_c = this.hoverContent[0]) == null ? void 0 : _c.getAttribute(\"placement\")) || ((_d = this.hoverContent[0]) == null ? void 0 : _d.getAttribute(\n        \"direction\"\n      )) || void 0;\n    }\n    if (changes.has(\"longpressContent\")) {\n      this.longpressPlacement = ((_e = this.longpressContent[0]) == null ? void 0 : _e.getAttribute(\"placement\")) || ((_f = this.longpressContent[0]) == null ? void 0 : _f.getAttribute(\n        \"direction\"\n      )) || void 0;\n    }\n    super.update(changes);\n  }\n  renderSlot(name) {\n    return html`\n            <slot name=${name} @slotchange=${this.handleSlotContent}></slot>\n        `;\n  }\n  renderClickOverlay() {\n    var _a;\n    const slot = this.renderSlot(\"click-content\");\n    const clickOverlay = html`\n            <sp-overlay\n                id=\"click-overlay\"\n                ?disabled=${this.disabled || !this.clickContent.length}\n                ?open=${this.open === \"click\" && !!this.clickContent.length}\n                .offset=${this.offset}\n                .placement=${this.clickPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${\"click\"}\n                .type=${this.type !== \"modal\" ? \"auto\" : \"modal\"}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n        `;\n    if ((_a = this.triggeredBy) == null ? void 0 : _a.includes(\"click\")) {\n      return clickOverlay;\n    }\n    if (!this.clickContent.length) {\n      return slot;\n    } else {\n      return clickOverlay;\n    }\n  }\n  renderHoverOverlay() {\n    var _a;\n    const slot = this.renderSlot(\"hover-content\");\n    const hoverOverlay = html`\n            <sp-overlay\n                id=\"hover-overlay\"\n                ?open=${this.open === \"hover\" && !!this.hoverContent.length}\n                ?disabled=${this.disabled || !this.hoverContent.length || !!this.open && this.open !== \"hover\"}\n                .offset=${this.offset}\n                .placement=${this.hoverPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${\"hover\"}\n                .type=${\"hint\"}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n        `;\n    if ((_a = this.triggeredBy) == null ? void 0 : _a.includes(\"hover\")) {\n      return hoverOverlay;\n    }\n    if (!this.hoverContent.length) {\n      return slot;\n    } else {\n      return hoverOverlay;\n    }\n  }\n  renderLongpressOverlay() {\n    var _a;\n    const slot = this.renderSlot(\"longpress-content\");\n    const longpressOverlay = html`\n            <sp-overlay\n                id=\"longpress-overlay\"\n                ?disabled=${this.disabled || !this.longpressContent.length}\n                ?open=${this.open === \"longpress\" && !!this.longpressContent.length}\n                .offset=${this.offset}\n                .placement=${this.longpressPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${\"longpress\"}\n                .type=${\"auto\"}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n            <slot name=\"longpress-describedby-descriptor\"></slot>\n        `;\n    if ((_a = this.triggeredBy) == null ? void 0 : _a.includes(\"longpress\")) {\n      return longpressOverlay;\n    }\n    if (!this.longpressContent.length) {\n      return slot;\n    } else {\n      return longpressOverlay;\n    }\n  }\n  render() {\n    return html`\n            <slot\n                id=\"trigger\"\n                name=\"trigger\"\n                @slotchange=${this.handleTriggerContent}\n            ></slot>\n            ${[\n      this.renderClickOverlay(),\n      this.renderHoverOverlay(),\n      this.renderLongpressOverlay()\n    ]}\n        `;\n  }\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (!this.triggeredBy) {\n      const issues = [\n        \"You have not specified the `triggeredBy` property. For optimal performance, consider explicitly declaring which overlay types you plan to use.\",\n        'Example: triggered-by=\"click hover\"',\n        \"This helps avoid unnecessary DOM operations and potential race conditions.\"\n      ];\n      window.__swc.warn(\n        this,\n        \"Performance optimization available for <overlay-trigger>:\",\n        \"https://opensource.adobe.com/spectrum-web-components/components/overlay-trigger/#performance-optimization\",\n        { issues }\n      );\n    }\n    if (this.disabled && changedProperties.has(\"disabled\")) {\n      this.open = void 0;\n      return;\n    }\n  }\n  async getUpdateComplete() {\n    const complete = await super.getUpdateComplete();\n    return complete;\n  }\n}\n__decorateClass([\n  property({ attribute: \"triggered-by\" })\n], OverlayTrigger.prototype, \"triggeredBy\", 2);\n__decorateClass([\n  property({ reflect: true })\n], OverlayTrigger.prototype, \"placement\", 2);\n__decorateClass([\n  property()\n], OverlayTrigger.prototype, \"type\", 2);\n__decorateClass([\n  property({ type: Number })\n], OverlayTrigger.prototype, \"offset\", 2);\n__decorateClass([\n  property({ reflect: true })\n], OverlayTrigger.prototype, \"open\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], OverlayTrigger.prototype, \"disabled\", 2);\n__decorateClass([\n  property({ attribute: \"receives-focus\" })\n], OverlayTrigger.prototype, \"receivesFocus\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"clickContent\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"longpressContent\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"hoverContent\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"targetContent\", 2);\n__decorateClass([\n  query(\"#click-overlay\", true)\n], OverlayTrigger.prototype, \"clickOverlayElement\", 2);\n__decorateClass([\n  query(\"#longpress-overlay\", true)\n], OverlayTrigger.prototype, \"longpressOverlayElement\", 2);\n__decorateClass([\n  query(\"#hover-overlay\", true)\n], OverlayTrigger.prototype, \"hoverOverlayElement\", 2);\n//# sourceMappingURL=OverlayTrigger.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport popoverStyles from \"./popover.css.js\";\nexport class Popover extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.open = false;\n    this.tip = false;\n  }\n  static get styles() {\n    return [popoverStyles];\n  }\n  renderTip() {\n    return html`\n            <div id=\"tip\" aria-hidden=\"true\">\n                <svg class=\"tip block\" viewBox=\"0 -0.5 16 9\">\n                    <path class=\"triangle\" d=\"M-1,-1 8,8 17,-1\"></path>\n                </svg>\n                <svg class=\"tip inline\" viewBox=\"0 -0.5 9 16\">\n                    <path class=\"triangle\" d=\"M-1,-1 8,8 -1,17\"></path>\n                </svg>\n            </div>\n        `;\n  }\n  render() {\n    return html`\n            <slot></slot>\n            ${this.tip ? this.renderTip() : nothing}\n        `;\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Popover.prototype, \"open\", 2);\n__decorateClass([\n  property({ reflect: true })\n], Popover.prototype, \"placement\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Popover.prototype, \"tip\", 2);\n__decorateClass([\n  query(\"#tip\")\n], Popover.prototype, \"tipElement\", 2);\n//# sourceMappingURL=Popover.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/slider/sp-slider.js\";\nimport \"@spectrum-web-components/slider/sp-slider-handle.js\";\nimport \"@spectrum-web-components/popover/sp-popover.js\";\nimport \"@spectrum-web-components/dialog/sp-dialog.js\";\nimport {\n  variants\n} from \"@spectrum-web-components/slider\";\nimport { spreadProps } from \"../../../test/lit-helpers.js\";\nimport \"@spectrum-web-components/overlay/overlay-trigger.js\";\nexport default {\n  component: \"sp-slider\",\n  title: \"Slider\",\n  argTypes: {\n    onInput: { action: \"input\" },\n    onChange: { action: \"change\" },\n    variant: {\n      name: \"Variant\",\n      description: \"Determines the style of slider.\",\n      table: {\n        type: { summary: \"string\" },\n        defaultValue: { summary: void 0 }\n      },\n      control: {\n        type: \"inline-radio\",\n        options: [void 0, ...variants]\n      }\n    },\n    tickStep: {\n      name: \"Tick Step\",\n      description: \"Tick spacing on slider.\",\n      table: {\n        type: { summary: \"number\" },\n        defaultValue: { summary: 0.1 }\n      },\n      control: {\n        type: \"number\"\n      }\n    },\n    labelVisibility: {\n      name: \"Label Visibility\",\n      description: \"The labels visibily available in the UI\",\n      table: {\n        type: { summary: '\"text\" | \"value\" | \"none\" | undefined' },\n        defaultValue: { summary: void 0 }\n      },\n      control: {\n        type: \"text\"\n      }\n    }\n  },\n  args: {\n    variant: void 0,\n    tickStep: 0.1,\n    labelVisibility: void 0,\n    min: void 0,\n    max: void 0,\n    value: void 0,\n    step: void 0\n  }\n};\nconst handleEvent = ({ onInput, onChange }) => (event) => {\n  const { value } = event.target;\n  if (onInput && event.type === \"input\") {\n    onInput(value.toString());\n  } else if (onChange && event.type === \"change\") {\n    onChange(value.toString());\n  }\n};\nconst handleHandleEvent = ({ onInput, onChange }) => (event) => {\n  const target = event.target;\n  if (target.value != null) {\n    if (typeof target.value === \"object\") {\n      const value = JSON.stringify(target.value, null, 2);\n      if (onInput && event.type === \"input\") {\n        onInput(value);\n      } else if (onChange && event.type === \"change\") {\n        onChange(value);\n      }\n    } else {\n      const value = `${target.name}: ${target.value}`;\n      if (onInput && event.type === \"input\") {\n        onInput(value);\n      } else if (onChange && event.type === \"change\") {\n        onChange(value);\n      }\n    }\n  }\n};\nexport const Default = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin-inline: 20px;\">\n            <sp-slider\n                max=\"1\"\n                min=\"0\"\n                value=\".5\"\n                step=\"0.01\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: \"percent\" }}\n                ...=${spreadProps(args)}\n            >\n                Opacity\n            </sp-slider>\n        </div>\n    `;\n};\nexport const Filled = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin-inline: 20px;\">\n            <sp-slider\n                max=\"1\"\n                variant=\"filled\"\n                min=\"0\"\n                value=\".7\"\n                step=\"0.01\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: \"percent\" }}\n                ...=${spreadProps(args)}\n            >\n                Slider Label\n            </sp-slider>\n        </div>\n    `;\n};\nexport const HasADefaultValue = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin-inline: 20px;\">\n            <sp-slider\n                max=\"1\"\n                min=\"0\"\n                value=\".5\"\n                step=\"0.01\"\n                default-value=\"0.2\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: \"percent\" }}\n                ...=${spreadProps(args)}\n            >\n                double click or press escape key to reset\n            </sp-slider>\n        </div>\n    `;\n};\nexport const FillStart = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin-inline: 20px;\">\n            <sp-slider\n                max=\"1\"\n                fill-start\n                variant=\"filled\"\n                min=\"0\"\n                value=\".7\"\n                step=\"0.01\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: \"percent\" }}\n                ...=${spreadProps(args)}\n            >\n                Slider label\n            </sp-slider>\n        </div>\n    `;\n};\nexport const FillStartWithValue = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin-inline: 20px;\">\n            <sp-slider\n                max=\"1\"\n                min=\"0\"\n                value=\".7\"\n                step=\"0.1\"\n                fill-start=\"0.3\"\n                variant=\"filled\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: \"percent\" }}\n                ...=${spreadProps(args)}\n            >\n                Value Greater than Fill Start\n            </sp-slider>\n        </div>\n        <div style=\"width: 500px; margin-inline: 20px;\">\n            <sp-slider\n                max=\"20\"\n                min=\"0\"\n                value=\"5\"\n                step=\"1\"\n                fill-start=\"15\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: \"number\" }}\n                ...=${spreadProps(args)}\n            >\n                Value Less than Fill Start\n            </sp-slider>\n        </div>\n    `;\n};\nexport const FillStartWithNegativeMinRange = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin-inline: 20px;\">\n            <sp-slider\n                max=\"150\"\n                min=\"-50\"\n                value=\"25\"\n                step=\"1\"\n                fill-start=\"0\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: \"number\" }}\n                ...=${spreadProps(args)}\n            >\n                Fill start with \"0\" and within range -50 to 150\n            </sp-slider>\n        </div>\n        <div style=\"width: 500px; margin-inline: 20px;\">\n            <sp-slider\n                max=\"100\"\n                min=\"-50\"\n                value=\"-25\"\n                step=\"1\"\n                fill-start=\"0\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: \"number\" }}\n                .normalization=${{\n    toNormalized: (value) => {\n      if (value === 0) return 0.5;\n      return value < 0 ? 0.5 - value / -50 * 0.5 : 0.5 + value / 100 * 0.5;\n    },\n    fromNormalized: (value) => {\n      if (value === 0.5) return 0;\n      return value < 0.5 ? (1 - value / 0.5) * -50 : (value - 0.5) / 0.5 * 100;\n    }\n  }}\n                ...=${spreadProps(args)}\n            >\n                Fill start with \"0\" and normalization function within range -50\n                to 100\n            </sp-slider>\n        </div>\n    `;\n};\nexport const autofocus = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin-inline: 20px;\">\n            <sp-slider\n                autofocus\n                max=\"1\"\n                min=\"0\"\n                value=\".5\"\n                step=\"0.01\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: \"percent\" }}\n                ...=${spreadProps(args)}\n            >\n                Opacity\n            </sp-slider>\n        </div>\n    `;\n};\nexport const minimalDOM = () => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider>Opacity</sp-slider>\n        </div>\n    `;\n};\nexport const noVisibleTextLabel = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                max=\"1\"\n                min=\"0\"\n                value=\".5\"\n                step=\"0.01\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: \"percent\" }}\n                ...=${spreadProps(args)}\n            >\n                Opacity\n            </sp-slider>\n        </div>\n    `;\n};\nnoVisibleTextLabel.args = {\n  labelVisibility: \"value\"\n};\nexport const noVisibleValueLabel = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                max=\"1\"\n                min=\"0\"\n                value=\"0\"\n                step=\"0.01\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: \"percent\" }}\n                ...=${spreadProps(args)}\n            >\n                Opacity\n            </sp-slider>\n        </div>\n    `;\n};\nnoVisibleValueLabel.args = {\n  labelVisibility: \"text\"\n};\nexport const noVisibleLabels = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                max=\"1\"\n                min=\"0\"\n                value=\".5\"\n                step=\"0.01\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: \"percent\" }}\n                ...=${spreadProps(args)}\n            >\n                Opacity\n            </sp-slider>\n        </div>\n    `;\n};\nnoVisibleLabels.args = {\n  labelVisibility: \"none\"\n};\nexport const px = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                max=\"360\"\n                min=\"0\"\n                value=\"90\"\n                step=\"1\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{\n    style: \"unit\",\n    unit: \"px\"\n  }}\n                ...=${spreadProps(args)}\n            >\n                Angle\n            </sp-slider>\n        </div>\n    `;\n};\nclass NumberFieldDefined extends HTMLElement {\n  constructor() {\n    super();\n    this.numberFieldLoaderPromise = Promise.resolve(false);\n    this.numberFieldLoaderPromise = new Promise((res) => {\n      customElements.whenDefined(\"sp-number-field\").then(() => {\n        res(true);\n      });\n    });\n  }\n  get updateComplete() {\n    return this.numberFieldLoaderPromise;\n  }\n}\ncustomElements.define(\"number-field-defined\", NumberFieldDefined);\nconst editableDecorator = (story) => {\n  return html`\n        ${story()}\n        <number-field-defined></number-field-defined>\n    `;\n};\nexport const max20 = (args = {}) => {\n  return html`\n        <div style=\"width: 200px; margin: 12px 20px;\">\n            <sp-slider\n                editable\n                max=\"20\"\n                min=\"0\"\n                value=\"5\"\n                step=\"1\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                ...=${spreadProps(args)}\n            >\n                Max 20\n            </sp-slider>\n        </div>\n    `;\n};\nmax20.swc_vrt = {\n  skip: true\n};\nmax20.parameters = {\n  // Disables Chromatic's snapshotting on a global level\n  chromatic: { disableSnapshot: true }\n};\nexport const editable = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                editable\n                max=\"360\"\n                min=\"0\"\n                value=\"90\"\n                step=\"1\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{\n    style: \"unit\",\n    unit: \"degree\",\n    unitDisplay: \"narrow\"\n  }}\n                ...=${spreadProps(args)}\n            >\n                Angle\n            </sp-slider>\n        </div>\n    `;\n};\neditable.decorators = [editableDecorator];\nimport \"@spectrum-web-components/slider/sp-slider.js\";\nimport \"@spectrum-web-components/overlay/overlay-trigger.js\";\nimport \"@spectrum-web-components/button/sp-button.js\";\nimport \"@spectrum-web-components/tray/sp-tray.js\";\nexport const Multiple = (args) => {\n  const updateSliderConfig = (min, max, value, step) => {\n    const slider = document.querySelector(\"sp-slider\");\n    if (slider) {\n      slider.value = value;\n      slider.min = min;\n      slider.max = max;\n      slider.step = step;\n    }\n  };\n  return html`\n        <overlay-trigger type=\"modal\">\n            <sp-button slot=\"trigger\" variant=\"secondary\">\n                Toggle menu\n            </sp-button>\n            <sp-tray slot=\"click-content\">\n                <div style=\"padding: 8px; width: 100%\">\n                    <sp-slider\n                        label=\"Slider Label\"\n                        min=${args.min}\n                        max=${args.max}\n                        value=${args.value}\n                        step=${args.step}\n                        variant=\"filled\"\n                        hide-stepper\n                        editable\n                    ></sp-slider>\n                    <div\n                        style=\"display: grid; gap: 8px; padding: 8px; width: 50%; margin: auto;\"\n                    >\n                        <sp-button\n                            size=\"s\"\n                            @click=${() => updateSliderConfig(0.25, 4, 0.75, 0.01)}\n                        >\n                            Duration\n                        </sp-button>\n                        <sp-button\n                            size=\"s\"\n                            @click=${() => updateSliderConfig(2, 100, 2, 1)}\n                        >\n                            Personality\n                        </sp-button>\n                        <sp-button\n                            size=\"s\"\n                            @click=${() => updateSliderConfig(2, 25, 3, 1)}\n                        >\n                            Intensity\n                        </sp-button>\n                    </div>\n                </div>\n            </sp-tray>\n        </overlay-trigger>\n    `;\n};\nMultiple.args = {\n  min: 0.25,\n  max: 4,\n  value: 0.75,\n  step: 0.01\n};\nexport const editableWithDefaultValue = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                editable\n                max=\"360\"\n                min=\"0\"\n                value=\"90\"\n                step=\"1\"\n                default-value=\"180\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{\n    style: \"unit\",\n    unit: \"degree\",\n    unitDisplay: \"narrow\"\n  }}\n                ...=${spreadProps(args)}\n            >\n                Angle\n            </sp-slider>\n        </div>\n    `;\n};\neditableWithDefaultValue.swc_vrt = {\n  skip: true\n};\neditableWithDefaultValue.parameters = {\n  // Disables Chromatic's snapshotting on a global level\n  chromatic: { disableSnapshot: true }\n};\nexport const editableWithFractionValue = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                editable\n                max=\"255\"\n                min=\"0.1\"\n                value=\"0.5\"\n                step=\"0.01\"\n                default-value=\"18\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                ...=${spreadProps(args)}\n            >\n                Angle\n            </sp-slider>\n        </div>\n    `;\n};\neditableWithFractionValue.swc_vrt = {\n  skip: true\n};\neditableWithFractionValue.parameters = {\n  // Disables Chromatic's snapshotting on a global level\n  chromatic: { disableSnapshot: true }\n};\nexport const editableDisabled = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                editable\n                disabled\n                max=\"360\"\n                min=\"0\"\n                value=\"90\"\n                step=\"1\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{\n    style: \"unit\",\n    unit: \"degree\",\n    unitDisplay: \"narrow\"\n  }}\n                ...=${spreadProps(args)}\n            >\n                Angle\n            </sp-slider>\n        </div>\n    `;\n};\neditable.decorators = [editableDecorator];\nexport const editableCustom = (args = {}) => {\n  return html`\n        <div\n            style=\"width: 500px; margin: 12px 20px; --mod-stepper-width: 150px;\"\n        >\n            <sp-slider\n                editable\n                max=\"24\"\n                min=\"0\"\n                value=\"12.75\"\n                step=\"0.25\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: \"unit\", unit: \"hour\" }}\n                ...=${spreadProps(args)}\n            >\n                Hours\n            </sp-slider>\n        </div>\n    `;\n};\neditableCustom.decorators = [editableDecorator];\nexport const editableWithoutVisibleLabels = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                editable\n                max=\"1\"\n                min=\"0\"\n                value=\".5\"\n                step=\"0.01\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: \"percent\" }}\n                ...=${spreadProps(args)}\n            >\n                Opacity\n            </sp-slider>\n        </div>\n    `;\n};\neditableWithoutVisibleLabels.args = {\n  labelVisibility: \"none\"\n};\nexport const hideStepper = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                editable\n                hide-stepper\n                max=\"1\"\n                min=\"0\"\n                value=\".5\"\n                step=\"0.01\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                .formatOptions=${{ style: \"percent\" }}\n                ...=${spreadProps(args)}\n            >\n                Opacity\n            </sp-slider>\n        </div>\n    `;\n};\nhideStepper.decorators = [editableDecorator];\nexport const Gradient = (args = {}) => {\n  return html`\n        <style>\n            sp-slider {\n                --mod-slider-track-color: linear-gradient(\n                    to right,\n                    red,\n                    green 100%\n                );\n            }\n            sp-slider[dir='rtl'] {\n                --mod-slider-track-color: linear-gradient(\n                    to left,\n                    red,\n                    green 100%\n                );\n            }\n        </style>\n        <div\n            style=\"\n                width: 500px;\n                margin: 12px 20px;\n            \"\n        >\n            <sp-slider\n                label=\"Opacity\"\n                max=\"100\"\n                min=\"0\"\n                value=\"50\"\n                id=\"opacity-slider\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                ...=${spreadProps(args)}\n            ></sp-slider>\n        </div>\n    `;\n};\nGradient.args = {\n  variant: void 0\n};\nexport const tick = (args = {}) => {\n  return html`\n        <sp-slider\n            label=\"Slider Label\"\n            variant=\"tick\"\n            min=\"0\"\n            max=\"92\"\n            ...=${spreadProps(args)}\n        ></sp-slider>\n        <sp-slider\n            label=\"Slider Label\"\n            variant=\"tick\"\n            min=\"0\"\n            max=\"92\"\n            ...=${spreadProps(args)}\n        ></sp-slider>\n    `;\n};\ntick.args = {\n  variant: \"tick\",\n  tickStep: 5\n};\nexport const tickLabels = (args = {}) => {\n  return html`\n        <sp-slider\n            label=\"Slider Label\"\n            tick-labels\n            variant=\"tick\"\n            min=\"50\"\n            max=\"75\"\n            ...=${spreadProps(args)}\n        ></sp-slider>\n        <sp-slider\n            label=\"Slider Label\"\n            tick-labels\n            variant=\"tick\"\n            min=\"50\"\n            max=\"75\"\n            ...=${spreadProps(args)}\n        ></sp-slider>\n    `;\n};\ntickLabels.args = {\n  variant: \"tick\",\n  tickStep: 5\n};\nexport const Disabled = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                disabled\n                value=\"5\"\n                step=\"0.5\"\n                min=\"0\"\n                max=\"20\"\n                label=\"Intensity\"\n                ...=${spreadProps(args)}\n            ></sp-slider>\n        </div>\n    `;\n};\nexport const Quiet = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                editable\n                hide-stepper\n                quiet\n                value=\"5\"\n                step=\"0.5\"\n                min=\"0\"\n                max=\"20\"\n                label=\"Intensity\"\n                ...=${spreadProps(args)}\n            ></sp-slider>\n        </div>\n    `;\n};\nexport const inPopover = (args = {}) => {\n  return html`\n        <sp-popover open style=\"min-width: 0\">\n            <sp-dialog no-divider>\n                <sp-slider\n                    editable\n                    hide-stepper\n                    quiet\n                    value=\"5\"\n                    step=\"0.5\"\n                    min=\"0\"\n                    max=\"20\"\n                    label=\"Intensity\"\n                    ...=${spreadProps(args)}\n                ></sp-slider>\n            </sp-dialog>\n        </sp-popover>\n    `;\n};\nexport const Indeterminate = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                editable\n                indeterminate\n                value=\"5\"\n                step=\"0.5\"\n                min=\"0\"\n                max=\"20\"\n                label=\"Intensity\"\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                ...=${spreadProps(args)}\n            ></sp-slider>\n        </div>\n    `;\n};\nexport const ExplicitHandle = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                step=\"0.5\"\n                min=\"0\"\n                max=\"20\"\n                @input=${handleHandleEvent(args)}\n                @change=${handleHandleEvent(args)}\n                ...=${spreadProps(args)}\n            >\n                Intensity\n                <sp-slider-handle slot=\"handle\" value=\"5\"></sp-slider-handle>\n            </sp-slider>\n        </div>\n    `;\n};\nexport const TwoHandles = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                value=\"5\"\n                step=\"1\"\n                min=\"0\"\n                max=\"255\"\n                @input=${handleHandleEvent(args)}\n                @change=${handleHandleEvent(args)}\n                ...=${spreadProps(args)}\n            >\n                Output Levels\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"min\"\n                    label=\"Minimum\"\n                    value=\"5\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"max\"\n                    label=\"Maximum\"\n                    value=\"250\"\n                ></sp-slider-handle>\n            </sp-slider>\n        </div>\n    `;\n};\nTwoHandles.args = {\n  variant: \"range\",\n  tickStep: 10\n};\nexport const TwoHandlesPt = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                value=\"5\"\n                step=\"1\"\n                min=\"0\"\n                max=\"255\"\n                @input=${handleHandleEvent(args)}\n                @change=${handleHandleEvent(args)}\n                .formatOptions=${{\n    style: \"unit\",\n    unit: \"pt\"\n  }}\n                ...=${spreadProps(args)}\n            >\n                Output Levels\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"min\"\n                    label=\"Minimum\"\n                    value=\"5\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"max\"\n                    label=\"Maximum\"\n                    value=\"250\"\n                ></sp-slider-handle>\n            </sp-slider>\n        </div>\n    `;\n};\nTwoHandlesPt.args = {\n  variant: \"range\",\n  tickStep: 10\n};\nexport const ThreeHandlesPc = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                value=\"5\"\n                step=\"1\"\n                min=\"0\"\n                max=\"255\"\n                @input=${handleHandleEvent(args)}\n                @change=${handleHandleEvent(args)}\n                .formatOptions=${{ style: \"unit\", unit: \"pc\" }}\n                ...=${spreadProps(args)}\n            >\n                Output Levels\n                <sp-slider-handle\n                    slot=\"handle\"\n                    value=\"5\"\n                    label=\"Low\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    value=\"133\"\n                    label=\"Mid\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    value=\"250\"\n                    label=\"High\"\n                ></sp-slider-handle>\n            </sp-slider>\n        </div>\n    `;\n};\nThreeHandlesPc.args = {\n  variant: \"range\"\n};\nexport const ThreeHandlesOrdered = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                step=\"1\"\n                min=\"0\"\n                max=\"255\"\n                @input=${handleHandleEvent(args)}\n                @change=${handleHandleEvent(args)}\n                ...=${spreadProps(args)}\n            >\n                Output Levels\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"low\"\n                    label=\"Low\"\n                    value=\"5\"\n                    max=\"next\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"mid\"\n                    label=\"Mid\"\n                    value=\"100\"\n                    min=\"previous\"\n                    max=\"next\"\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"high\"\n                    label=\"High\"\n                    value=\"250\"\n                    min=\"previous\"\n                ></sp-slider-handle>\n            </sp-slider>\n        </div>\n    `;\n};\nThreeHandlesOrdered.args = {\n  variant: \"range\",\n  tickStep: 10\n};\nexport const ThreeHandlesComplex = (args = {}) => {\n  const values = {\n    black: 50,\n    gray: 4.98,\n    white: 225\n  };\n  const handleEvent2 = ({ onInput, onChange }) => (event) => {\n    const target = event.target;\n    if (target.value != null) {\n      if (typeof target.value === \"object\") {\n        const value = JSON.stringify(target.value, null, 2);\n        if (onInput && event.type === \"input\") {\n          onInput(value);\n        } else if (onChange && event.type === \"change\") {\n          onChange(value);\n        }\n      } else {\n        const value = `${target.name}: ${target.value}`;\n        if (onInput && event.type === \"input\") {\n          onInput(value);\n        } else if (onChange && event.type === \"change\") {\n          onChange(value);\n        }\n      }\n      values[target.name] = target.value;\n    }\n  };\n  const grayNormalization = {\n    toNormalized(value) {\n      const normalizedBlack = values.black / 255;\n      const normalizedWhite = values.white / 255;\n      const clamped = Math.max(Math.min(value, 1), 0);\n      return clamped * (normalizedWhite - normalizedBlack) + normalizedBlack;\n    },\n    fromNormalized(value) {\n      const normalizedBlack = values.black / 255;\n      const normalizedWhite = values.white / 255;\n      const clamped = Math.max(\n        Math.min(value, normalizedWhite),\n        normalizedBlack\n      );\n      return (clamped - normalizedBlack) / (normalizedWhite - normalizedBlack);\n    }\n  };\n  const blackNormalization = {\n    toNormalized(value) {\n      const clamped = Math.min(value, values.white);\n      return clamped / 255;\n    },\n    fromNormalized(value) {\n      const denormalized = value * 255;\n      return Math.min(denormalized, values.white);\n    }\n  };\n  const whiteNormalization = {\n    toNormalized(value) {\n      const clamped = Math.max(value, values.black);\n      return clamped / 255;\n    },\n    fromNormalized(value) {\n      const denormalized = value * 255;\n      return Math.max(denormalized, values.black);\n    }\n  };\n  const computeGray = (value) => {\n    let result = 1;\n    if (value > 0.5) {\n      result = Math.max(2 * (1 - value), 0.01);\n    } else if (value < 0.5) {\n      result = ((1 - 2 * value) * (Math.sqrt(9.99) - 1) + 1) ** 2;\n    }\n    const formatOptions = {\n      maximumFractionDigits: 2,\n      minimumFractionDigits: 2\n    };\n    return new Intl.NumberFormat(navigator.language, formatOptions).format(\n      result\n    );\n  };\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                step=\"1\"\n                min=\"0\"\n                max=\"255\"\n                @input=${handleEvent2}\n                @change=${handleEvent2}\n                ...=${spreadProps(args)}\n            >\n                Output Levels\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"black\"\n                    label=\"Black\"\n                    value=${values.black}\n                    .normalization=${blackNormalization}\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"gray\"\n                    label=\"Gray\"\n                    value=\"0.215\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.005\"\n                    .normalization=${grayNormalization}\n                    .getAriaHandleText=${computeGray}\n                ></sp-slider-handle>\n                <sp-slider-handle\n                    slot=\"handle\"\n                    name=\"white\"\n                    label=\"White\"\n                    value=${values.white}\n                    .normalization=${whiteNormalization}\n                ></sp-slider-handle>\n            </sp-slider>\n        </div>\n    `;\n};\nThreeHandlesComplex.args = {\n  variant: \"range\",\n  tickStep: 10\n};\nexport const focusTabDemo = (args = {}) => {\n  const value = 50;\n  const min = 0;\n  const max = 100;\n  const step = 1;\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px 20px;\">\n            <sp-slider\n                value=\"${value}\"\n                step=\"${step}\"\n                min=\"${min}\"\n                max=\"${max}\"\n                label=\"Opacity\"\n                id=\"opacity-slider-opacity\"\n                ...=${spreadProps(args)}\n            ></sp-slider>\n        </div>\n        <div style=\"width: 500px; margin: 20px;\">\n            <sp-slider\n                value=\"${value}\"\n                step=\"${step}\"\n                min=\"${min}\"\n                max=\"${max}\"\n                label=\"Lightness\"\n                id=\"opacity-slider-lightness\"\n                ...=${spreadProps(args)}\n            ></sp-slider>\n        </div>\n        <div style=\"width: 500px; margin: 20px 20px 12px;\">\n            <sp-slider\n                value=\"${value}\"\n                step=\"${step}\"\n                min=\"${min}\"\n                max=\"${max}\"\n                label=\"Saturation\"\n                id=\"opacity-slider-saturation\"\n                ...=${spreadProps(args)}\n            ></sp-slider>\n        </div>\n    `;\n};\nexport const WithPopover = (args = {}) => {\n  return html`\n        <div style=\"width: 500px; margin: 12px 20px;\">\n            <sp-slider\n                id=\"slider-with-popover\"\n                label=\"Slider without Popover\"\n                variant=\"filled\"\n                max=\"100\"\n                min=\"0\"\n                step=\"5\"\n                value=\"50\"\n                editable\n                @input=${handleEvent(args)}\n                @change=${handleEvent(args)}\n                ...=${spreadProps(args)}\n            ></sp-slider>\n            <overlay-trigger placement=\"top\">\n                <sp-slider\n                    slot=\"trigger\"\n                    id=\"slider-with-popover\"\n                    label=\"Label in attribute\"\n                    variant=\"filled\"\n                    max=\"100\"\n                    min=\"0\"\n                    step=\"5\"\n                    value=\"50\"\n                    editable\n                    @input=${handleEvent(args)}\n                    @change=${handleEvent(args)}\n                    ...=${spreadProps(args)}\n                ></sp-slider>\n                <sp-popover slot=\"hover-content\" tip>\n                    Hover content for the slider\n                </sp-popover>\n            </overlay-trigger>\n\n            <overlay-trigger placement=\"top\">\n                <sp-slider\n                    slot=\"trigger\"\n                    id=\"slider-with-popover\"\n                    variant=\"filled\"\n                    max=\"100\"\n                    min=\"0\"\n                    step=\"5\"\n                    value=\"50\"\n                    editable\n                    @input=${handleEvent(args)}\n                    @change=${handleEvent(args)}\n                    ...=${spreadProps(args)}\n                >\n                    Label in slot\n                </sp-slider>\n                <sp-popover slot=\"hover-content\" tip>\n                    Hover content for the slider\n                </sp-popover>\n            </overlay-trigger>\n        </div>\n    `;\n};\nWithPopover.args = {\n  variant: \"filled\"\n};\nWithPopover.parameters = {\n  docs: {\n    description: {\n      story: \"A slider with a popover that appears on hover.\"\n    }\n  }\n};\n//# sourceMappingURL=slider.stories.js.map\n;export const __namedExportsOrder = [\"Default\",\"Filled\",\"HasADefaultValue\",\"FillStart\",\"FillStartWithValue\",\"FillStartWithNegativeMinRange\",\"autofocus\",\"minimalDOM\",\"noVisibleTextLabel\",\"noVisibleValueLabel\",\"noVisibleLabels\",\"px\",\"max20\",\"editable\",\"Multiple\",\"editableWithDefaultValue\",\"editableWithFractionValue\",\"editableDisabled\",\"editableCustom\",\"editableWithoutVisibleLabels\",\"hideStepper\",\"Gradient\",\"tick\",\"tickLabels\",\"Disabled\",\"Quiet\",\"inPopover\",\"Indeterminate\",\"ExplicitHandle\",\"TwoHandles\",\"TwoHandlesPt\",\"ThreeHandlesPc\",\"ThreeHandlesOrdered\",\"ThreeHandlesComplex\",\"focusTabDemo\",\"WithPopover\"];","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/underlay/sp-underlay.js\";\nimport { firstFocusableIn } from \"@spectrum-web-components/shared/src/first-focusable-in.js\";\nimport { MatchMediaController } from \"@spectrum-web-components/reactive-controllers/src/MatchMedia.js\";\nimport modalStyles from \"@spectrum-web-components/modal/src/modal.css.js\";\nimport styles from \"./tray.css.js\";\nexport class Tray extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.open = false;\n    this.prefersMotion = new MatchMediaController(\n      this,\n      \"(prefers-reduced-motion: no-preference)\"\n    );\n    this.transitionPromise = Promise.resolve();\n    this.resolveTransitionPromise = () => {\n    };\n    this.animating = false;\n  }\n  static get styles() {\n    return [modalStyles, styles];\n  }\n  focus() {\n    const firstFocusable = firstFocusableIn(this);\n    if (firstFocusable) {\n      firstFocusable.focus();\n    } else if (this.children.length === 1) {\n      this.tray.focus();\n    } else {\n      super.focus();\n    }\n  }\n  overlayWillCloseCallback() {\n    if (!this.open) return this.animating;\n    this.close();\n    return true;\n  }\n  close() {\n    this.open = false;\n    if (!this.prefersMotion.matches) {\n      this.dispatchClosed();\n    }\n  }\n  dispatchClosed() {\n    this.dispatchEvent(\n      new Event(\"close\", {\n        bubbles: true\n      })\n    );\n  }\n  handleUnderlayTransitionend() {\n    if (!this.open) {\n      this.resolveTransitionPromise();\n      this.dispatchClosed();\n    }\n  }\n  handleTrayTransitionend() {\n    if (this.open) {\n      this.resolveTransitionPromise();\n    }\n  }\n  update(changes) {\n    if (changes.has(\"open\") && changes.get(\"open\") !== void 0 && this.prefersMotion.matches) {\n      this.animating = true;\n      this.transitionPromise = new Promise((res) => {\n        this.resolveTransitionPromise = () => {\n          this.animating = false;\n          res();\n        };\n      });\n    }\n    super.update(changes);\n  }\n  render() {\n    return html`\n            <sp-underlay\n                ?open=${this.open}\n                @close=${this.close}\n                @transitionend=${this.handleUnderlayTransitionend}\n            ></sp-underlay>\n            <div\n                class=\"tray modal\"\n                tabindex=\"-1\"\n                @transitionend=${this.handleTrayTransitionend}\n            >\n                <slot></slot>\n            </div>\n        `;\n  }\n  /**\n   * Bind the open/close transition into the update complete lifecycle so\n   * that the overlay system can wait for it to be \"visibly ready\" before\n   * attempting to throw focus into the content contained herein. Not\n   * waiting for this can cause small amounts of page scroll to happen\n   * while opening the Tray when focusable content is included: e.g. Menu\n   * elements whose selected Menu Item is not the first Menu Item.\n   */\n  async getUpdateComplete() {\n    const complete = await super.getUpdateComplete();\n    await this.transitionPromise;\n    return complete;\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Tray.prototype, \"open\", 2);\n__decorateClass([\n  query(\".tray\")\n], Tray.prototype, \"tray\", 2);\n//# sourceMappingURL=Tray.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport styles from \"./underlay.css.js\";\nexport class Underlay extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.canClick = false;\n    this.open = false;\n  }\n  static get styles() {\n    return [styles];\n  }\n  click() {\n    this.dispatchEvent(new Event(\"close\"));\n  }\n  handlePointerdown() {\n    this.canClick = true;\n  }\n  handlePointerup() {\n    if (this.canClick) {\n      this.click();\n    }\n    this.canClick = false;\n  }\n  render() {\n    return html``;\n  }\n  firstUpdated() {\n    this.addEventListener(\"pointerdown\", this.handlePointerdown);\n    this.addEventListener(\"pointerup\", this.handlePointerup);\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Underlay.prototype, \"open\", 2);\n//# sourceMappingURL=Underlay.dev.js.map\n"],"names":[],"sourceRoot":""}