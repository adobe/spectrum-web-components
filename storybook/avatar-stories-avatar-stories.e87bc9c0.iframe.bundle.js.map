{"version":3,"file":"avatar-stories-avatar-stories.e87bc9c0.iframe.bundle.js","mappings":";;AACA;;;AAuDA;AACA;;AAGA;ACpCA;AAGA;;;AASA;AACA;AACA;AACA;;AAIA","sources":["webpack://@adobe/spectrum-web-components/./packages/avatar/src/Avatar.dev.js","webpack://@adobe/spectrum-web-components/./packages/avatar/stories/avatar.stories.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport { LikeAnchor } from \"@spectrum-web-components/shared/src/like-anchor.js\";\nimport { Focusable } from \"@spectrum-web-components/shared/src/focusable.js\";\nimport avatarStyles from \"./avatar.css.js\";\nconst validSizes = [50, 75, 100, 200, 300, 400, 500, 600, 700];\nconst defaultSize = validSizes[2];\nexport class Avatar extends LikeAnchor(Focusable) {\n  constructor() {\n    super(...arguments);\n    this.src = \"\";\n    this._size = defaultSize;\n  }\n  static get styles() {\n    return [avatarStyles];\n  }\n  get focusElement() {\n    return this.anchorElement || this;\n  }\n  get size() {\n    return this._size;\n  }\n  set size(value) {\n    const size = value;\n    const validSize = validSizes.includes(size) ? size : defaultSize;\n    if (validSize) {\n      this.setAttribute(\"size\", `${validSize}`);\n    }\n    if (this._size === validSize) {\n      return;\n    }\n    const oldSize = this._size;\n    this._size = validSize;\n    this.requestUpdate(\"size\", oldSize);\n  }\n  render() {\n    const avatar = html`\n            <img\n                class=\"image\"\n                alt=${ifDefined(this.label || void 0)}\n                src=${this.src}\n            />\n        `;\n    if (this.href) {\n      return this.renderAnchor({\n        id: \"link\",\n        className: \"link\",\n        anchorContent: avatar\n      });\n    }\n    return avatar;\n  }\n  firstUpdated(changes) {\n    super.firstUpdated(changes);\n    if (!this.hasAttribute(\"size\")) {\n      this.setAttribute(\"size\", `${this.size}`);\n    }\n  }\n}\n__decorateClass([\n  query(\"#link\")\n], Avatar.prototype, \"anchorElement\", 2);\n__decorateClass([\n  property()\n], Avatar.prototype, \"src\", 2);\n__decorateClass([\n  property({ type: Number, reflect: true })\n], Avatar.prototype, \"size\", 1);\n//# sourceMappingURL=Avatar.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/avatar/sp-avatar.js\";\nimport { avatar } from \"./images\";\nexport default {\n  component: \"sp-avatar\",\n  title: \"Avatar\",\n  argTypes: {\n    disabled: { control: \"boolean\" },\n    label: { control: \"text\" },\n    src: { control: \"text\" }\n  },\n  args: {\n    disabled: false,\n    label: \"Place dog\",\n    src: avatar\n  }\n};\nconst Template = ({\n  label = \"Place Dog\",\n  src = avatar,\n  size = 100\n} = {}) => {\n  return html`\n        <sp-avatar label=${label} src=${src} size=${size}></sp-avatar>\n    `;\n};\nconst Link = ({\n  disabled: disabled2 = false,\n  label = \"Place Dog\",\n  src = avatar,\n  size = 100\n} = {}) => {\n  return html`\n        <sp-avatar\n            href=\"https://opensource.adobe.com/spectrum-web-components\"\n            ?disabled=${disabled2}\n            label=${label}\n            src=${src}\n            size=${size}\n        ></sp-avatar>\n    `;\n};\nexport const size50 = (args = {}) => Template({ ...args, size: 50 });\nexport const size75 = (args = {}) => Template({ ...args, size: 75 });\nexport const size100 = (args = {}) => Template({ ...args, size: 100 });\nexport const size200 = (args = {}) => Template({ ...args, size: 200 });\nexport const size300 = (args = {}) => Template({ ...args, size: 300 });\nexport const size400 = (args = {}) => Template({ ...args, size: 400 });\nexport const size500 = (args = {}) => Template({ ...args, size: 500 });\nexport const size600 = (args = {}) => Template({ ...args, size: 600 });\nexport const size700 = (args = {}) => Template({ ...args, size: 700 });\nexport const linked = (args = {}) => Link(args);\nexport const disabled = (args = {}) => Link(args);\ndisabled.args = { disabled: true };\n//# sourceMappingURL=avatar.stories.js.map\n;export const __namedExportsOrder = [\"size50\",\"size75\",\"size100\",\"size200\",\"size300\",\"size400\",\"size500\",\"size600\",\"size700\",\"linked\",\"disabled\"];"],"names":[],"sourceRoot":""}