{"version":3,"file":"8810.693f27d2.iframe.bundle.js","mappings":";;AACA;AA6CA;AAEA;;AAEA;;AAKA;AAmCA;AACA;AAOA;AAGA;AAEA;;;ACtDA;;;;AAIA;;;;;;AAMA;;;;;AAMA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAIA","sources":["webpack://@adobe/spectrum-web-components/./packages/button/src/ButtonBase.dev.js","webpack://@adobe/spectrum-web-components/./packages/picker-button/src/PickerButton.dev.js","webpack://@adobe/spectrum-web-components/./packages/picker-button/stories/index.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { LikeAnchor } from \"@spectrum-web-components/shared/src/like-anchor.js\";\nimport { Focusable } from \"@spectrum-web-components/shared/src/focusable.js\";\nimport { ObserveSlotText } from \"@spectrum-web-components/shared/src/observe-slot-text.js\";\nimport buttonStyles from \"./button-base.css.js\";\nexport class ButtonBase extends ObserveSlotText(LikeAnchor(Focusable), \"\", [\n  \"sp-overlay,sp-tooltip\"\n]) {\n  constructor() {\n    super();\n    this.active = false;\n    this.type = \"button\";\n    this.proxyFocus = this.proxyFocus.bind(this);\n    this.addEventListener(\"click\", this.handleClickCapture, {\n      capture: true\n    });\n  }\n  static get styles() {\n    return [buttonStyles];\n  }\n  get focusElement() {\n    return this;\n  }\n  get hasLabel() {\n    return this.slotHasContent;\n  }\n  get buttonContent() {\n    const content = [\n      html`\n                <slot name=\"icon\" ?icon-only=${!this.hasLabel}></slot>\n            `,\n      html`\n                <span id=\"label\">\n                    <slot @slotchange=${this.manageTextObservedSlot}></slot>\n                </span>\n            `\n    ];\n    return content;\n  }\n  handleClickCapture(event) {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      return false;\n    }\n    if (this.shouldProxyClick(event)) {\n      return;\n    }\n  }\n  proxyFocus() {\n    this.focus();\n  }\n  shouldProxyClick(event) {\n    let handled = false;\n    if (event && (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey)) {\n      return false;\n    }\n    if (this.anchorElement) {\n      this.anchorElement.click();\n      handled = true;\n    } else if (this.type !== \"button\") {\n      const proxy = document.createElement(\"button\");\n      proxy.type = this.type;\n      this.insertAdjacentElement(\"afterend\", proxy);\n      proxy.click();\n      proxy.remove();\n      handled = true;\n    }\n    return handled;\n  }\n  renderAnchor() {\n    return html`\n            ${this.buttonContent}\n            ${super.renderAnchor({\n      id: \"button\",\n      ariaHidden: true,\n      className: \"button anchor\",\n      tabindex: -1\n    })}\n        `;\n  }\n  renderButton() {\n    return html`\n            ${this.buttonContent}\n        `;\n  }\n  render() {\n    return this.href && this.href.length > 0 ? this.renderAnchor() : this.renderButton();\n  }\n  handleKeydown(event) {\n    const { code } = event;\n    switch (code) {\n      case \"Space\":\n        event.preventDefault();\n        if (typeof this.href === \"undefined\") {\n          this.addEventListener(\"keyup\", this.handleKeyup);\n          this.active = true;\n        }\n        break;\n      default:\n        break;\n    }\n  }\n  handleKeypress(event) {\n    const { code } = event;\n    switch (code) {\n      case \"Enter\":\n      case \"NumpadEnter\":\n        this.click();\n        break;\n      default:\n        break;\n    }\n  }\n  handleKeyup(event) {\n    const { code } = event;\n    switch (code) {\n      case \"Space\":\n        this.removeEventListener(\"keyup\", this.handleKeyup);\n        this.active = false;\n        this.click();\n        break;\n      default:\n        break;\n    }\n  }\n  manageAnchor() {\n    if (this.href && this.href.length > 0) {\n      if (!this.hasAttribute(\"role\") || this.getAttribute(\"role\") === \"button\") {\n        this.setAttribute(\"role\", \"link\");\n      }\n    } else {\n      if (!this.hasAttribute(\"role\") || this.getAttribute(\"role\") === \"link\") {\n        this.setAttribute(\"role\", \"button\");\n      }\n    }\n  }\n  firstUpdated(changed) {\n    super.firstUpdated(changed);\n    if (!this.hasAttribute(\"tabindex\")) {\n      this.setAttribute(\"tabindex\", \"0\");\n    }\n    this.manageAnchor();\n    this.addEventListener(\"keydown\", this.handleKeydown);\n    this.addEventListener(\"keypress\", this.handleKeypress);\n  }\n  updated(changed) {\n    super.updated(changed);\n    if (changed.has(\"href\")) {\n      this.manageAnchor();\n    }\n    if (changed.has(\"label\")) {\n      if (this.label) {\n        this.setAttribute(\"aria-label\", this.label);\n      } else {\n        this.removeAttribute(\"aria-label\");\n      }\n    }\n    if (this.anchorElement) {\n      this.anchorElement.tabIndex = -1;\n      if (!this.anchorElement.hasAttribute(\"aria-hidden\")) {\n        this.anchorElement.setAttribute(\"aria-hidden\", \"true\");\n      }\n      this.anchorElement.addEventListener(\"focus\", this.proxyFocus);\n    }\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], ButtonBase.prototype, \"active\", 2);\n__decorateClass([\n  property({ type: String })\n], ButtonBase.prototype, \"type\", 2);\n__decorateClass([\n  query(\".anchor\")\n], ButtonBase.prototype, \"anchorElement\", 2);\n//# sourceMappingURL=ButtonBase.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SizedMixin\n} from \"@spectrum-web-components/base\";\nimport { classMap } from \"@spectrum-web-components/base/src/directives.js\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport { ButtonBase } from \"@spectrum-web-components/button/src/ButtonBase.js\";\nimport \"@spectrum-web-components/icons-ui/icons/sp-icon-chevron100.js\";\nimport { ObserveSlotPresence } from \"@spectrum-web-components/shared/src/observe-slot-presence.js\";\nimport styles from \"./picker-button.css.js\";\nimport chevronStyles from \"@spectrum-web-components/icon/src/spectrum-icon-chevron.css.js\";\nconst chevronClass = {\n  s: \"spectrum-UIIcon-ChevronDown75\",\n  m: \"spectrum-UIIcon-ChevronDown100\",\n  l: \"spectrum-UIIcon-ChevronDown200\",\n  xl: \"spectrum-UIIcon-ChevronDown300\"\n};\nexport class PickerButton extends SizedMixin(\n  ObserveSlotPresence(ButtonBase, '[slot=\"label\"]')\n) {\n  constructor() {\n    super(...arguments);\n    this.invalid = false;\n    this.position = \"right\";\n  }\n  static get styles() {\n    return [styles, chevronStyles];\n  }\n  get hasText() {\n    return this.slotContentIsPresent;\n  }\n  render() {\n    const rootClasses = {\n      root: true,\n      uiicononly: !this.hasText,\n      textuiicon: this.hasText\n    };\n    return html`\n            <div class=${classMap(rootClasses)}>\n                <div class=\"spectrum-PickerButton-fill\">\n                    <span\n                        class=\"spectrum-PickerButton-label is-placeholder\"\n                        ?hidden=${!this.hasText}\n                    >\n                        <slot name=\"label\"></slot>\n                    </span>\n                    <slot name=\"icon\">\n                        <sp-icon-chevron100\n                            class=\"spectrum-PickerButton-icon spectrum-Icon ${chevronClass[this.size]}\"\n                        ></sp-icon-chevron100>\n                    </slot>\n                </div>\n            </div>\n        `;\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], PickerButton.prototype, \"invalid\", 2);\n__decorateClass([\n  property({ reflect: true })\n], PickerButton.prototype, \"position\", 2);\n//# sourceMappingURL=PickerButton.dev.js.map\n","\"use strict\";\nimport { html, nothing } from \"@spectrum-web-components/base\";\nimport {\n  ifDefined,\n  unsafeHTML\n} from \"@spectrum-web-components/base/src/directives.js\";\nexport const Template = ({\n  active,\n  icon,\n  invalid,\n  label,\n  open,\n  position,\n  quiet,\n  rounded,\n  size\n}) => {\n  return html`\n        <sp-picker-button\n            ?active=${active}\n            ?invalid=${invalid}\n            ?open=${open}\n            position=${ifDefined(position)}\n            ?quiet=${quiet}\n            ?rounded=${rounded}\n            size=${size}\n        >\n            ${icon ? unsafeHTML(icon) : nothing}\n            ${label ? html`\n                      <span slot=\"label\">\n                          ${typeof label === \"string\" ? label : \"All\"}\n                      </span>\n                  ` : nothing}\n        </sp-picker-button>\n    `;\n};\nexport const argTypes = {\n  argTypes: {\n    open: {\n      control: {\n        type: \"boolean\"\n      }\n    },\n    position: {\n      control: {\n        type: \"inline-radio\",\n        options: [\"right\", \"left\"]\n      }\n    },\n    quiet: {\n      control: {\n        type: \"boolean\"\n      }\n    },\n    size: {\n      control: {\n        type: \"inline-radio\",\n        options: [\"s\", \"m\", \"l\", \"xl\"]\n      }\n    }\n  }\n};\n//# sourceMappingURL=index.js.map\n"],"names":[],"sourceRoot":""}