{"version":3,"file":"5322.78bbc109.iframe.bundle.js","mappings":";;AACA;;;;;;;AA6BA;;;;;;;AAQA;;;;;;;AAQA;;;;;;;AASA;;AAwCA;;;AAGA;AACA;;AAEA;;AAEA;;;;;;AAOA;;AC7GA;;AA6EA;AACA;;AAGA","sources":["webpack://@adobe/spectrum-web-components/./packages/accordion/src/AccordionItem.dev.js","webpack://@adobe/spectrum-web-components/./packages/accordion/src/Accordion.dev.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SizedMixin\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport { Focusable } from \"@spectrum-web-components/shared/src/focusable.js\";\nimport { when } from \"@spectrum-web-components/base/src/directives.js\";\nimport \"@spectrum-web-components/icons-ui/icons/sp-icon-chevron100.js\";\nimport chevronIconStyles from \"@spectrum-web-components/icon/src/spectrum-icon-chevron.css.js\";\nimport styles from \"./accordion-item.css.js\";\nconst chevronIcon = {\n  s: () => html`\n        <span class=\"iconContainer\">\n            <sp-icon-chevron100\n                class=\"indicator spectrum-UIIcon-ChevronRight75\"\n                slot=\"icon\"\n            ></sp-icon-chevron100>\n        </span>\n    `,\n  m: () => html`\n        <span class=\"iconContainer\">\n            <sp-icon-chevron100\n                class=\"indicator spectrum-UIIcon-ChevronRight100\"\n                slot=\"icon\"\n            ></sp-icon-chevron100>\n        </span>\n    `,\n  l: () => html`\n        <span class=\"iconContainer\">\n            <sp-icon-chevron100\n                class=\"indicator spectrum-UIIcon-ChevronRight200\"\n                slot=\"icon\"\n            ></sp-icon-chevron100>\n        </span>\n    `,\n  xl: () => html`\n        <span class=\"iconContainer\">\n            <sp-icon-chevron100\n                class=\"indicator spectrum-UIIcon-ChevronRight300\"\n                slot=\"icon\"\n            ></sp-icon-chevron100>\n        </span>\n    `\n};\nexport class AccordionItem extends SizedMixin(Focusable, {\n  noDefaultSize: true\n}) {\n  constructor() {\n    super(...arguments);\n    this.open = false;\n    this.label = \"\";\n    this.disabled = false;\n    this.renderChevronIcon = () => {\n      return chevronIcon[this.size || \"m\"]();\n    };\n  }\n  static get styles() {\n    return [styles, chevronIconStyles];\n  }\n  get focusElement() {\n    return this.shadowRoot.querySelector(\"#header\");\n  }\n  onClick() {\n    if (this.disabled) {\n      return;\n    }\n    this.toggle();\n  }\n  toggle() {\n    this.open = !this.open;\n    const applyDefault = this.dispatchEvent(\n      new CustomEvent(\"sp-accordion-item-toggle\", {\n        bubbles: true,\n        composed: true,\n        cancelable: true\n      })\n    );\n    if (!applyDefault) {\n      this.open = !this.open;\n    }\n  }\n  render() {\n    return html`\n            <h3 id=\"heading\">\n                ${when(this.size, this.renderChevronIcon)}\n                <button\n                    id=\"header\"\n                    @click=${this.onClick}\n                    aria-expanded=${this.open}\n                    aria-controls=\"content\"\n                    ?disabled=${this.disabled}\n                >\n                    ${this.label}\n                </button>\n            </h3>\n            <div id=\"content\" role=\"region\" aria-labelledby=\"header\">\n                <slot></slot>\n            </div>\n        `;\n  }\n  updated(changes) {\n    super.updated(changes);\n    if (changes.has(\"disabled\")) {\n      if (this.disabled) {\n        this.setAttribute(\"aria-disabled\", \"true\");\n      } else {\n        this.removeAttribute(\"aria-disabled\");\n      }\n    }\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], AccordionItem.prototype, \"open\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], AccordionItem.prototype, \"label\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], AccordionItem.prototype, \"disabled\", 2);\n//# sourceMappingURL=AccordionItem.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SizedMixin,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  queryAssignedNodes\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { FocusGroupController } from \"@spectrum-web-components/reactive-controllers/src/FocusGroup.js\";\nimport styles from \"./accordion.css.js\";\nexport class Accordion extends SizedMixin(SpectrumElement, {\n  noDefaultSize: true\n}) {\n  constructor() {\n    super(...arguments);\n    this.allowMultiple = false;\n    this.focusGroupController = new FocusGroupController(this, {\n      direction: \"vertical\",\n      elements: () => this.items,\n      isFocusableElement: (el) => !el.disabled\n    });\n  }\n  static get styles() {\n    return [styles];\n  }\n  get items() {\n    return [...this.defaultNodes || []].filter(\n      (node) => typeof node.tagName !== \"undefined\"\n    );\n  }\n  focus() {\n    this.focusGroupController.focus();\n  }\n  async onToggle(event) {\n    const target = event.target;\n    await 0;\n    if (this.allowMultiple || event.defaultPrevented) {\n      return;\n    }\n    const items = [...this.items];\n    if (items && !items.length) {\n      return;\n    }\n    items.forEach((item) => {\n      if (item !== target) {\n        item.open = false;\n      }\n    });\n  }\n  handleSlotchange() {\n    this.focusGroupController.clearElementCache();\n    this.items.forEach((item) => {\n      item.size = this.size;\n    });\n  }\n  updated(changed) {\n    super.updated(changed);\n    if (changed.has(\"size\") && (!!changed.get(\"size\") || this.size !== \"m\")) {\n      this.items.forEach((item) => {\n        item.size = this.size;\n      });\n    }\n  }\n  render() {\n    return html`\n            <slot\n                @slotchange=${this.handleSlotchange}\n                @sp-accordion-item-toggle=${this.onToggle}\n            ></slot>\n        `;\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true, attribute: \"allow-multiple\" })\n], Accordion.prototype, \"allowMultiple\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], Accordion.prototype, \"density\", 2);\n__decorateClass([\n  queryAssignedNodes()\n], Accordion.prototype, \"defaultNodes\", 2);\n//# sourceMappingURL=Accordion.dev.js.map\n"],"names":[],"sourceRoot":""}