{"version":3,"file":"number-field-stories-number-field-sizes-stories.b3d2d24b.iframe.bundle.js","mappings":";;AACA;AA6CA;AAEA;;AAEA;;AAKA;AAmCA;AACA;AAOA;AAGA;AAEA;AC1FA;;;;;AAKA;;;AAKA","sources":["webpack://@adobe/spectrum-web-components/./packages/button/src/ButtonBase.dev.js","webpack://@adobe/spectrum-web-components/./packages/number-field/stories/number-field-sizes.stories.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { LikeAnchor } from \"@spectrum-web-components/shared/src/like-anchor.js\";\nimport { Focusable } from \"@spectrum-web-components/shared/src/focusable.js\";\nimport { ObserveSlotText } from \"@spectrum-web-components/shared/src/observe-slot-text.js\";\nimport buttonStyles from \"./button-base.css.js\";\nexport class ButtonBase extends ObserveSlotText(LikeAnchor(Focusable), \"\", [\n  \"sp-overlay,sp-tooltip\"\n]) {\n  constructor() {\n    super();\n    this.active = false;\n    this.type = \"button\";\n    this.proxyFocus = this.proxyFocus.bind(this);\n    this.addEventListener(\"click\", this.handleClickCapture, {\n      capture: true\n    });\n  }\n  static get styles() {\n    return [buttonStyles];\n  }\n  get focusElement() {\n    return this;\n  }\n  get hasLabel() {\n    return this.slotHasContent;\n  }\n  get buttonContent() {\n    const content = [\n      html`\n                <slot name=\"icon\" ?icon-only=${!this.hasLabel}></slot>\n            `,\n      html`\n                <span id=\"label\">\n                    <slot @slotchange=${this.manageTextObservedSlot}></slot>\n                </span>\n            `\n    ];\n    return content;\n  }\n  handleClickCapture(event) {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      return false;\n    }\n    if (this.shouldProxyClick(event)) {\n      return;\n    }\n  }\n  proxyFocus() {\n    this.focus();\n  }\n  shouldProxyClick(event) {\n    let handled = false;\n    if (event && (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey)) {\n      return false;\n    }\n    if (this.anchorElement) {\n      this.anchorElement.click();\n      handled = true;\n    } else if (this.type !== \"button\") {\n      const proxy = document.createElement(\"button\");\n      proxy.type = this.type;\n      this.insertAdjacentElement(\"afterend\", proxy);\n      proxy.click();\n      proxy.remove();\n      handled = true;\n    }\n    return handled;\n  }\n  renderAnchor() {\n    return html`\n            ${this.buttonContent}\n            ${super.renderAnchor({\n      id: \"button\",\n      ariaHidden: true,\n      className: \"button anchor\",\n      tabindex: -1\n    })}\n        `;\n  }\n  renderButton() {\n    return html`\n            ${this.buttonContent}\n        `;\n  }\n  render() {\n    return this.href && this.href.length > 0 ? this.renderAnchor() : this.renderButton();\n  }\n  handleKeydown(event) {\n    const { code } = event;\n    switch (code) {\n      case \"Space\":\n        event.preventDefault();\n        if (typeof this.href === \"undefined\") {\n          this.addEventListener(\"keyup\", this.handleKeyup);\n          this.active = true;\n        }\n        break;\n      default:\n        break;\n    }\n  }\n  handleKeypress(event) {\n    const { code } = event;\n    switch (code) {\n      case \"Enter\":\n      case \"NumpadEnter\":\n        this.click();\n        break;\n      default:\n        break;\n    }\n  }\n  handleKeyup(event) {\n    const { code } = event;\n    switch (code) {\n      case \"Space\":\n        this.removeEventListener(\"keyup\", this.handleKeyup);\n        this.active = false;\n        this.click();\n        break;\n      default:\n        break;\n    }\n  }\n  manageAnchor() {\n    if (this.href && this.href.length > 0) {\n      if (!this.hasAttribute(\"role\") || this.getAttribute(\"role\") === \"button\") {\n        this.setAttribute(\"role\", \"link\");\n      }\n    } else {\n      if (!this.hasAttribute(\"role\") || this.getAttribute(\"role\") === \"link\") {\n        this.setAttribute(\"role\", \"button\");\n      }\n    }\n  }\n  firstUpdated(changed) {\n    super.firstUpdated(changed);\n    if (!this.hasAttribute(\"tabindex\")) {\n      this.setAttribute(\"tabindex\", \"0\");\n    }\n    this.manageAnchor();\n    this.addEventListener(\"keydown\", this.handleKeydown);\n    this.addEventListener(\"keypress\", this.handleKeypress);\n  }\n  updated(changed) {\n    super.updated(changed);\n    if (changed.has(\"href\")) {\n      this.manageAnchor();\n    }\n    if (changed.has(\"label\")) {\n      if (this.label) {\n        this.setAttribute(\"aria-label\", this.label);\n      } else {\n        this.removeAttribute(\"aria-label\");\n      }\n    }\n    if (this.anchorElement) {\n      this.anchorElement.tabIndex = -1;\n      if (!this.anchorElement.hasAttribute(\"aria-hidden\")) {\n        this.anchorElement.setAttribute(\"aria-hidden\", \"true\");\n      }\n      this.anchorElement.addEventListener(\"focus\", this.proxyFocus);\n    }\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], ButtonBase.prototype, \"active\", 2);\n__decorateClass([\n  property({ type: String })\n], ButtonBase.prototype, \"type\", 2);\n__decorateClass([\n  query(\".anchor\")\n], ButtonBase.prototype, \"anchorElement\", 2);\n//# sourceMappingURL=ButtonBase.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/number-field/sp-number-field.js\";\nimport \"@spectrum-web-components/field-label/sp-field-label.js\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nexport default {\n  component: \"sp-number-field\",\n  title: \"Number Field/Sizes\"\n};\nconst template = ({\n  size\n} = {}) => {\n  return html`\n        <sp-field-label for=\"name\" size=${ifDefined(size)}>\n            Pick a number\n        </sp-field-label>\n        <sp-number-field\n            id=\"name\"\n            size=${ifDefined(size)}\n            value=\"100\"\n        ></sp-number-field>\n    `;\n};\nexport const s = () => template({ size: \"s\" });\nexport const noSize = () => template();\nexport const m = () => template({ size: \"m\" });\nexport const l = () => template({ size: \"l\" });\nexport const XL = () => template({ size: \"xl\" });\n//# sourceMappingURL=number-field-sizes.stories.js.map\n;export const __namedExportsOrder = [\"s\",\"noSize\",\"m\",\"l\",\"XL\"];"],"names":[],"sourceRoot":""}