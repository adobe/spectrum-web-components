{"version":3,"file":"field-group-stories-field-group-stories.6c9550ce.iframe.bundle.js","mappings":";;;;;;;;AAoBA;;;;;;;;AAYA;;ACRA;;;;AAIA;AACA;;;;;AAMA","sources":["webpack://@adobe/spectrum-web-components/./packages/field-group/stories/field-group.stories.js","webpack://@adobe/spectrum-web-components/./packages/help-text/src/HelpTextManager.dev.js"],"sourcesContent":["\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/field-group/sp-field-group.js\";\nimport \"@spectrum-web-components/checkbox/sp-checkbox.js\";\nimport \"@spectrum-web-components/radio/sp-radio.js\";\nexport default {\n  title: \"Field Group\",\n  component: \"sp-field-group\"\n};\nexport const horizontal = () => {\n  return html`\n        <sp-field-group horizontal>\n            <sp-checkbox>Checkbox 1</sp-checkbox>\n            <sp-checkbox>Checkbox 2</sp-checkbox>\n            <sp-checkbox>Checkbox 3</sp-checkbox>\n            <sp-checkbox>Checkbox 4</sp-checkbox>\n            <sp-checkbox>Checkbox 5</sp-checkbox>\n        </sp-field-group>\n    `;\n};\nexport const vertical = () => {\n  return html`\n        <sp-field-group vertical>\n            <sp-checkbox>Checkbox 1</sp-checkbox>\n            <sp-checkbox>Checkbox 2</sp-checkbox>\n            <sp-checkbox>Checkbox 3</sp-checkbox>\n            <sp-checkbox>Checkbox 4</sp-checkbox>\n            <sp-checkbox>Checkbox 5</sp-checkbox>\n        </sp-field-group>\n    `;\n};\n//# sourceMappingURL=field-group.stories.js.map\n;export const __namedExportsOrder = [\"horizontal\",\"vertical\"];","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport { conditionAttributeWithId } from \"@spectrum-web-components/base/src/condition-attribute-with-id.js\";\nimport { randomID } from \"@spectrum-web-components/shared/src/random-id.js\";\nexport class HelpTextManager {\n  constructor(host, { mode } = { mode: \"internal\" }) {\n    this.mode = \"internal\";\n    this.handleSlotchange = ({\n      target\n    }) => {\n      this.handleHelpText(target);\n      this.handleNegativeHelpText(target);\n    };\n    this.host = host;\n    this.id = `sp-help-text-${randomID()}`;\n    this.mode = mode;\n  }\n  get isInternal() {\n    return this.mode === \"internal\";\n  }\n  render(negative) {\n    return html`\n            <div\n                id=${ifDefined(this.isInternal ? this.id : void 0)}\n                aria-live=\"assertive\"\n            >\n                <slot\n                    name=${negative ? \"negative-help-text\" : `pass-through-help-text-${randomID()}`}\n                    @slotchange=${this.handleSlotchange}\n                >\n                    <slot name=\"help-text\"></slot>\n                </slot>\n            </div>\n        `;\n  }\n  addId() {\n    const id = this.helpTextElement ? this.helpTextElement.id : this.id;\n    this.conditionId = conditionAttributeWithId(\n      this.host,\n      \"aria-describedby\",\n      id\n    );\n    if (this.host.hasAttribute(\"tabindex\")) {\n      this.previousTabindex = parseFloat(\n        this.host.getAttribute(\"tabindex\")\n      );\n    }\n    this.host.tabIndex = 0;\n  }\n  removeId() {\n    if (this.conditionId) {\n      this.conditionId();\n      delete this.conditionId;\n    }\n    if (this.helpTextElement) return;\n    if (this.previousTabindex) {\n      this.host.tabIndex = this.previousTabindex;\n    } else {\n      this.host.removeAttribute(\"tabindex\");\n    }\n  }\n  handleHelpText(target) {\n    if (this.isInternal) return;\n    if (this.helpTextElement && this.helpTextElement.id === this.id) {\n      this.helpTextElement.removeAttribute(\"id\");\n    }\n    this.removeId();\n    const assignedElements = target.assignedElements();\n    const nextHelpTextElement = assignedElements[0];\n    this.helpTextElement = nextHelpTextElement;\n    if (nextHelpTextElement) {\n      if (!nextHelpTextElement.id) {\n        nextHelpTextElement.id = this.id;\n      }\n      this.addId();\n    }\n  }\n  handleNegativeHelpText(target) {\n    if (target.name !== \"negative-help-text\") return;\n    const assignedElements = target.assignedElements();\n    assignedElements.forEach(\n      (el) => el.variant = \"negative\"\n    );\n  }\n}\n//# sourceMappingURL=HelpTextManager.dev.js.map\n"],"names":[],"sourceRoot":""}