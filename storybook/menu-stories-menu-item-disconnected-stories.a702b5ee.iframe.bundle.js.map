{"version":3,"file":"menu-stories-menu-item-disconnected-stories.a702b5ee.iframe.bundle.js","mappings":";;AAoCA;;AAIA;;;;;;AAQA;;;;;AAMA;;;AA4BA;AApBA;;;AAyBA;;;AAyBA;AApBA;;AAwBA;AAWA;AAQA;AACA;AACA;;;AAKA;;;;;AAOA;;AAEA;;AAGA;;AAgBA","sources":["webpack://@adobe/spectrum-web-components/./packages/menu/stories/menu-item.disconnected.stories.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport { html, LitElement } from \"lit\";\nimport { property, state } from \"lit/decorators.js\";\nimport { repeat } from \"lit/directives/repeat.js\";\nimport { when } from \"lit/directives/when.js\";\nimport \"@spectrum-web-components/picker/sp-picker.js\";\nimport \"@spectrum-web-components/button/sp-button.js\";\nimport { SpectrumMixin } from \"@spectrum-web-components/base\";\nvar BlendModeValue = /* @__PURE__ */ ((BlendModeValue2) => {\n  BlendModeValue2[BlendModeValue2[\"normal\"] = 2] = \"normal\";\n  BlendModeValue2[BlendModeValue2[\"multiply\"] = 3] = \"multiply\";\n  BlendModeValue2[BlendModeValue2[\"screen\"] = 7] = \"screen\";\n  return BlendModeValue2;\n})(BlendModeValue || {});\nconst XElement = SpectrumMixin(LitElement);\nclass MyContainer extends XElement {\n  constructor() {\n    super(...arguments);\n    this._counter = 0;\n  }\n  _handleClick() {\n    this._counter += 1;\n  }\n  render() {\n    return html`\n            <div>\n                ${when(\n      this._counter % 2 === 0,\n      () => html`\n                        <my-view1></my-view1>\n                    `,\n      () => html`\n                        <my-view2></my-view2>\n                    `\n    )}\n                <sp-button\n                    variant=\"primary\"\n                    size=\"m\"\n                    @click=${this._handleClick}\n                >\n                    Switch views\n                </sp-button>\n            </div>\n        `;\n  }\n}\n__decorateClass([\n  state()\n], MyContainer.prototype, \"_counter\", 2);\ncustomElements.define(\"my-container\", MyContainer);\nclass MyView1 extends XElement {\n  render() {\n    const blendModeOptions = [\n      {\n        value: 2 /* normal */,\n        title: \"Normal 1\",\n        subtitle: \"No effect applied\"\n      },\n      {\n        value: 3 /* multiply */,\n        title: \"Multiply\",\n        subtitle: \"Darken shadows with contrast and details\"\n      },\n      {\n        value: 7 /* screen */,\n        title: \"Screen\",\n        subtitle: \"Brighten highlights with contrast and details\"\n      }\n    ];\n    return html`\n            View 1\n            <my-picker\n                .blendMode=${2 /* normal */}\n                .blendModeOptions=${blendModeOptions}\n                dir=\"ltr\"\n            ></my-picker>\n        `;\n  }\n}\ncustomElements.define(\"my-view1\", MyView1);\nclass MyView2 extends XElement {\n  render() {\n    const blendModeOptions = [\n      {\n        value: 2 /* normal */,\n        title: \"Normal 2\",\n        subtitle: \"No effect applied\"\n      },\n      {\n        value: 3 /* multiply */,\n        title: \"Multiply\",\n        subtitle: \"Darken shadows with contrast and details\"\n      },\n      {\n        value: 7 /* screen */,\n        title: \"Screen\",\n        subtitle: \"Brighten highlights with contrast and details\"\n      }\n    ];\n    return html`\n            View 2\n            <my-picker\n                .blendMode=${2 /* normal */}\n                .blendModeOptions=${blendModeOptions}\n            ></my-picker>\n        `;\n  }\n}\ncustomElements.define(\"my-view2\", MyView2);\nclass MyPicker extends XElement {\n  constructor() {\n    super(...arguments);\n    this.blendModeOptions = [];\n    this.blendMode = 2 /* normal */;\n  }\n  _renderBlendOptions() {\n    return html`\n            ${repeat(\n      this.blendModeOptions,\n      // This is intentional so that repeat directive will add instead of\n      // update existing DOM which will then trigger error in\n      // MenuItem.childrenItem\n      // Using .value for the key will workaround the issue\n      (blendModeOption) => blendModeOption,\n      (blendModeOption) => html`\n                    <sp-menu-item value=${blendModeOption.value}>\n                        ${blendModeOption.title}\n                        <span slot=\"value\">${blendModeOption.subtitle}</span>\n                    </sp-menu-item>\n                `\n    )}\n        `;\n  }\n  render() {\n    return html`\n            <sp-picker\n                id=\"blendMode\"\n                size=\"l\"\n                label=\"Blend\"\n                value=${this.blendMode}\n            >\n                ${this._renderBlendOptions()}\n            </sp-picker>\n        `;\n  }\n}\n__decorateClass([\n  property({ type: Array })\n], MyPicker.prototype, \"blendModeOptions\", 2);\n__decorateClass([\n  property()\n], MyPicker.prototype, \"blendMode\", 2);\ncustomElements.define(\"my-picker\", MyPicker);\nexport default {\n  component: \"sp-menu-item\",\n  title: \"Menu Item/Disconnected\"\n};\nexport const disconnectedChildItems = () => html`\n    <my-container></my-container>\n`;\ndisconnectedChildItems.swc_vrt = {\n  skip: true\n};\ndisconnectedChildItems.parameters = {\n  // Disables Chromatic's snapshotting on a global level\n  chromatic: { disableSnapshot: true }\n};\n//# sourceMappingURL=menu-item.disconnected.stories.js.map\n;export const __namedExportsOrder = [\"disconnectedChildItems\"];"],"names":[],"sourceRoot":""}