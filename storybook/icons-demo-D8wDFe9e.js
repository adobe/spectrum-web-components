import './sp-search-COwKjwLj.js';
import './sp-field-label-fJh5myzn.js';
import { b as bodyStyles } from './body-B9qMrH_g.js';
import './sp-icon-DqRHAie2.js';
import './sp-help-text-C8MBVPAk.js';
import { S as SystemResolutionController, s as systemResolverUpdatedSymbol } from './IconBase-luFyVpTn.js';
import { r } from './state-a9qXQZw8.js';
import { t } from './custom-element-Drg7uMpU.js';
import { n, S as SpectrumElement } from './define-element-Bun2ZgR-.js';
import { x } from './lit-html-COgVUehj.js';
import { i } from './lit-element-BulMEkr1.js';
import { o } from './if-defined-DDJGFaN4.js';

var s1 = [
	"123",
	"3dmaterials",
	"abc",
	"aemscreens",
	"actions",
	"displayadvert",
	"printadvert",
	"add",
	"addcircle",
	"addto",
	"addtoselection",
	"airplane",
	"alert",
	"alertadd",
	"alertcheck",
	"alertcircle",
	"alertcirclefilled",
	"algorithm",
	"alias",
	"alignbottom",
	"aligncenter",
	"alignleft",
	"alignmiddle",
	"alignright",
	"aligntop",
	"amusementpark",
	"anchor",
	"anchorselect",
	"annotate",
	"annotatepen",
	"answer",
	"answerfavorite",
	"app",
	"apprefresh",
	"applefiles",
	"applicationdelivery",
	"approvereject",
	"apps",
	"archive",
	"archiveremove",
	"arrowdown",
	"arrowleft",
	"arrowright",
	"arrowup",
	"arrowupright",
	"artboard",
	"article",
	"asset",
	"assetcheck",
	"assetsadded",
	"assetsdownloaded",
	"assetsexpired",
	"assetslinkedpublished",
	"assetsmodified",
	"assetspublished",
	"asterisk",
	"at",
	"attach",
	"attachmentexclude",
	"attributes",
	"audio",
	"automatedsegment",
	"back",
	"back30seconds",
	"backandroid",
	"beaker",
	"beakercheck",
	"beakershare",
	"bell",
	"bidrule",
	"bidruleadd",
	"blower",
	"blur",
	"book",
	"bookmark",
	"bookmarksingle",
	"bookmarksingleoutline",
	"bookmarksmall",
	"bookmarksmalloutline",
	"boolean",
	"border",
	"box",
	"boxadd",
	"boxexport",
	"boximport",
	"brackets",
	"bracketssquare",
	"branch1",
	"branch2",
	"branch3",
	"branchcircle",
	"breadcrumbnavigation",
	"breakdown",
	"breakdownadd",
	"briefcase",
	"browse",
	"brush",
	"bug",
	"building",
	"bulkeditusers",
	"button",
	"cclibrary",
	"calculator",
	"calendar",
	"calendaradd",
	"calendarlocked",
	"calendarunlocked",
	"callcenter",
	"camera",
	"cameraflip",
	"camerarefresh",
	"campaign",
	"campaignadd",
	"campaignclose",
	"campaigndelete",
	"campaignedit",
	"cancel",
	"capitals",
	"captcha",
	"car",
	"card",
	"channel",
	"chat",
	"chatadd",
	"checkpause",
	"checkmark",
	"checkmarkcircle",
	"checkmarkcircleoutline",
	"chevrondoubleleft",
	"chevrondoubleright",
	"chevrondown",
	"chevronleft",
	"chevronright",
	"chevronup",
	"chevronupdown",
	"circle",
	"circlefilled",
	"classicgridview",
	"clock",
	"clockcheck",
	"clonestamp",
	"close",
	"closecaptions",
	"closecircle",
	"cloud",
	"clouddisconnected",
	"clouderror",
	"cloudoutline",
	"code",
	"collection",
	"collectionadd",
	"collectionaddto",
	"collectioncheck",
	"collectionedit",
	"collectionexclude",
	"collectionlink",
	"colorfill",
	"colorpalette",
	"colorwheel",
	"columnsettings",
	"columntwoa",
	"columntwob",
	"columntwoc",
	"comment",
	"compare",
	"compass",
	"condition",
	"confidencefour",
	"confidenceone",
	"confidencethree",
	"confidencetwo",
	"contrast",
	"conversionfunnel",
	"copy",
	"coverimage",
	"creditcard",
	"crop",
	"croplightning",
	"croprotate",
	"crosshairs",
	"curate",
	"cut",
	"dashboard",
	"data",
	"dataadd",
	"databook",
	"datacheck",
	"datacorrelated",
	"datadownload",
	"dataedit",
	"datamapping",
	"datarefresh",
	"dataremove",
	"datasettings",
	"dataunavailable",
	"dataupload",
	"datauser",
	"date",
	"dateinput",
	"deduplication",
	"delegate",
	"delete",
	"deleteoutline",
	"demographic",
	"deselect",
	"deselectcircular",
	"desktopandmobile",
	"devicedesktop",
	"devicelaptop",
	"devicephone",
	"devicephonerefresh",
	"devicepreview",
	"devicerotatelandscape",
	"devicerotateportrait",
	"devicetv",
	"devicetablet",
	"devices",
	"distributebottomedge",
	"distributehorizontalcenter",
	"distributehorizontally",
	"distributeleftedge",
	"distributerightedge",
	"distributespacehoriz",
	"distributespacevert",
	"distributetopedge",
	"distributeverticalcenter",
	"distributevertically",
	"divide",
	"dividepath",
	"document",
	"documentfragment",
	"documentfragmentgroup",
	"documentoutline",
	"documentrefresh",
	"dolly",
	"download",
	"downloadfromcloud",
	"downloadfromcloudoutline",
	"draft",
	"draghandle",
	"draw",
	"dropdown",
	"duplicate",
	"edit",
	"editcircle",
	"editexclude",
	"editin",
	"editinlight",
	"education",
	"effects",
	"efficient",
	"ellipse",
	"email",
	"emailcancel",
	"emailcheck",
	"emailexclude",
	"emailexcludeoutline",
	"emailgear",
	"emailgearoutline",
	"emailkey",
	"emailkeyoutline",
	"emaillightning",
	"emailnotification",
	"emailoutline",
	"emailrefresh",
	"emailschedule",
	"engagement",
	"erase",
	"event",
	"eventexclude",
	"eventshare",
	"events",
	"excludeoverlap",
	"experience",
	"experienceadd",
	"experienceaddto",
	"experienceexport",
	"experienceimport",
	"export",
	"exportoriginal",
	"exposure",
	"extension",
	"facebookcoverimage",
	"fast",
	"fastforward",
	"fastforwardcircle",
	"feature",
	"feed",
	"feedadd",
	"feedmanagement",
	"feedback",
	"fileadd",
	"filecsv",
	"filecampaign",
	"filechart",
	"filecheckedout",
	"filecode",
	"filedata",
	"fileemail",
	"fileexcel",
	"filefolder",
	"filegear",
	"fileglobe",
	"filehtml",
	"fileimportant",
	"filejson",
	"filekey",
	"filemobile",
	"filepdf",
	"fileshare",
	"filesinglewebpage",
	"filespace",
	"filetemplate",
	"filetxt",
	"fileuser",
	"fileword",
	"fileworkflow",
	"filexml",
	"filezip",
	"filingcabinet",
	"filmroll",
	"filmrollautoadd",
	"filter",
	"filteradd",
	"filtercheck",
	"filterdelete",
	"filteredit",
	"filterheart",
	"filterremove",
	"filterstar",
	"findandreplace",
	"flag",
	"flagexclude",
	"flashauto",
	"flashoff",
	"flashon",
	"flashlight",
	"flashlightoff",
	"flashlighton",
	"fliphorizontal",
	"flipvertical",
	"folder",
	"folder2color",
	"folderadd",
	"folderaddto",
	"folderarchive",
	"folderdelete",
	"foldergear",
	"folderlocked",
	"folderopen",
	"folderopenoutline",
	"folderoutline",
	"folderremove",
	"foldersearch",
	"folderuser",
	"follow",
	"followoff",
	"forplacementonly",
	"forecast",
	"form",
	"forward",
	"fullscreen",
	"fullscreenexit",
	"function",
	"game",
	"gauge1",
	"gauge2",
	"gauge3",
	"gauge4",
	"gauge5",
	"gears",
	"gearsadd",
	"gearsdelete",
	"gearsedit",
	"genderfemale",
	"gendermale",
	"gift",
	"globe",
	"globecheck",
	"globeclock",
	"globeenter",
	"globeexit",
	"globegrid",
	"globeoutline",
	"globeremove",
	"globesearch",
	"globestrike",
	"globestrikeclock",
	"gradient",
	"grapharea",
	"graphareastacked",
	"graphbarhorizontal",
	"graphbarhorizontaladd",
	"graphbarhorizontalstacked",
	"graphbarvertical",
	"graphbarverticaladd",
	"graphbarverticalstacked",
	"graphbubble",
	"graphbullet",
	"graphconfidencebands",
	"graphdonut",
	"graphdonutadd",
	"graphgantt",
	"graphhistogram",
	"graphpathing",
	"graphpie",
	"graphprofitcurve",
	"graphscatter",
	"graphstream",
	"graphstreamranked",
	"graphstreamrankedadd",
	"graphsunburst",
	"graphtree",
	"graphtrend",
	"graphtrendadd",
	"graphtrendalert",
	"graphic",
	"group",
	"hammer",
	"hand",
	"hand0",
	"hand1",
	"hand2",
	"hand3",
	"hand4",
	"heal",
	"heart",
	"help",
	"helpoutline",
	"histogram",
	"history",
	"home",
	"homepage",
	"hotfixes",
	"hotelbed",
	"identityservice",
	"image",
	"imageadd",
	"imagealbum",
	"imageautomode",
	"imagecarousel",
	"imagecheck",
	"imagecheckedout",
	"imagemapcircle",
	"imagemappolygon",
	"imagemaprectangle",
	"imagenext",
	"imageprofile",
	"imagesearch",
	"imagetext",
	"images",
	"import",
	"inbox",
	"individual",
	"info",
	"infooutline",
	"intersectoverlap",
	"invertadj",
	"invite",
	"journey",
	"journeyaction",
	"journeydata",
	"journeyevent",
	"journeyevent2",
	"journeyreports",
	"journeyvoyager",
	"jumptotop",
	"key",
	"keyclock",
	"keyexclude",
	"keyboard",
	"label",
	"labelexclude",
	"labels",
	"landscape",
	"launch",
	"layers",
	"layersbackward",
	"layersbringtofront",
	"layersforward",
	"layerssendtoback",
	"light",
	"line",
	"lineheight",
	"lineargradient",
	"link",
	"linkcheck",
	"linkglobe",
	"linknav",
	"linkoff",
	"linkout",
	"linkoutlight",
	"linkpage",
	"linkuser",
	"location",
	"locationbaseddate",
	"locationbasedevent",
	"locationcontribution",
	"lockclosed",
	"lockopen",
	"logout",
	"login",
	"looks",
	"loupeview",
	"mbox",
	"magicwand",
	"magnify",
	"mailbox",
	"mapview",
	"marginbottom",
	"marginleft",
	"marginright",
	"margintop",
	"marketingactivities",
	"maximize",
	"measure",
	"menu",
	"merge",
	"mergelayers",
	"messenger",
	"minimize",
	"mobileservices",
	"moderngridview",
	"money",
	"monitoring",
	"moon",
	"more",
	"morecircle",
	"moresmall",
	"moresmalllist",
	"moresmalllistvert",
	"morevertical",
	"move",
	"moveleftright",
	"moveto",
	"moveupdown",
	"moviecamera",
	"multiple",
	"multipleadd",
	"multiplecheck",
	"multipleexclude",
	"namingorder",
	"newitem",
	"news",
	"newsadd",
	"noedit",
	"note",
	"noteadd",
	"os",
	"offer",
	"offerdelete",
	"onair",
	"openin",
	"openinlight",
	"openrecent",
	"openrecentoutline",
	"orbit",
	"organisations",
	"organize",
	"outlinepath",
	"paddingbottom",
	"paddingleft",
	"paddingright",
	"paddingtop",
	"pagebreak",
	"pageexclude",
	"pagegear",
	"pagerule",
	"pageshare",
	"pagetag",
	"pagesexclude",
	"pan",
	"panel",
	"paste",
	"pastehtml",
	"pastelist",
	"pastetext",
	"pattern",
	"pause",
	"pausecircle",
	"pawn",
	"pending",
	"peoplegroup",
	"personalizationfield",
	"perspective",
	"pinoff",
	"pinon",
	"pivot",
	"platformdatamapping",
	"play",
	"playcircle",
	"plug",
	"polygon",
	"polygonselect",
	"popin",
	"portrait",
	"preset",
	"preview",
	"print",
	"printpreview",
	"project",
	"projectadd",
	"projectedit",
	"projectnameedit",
	"promote",
	"properties",
	"propertiescopy",
	"publishcheck",
	"publishpending",
	"publishreject",
	"publishremove",
	"publishschedule",
	"pushnotification",
	"question",
	"quickselect",
	"rss",
	"radialgradient",
	"rail",
	"railbottom",
	"railleft",
	"railright",
	"railrightclose",
	"railrightopen",
	"railtop",
	"rangemask",
	"realtimecustomerprofile",
	"rectselect",
	"rectangle",
	"redo",
	"refresh",
	"regionselect",
	"relevance",
	"remove",
	"removecircle",
	"rename",
	"reorder",
	"replay",
	"replies",
	"reply",
	"replyall",
	"report",
	"reportadd",
	"resize",
	"retweet",
	"reuse",
	"revenue",
	"revert",
	"rewind",
	"rewindcircle",
	"ribbon",
	"rotateccw",
	"rotateccwbold",
	"rotatecw",
	"rotatecwbold",
	"rotateleft",
	"rotateleftoutline",
	"rotateright",
	"rotaterightoutline",
	"sms",
	"smskey",
	"smslightning",
	"smsrefresh",
	"sqlquery",
	"sampler",
	"sandbox",
	"saveasfloppy",
	"savefloppy",
	"saveto",
	"savetolight",
	"scribble",
	"search",
	"seat",
	"seatadd",
	"segmentation",
	"segments",
	"select",
	"selectadd",
	"selectbox",
	"selectboxall",
	"selectcircular",
	"selectcontainer",
	"selectgear",
	"selectintersect",
	"selectsubtract",
	"selection",
	"selectionchecked",
	"selectionmove",
	"send",
	"sentimentnegative",
	"sentimentneutral",
	"sentimentpositive",
	"separator",
	"servers",
	"settings",
	"shapes",
	"share",
	"shareandroid",
	"sharecheck",
	"sharelight",
	"sharewindows",
	"sharpen",
	"shield",
	"ship",
	"shop",
	"shoppingcart",
	"showalllayers",
	"showmenu",
	"showonelayer",
	"shuffle",
	"slice",
	"slow",
	"smallcaps",
	"snapshot",
	"socialnetwork",
	"sortorderdown",
	"sortorderup",
	"spam",
	"spellcheck",
	"spin",
	"splitview",
	"spotheal",
	"stadium",
	"stage",
	"stamp",
	"star",
	"staroutline",
	"starburst",
	"stepbackward",
	"stepbackwardcircle",
	"stepforward",
	"stepforwardcircle",
	"stop",
	"stopcircle",
	"stopwatch",
	"straighten",
	"straightenoutline",
	"strokewidth",
	"subscribe",
	"subtractbackpath",
	"subtractfromselection",
	"subtractfrontpath",
	"successmetric",
	"summarize",
	"survey",
	"switch",
	"sync",
	"syncremove",
	"table",
	"tableadd",
	"tableandchart",
	"tablecolumnaddleft",
	"tablecolumnaddright",
	"tablecolumnmerge",
	"tablecolumnremovecenter",
	"tablecolumnsplit",
	"tableedit",
	"tablehistogram",
	"tablemergecells",
	"tablerowaddbottom",
	"tablerowaddtop",
	"tablerowmerge",
	"tablerowremovecenter",
	"tablerowsplit",
	"tableselectcolumn",
	"tableselectrow",
	"tagbold",
	"tagitalic",
	"tagunderline",
	"target",
	"targeted",
	"tasklist",
	"teapot",
	"temperature",
	"testab",
	"testabedit",
	"testabgear",
	"testabremove",
	"testprofile",
	"text",
	"textadd",
	"textaligncenter",
	"textalignjustify",
	"textalignleft",
	"textalignright",
	"textbaselineshift",
	"textbold",
	"textbulleted",
	"textbulletedattach",
	"textbulletedhierarchy",
	"textbulletedhierarchyexclude",
	"textcolor",
	"textdecrease",
	"textedit",
	"textexclude",
	"textincrease",
	"textindentdecrease",
	"textindentincrease",
	"textitalic",
	"textkerning",
	"textletteredlowercase",
	"textlettereduppercase",
	"textnumbered",
	"textparagraph",
	"textromanlowercase",
	"textromanuppercase",
	"textsize",
	"textsizeadd",
	"textspaceafter",
	"textspacebefore",
	"textstrikethrough",
	"textstroke",
	"textstyle",
	"textsubscript",
	"textsuperscript",
	"texttracking",
	"textunderline",
	"thumbdown",
	"thumbdownoutline",
	"thumbup",
	"thumbupoutline",
	"tips",
	"train",
	"transfertoplatform",
	"transparency",
	"trap",
	"treecollapse",
	"treecollapseall",
	"treeexpand",
	"treeexpandall",
	"trendinspect",
	"trimpath",
	"trophy",
	"type",
	"usa",
	"underline",
	"undo",
	"ungroup",
	"unlink",
	"unmerge",
	"uploadtocloud",
	"uploadtocloudoutline",
	"user",
	"useractivity",
	"useradd",
	"useradmin",
	"userarrow",
	"usercheckedout",
	"userdeveloper",
	"useredit",
	"userexclude",
	"usergroup",
	"userlock",
	"usershare",
	"usersadd",
	"usersexclude",
	"userslock",
	"usersshare",
	"variable",
	"vectordraw",
	"videocheckedout",
	"videofilled",
	"videooutline",
	"viewalltags",
	"viewbiweek",
	"viewcard",
	"viewcolumn",
	"viewday",
	"viewdetail",
	"viewgrid",
	"viewlist",
	"viewrow",
	"viewsingle",
	"viewstack",
	"viewweek",
	"viewedmarkas",
	"vignette",
	"visibility",
	"visibilityoff",
	"visit",
	"visitshare",
	"voiceover",
	"volumemute",
	"volumeone",
	"volumethree",
	"volumetwo",
	"watch",
	"webpage",
	"webpages",
	"workflow",
	"workflowadd",
	"wrench",
	"zoomin",
	"zoomout",
	"discover",
	"discoveroutline",
	"enterprise",
	"government",
	"learn",
	"offeractivities",
	"offers",
	"placeholder",
	"resolvedcomment",
	"treeview",
	"unresolvedcomment",
	"verticalmasonrygridview",
	"viewcardonecol",
	"viewtable"
];
var s2 = [
	"3dasset",
	"3dmaterial",
	"3d",
	"accessibility",
	"addcircle",
	"addcontent",
	"add",
	"alertdiamond",
	"alerttriangle",
	"alignbottom",
	"aligncenter",
	"alignleft",
	"alignmiddle",
	"alignright",
	"aligntop",
	"animationno",
	"animation",
	"appsall",
	"apps",
	"archive",
	"arrowheadtool",
	"artboard",
	"aspectratio",
	"asset",
	"attach",
	"audiowave",
	"autoselectsubject",
	"background",
	"badgeverified",
	"bellrotated",
	"bell",
	"betaapp",
	"binoculars",
	"blur",
	"brand",
	"briefcase",
	"brightnesscontrast",
	"brush",
	"bug",
	"buildings",
	"cclibrary",
	"calendaradd",
	"calendarday",
	"calendaredit",
	"calendarweek",
	"calendar",
	"cameraproperties",
	"camera",
	"cancel",
	"channel",
	"checkbox",
	"checkmarkcircle",
	"checkmark",
	"chevrondown",
	"chevronleft",
	"chevronright",
	"circle",
	"clockpending",
	"clock",
	"closecaptions",
	"closecircle",
	"close",
	"cloudstatedefault",
	"cloudstatedisconnected",
	"cloudstateerrorred",
	"cloudstateerror",
	"cloudstateinprogress",
	"cloudstatepaused",
	"cloudstatepending",
	"cloudstateslowconnection",
	"cloud",
	"collection",
	"colorfill",
	"colorharmony",
	"color",
	"commentshow",
	"commenttext",
	"comment",
	"community",
	"contextualtaskbar",
	"contrast",
	"copy",
	"cornerradiusbottomleft",
	"cornerradiusbottomright",
	"cornerradiuseach",
	"cornerradiustopleft",
	"cornerradiustopright",
	"cornerradius",
	"croprotate",
	"crop",
	"cursorclick",
	"cut",
	"dataadd",
	"datasettings",
	"dataupload",
	"data",
	"delete",
	"deviceall",
	"devicedesktopmobile",
	"devicedesktop",
	"devicelaptop",
	"devicemobile",
	"devicemultiscreen",
	"devicephone",
	"devicetablet",
	"directselect",
	"discover",
	"distributebottomedge",
	"distributehorizontalcenter",
	"distributeleftedge",
	"distributerightedge",
	"distributespacehorizontally",
	"distributespacevertically",
	"distributetopedge",
	"distributeverticalcenter",
	"download",
	"draw",
	"duplicate",
	"editno",
	"edit",
	"education",
	"effectborder",
	"effects",
	"email",
	"emoji",
	"erase",
	"exportto",
	"exposure",
	"eyedropper",
	"feedback",
	"fileadd",
	"fileconvert",
	"filetext",
	"fileuser",
	"file",
	"files",
	"filmstrip",
	"filter",
	"filters",
	"findandreplace",
	"flag",
	"fliphorizontal",
	"flipvertical",
	"folderadd",
	"folderbreadcrumb",
	"folderclock",
	"foldermoveto",
	"folderopen",
	"folder",
	"fontpicker",
	"fullscreenexit",
	"fullscreen",
	"gift",
	"globegrid",
	"gradienthorizontal",
	"gradientradial",
	"gradient",
	"gridtypedots",
	"gridtypelines",
	"gridsandrulers",
	"groupno",
	"group",
	"hand",
	"heart",
	"helpcircle",
	"history",
	"home",
	"imageadd",
	"imagebackgroundremove",
	"image",
	"images",
	"infocircle",
	"interaction",
	"invert",
	"invite",
	"keyboard",
	"lassoselect",
	"layers",
	"layout",
	"leave",
	"lightbulb",
	"lighten",
	"lineheight",
	"line",
	"linkvertical",
	"link",
	"listbulleted",
	"listmultiselect",
	"listnumbered",
	"location",
	"lockopen",
	"lock",
	"logo",
	"magicwand",
	"market",
	"maskdisable",
	"mask",
	"maximize",
	"mediaofflinen",
	"mention",
	"menuhamburger",
	"microphoneoff",
	"microphone",
	"minimize",
	"more",
	"move",
	"moviecamera",
	"musicnote",
	"namingorder",
	"new",
	"nudge",
	"openin",
	"orderbottom",
	"orderonedown",
	"orderoneup",
	"ordertop",
	"order",
	"orientationlandscape",
	"orientationportrait",
	"paste",
	"path",
	"pattern",
	"pause",
	"penbrush",
	"people",
	"percentage",
	"play",
	"plugingear",
	"plugin",
	"polygon3",
	"polygon4",
	"polygon5",
	"polygon6",
	"preview",
	"print",
	"projectaddinto",
	"projectcreate",
	"project",
	"promote",
	"prompt",
	"properties",
	"prototyping",
	"publishno",
	"publish",
	"radiobutton",
	"rectanglehoriz",
	"redo",
	"refresh",
	"removecircle",
	"rename",
	"replace",
	"reportabuse",
	"resize",
	"revert",
	"reviewlink",
	"ribbon",
	"rocketquickactions",
	"rotateccw",
	"rotatecw",
	"rotateorientation",
	"ruler",
	"saturation",
	"search",
	"selectallitems",
	"selectandmove",
	"selectmulti",
	"selectno",
	"selectnone",
	"selectrectangle",
	"select",
	"send",
	"settings",
	"shapes",
	"shareandroid",
	"share",
	"shoppingcart",
	"shuffle",
	"similar",
	"slideshow",
	"socialnetwork",
	"sortdown",
	"sortup",
	"sort",
	"stampclone",
	"starfilled",
	"star",
	"stepbackward",
	"stepforward",
	"stickynote",
	"strokedotted",
	"strokesolid",
	"strokewidth",
	"switchvertical",
	"switch",
	"table",
	"tag",
	"target",
	"temperature",
	"template",
	"textadd",
	"textaligncenter",
	"textalignjustifylastcenter",
	"textalignjustifylastleft",
	"textalignjustifylastright",
	"textalignjustify",
	"textalignleft",
	"textalignright",
	"textbold",
	"textcapsall",
	"textcapssmall",
	"textitalic",
	"textnumbers",
	"textparagraph",
	"textsize",
	"textstrikethrough",
	"textsubscript",
	"textsuperscript",
	"textunderline",
	"textvariablefontsettings",
	"text",
	"thumbdown",
	"thumbup",
	"toggle",
	"touchonefingerswipeleftright",
	"transcript",
	"transformdistort",
	"transformgeneric",
	"transformperspective",
	"transformskew",
	"transformwarp",
	"translate",
	"tutorials",
	"unlink",
	"undo",
	"unlinkhoriz",
	"unlinkvertical",
	"uploadtocloud",
	"upload",
	"useradd",
	"useravatar",
	"useredit",
	"userfollowing",
	"usergroup",
	"userlock",
	"user",
	"userslock",
	"vectordraw",
	"video",
	"viewgrid",
	"viewlist",
	"viewtransparency",
	"visibilityoff",
	"visibility",
	"volumeoff",
	"volumeone",
	"volumetwo",
	"webnavbar",
	"webpage",
	"zoomin",
	"zoomout"
];
var iconsList = {
	s1: s1,
	s2: s2
};

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};
let DelayedReady = class extends SpectrumElement {
  render() {
    return x`
            <slot @slotchange=${this.handleSlotchange}></slot>
        `;
  }
  firstUpdated() {
    this._delayedReady = new Promise(
      (res) => this._resolveDelayedReady = res
    );
  }
  async getUpdateComplete() {
    const complete = await super.getUpdateComplete();
    await this._delayedReady;
    return complete;
  }
  handleSlotchange({
    target
  }) {
    if (target.assignedElements({ flatten: true }).length) {
      requestAnimationFrame(() => {
        this._resolveDelayedReady();
      });
    }
  }
};
DelayedReady = __decorateClass([
  t("delayed-ready")
], DelayedReady);
let IconsDemo = class extends SpectrumElement {
  constructor() {
    super();
    this.name = "ui";
    this.package = "";
    this.size = "m";
    this.search = "";
    this.icons = [];
    this.filteredIcons = [];
    this.unsubscribeSystemContext = null;
    this.spectrumVersion = 1;
    this.iconset = [];
    this.systemResolver = new SystemResolutionController(this);
    this.iconset = [];
    this.handleIconSetAdded = this.handleIconSetAdded.bind(this);
  }
  async connectedCallback() {
    super.connectedCallback();
    window.addEventListener("sp-iconset-added", this.handleIconSetAdded);
  }
  disconnectedCallback() {
    window.removeEventListener("sp-iconset-added", this.handleIconSetAdded);
    super.disconnectedCallback();
    if (this.unsubscribeSystemContext) {
      this.unsubscribeSystemContext();
      this.unsubscribeSystemContext = null;
    }
  }
  filterIconsBySpectrumVersion() {
    const iconVersion = this.spectrumVersion === 2 ? "s2" : "s1";
    let filteredIcons = this.icons;
    if (this.name === "workflow") {
      filteredIcons = filteredIcons.filter((icon) => {
        const iconName = icon.name.replace(/\s/g, "").toLowerCase();
        return iconsList[iconVersion].includes(iconName);
      });
    }
    const iconSet = /* @__PURE__ */ new Set();
    filteredIcons = filteredIcons.filter((icon) => {
      if (iconSet.has(icon.name)) {
        return false;
      }
      iconSet.add(icon.name);
      return true;
    });
    this.filteredIcons = filteredIcons;
  }
  update(changes) {
    if (changes.has(systemResolverUpdatedSymbol)) {
      this.spectrumVersion = this.systemResolver.system === "spectrum-two" ? 2 : 1;
      this.filterIconsBySpectrumVersion();
    }
    if (changes.has("icons")) {
      this.filterIconsBySpectrumVersion();
    }
    super.update(changes);
  }
  handleIconSetAdded(event) {
    const { iconset } = event.detail;
    this.iconset = iconset.getIconList();
    this.requestUpdate();
  }
  static get styles() {
    return [
      ...bodyStyles,
      i`
                :host {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                    gap: 20px;
                    align-items: flex-start;
                }
                .icon {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    text-align: center;
                    border-radius: var(
                        --spectrum-alias-focus-ring-gap,
                        var(--spectrum-spacing-50)
                    );
                }
                :host([package]) .icon {
                    cursor: pointer;
                }
                sp-icon {
                    margin-bottom: 10px;
                }
                .search {
                    grid-column-start: 1;
                    grid-column-end: -1;
                }
                .icon[tabindex]:focus {
                    outline: none;
                }
                .icon[tabindex]:focus-visible {
                    outline: var(--spectrum-alias-focus-ring-size) solid
                        var(--spectrum-alias-focus-ring-color);
                    outline-offset: calc(
                        var(
                                --spectrum-alias-focus-ring-gap,
                                var(--spectrum-spacing-50)
                            ) * 2
                    );
                }
            `
    ];
  }
  handleKeydown(event, tag) {
    const { code } = event;
    if (code !== "Enter" && code !== "NumpadEnter" && code !== "Space") {
      return;
    }
    event.preventDefault();
    this.shouldCopy(tag);
  }
  shouldCopy(tag) {
    if (!this.package) return;
    const conditionedTag = tag.slice(1, tag.length - 1);
    const importURL = `import '@spectrum-web-components/${this.package}/icons/${conditionedTag}.js';`;
    this.dispatchEvent(
      new CustomEvent("copy-text", {
        bubbles: true,
        composed: true,
        detail: {
          message: "Import statement copied to clipboard!",
          text: importURL
        }
      })
    );
  }
  updateSearch(event) {
    event.stopPropagation();
    this.search = event.target.value;
  }
  submit(event) {
    event.stopPropagation();
    this.updateSearch(event);
  }
  renderSearch() {
    const matchingIcons = this.search ? this.filteredIcons.filter(
      (icon) => icon.name.toLowerCase().includes(this.search.toLowerCase())
    ) : this.filteredIcons;
    return x`
            <div class="search" part="search">
                <sp-field-label for="search">Spectrum icons:</sp-field-label>
                <sp-search
                    id="search"
                    @keydown=${this.updateSearch}
                    @input=${this.updateSearch}
                    @submit=${this.submit}
                    .value=${this.search}
                    label="Search for icons"
                    autocomplete="off"
                >
                    <sp-help-text slot="help-text">
                        Showing ${matchingIcons.length} of
                        ${this.filteredIcons.length} available icons.
                    </sp-help-text>
                </sp-search>
            </div>
            ${matchingIcons.map((icon) => {
      return x`
                    <bdo
                        class="icon"
                        part="icon"
                        dir="ltr"
                        class="icon"
                        @click=${() => this.shouldCopy(icon.tag)}
                        @keydown=${(event) => this.handleKeydown(event, icon.tag)}
                        tabindex=${o(this.package ? "0" : void 0)}
                    >
                        ${icon.story(this.size)} ${icon.tag}
                    </bdo>
                `;
    })}
        `;
  }
  render() {
    return x`
            ${this.filteredIcons.length ? this.renderSearch() : x`
                      <slot></slot>
                  `}
            ${this.iconset.map(
      (icon) => x`
                    <bdo class="icon" dir="ltr">
                        <sp-icon
                            size="xl"
                            name=${`${this.name}:${icon}`}
                        ></sp-icon>
                        ${icon}
                    </bdo>
                `
    )}
        `;
  }
};
__decorateClass([
  n()
], IconsDemo.prototype, "name", 2);
__decorateClass([
  n()
], IconsDemo.prototype, "package", 2);
__decorateClass([
  n()
], IconsDemo.prototype, "size", 2);
__decorateClass([
  n()
], IconsDemo.prototype, "search", 2);
__decorateClass([
  n({ attribute: false })
], IconsDemo.prototype, "icons", 2);
__decorateClass([
  r()
], IconsDemo.prototype, "spectrumVersion", 2);
IconsDemo = __decorateClass([
  t("icons-demo")
], IconsDemo);
