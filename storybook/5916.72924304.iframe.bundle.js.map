{"version":3,"file":"5916.72924304.iframe.bundle.js","mappings":";;AACA;AAgCA;;AAEA;;AAGA;ACHA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmIA;;;;;AAyCA;AACA;AACA;AACA;;;;;AAKA;AACA;;;;AAIA;;;;;;AAOA;AACA;AACA;;AAEA;;;AAKA;AAGA;;;AAGA;;;;AAKA;;AAEA;;;AAKA;;AC/PA;;AAyEA;;AAEA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;;;;;;AAMA;AACA;;AAEA;;AAGA","sources":["webpack://@adobe/spectrum-web-components/./packages/help-text/src/HelpText.dev.js","webpack://@adobe/spectrum-web-components/./packages/iconset/stories/icons-demo.js","webpack://@adobe/spectrum-web-components/./packages/search/src/Search.dev.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing,\n  SizedMixin,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js\";\nimport styles from \"./help-text.css.js\";\nexport class HelpText extends SizedMixin(SpectrumElement, {\n  noDefaultSize: true\n}) {\n  constructor() {\n    super(...arguments);\n    this.icon = false;\n    this.variant = \"neutral\";\n  }\n  static get styles() {\n    return [styles];\n  }\n  render() {\n    return html`\n            ${this.variant === \"negative\" && this.icon ? html`\n                      <sp-icon-alert class=\"icon\"></sp-icon-alert>\n                  ` : nothing}\n            <div class=\"text\"><slot></slot></div>\n        `;\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], HelpText.prototype, \"icon\", 2);\n__decorateClass([\n  property({ reflect: true })\n], HelpText.prototype, \"variant\", 2);\n//# sourceMappingURL=HelpText.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  css,\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  customElement,\n  property,\n  state\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport \"@spectrum-web-components/search/sp-search.js\";\nimport \"@spectrum-web-components/field-label/sp-field-label.js\";\nimport bodyStyles from \"@spectrum-web-components/styles/body.js\";\nimport \"@spectrum-web-components/icon/sp-icon.js\";\nimport \"@spectrum-web-components/help-text/sp-help-text.js\";\nimport iconsList from \"./iconsList.json\";\nimport {\n  SystemResolutionController,\n  systemResolverUpdatedSymbol\n} from \"@spectrum-web-components/reactive-controllers/src/SystemContextResolution.js\";\nexport let DelayedReady = class extends SpectrumElement {\n  render() {\n    return html`\n            <slot @slotchange=${this.handleSlotchange}></slot>\n        `;\n  }\n  firstUpdated() {\n    this._delayedReady = new Promise(\n      (res) => this._resolveDelayedReady = res\n    );\n  }\n  async getUpdateComplete() {\n    const complete = await super.getUpdateComplete();\n    await this._delayedReady;\n    return complete;\n  }\n  handleSlotchange({\n    target\n  }) {\n    if (target.assignedElements({ flatten: true }).length) {\n      requestAnimationFrame(() => {\n        this._resolveDelayedReady();\n      });\n    }\n  }\n};\nDelayedReady = __decorateClass([\n  customElement(\"delayed-ready\")\n], DelayedReady);\nexport let IconsDemo = class extends SpectrumElement {\n  constructor() {\n    super();\n    this.name = \"ui\";\n    this.package = \"\";\n    this.size = \"m\";\n    this.search = \"\";\n    this.icons = [];\n    this.filteredIcons = [];\n    this.unsubscribeSystemContext = null;\n    this.spectrumVersion = 1;\n    this.iconset = [];\n    this.systemResolver = new SystemResolutionController(this);\n    this.iconset = [];\n    this.handleIconSetAdded = this.handleIconSetAdded.bind(this);\n  }\n  async connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"sp-iconset-added\", this.handleIconSetAdded);\n  }\n  disconnectedCallback() {\n    window.removeEventListener(\"sp-iconset-added\", this.handleIconSetAdded);\n    super.disconnectedCallback();\n    if (this.unsubscribeSystemContext) {\n      this.unsubscribeSystemContext();\n      this.unsubscribeSystemContext = null;\n    }\n  }\n  filterIconsBySpectrumVersion() {\n    const iconVersion = this.spectrumVersion === 2 ? \"s2\" : \"s1\";\n    let filteredIcons = this.icons;\n    if (this.name === \"workflow\") {\n      filteredIcons = filteredIcons.filter((icon) => {\n        const iconName = icon.name.replace(/\\s/g, \"\").toLowerCase();\n        return iconsList[iconVersion].includes(iconName);\n      });\n    }\n    const iconSet = /* @__PURE__ */ new Set();\n    filteredIcons = filteredIcons.filter((icon) => {\n      if (iconSet.has(icon.name)) {\n        return false;\n      }\n      iconSet.add(icon.name);\n      return true;\n    });\n    this.filteredIcons = filteredIcons;\n  }\n  update(changes) {\n    if (changes.has(systemResolverUpdatedSymbol)) {\n      this.spectrumVersion = this.systemResolver.system === \"spectrum-two\" ? 2 : 1;\n      this.filterIconsBySpectrumVersion();\n    }\n    if (changes.has(\"icons\")) {\n      this.filterIconsBySpectrumVersion();\n    }\n    super.update(changes);\n  }\n  handleIconSetAdded(event) {\n    const { iconset } = event.detail;\n    this.iconset = iconset.getIconList();\n    this.requestUpdate();\n  }\n  static get styles() {\n    return [\n      ...bodyStyles,\n      css`\n                :host {\n                    display: grid;\n                    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n                    gap: 20px;\n                    align-items: flex-start;\n                }\n                .icon {\n                    display: flex;\n                    flex-direction: column;\n                    align-items: center;\n                    text-align: center;\n                    border-radius: var(\n                        --spectrum-alias-focus-ring-gap,\n                        var(--spectrum-spacing-50)\n                    );\n                }\n                :host([package]) .icon {\n                    cursor: pointer;\n                }\n                sp-icon {\n                    margin-bottom: 10px;\n                }\n                .search {\n                    grid-column-start: 1;\n                    grid-column-end: -1;\n                }\n                .icon[tabindex]:focus {\n                    outline: none;\n                }\n                .icon[tabindex]:focus-visible {\n                    outline: var(--spectrum-alias-focus-ring-size) solid\n                        var(--spectrum-alias-focus-ring-color);\n                    outline-offset: calc(\n                        var(\n                                --spectrum-alias-focus-ring-gap,\n                                var(--spectrum-spacing-50)\n                            ) * 2\n                    );\n                }\n            `\n    ];\n  }\n  handleKeydown(event, tag) {\n    const { code } = event;\n    if (code !== \"Enter\" && code !== \"NumpadEnter\" && code !== \"Space\") {\n      return;\n    }\n    event.preventDefault();\n    this.shouldCopy(tag);\n  }\n  shouldCopy(tag) {\n    if (!this.package) return;\n    const conditionedTag = tag.slice(1, tag.length - 1);\n    const importURL = `import '@spectrum-web-components/${this.package}/icons/${conditionedTag}.js';`;\n    this.dispatchEvent(\n      new CustomEvent(\"copy-text\", {\n        bubbles: true,\n        composed: true,\n        detail: {\n          message: \"Import statement copied to clipboard!\",\n          text: importURL\n        }\n      })\n    );\n  }\n  updateSearch(event) {\n    event.stopPropagation();\n    this.search = event.target.value;\n  }\n  submit(event) {\n    event.stopPropagation();\n    this.updateSearch(event);\n  }\n  renderSearch() {\n    const matchingIcons = this.search ? this.filteredIcons.filter(\n      (icon) => icon.name.toLowerCase().includes(this.search.toLowerCase())\n    ) : this.filteredIcons;\n    return html`\n            <div class=\"search\" part=\"search\">\n                <sp-field-label for=\"search\">Spectrum icons:</sp-field-label>\n                <sp-search\n                    id=\"search\"\n                    @keydown=${this.updateSearch}\n                    @input=${this.updateSearch}\n                    @submit=${this.submit}\n                    .value=${this.search}\n                    label=\"Search for icons\"\n                    autocomplete=\"off\"\n                >\n                    <sp-help-text slot=\"help-text\">\n                        Showing ${matchingIcons.length} of\n                        ${this.filteredIcons.length} available icons.\n                    </sp-help-text>\n                </sp-search>\n            </div>\n            ${matchingIcons.map((icon) => {\n      return html`\n                    <bdo\n                        class=\"icon\"\n                        part=\"icon\"\n                        dir=\"ltr\"\n                        class=\"icon\"\n                        @click=${() => this.shouldCopy(icon.tag)}\n                        @keydown=${(event) => this.handleKeydown(event, icon.tag)}\n                        tabindex=${ifDefined(this.package ? \"0\" : void 0)}\n                    >\n                        ${icon.story(this.size)} ${icon.tag}\n                    </bdo>\n                `;\n    })}\n        `;\n  }\n  render() {\n    return html`\n            ${this.filteredIcons.length ? this.renderSearch() : html`\n                      <slot></slot>\n                  `}\n            ${this.iconset.map(\n      (icon) => html`\n                    <bdo class=\"icon\" dir=\"ltr\">\n                        <sp-icon\n                            size=\"xl\"\n                            name=${`${this.name}:${icon}`}\n                        ></sp-icon>\n                        ${icon}\n                    </bdo>\n                `\n    )}\n        `;\n  }\n};\n__decorateClass([\n  property()\n], IconsDemo.prototype, \"name\", 2);\n__decorateClass([\n  property()\n], IconsDemo.prototype, \"package\", 2);\n__decorateClass([\n  property()\n], IconsDemo.prototype, \"size\", 2);\n__decorateClass([\n  property()\n], IconsDemo.prototype, \"search\", 2);\n__decorateClass([\n  property({ attribute: false })\n], IconsDemo.prototype, \"icons\", 2);\n__decorateClass([\n  state()\n], IconsDemo.prototype, \"spectrumVersion\", 2);\nIconsDemo = __decorateClass([\n  customElement(\"icons-demo\")\n], IconsDemo);\n//# sourceMappingURL=icons-demo.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport { Textfield } from \"@spectrum-web-components/textfield\";\nimport \"@spectrum-web-components/button/sp-clear-button.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-search.js\";\nimport searchStyles from \"./search.css.js\";\nconst stopPropagation = (event) => event.stopPropagation();\nexport class Search extends Textfield {\n  constructor() {\n    super(...arguments);\n    this.action = \"\";\n    this.label = \"Search\";\n    this.placeholder = \"Search\";\n  }\n  static get styles() {\n    return [...super.styles, searchStyles];\n  }\n  handleSubmit(event) {\n    const applyDefault = this.dispatchEvent(\n      new Event(\"submit\", {\n        cancelable: true,\n        bubbles: true\n      })\n    );\n    if (!applyDefault) {\n      event.preventDefault();\n    }\n  }\n  handleKeydown(event) {\n    const { code } = event;\n    if (code === \"Escape\" && this.holdValueOnEscape) {\n      return;\n    }\n    if (!this.value || code !== \"Escape\") {\n      return;\n    }\n    this.reset();\n  }\n  async reset() {\n    this.value = \"\";\n    await this.updateComplete;\n    this.focusElement.dispatchEvent(\n      new InputEvent(\"input\", {\n        bubbles: true,\n        composed: true\n      })\n    );\n    this.focusElement.dispatchEvent(\n      new InputEvent(\"change\", {\n        bubbles: true\n      })\n    );\n  }\n  renderField() {\n    return html`\n            <form\n                action=${this.action}\n                id=\"form\"\n                method=${ifDefined(this.method)}\n                @submit=${this.handleSubmit}\n                @reset=${this.reset}\n                @keydown=${this.handleKeydown}\n            >\n                <sp-icon-search\n                    size=${this.size}\n                    class=\"icon magnifier icon-workflow icon-search\"\n                ></sp-icon-search>\n                ${super.renderField()}\n                ${this.value ? html`\n                          <sp-clear-button\n                              id=\"button\"\n                              label=\"Reset\"\n                              tabindex=\"-1\"\n                              type=\"reset\"\n                              size=${ifDefined(this.size)}\n                              @keydown=${stopPropagation}\n                          ></sp-clear-button>\n                      ` : nothing}\n            </form>\n        `;\n  }\n  firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    if (!this.hasAttribute(\"holdValueOnEscape\")) {\n      this.inputElement.setAttribute(\"type\", \"search\");\n    }\n  }\n  willUpdate() {\n    this.multiline = false;\n  }\n}\n__decorateClass([\n  property()\n], Search.prototype, \"action\", 2);\n__decorateClass([\n  property()\n], Search.prototype, \"label\", 2);\n__decorateClass([\n  property()\n], Search.prototype, \"method\", 2);\n__decorateClass([\n  property()\n], Search.prototype, \"placeholder\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], Search.prototype, \"holdValueOnEscape\", 2);\n__decorateClass([\n  query(\"#form\")\n], Search.prototype, \"form\", 2);\n//# sourceMappingURL=Search.dev.js.map\n"],"names":[],"sourceRoot":""}