{"version":3,"file":"7621.2d39a1fd.iframe.bundle.js","mappings":";;AAwBA;;;;AAIA;AACA;;;;;AAMA;;;;AC2GA;;;;;AAQA;AAQA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAGA;AACA;AAEA;AAGA;AACA;AAEA","sources":["webpack://@adobe/spectrum-web-components/./packages/help-text/src/HelpTextManager.dev.js","webpack://@adobe/spectrum-web-components/./packages/textfield/src/Textfield.dev.js"],"sourcesContent":["\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport { conditionAttributeWithId } from \"@spectrum-web-components/base/src/condition-attribute-with-id.js\";\nimport { randomID } from \"@spectrum-web-components/shared/src/random-id.js\";\nexport class HelpTextManager {\n  constructor(host, { mode } = { mode: \"internal\" }) {\n    this.mode = \"internal\";\n    this.handleSlotchange = ({\n      target\n    }) => {\n      this.handleHelpText(target);\n      this.handleNegativeHelpText(target);\n    };\n    this.host = host;\n    this.id = `sp-help-text-${randomID()}`;\n    this.mode = mode;\n  }\n  get isInternal() {\n    return this.mode === \"internal\";\n  }\n  render(negative) {\n    return html`\n            <div\n                id=${ifDefined(this.isInternal ? this.id : void 0)}\n                aria-live=\"assertive\"\n            >\n                <slot\n                    name=${negative ? \"negative-help-text\" : `pass-through-help-text-${randomID()}`}\n                    @slotchange=${this.handleSlotchange}\n                >\n                    <slot name=\"help-text\"></slot>\n                </slot>\n            </div>\n        `;\n  }\n  addId() {\n    const id = this.helpTextElement ? this.helpTextElement.id : this.id;\n    this.conditionId = conditionAttributeWithId(\n      this.host,\n      \"aria-describedby\",\n      id\n    );\n    if (this.host.hasAttribute(\"tabindex\")) {\n      this.previousTabindex = parseFloat(\n        this.host.getAttribute(\"tabindex\")\n      );\n    }\n    this.host.tabIndex = 0;\n  }\n  removeId() {\n    if (this.conditionId) {\n      this.conditionId();\n      delete this.conditionId;\n    }\n    if (this.helpTextElement) return;\n    if (this.previousTabindex) {\n      this.host.tabIndex = this.previousTabindex;\n    } else {\n      this.host.removeAttribute(\"tabindex\");\n    }\n  }\n  handleHelpText(target) {\n    if (this.isInternal) return;\n    if (this.helpTextElement && this.helpTextElement.id === this.id) {\n      this.helpTextElement.removeAttribute(\"id\");\n    }\n    this.removeId();\n    const assignedElements = target.assignedElements();\n    const nextHelpTextElement = assignedElements[0];\n    this.helpTextElement = nextHelpTextElement;\n    if (nextHelpTextElement) {\n      if (!nextHelpTextElement.id) {\n        nextHelpTextElement.id = this.id;\n      }\n      this.addId();\n    }\n  }\n  handleNegativeHelpText(target) {\n    if (target.name !== \"negative-help-text\") return;\n    const assignedElements = target.assignedElements();\n    assignedElements.forEach(\n      (el) => el.variant = \"negative\"\n    );\n  }\n}\n//# sourceMappingURL=HelpTextManager.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing,\n  SizedMixin\n} from \"@spectrum-web-components/base\";\nimport {\n  ifDefined,\n  live\n} from \"@spectrum-web-components/base/src/directives.js\";\nimport {\n  property,\n  query,\n  state\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { ManageHelpText } from \"@spectrum-web-components/help-text/src/manage-help-text.js\";\nimport { Focusable } from \"@spectrum-web-components/shared/src/focusable.js\";\nimport \"@spectrum-web-components/icons-ui/icons/sp-icon-checkmark100.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js\";\nimport textfieldStyles from \"./textfield.css.js\";\nimport checkmarkStyles from \"@spectrum-web-components/icon/src/spectrum-icon-checkmark.css.js\";\nconst textfieldTypes = [\"text\", \"url\", \"tel\", \"email\", \"password\"];\nexport class TextfieldBase extends ManageHelpText(\n  SizedMixin(Focusable, {\n    noDefaultSize: true\n  })\n) {\n  constructor() {\n    super(...arguments);\n    this.allowedKeys = \"\";\n    this.focused = false;\n    this.invalid = false;\n    this.label = \"\";\n    this.placeholder = \"\";\n    this._type = \"text\";\n    this.grows = false;\n    this.maxlength = -1;\n    this.minlength = -1;\n    this.multiline = false;\n    this.readonly = false;\n    this.rows = -1;\n    this.valid = false;\n    this._value = \"\";\n    this.quiet = false;\n    this.required = false;\n  }\n  static get styles() {\n    return [textfieldStyles, checkmarkStyles];\n  }\n  set type(val) {\n    const prev = this._type;\n    this._type = val;\n    this.requestUpdate(\"type\", prev);\n  }\n  get type() {\n    var _a;\n    return (_a = textfieldTypes.find((t) => t === this._type)) != null ? _a : \"text\";\n  }\n  set value(value) {\n    if (value === this.value) {\n      return;\n    }\n    const oldValue = this._value;\n    this._value = value;\n    this.requestUpdate(\"value\", oldValue);\n  }\n  get value() {\n    return this._value;\n  }\n  get focusElement() {\n    return this.inputElement;\n  }\n  /**\n   * Sets the start and end positions of the current selection.\n   *\n   * @param selectionStart The 0-based index of the first selected character. An index greater than the length of the\n   *  element's value is treated as pointing to the end of the value.\n   * @param selectionEnd The 0-based index of the character after the last selected character. An index greater than\n   *  the length of the element's value is treated as pointing to the end of the value.\n   * @param [selectionDirection=\"none\"] A string indicating the direction in which the selection is considered to\n   *  have been performed.\n   */\n  setSelectionRange(selectionStart, selectionEnd, selectionDirection = \"none\") {\n    this.inputElement.setSelectionRange(\n      selectionStart,\n      selectionEnd,\n      selectionDirection\n    );\n  }\n  /**\n   * Selects all the text.\n   */\n  select() {\n    this.inputElement.select();\n  }\n  handleInput(_event) {\n    if (this.allowedKeys && this.inputElement.value) {\n      const regExp = new RegExp(`^[${this.allowedKeys}]*$`, \"u\");\n      if (!regExp.test(this.inputElement.value)) {\n        const selectionStart = this.inputElement.selectionStart;\n        const nextSelectStart = selectionStart - 1;\n        this.inputElement.value = this.value.toString();\n        this.inputElement.setSelectionRange(\n          nextSelectStart,\n          nextSelectStart\n        );\n        return;\n      }\n    }\n    this.value = this.inputElement.value;\n  }\n  handleChange() {\n    this.dispatchEvent(\n      new Event(\"change\", {\n        bubbles: true,\n        composed: true\n      })\n    );\n  }\n  onFocus() {\n    this.focused = !this.readonly && true;\n  }\n  onBlur(_event) {\n    this.focused = !this.readonly && false;\n  }\n  handleInputElementPointerdown() {\n  }\n  renderStateIcons() {\n    if (this.invalid) {\n      return html`\n                <sp-icon-alert id=\"invalid\" class=\"icon\"></sp-icon-alert>\n            `;\n    } else if (this.valid) {\n      return html`\n                <sp-icon-checkmark100\n                    id=\"valid\"\n                    class=\"icon spectrum-UIIcon-Checkmark100\"\n                ></sp-icon-checkmark100>\n            `;\n    }\n    return nothing;\n  }\n  get displayValue() {\n    return this.value.toString();\n  }\n  // prettier-ignore\n  get renderMultiline() {\n    return html`\n            ${this.multiline && this.grows && this.rows === -1 ? html`\n                      <div id=\"sizer\" class=\"input\" aria-hidden=\"true\">${this.value}&#8203;\n                      </div>\n                  ` : nothing}\n            <!-- @ts-ignore -->\n            <textarea\n                name=${ifDefined(this.name || void 0)}\n                aria-describedby=${this.helpTextId}\n                aria-label=${this.label || this.appliedLabel || this.placeholder}\n                aria-invalid=${ifDefined(this.invalid || void 0)}\n                class=\"input\"\n                maxlength=${ifDefined(\n      this.maxlength > -1 ? this.maxlength : void 0\n    )}\n                minlength=${ifDefined(\n      this.minlength > -1 ? this.minlength : void 0\n    )}\n                title=${this.invalid ? \"\" : nothing}\n                pattern=${ifDefined(this.pattern)}\n                placeholder=${this.placeholder}\n                .value=${this.displayValue}\n                @change=${this.handleChange}\n                @input=${this.handleInput}\n                @focus=${this.onFocus}\n                @blur=${this.onBlur}\n                ?disabled=${this.disabled}\n                ?required=${this.required}\n                ?readonly=${this.readonly}\n                rows=${ifDefined(this.rows > -1 ? this.rows : void 0)}\n                autocomplete=${ifDefined(this.autocomplete)}\n            ></textarea>\n        `;\n  }\n  get renderInput() {\n    return html`\n            <!-- @ts-ignore -->\n            <input\n                name=${ifDefined(this.name || void 0)}\n                type=${this.type}\n                aria-describedby=${this.helpTextId}\n                aria-label=${this.label || this.appliedLabel || this.placeholder}\n                aria-invalid=${ifDefined(this.invalid || void 0)}\n                class=\"input\"\n                title=${this.invalid ? \"\" : nothing}\n                maxlength=${ifDefined(\n      this.maxlength > -1 ? this.maxlength : void 0\n    )}\n                minlength=${ifDefined(\n      this.minlength > -1 ? this.minlength : void 0\n    )}\n                pattern=${ifDefined(this.pattern)}\n                placeholder=${this.placeholder}\n                .value=${live(this.displayValue)}\n                @change=${this.handleChange}\n                @input=${this.handleInput}\n                @pointerdown=${this.handleInputElementPointerdown}\n                @focus=${this.onFocus}\n                @blur=${this.onBlur}\n                ?disabled=${this.disabled}\n                ?required=${this.required}\n                ?readonly=${this.readonly}\n                autocomplete=${ifDefined(this.autocomplete)}\n            />\n        `;\n  }\n  renderField() {\n    return html`\n            ${this.renderStateIcons()}\n            ${this.multiline ? this.renderMultiline : this.renderInput}\n        `;\n  }\n  render() {\n    return html`\n            <div id=\"textfield\">${this.renderField()}</div>\n            ${this.renderHelpText(this.invalid)}\n        `;\n  }\n  update(changedProperties) {\n    if (changedProperties.has(\"value\") || changedProperties.has(\"required\") && this.required) {\n      this.updateComplete.then(() => {\n        this.checkValidity();\n      });\n    }\n    super.update(changedProperties);\n  }\n  checkValidity() {\n    let validity = this.inputElement.checkValidity();\n    if (this.required || this.value && this.pattern) {\n      if ((this.disabled || this.multiline) && this.pattern) {\n        const regex = new RegExp(`^${this.pattern}$`, \"u\");\n        validity = regex.test(this.value.toString());\n      }\n      if (typeof this.minlength !== \"undefined\") {\n        validity = validity && this.value.toString().length >= this.minlength;\n      }\n      this.valid = validity;\n      this.invalid = !validity;\n    }\n    return validity;\n  }\n}\n__decorateClass([\n  state()\n], TextfieldBase.prototype, \"appliedLabel\", 2);\n__decorateClass([\n  property({ attribute: \"allowed-keys\" })\n], TextfieldBase.prototype, \"allowedKeys\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], TextfieldBase.prototype, \"focused\", 2);\n__decorateClass([\n  query(\".input:not(#sizer)\")\n], TextfieldBase.prototype, \"inputElement\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], TextfieldBase.prototype, \"invalid\", 2);\n__decorateClass([\n  property()\n], TextfieldBase.prototype, \"label\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], TextfieldBase.prototype, \"name\", 2);\n__decorateClass([\n  property()\n], TextfieldBase.prototype, \"placeholder\", 2);\n__decorateClass([\n  state()\n], TextfieldBase.prototype, \"type\", 1);\n__decorateClass([\n  property({ attribute: \"type\", reflect: true })\n], TextfieldBase.prototype, \"_type\", 2);\n__decorateClass([\n  property()\n], TextfieldBase.prototype, \"pattern\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], TextfieldBase.prototype, \"grows\", 2);\n__decorateClass([\n  property({ type: Number })\n], TextfieldBase.prototype, \"maxlength\", 2);\n__decorateClass([\n  property({ type: Number })\n], TextfieldBase.prototype, \"minlength\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], TextfieldBase.prototype, \"multiline\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], TextfieldBase.prototype, \"readonly\", 2);\n__decorateClass([\n  property({ type: Number })\n], TextfieldBase.prototype, \"rows\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], TextfieldBase.prototype, \"valid\", 2);\n__decorateClass([\n  property({ type: String })\n], TextfieldBase.prototype, \"value\", 1);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], TextfieldBase.prototype, \"quiet\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], TextfieldBase.prototype, \"required\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], TextfieldBase.prototype, \"autocomplete\", 2);\nexport class Textfield extends TextfieldBase {\n  constructor() {\n    super(...arguments);\n    this._value = \"\";\n  }\n  set value(value) {\n    if (value === this.value) {\n      return;\n    }\n    const oldValue = this._value;\n    this._value = value;\n    this.requestUpdate(\"value\", oldValue);\n  }\n  get value() {\n    return this._value;\n  }\n}\n__decorateClass([\n  property({ type: String })\n], Textfield.prototype, \"value\", 1);\n//# sourceMappingURL=Textfield.dev.js.map\n"],"names":[],"sourceRoot":""}