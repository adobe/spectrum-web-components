{"version":3,"file":"2012.7d6c03a7.iframe.bundle.js","mappings":";;AACA;AA8CA;;;AAFA;AAOA;;AAEA;AACA;;;;;;;AASA","sources":["webpack://@adobe/spectrum-web-components/./packages/progress-circle/src/ProgressCircle.dev.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SizedMixin,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport { getLabelFromSlot } from \"@spectrum-web-components/shared/src/get-label-from-slot.js\";\nimport progressCircleStyles from \"./progress-circle.css.js\";\nexport class ProgressCircle extends SizedMixin(SpectrumElement, {\n  validSizes: [\"s\", \"m\", \"l\"]\n}) {\n  constructor() {\n    super(...arguments);\n    this.indeterminate = false;\n    this.label = \"\";\n    this.progress = 0;\n  }\n  static get styles() {\n    return [progressCircleStyles];\n  }\n  makeRotation(rotation) {\n    return this.indeterminate ? void 0 : `transform: rotate(${rotation}deg);`;\n  }\n  render() {\n    const styles = [\n      this.makeRotation(-180 + 180 / 50 * Math.min(this.progress, 50)),\n      this.makeRotation(\n        -180 + 180 / 50 * Math.max(this.progress - 50, 0)\n      )\n    ];\n    const masks = [\"Mask1\", \"Mask2\"];\n    return html`\n            <slot @slotchange=${this.handleSlotchange}></slot>\n            <div class=\"track\"></div>\n            <div class=\"fills\">\n                ${masks.map(\n      (mask, index) => html`\n                        <div class=\"fill${mask}\">\n                            <div\n                                class=\"fillSub${mask}\"\n                                style=${ifDefined(styles[index])}\n                            >\n                                <div class=\"fill\"></div>\n                            </div>\n                        </div>\n                    `\n    )}\n            </div>\n        `;\n  }\n  handleSlotchange() {\n    const labelFromSlot = getLabelFromSlot(this.label, this.slotEl);\n    if (labelFromSlot) {\n      this.label = labelFromSlot;\n    }\n  }\n  firstUpdated(changes) {\n    super.firstUpdated(changes);\n    if (!this.hasAttribute(\"role\")) {\n      this.setAttribute(\"role\", \"progressbar\");\n    }\n  }\n  updated(changes) {\n    super.updated(changes);\n    if (!this.indeterminate && changes.has(\"progress\")) {\n      this.setAttribute(\"aria-valuenow\", \"\" + this.progress);\n    } else if (this.hasAttribute(\"aria-valuenow\")) {\n      this.removeAttribute(\"aria-valuenow\");\n    }\n    if (changes.has(\"label\")) {\n      if (this.label.length) {\n        this.setAttribute(\"aria-label\", this.label);\n      } else if (changes.get(\"label\") === this.getAttribute(\"aria-label\")) {\n        this.removeAttribute(\"aria-label\");\n      }\n    }\n    const hasAccessibleName = () => {\n      return Boolean(\n        this.label || this.getAttribute(\"aria-label\") || this.getAttribute(\"aria-labelledby\") || this.slotEl.assignedNodes().length\n      );\n    };\n    if (true) {\n      if (!hasAccessibleName() && this.getAttribute(\"role\") === \"progressbar\") {\n        window.__swc.warn(\n          this,\n          \"<sp-progress-circle> elements need one of the following to be accessible:\",\n          \"https://opensource.adobe.com/spectrum-web-components/components/progress-circle/#accessibility\",\n          {\n            type: \"accessibility\",\n            issues: [\n              'value supplied to the \"label\" attribute, which will be displayed visually as part of the element, or',\n              \"text content supplied directly to the <sp-progress-circle> element, or\",\n              'value supplied to the \"aria-label\" attribute, which will only be provided to screen readers, or',\n              'an element ID reference supplied to the \"aria-labelledby\" attribute, which will be provided by screen readers and will need to be managed manually by the parent application.'\n            ]\n          }\n        );\n      }\n    }\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], ProgressCircle.prototype, \"indeterminate\", 2);\n__decorateClass([\n  property({ type: String })\n], ProgressCircle.prototype, \"label\", 2);\n__decorateClass([\n  property({ reflect: true, attribute: \"static-color\" })\n], ProgressCircle.prototype, \"staticColor\", 2);\n__decorateClass([\n  property({ type: Number })\n], ProgressCircle.prototype, \"progress\", 2);\n__decorateClass([\n  query(\"slot\")\n], ProgressCircle.prototype, \"slotEl\", 2);\n//# sourceMappingURL=ProgressCircle.dev.js.map\n"],"names":[],"sourceRoot":""}