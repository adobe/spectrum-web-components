{"version":3,"file":"2272.3fac6ad3.iframe.bundle.js","mappings":";;AACA;;;AA0CA;;AAEA;AAaA;AAEA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@adobe/spectrum-web-components/./packages/color-field/src/ColorField.dev.js","webpack://@adobe/spectrum-web-components/./packages/color-field/stories/template.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport { ColorController } from \"@spectrum-web-components/reactive-controllers/src/ColorController.js\";\nimport { TextfieldBase } from \"@spectrum-web-components/textfield\";\nimport styles from \"./color-field.css.js\";\nexport class ColorField extends TextfieldBase {\n  constructor() {\n    super();\n    this.viewColor = false;\n    this._value = \"\";\n    this.colorController = new ColorController(this);\n  }\n  static get styles() {\n    return [...super.styles, styles];\n  }\n  set value(value) {\n    if (value === this.value) {\n      return;\n    }\n    const oldValue = this._value;\n    this._value = value;\n    this.requestUpdate(\"value\", oldValue);\n  }\n  get value() {\n    return this._value;\n  }\n  renderColorHandle() {\n    return this.viewColor && this.valid ? html`\n                  <sp-color-handle\n                      size=\"m\"\n                      color=\"${this.colorController.getColor(\"srgb\").toString()}\"\n                  ></sp-color-handle>\n              ` : html``;\n  }\n  getColorValue() {\n    if (!this.valid) {\n      return \"\";\n    }\n    return this.colorController.getColor(\"srgb\").toString();\n  }\n  render() {\n    if (this.viewColor) {\n      import(\"@spectrum-web-components/color-handle/sp-color-handle.js\");\n    }\n    return html`\n            ${super.render()} ${this.renderColorHandle()}\n        `;\n  }\n  checkValidity() {\n    let validity = super.checkValidity();\n    if (this.value) {\n      this.valid = validity = this.colorController.validateColorString(\n        this.value\n      ).isValid;\n      this.invalid = !validity;\n      if (this.valid) {\n        this.colorController.color = this.value;\n      }\n    } else {\n      this.valid = this.invalid = false;\n    }\n    return validity;\n  }\n}\n__decorateClass([\n  property({ type: Boolean, attribute: \"view-color\" })\n], ColorField.prototype, \"viewColor\", 2);\n//# sourceMappingURL=ColorField.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/color-field/sp-color-field.js\";\nexport const ColorFieldMarkup = ({\n  label = \"Color Field\",\n  quiet = false,\n  size = \"m\",\n  readonly = false,\n  disabled = false,\n  viewColor = false,\n  value = \"\"\n} = {}) => {\n  return html`\n        <sp-color-field\n            label=${label}\n            size=${size}\n            value=${value}\n            ?view-color=${viewColor}\n            ?quiet=${quiet}\n            ?readonly=${readonly}\n            ?disabled=${disabled}\n        ></sp-color-field>\n    `;\n};\nexport const Template = ColorFieldMarkup;\n//# sourceMappingURL=template.js.map\n"],"names":[],"sourceRoot":""}