{"version":3,"file":"alert-dialog-stories-alert-dialog-stories.961e00d8.iframe.bundle.js","mappings":";;AACA;;AA8FA;AAMA;AAEA;;AAIA;;AAGA;;;;AA+DA;;;AAKA;;;AAGA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;ACrJA;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA","sources":["webpack://@adobe/spectrum-web-components/./packages/alert-dialog/src/AlertDialog.dev.js","webpack://@adobe/spectrum-web-components/./packages/alert-dialog/stories/alert-dialog.stories.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/button/sp-button.js\";\nimport { FocusVisiblePolyfillMixin } from \"@spectrum-web-components/shared/src/focus-visible.js\";\nimport { randomID } from \"@spectrum-web-components/shared/src/random-id.js\";\nimport { conditionAttributeWithId } from \"@spectrum-web-components/base/src/condition-attribute-with-id.js\";\nimport { ResizeController } from \"@lit-labs/observers/resize-controller.js\";\nimport alertStyles from \"./alert-dialog.css.js\";\nexport const alertDialogVariants = [\n  \"confirmation\",\n  \"information\",\n  \"warning\",\n  \"error\",\n  \"destructive\",\n  \"secondary\"\n];\nfunction gatherAppliedIdsFromSlottedChildren(slot, idBase) {\n  const assignedElements = slot.assignedElements();\n  const ids = [];\n  assignedElements.forEach((el) => {\n    if (el.id) {\n      ids.push(el.id);\n    } else {\n      const id = idBase + `-${randomID()}`;\n      el.id = id;\n      ids.push(id);\n    }\n  });\n  return ids;\n}\nconst _AlertDialog = class _AlertDialog extends FocusVisiblePolyfillMixin(SpectrumElement) {\n  constructor() {\n    super(...arguments);\n    this.resizeController = new ResizeController(this, {\n      callback: () => {\n        this.shouldManageTabOrderForScrolling();\n      }\n    });\n    this._variant = \"\";\n    this.labelledbyId = `sp-dialog-label-${_AlertDialog.instanceCount++}`;\n    this.shouldManageTabOrderForScrolling = () => {\n      if (!this.contentElement) return;\n      const { offsetHeight, scrollHeight } = this.contentElement;\n      if (offsetHeight < scrollHeight) {\n        this.contentElement.tabIndex = 0;\n      } else {\n        this.contentElement.removeAttribute(\"tabindex\");\n      }\n    };\n    this.describedbyId = `sp-dialog-description-${_AlertDialog.instanceCount++}`;\n  }\n  static get styles() {\n    return [alertStyles];\n  }\n  set variant(variant) {\n    if (variant === this.variant) {\n      return;\n    }\n    const oldValue = this.variant;\n    if (alertDialogVariants.includes(variant)) {\n      this.setAttribute(\"variant\", variant);\n      this._variant = variant;\n    } else {\n      this.removeAttribute(\"variant\");\n      this._variant = \"\";\n    }\n    this.requestUpdate(\"variant\", oldValue);\n  }\n  get variant() {\n    return this._variant;\n  }\n  renderIcon() {\n    switch (this.variant) {\n      case \"warning\":\n      case \"error\":\n        return html`\n                    <sp-icon-alert class=\"icon\"></sp-icon-alert>\n                `;\n      default:\n        return html``;\n    }\n  }\n  renderHeading() {\n    return html`\n            <slot name=\"heading\" @slotchange=${this.onHeadingSlotchange}></slot>\n        `;\n  }\n  renderContent() {\n    return html`\n            <div class=\"content\">\n                <slot @slotchange=${this.onContentSlotChange}></slot>\n            </div>\n        `;\n  }\n  onHeadingSlotchange({\n    target\n  }) {\n    if (this.conditionLabelledby) {\n      this.conditionLabelledby();\n      delete this.conditionLabelledby;\n    }\n    const ids = gatherAppliedIdsFromSlottedChildren(\n      target,\n      this.labelledbyId\n    );\n    if (ids.length) {\n      this.conditionLabelledby = conditionAttributeWithId(\n        this,\n        \"aria-labelledby\",\n        ids\n      );\n    }\n  }\n  onContentSlotChange({\n    target\n  }) {\n    requestAnimationFrame(() => {\n      this.resizeController.unobserve(this.contentElement);\n      this.resizeController.observe(this.contentElement);\n    });\n    if (this.conditionDescribedby) {\n      this.conditionDescribedby();\n      delete this.conditionDescribedby;\n    }\n    const ids = gatherAppliedIdsFromSlottedChildren(\n      target,\n      this.describedbyId\n    );\n    if (ids.length && ids.length < 4) {\n      this.conditionDescribedby = conditionAttributeWithId(\n        this,\n        \"aria-describedby\",\n        ids\n      );\n    } else if (!ids.length) {\n      const idProvided = !!this.id;\n      if (!idProvided) this.id = this.describedbyId;\n      const conditionDescribedby = conditionAttributeWithId(\n        this,\n        \"aria-describedby\",\n        this.id\n      );\n      this.conditionDescribedby = () => {\n        conditionDescribedby();\n        if (!idProvided) {\n          this.removeAttribute(\"id\");\n        }\n      };\n    }\n  }\n  renderButtons() {\n    return html`\n            <sp-button-group class=\"button-group\">\n                <slot name=\"button\"></slot>\n            </sp-button-group>\n        `;\n  }\n  render() {\n    return html`\n            <div class=\"grid\">\n                <div class=\"header\">\n                    ${this.renderHeading()} ${this.renderIcon()}\n                </div>\n                <sp-divider size=\"m\" class=\"divider\"></sp-divider>\n                ${this.renderContent()} ${this.renderButtons()}\n            </div>\n        `;\n  }\n};\n_AlertDialog.instanceCount = 0;\n__decorateClass([\n  query(\".content\")\n], _AlertDialog.prototype, \"contentElement\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], _AlertDialog.prototype, \"variant\", 1);\nexport let AlertDialog = _AlertDialog;\n//# sourceMappingURL=AlertDialog.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/button/sp-button.js\";\nimport \"@spectrum-web-components/alert-dialog/sp-alert-dialog.js\";\nexport default {\n  title: \"Alert Dialog\",\n  component: \"sp-alert-dialog\"\n};\nexport const confirmation = () => {\n  return html`\n        <sp-alert-dialog variant=\"confirmation\">\n            <h2 slot=\"heading\">Disclaimer</h2>\n            Smart filters are nondestructive and will preserve your original\n            images.\n            <sp-button\n                slot=\"button\"\n                id=\"cancelButton\"\n                variant=\"secondary\"\n                treatment=\"outline\"\n                onclick=\"this.dispatchEvent(new Event('close', { bubbles: true, composed: true }));\"\n            >\n                Cancel\n            </sp-button>\n            <sp-button\n                slot=\"button\"\n                id=\"confirmButton\"\n                variant=\"accent\"\n                treatment=\"fill\"\n                onclick=\"this.dispatchEvent(new Event('close', { bubbles: true, composed: true }));\"\n            >\n                Enable\n            </sp-button>\n        </sp-alert-dialog>\n    `;\n};\nexport const information = () => {\n  return html`\n        <sp-alert-dialog variant=\"information\">\n            <h2 slot=\"heading\">Connect to wifi</h2>\n            Please connect to wifi to sync your projects or go to Settings to\n            change your preferences.\n            <sp-button\n                slot=\"button\"\n                id=\"cancelButton\"\n                variant=\"secondary\"\n                treatment=\"outline\"\n                onclick=\"this.dispatchEvent(new Event('close', { bubbles: true, composed: true }));\"\n            >\n                Cancel\n            </sp-button>\n            <sp-button\n                slot=\"button\"\n                id=\"confirmButton\"\n                variant=\"primary\"\n                treatment=\"outline\"\n                onclick=\"this.dispatchEvent(new Event('close', { bubbles: true, composed: true }));\"\n            >\n                Continue\n            </sp-button>\n        </sp-alert-dialog>\n    `;\n};\nexport const warning = () => {\n  return html`\n        <sp-alert-dialog variant=\"warning\">\n            <h2 slot=\"heading\">Unverified format</h2>\n            This format has not been verified and may not be viewable for some\n            users. Do you want to continue publishing?\n            <sp-button\n                slot=\"button\"\n                id=\"cancelButton\"\n                variant=\"secondary\"\n                treatment=\"outline\"\n                onclick=\"this.dispatchEvent(new Event('close', { bubbles: true, composed: true }));\"\n            >\n                Cancel\n            </sp-button>\n            <sp-button\n                slot=\"button\"\n                id=\"confirmButton\"\n                variant=\"primary\"\n                treatment=\"outline\"\n                onclick=\"this.dispatchEvent(new Event('close', { bubbles: true, composed: true }));\"\n            >\n                Continue\n            </sp-button>\n        </sp-alert-dialog>\n    `;\n};\nexport const error = () => {\n  return html`\n        <sp-alert-dialog variant=\"error\">\n            <h2 slot=\"heading\">Unable to share</h2>\n            An error occured while sharing your project. Please verify the email\n            address and try again.\n            <sp-button\n                slot=\"button\"\n                id=\"confirmButton\"\n                variant=\"primary\"\n                treatment=\"outline\"\n                onclick=\"this.dispatchEvent(new Event('close', { bubbles: true, composed: true }));\"\n            >\n                Continue\n            </sp-button>\n        </sp-alert-dialog>\n    `;\n};\nexport const destructive = () => {\n  return html`\n        <sp-alert-dialog variant=\"destructive\">\n            <h2 slot=\"heading\">Delete 3 documents?</h2>\n            Are you sure you want to delete the 3 selected documents?\n            <sp-button\n                slot=\"button\"\n                id=\"cancelButton\"\n                variant=\"secondary\"\n                treatment=\"outline\"\n                onclick=\"this.dispatchEvent(new Event('close', { bubbles: true, composed: true }));\"\n            >\n                Cancel\n            </sp-button>\n            <sp-button\n                slot=\"button\"\n                id=\"confirmButton\"\n                variant=\"negative\"\n                treatment=\"fill\"\n                onclick=\"this.dispatchEvent(new Event('close', { bubbles: true, composed: true }));\"\n            >\n                Delete\n            </sp-button>\n        </sp-alert-dialog>\n    `;\n};\nexport const secondary = () => {\n  return html`\n        <sp-alert-dialog variant=\"secondary\">\n            <h2 slot=\"heading\">Rate this app</h2>\n            If you enjoy our app, would you mind taking a moment to rate it?\n            <sp-button\n                slot=\"button\"\n                id=\"secondaryButton\"\n                variant=\"secondary\"\n                treatment=\"outline\"\n                onclick=\"this.dispatchEvent(new Event('close', { bubbles: true, composed: true }));\"\n            >\n                No, thanks\n            </sp-button>\n            <sp-button\n                slot=\"button\"\n                id=\"cancelButton\"\n                variant=\"secondary\"\n                treatment=\"outline\"\n                onclick=\"this.dispatchEvent(new Event('close', { bubbles: true, composed: true }));\"\n            >\n                Remind me later\n            </sp-button>\n            <sp-button\n                slot=\"button\"\n                id=\"confirmButton\"\n                variant=\"primary\"\n                treatment=\"outline\"\n                onclick=\"this.dispatchEvent(new Event('close', { bubbles: true, composed: true }));\"\n            >\n                Rate now\n            </sp-button>\n        </sp-alert-dialog>\n    `;\n};\n//# sourceMappingURL=alert-dialog.stories.js.map\n;export const __namedExportsOrder = [\"confirmation\",\"information\",\"warning\",\"error\",\"destructive\",\"secondary\"];"],"names":[],"sourceRoot":""}