{"version":3,"file":"3723.ce61a1f0.iframe.bundle.js","mappings":";AA2FA;AACA;;AAGA","sources":["webpack://@adobe/spectrum-web-components/./packages/iconset/src/iconset-svg.dev.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html\n} from \"@spectrum-web-components/base\";\nimport { query } from \"@spectrum-web-components/base/src/decorators.js\";\nimport { Iconset } from \"./iconset.dev.js\";\nexport class IconsetSVG extends Iconset {\n  constructor() {\n    super(...arguments);\n    this.iconMap = /* @__PURE__ */ new Map();\n  }\n  /**\n   * First updated handler just ensures we've processed any slotted symbols\n   */\n  updated(changedProperties) {\n    if (!this.slotContainer) {\n      return;\n    }\n    const currentSVGNodes = this.getSVGNodes(this.slotContainer);\n    this.updateSVG(currentSVGNodes);\n    super.updated(changedProperties);\n  }\n  /**\n   * Applies the requested icon from this iconset instance to the given element.\n   *\n   * @param el - the element to apply the icon to\n   * @param icon - the name of the icon within this set to apply.\n   */\n  async applyIconToElement(el, icon, _size, label) {\n    await this.updateComplete;\n    const iconSymbol = this.iconMap.get(icon);\n    if (!iconSymbol) {\n      throw new Error(`Unable to find icon ${icon}`);\n    }\n    const clonedNode = this.prepareSvgClone(iconSymbol);\n    clonedNode.setAttribute(\"role\", \"img\");\n    if (label) {\n      clonedNode.setAttribute(\"aria-label\", label);\n    } else {\n      clonedNode.setAttribute(\"aria-hidden\", \"true\");\n    }\n    if (el.shadowRoot) {\n      el.shadowRoot.appendChild(clonedNode);\n    } else {\n      el.appendChild(clonedNode);\n    }\n  }\n  /**\n   * Returns a list of all icons in this iconset.\n   */\n  getIconList() {\n    return [...this.iconMap.keys()];\n  }\n  prepareSvgClone(sourceSvg) {\n    const content = sourceSvg.cloneNode(true);\n    const svg = document.createElementNS(\n      \"http://www.w3.org/2000/svg\",\n      \"svg\"\n    );\n    const viewBox = content.getAttribute(\"viewBox\") || \"\";\n    const cssText = \"pointer-events: none; display: block; width: 100%; height: 100%;\";\n    svg.style.cssText = cssText;\n    svg.setAttribute(\"viewBox\", viewBox);\n    svg.setAttribute(\"preserveAspectRatio\", \"xMidYMid meet\");\n    svg.setAttribute(\"focusable\", \"false\");\n    while (content.childNodes.length > 0) {\n      svg.appendChild(content.childNodes[0]);\n    }\n    return svg;\n  }\n  getSVGIconName(icon) {\n    return icon;\n  }\n  getSanitizedIconName(icon) {\n    return icon;\n  }\n  renderDefaultContent() {\n    return html``;\n  }\n  render() {\n    return html`\n            <slot @slotchange=${this.onSlotChange}>\n                ${this.renderDefaultContent()}\n            </slot>\n        `;\n  }\n  updateSVG(nodes) {\n    const symbols = nodes.reduce((prev, svgNode) => {\n      const containedSymbols = svgNode.querySelectorAll(\"symbol\");\n      prev.push(...containedSymbols);\n      return prev;\n    }, []);\n    symbols.forEach((symbol) => {\n      this.iconMap.set(this.getSanitizedIconName(symbol.id), symbol);\n    });\n  }\n  getSVGNodes(slotTarget) {\n    const nodes = slotTarget.assignedNodes({ flatten: true });\n    const svgNodes = nodes.filter((node) => {\n      return node.nodeName === \"svg\";\n    });\n    return svgNodes;\n  }\n  onSlotChange(event) {\n    const slotTarget = event.target;\n    const svgNodes = this.getSVGNodes(slotTarget);\n    this.updateSVG(svgNodes);\n  }\n}\n__decorateClass([\n  query(\"slot\")\n], IconsetSVG.prototype, \"slotContainer\", 2);\n//# sourceMappingURL=iconset-svg.dev.js.map\n"],"names":[],"sourceRoot":""}