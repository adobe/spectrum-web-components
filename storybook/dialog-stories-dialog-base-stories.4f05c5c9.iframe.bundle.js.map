{"version":3,"file":"dialog-stories-dialog-base-stories.4f05c5c9.iframe.bundle.js","mappings":";;;;AAqJA;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;ACxIA;;ACtBA;;;AAOA;;AAQA;;AAGA;;;AAKA;AAOA;AAiBA;;;;;;;;;;;;;;;;AAwBA;ADzDA;;AAYA;;;ACiDA;;;;;;;;;;;;;;;AAsBA;;;AAIA;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;AA4BA;;;AAvBA;;;;;;;;;;;;;AAuBA;;;;AASA;;AChOA;;ACDA;AAmGA;AAEA;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAIA;;;;AAcA;;AAEA;AAMA;;ACxMA","sources":["webpack://@adobe/spectrum-web-components/./packages/dialog/src/DialogBase.dev.js","webpack://@adobe/spectrum-web-components/./packages/dialog/stories/index.js","webpack://@adobe/spectrum-web-components/./packages/dialog/stories/dialog-base.stories.js","webpack://@adobe/spectrum-web-components/./packages/modal/src/modal.css.js","webpack://@adobe/spectrum-web-components/./packages/overlay/src/OverlayTrigger.dev.js","webpack://@adobe/spectrum-web-components/./packages/underlay/src/Underlay.dev.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/underlay/sp-underlay.js\";\nimport \"@spectrum-web-components/button/sp-button.js\";\nimport \"@spectrum-web-components/dialog/sp-dialog.js\";\nimport modalWrapperStyles from \"@spectrum-web-components/modal/src/modal-wrapper.css.js\";\nimport modalStyles from \"@spectrum-web-components/modal/src/modal.css.js\";\nimport { FocusVisiblePolyfillMixin } from \"@spectrum-web-components/shared\";\nimport { firstFocusableIn } from \"@spectrum-web-components/shared/src/first-focusable-in.js\";\nexport class DialogBase extends FocusVisiblePolyfillMixin(SpectrumElement) {\n  constructor() {\n    super(...arguments);\n    this.dismissable = false;\n    this.open = false;\n    this.responsive = false;\n    this.transitionPromise = Promise.resolve();\n    this.resolveTransitionPromise = () => {\n      return;\n    };\n    this.underlay = false;\n    this.animating = false;\n  }\n  static get styles() {\n    return [modalWrapperStyles, modalStyles];\n  }\n  get dialog() {\n    const dialog = this.shadowRoot.querySelector(\"slot\").assignedElements()[0];\n    if (true) {\n      if (!dialog) {\n        window.__swc.warn(\n          this,\n          `<${this.localName}> expects to be provided dialog content via its default slot.`,\n          \"https://opensource.adobe.com/spectrum-web-components/components/dialog-base/#dialog\"\n        );\n      }\n    }\n    return dialog || this;\n  }\n  async focus() {\n    if (this.shadowRoot) {\n      const firstFocusable = firstFocusableIn(this.dialog);\n      if (firstFocusable) {\n        if (firstFocusable.updateComplete) {\n          await firstFocusable.updateComplete;\n        }\n        firstFocusable.focus();\n      } else {\n        this.dialog.focus();\n      }\n    } else {\n      super.focus();\n    }\n  }\n  overlayWillCloseCallback() {\n    if (!this.open) return this.animating;\n    this.close();\n    return true;\n  }\n  dismiss() {\n    if (!this.dismissable) {\n      return;\n    }\n    this.close();\n  }\n  handleClose(event) {\n    event.stopPropagation();\n    this.close();\n  }\n  close() {\n    this.open = false;\n  }\n  dispatchClosed() {\n    this.dispatchEvent(\n      new Event(\"close\", {\n        bubbles: true\n      })\n    );\n  }\n  handleTransitionEvent(event) {\n    this.dispatchEvent(\n      new TransitionEvent(event.type, {\n        bubbles: true,\n        composed: true,\n        propertyName: event.propertyName\n      })\n    );\n  }\n  handleUnderlayTransitionend(event) {\n    if (!this.open && event.propertyName === \"visibility\") {\n      this.resolveTransitionPromise();\n    }\n    this.handleTransitionEvent(event);\n  }\n  handleModalTransitionend(event) {\n    if (this.open || !this.underlay) {\n      this.resolveTransitionPromise();\n    }\n    this.handleTransitionEvent(event);\n  }\n  get hasTransitionDuration() {\n    const modal = this.shadowRoot.querySelector(\".modal\");\n    const modalTransitionDurations = window.getComputedStyle(modal).transitionDuration;\n    for (const duration of modalTransitionDurations.split(\",\"))\n      if (parseFloat(duration) > 0) return true;\n    const underlay = this.shadowRoot.querySelector(\n      \"sp-underlay\"\n    );\n    if (underlay) {\n      const underlayTransitionDurations = window.getComputedStyle(underlay).transitionDuration;\n      for (const duration of underlayTransitionDurations.split(\",\"))\n        if (parseFloat(duration) > 0) return true;\n    }\n    return false;\n  }\n  update(changes) {\n    if (changes.has(\"open\") && changes.get(\"open\") !== void 0) {\n      const hasTransitionDuration = this.hasTransitionDuration;\n      this.animating = true;\n      this.transitionPromise = new Promise((res) => {\n        this.resolveTransitionPromise = () => {\n          this.animating = false;\n          if (!this.open && hasTransitionDuration)\n            this.dispatchClosed();\n          res();\n        };\n      });\n      if (!this.open && !hasTransitionDuration) this.dispatchClosed();\n    }\n    super.update(changes);\n  }\n  renderDialog() {\n    return html`\n            <slot></slot>\n        `;\n  }\n  render() {\n    return html`\n            ${this.underlay ? html`\n                      <sp-underlay\n                          ?open=${this.open}\n                          @close=${this.dismiss}\n                          @transitionrun=${this.handleTransitionEvent}\n                          @transitionend=${this.handleUnderlayTransitionend}\n                          @transitioncancel=${this.handleTransitionEvent}\n                      ></sp-underlay>\n                  ` : nothing}\n            <div\n                class=\"modal ${this.mode}\"\n                @transitionrun=${this.handleTransitionEvent}\n                @transitionend=${this.handleModalTransitionend}\n                @transitioncancel=${this.handleTransitionEvent}\n                @close=${this.handleClose}\n            >\n                ${this.renderDialog()}\n            </div>\n        `;\n  }\n  updated(changes) {\n    if (changes.has(\"open\")) {\n      if (this.open) {\n        if (\"updateComplete\" in this.dialog && \"shouldManageTabOrderForScrolling\" in this.dialog) {\n          this.dialog.updateComplete.then(() => {\n            this.dialog.shouldManageTabOrderForScrolling();\n          });\n        }\n      }\n    }\n  }\n  /**\n   * Bind the open/close transition into the update complete lifecycle so\n   * that the overlay system can wait for it to be \"visibly ready\" before\n   * attempting to throw focus into the content contained herein. Not\n   * waiting for this can cause small amounts of page scroll to happen\n   * while opening the Tray when focusable content is included: e.g. Menu\n   * elements whose selected Menu Item is not the first Menu Item.\n   */\n  async getUpdateComplete() {\n    const complete = await super.getUpdateComplete();\n    await this.transitionPromise;\n    return complete;\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], DialogBase.prototype, \"dismissable\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], DialogBase.prototype, \"open\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], DialogBase.prototype, \"mode\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], DialogBase.prototype, \"responsive\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], DialogBase.prototype, \"underlay\", 2);\n//# sourceMappingURL=DialogBase.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/button/sp-button.js\";\nimport \"@spectrum-web-components/overlay/sp-overlay.js\";\nclass CountdownWatcher extends HTMLElement {\n  constructor() {\n    super(...arguments);\n    this.readyPromise = Promise.resolve(false);\n  }\n  connectedCallback() {\n    this.previousElementSibling.addEventListener(\n      \"countdown-complete\",\n      () => {\n        this.ready(true);\n      }\n    );\n    this.readyPromise = new Promise((res) => {\n      this.ready = res;\n    });\n  }\n  get updateComplete() {\n    return this.readyPromise;\n  }\n}\ncustomElements.define(\"countdown-complete-watcher\", CountdownWatcher);\nexport const disabledButtonDecorator = (story) => {\n  return html`\n        ${story()}\n        <countdown-complete-watcher></countdown-complete-watcher>\n    `;\n};\nexport const withOverlayDecorator = (story) => {\n  return html`\n        <sp-button variant=\"primary\" id=\"trigger\">Toggle Dialog</sp-button>\n        <sp-overlay type=\"modal\" trigger=\"trigger@click\" open>\n            ${story()}\n        </sp-overlay>\n    `;\n};\nexport const disabledButtonWithOverlayDecorator = (story) => withOverlayDecorator(() => disabledButtonDecorator(story));\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/button/sp-button.js\";\nimport \"@spectrum-web-components/checkbox/sp-checkbox.js\";\nimport \"@spectrum-web-components/dialog/sp-dialog-base.js\";\nimport \"@spectrum-web-components/dialog/sp-dialog.js\";\nimport { trigger } from \"@spectrum-web-components/overlay\";\nimport { alertDestructive } from \"./dialog.stories.js\";\nimport { portrait } from \"./images.js\";\nimport {\n  disabledButtonWithOverlayDecorator,\n  withOverlayDecorator\n} from \"./index.js\";\nexport default {\n  title: \"Dialog Base\",\n  component: \"sp-dialog-base\"\n};\nexport const slotted = () => html`\n    <sp-dialog-base\n        underlay\n        @click=${(event) => {\n  if (event.target.localName === \"sp-button\") {\n    event.target.dispatchEvent(\n      new Event(\"close\", { bubbles: true, composed: true })\n    );\n  }\n}}\n    >\n        ${alertDestructive()}\n    </sp-dialog-base>\n`;\nslotted.decorators = [withOverlayDecorator];\nexport const disabledButton = () => {\n  return html`\n        <sp-dialog-base\n            underlay\n            @click=${(event) => {\n    if (event.target.localName === \"sp-button\") {\n      event.target.dispatchEvent(\n        new Event(\"close\", { bubbles: true, composed: true })\n      );\n    }\n  }}\n            @sp-opened=${({ target }) => {\n    let count = 5;\n    const timer = setInterval(() => {\n      count -= 1;\n      if (!count) {\n        document.querySelector(\n          \"#changing-header\"\n        ).textContent = \"The button in this dialog is now enabled\";\n        document.querySelector(\n          \"#changing-button\"\n        ).disabled = false;\n        clearInterval(timer);\n        target.dispatchEvent(new Event(\"countdown-complete\"));\n      }\n      document.querySelector(\".time\").textContent = count.toString();\n    }, 1e3);\n  }}\n            @close=${() => {\n    document.querySelector(\"#changing-header\").textContent = \"The button in this dialog is disabled\";\n    document.querySelector(\n      \"#changing-button\"\n    ).disabled = true;\n    document.querySelector(\".time\").textContent = \"5\";\n  }}\n        >\n            <sp-dialog size=\"s\">\n                <h2 slot=\"heading\" id=\"changing-header\">\n                    The button in this dialog is disabled\n                </h2>\n                <p>\n                    After about\n                    <span class=\"time\">5</span>\n                    seconds the button with be enabled.\n                </p>\n                <sp-button disabled slot=\"button\" id=\"changing-button\">\n                    Ok\n                </sp-button>\n            </sp-dialog>\n        </sp-dialog-base>\n    `;\n};\ndisabledButton.decorators = [disabledButtonWithOverlayDecorator];\nexport const notAgain = () => html`\n    <sp-dialog-base\n        underlay\n        @click=${(event) => {\n  if (event.target.localName === \"sp-button\") {\n    event.target.dispatchEvent(\n      new Event(\"close\", { bubbles: true, composed: true })\n    );\n  }\n}}\n    >\n        <sp-dialog size=\"s\">\n            <h2 slot=\"heading\">A thing is about to happen</h2>\n            <p>Something that might happen a lot is about to happen.</p>\n            <p>\n                The click events for the \"OK\" button are bound to the story not\n                to the components in specific.\n            </p>\n            <sp-button variant=\"secondary\" treatment=\"fill\" slot=\"button\">\n                Ok\n            </sp-button>\n            <sp-checkbox slot=\"footer\">Don't show me this again</sp-checkbox>\n        </sp-dialog>\n    </sp-dialog-base>\n`;\nnotAgain.decorators = [withOverlayDecorator];\nexport const moreCustom = () => html`\n    <sp-dialog-base\n        underlay\n        @click=${(event) => {\n  if (event.target.localName === \"sp-button\") {\n    event.target.dispatchEvent(\n      new Event(\"close\", { bubbles: true, composed: true })\n    );\n  }\n}}\n    >\n        <div style=\"display: flex;\">\n            <div\n                style=\"\n                display: grid;\n                place-content: center;\n                grid-template-columns: calc(100% - 40px);\n                grid-template-rows: calc(100% - 40px);\n            \"\n            >\n                <img\n                    src=${portrait}\n                    alt=\"\"\n                    style=\"\n                        width: 100%;\n                        height: 100%;\n                        object-fit: contain;\n                        object-placement: center;\n                    \"\n                />\n            </div>\n            <sp-dialog size=\"s\">\n                <h2 slot=\"heading\">Look at that image</h2>\n                <p>\n                    Its position has been customized beyond the language of\n                    Spectrum. Be careful with all this power. There's no\n                    \"mobile\" default for delivering content like this.\n                </p>\n                <sp-button variant=\"accent\" treatment=\"outline\" slot=\"button\">\n                    Ok\n                </sp-button>\n            </sp-dialog>\n        </div>\n    </sp-dialog-base>\n`;\nmoreCustom.decorators = [withOverlayDecorator];\nexport const fullyCustom = () => html`\n    <sp-dialog-base\n        underlay\n        @click=${(event) => {\n  if (event.target.localName === \"button\") {\n    event.target.dispatchEvent(\n      new Event(\"close\", { bubbles: true, composed: true })\n    );\n  }\n}}\n    >\n        <div id=\"fully-custom-dialog\">\n            <style>\n                #fully-custom-dialog {\n                    margin: 1em;\n                }\n            </style>\n            <h2>Custom headline</h2>\n            <p>\n                The click events for the \"Done\" button are bound to the story\n                not to the components in specific.\n            </p>\n            <p>\n                This is a demonstration of what is possible with\n                &lt;sp-dialog-base&gt;, only, and should not be seen as an\n                endorsement for fully custom dialog UIs.\n            </p>\n            <p>Fully open content area, for whatever DOM you would like.</p>\n            <button>Done</button>\n        </div>\n    </sp-dialog-base>\n`;\nfullyCustom.decorators = [withOverlayDecorator];\nexport const lazyLoaded = () => {\n  const template = () => html`\n        <sp-dialog-base\n            underlay\n            @click=${(event) => {\n    if (event.target.localName === \"sp-button\") {\n      event.target.dispatchEvent(\n        new Event(\"close\", { bubbles: true, composed: true })\n      );\n    }\n  }}\n        >\n            <sp-dialog size=\"m\">\n                <h2 slot=\"heading\">This is a heading</h2>\n                <p>\n                    The click on the \"OK\" button should close the overlay with\n                    the correct animation (duration).\n                </p>\n                <sp-button variant=\"secondary\" treatment=\"fill\" slot=\"button\">\n                    Ok\n                </sp-button>\n            </sp-dialog>\n        </sp-dialog-base>\n    `;\n  return html`\n        <sp-button\n            variant=\"primary\"\n            ${trigger(template, {\n    open: false,\n    triggerInteraction: \"click\"\n  })}\n        >\n            Open dialog\n        </sp-button>\n    `;\n};\nlazyLoaded.swc_vrt = {\n  skip: true\n};\n//# sourceMappingURL=dialog-base.stories.js.map\n;export const __namedExportsOrder = [\"slotted\",\"disabledButton\",\"notAgain\",\"moreCustom\",\"fullyCustom\",\"lazyLoaded\"];","\"use strict\";import{css as a}from\"@spectrum-web-components/base\";const i=a`\n    :host{--spectrum-modal-confirm-entry-animation-duration:var(--mod-modal-confirm-entry-animation-duration,var(--spectrum-animation-duration-500));--spectrum-modal-confirm-entry-animation-delay:var(--mod-overlay-animation-duration-opened,var(--mod-modal-confirm-entry-animation-delay,var(--spectrum-animation-duration-200)));--spectrum-modal-confirm-exit-animation-duration:var(--mod-overlay-animation-duration,var(--mod-modal-confirm-exit-animation-duration,var(--spectrum-animation-duration-100)));--spectrum-modal-confirm-exit-animation-delay:var(--mod-modal-confirm-exit-animation-delay,var(--spectrum-animation-duration-0));--spectrum-modal-fullscreen-margin:var(--mod-modal-fullscreen-margin,32px)}.modal{visibility:hidden;opacity:0;transform:translateY(var(--mod-modal-confirm-entry-animation-distance,var(--spectrum-dialog-confirm-entry-animation-distance)));z-index:1;max-block-size:90vh;max-block-size:var(--mod-modal-max-height,90vh);max-inline-size:90%;max-inline-size:var(--mod-modal-max-width,90%);background:var(--mod-modal-background-color,var(--spectrum-modal-background-color));border-radius:var(--mod-modal-confirm-border-radius,var(--spectrum-corner-radius-100));pointer-events:auto;transition:opacity var(--spectrum-modal-confirm-exit-animation-duration)var(--spectrum-animation-ease-in)var(--spectrum-modal-confirm-exit-animation-delay),visibility var(--spectrum-animation-duration-0)var(--spectrum-animation-linear)calc(var(--spectrum-modal-confirm-exit-animation-delay) + var(--spectrum-modal-confirm-exit-animation-duration)),transform var(--spectrum-animation-duration-0)var(--spectrum-animation-linear)calc(var(--spectrum-modal-confirm-exit-animation-delay) + var(--spectrum-modal-confirm-exit-animation-duration));outline:none;overflow:hidden}:host([open]) .modal{pointer-events:auto;visibility:visible;opacity:1;transition:transform var(--spectrum-modal-confirm-entry-animation-duration)var(--spectrum-animation-ease-out)var(--spectrum-modal-confirm-entry-animation-delay),opacity var(--spectrum-modal-confirm-entry-animation-duration)var(--spectrum-animation-ease-out)var(--spectrum-modal-confirm-entry-animation-delay);transform:translateY(0)}@media only screen and (device-height<=350px),only screen and (device-width<=400px){:host([responsive]) .modal{inline-size:100%;block-size:100%;max-inline-size:100%;max-block-size:100%;border-radius:0}}.fullscreen{max-inline-size:none;max-block-size:none;position:fixed;inset-block-start:var(--spectrum-modal-fullscreen-margin);inset-block-end:var(--spectrum-modal-fullscreen-margin);inset-inline-start:var(--spectrum-modal-fullscreen-margin);inset-inline-end:var(--spectrum-modal-fullscreen-margin)}.fullscreenTakeover{max-inline-size:none;max-block-size:none;box-sizing:border-box;border:none;border-radius:0;position:fixed;inset:0}.fullscreenTakeover,:host([open]) .fullscreenTakeover{transform:none}:host{--spectrum-modal-background-color:var(--system-modal-background-color)}:host{--spectrum-dialog-confirm-exit-animation-duration:var(--swc-test-duration);--spectrum-dialog-confirm-entry-animation-duration:var(--swc-test-duration);--spectrum-modal-confirm-entry-animation-distance:var(--spectrum-dialog-confirm-entry-animation-distance);height:100dvh}.modal{overflow:visible}\n`;export default i;\n//# sourceMappingURL=modal.css.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query,\n  state\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/overlay/sp-overlay.js\";\nimport overlayTriggerStyles from \"./overlay-trigger.css.js\";\nexport class OverlayTrigger extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.offset = 6;\n    this.disabled = false;\n    this.receivesFocus = \"auto\";\n    this.clickContent = [];\n    this.longpressContent = [];\n    this.hoverContent = [];\n    this.targetContent = [];\n  }\n  static get styles() {\n    return [overlayTriggerStyles];\n  }\n  getAssignedElementsFromSlot(slot) {\n    return slot.assignedElements({ flatten: true });\n  }\n  handleTriggerContent(event) {\n    this.targetContent = this.getAssignedElementsFromSlot(event.target);\n  }\n  handleSlotContent(event) {\n    switch (event.target.name) {\n      case \"click-content\":\n        this.clickContent = this.getAssignedElementsFromSlot(\n          event.target\n        );\n        break;\n      case \"longpress-content\":\n        this.longpressContent = this.getAssignedElementsFromSlot(\n          event.target\n        );\n        break;\n      case \"hover-content\":\n        this.hoverContent = this.getAssignedElementsFromSlot(\n          event.target\n        );\n        break;\n    }\n  }\n  handleBeforetoggle(event) {\n    const { target } = event;\n    let type;\n    if (target === this.clickOverlayElement) {\n      type = \"click\";\n    } else if (target === this.longpressOverlayElement) {\n      type = \"longpress\";\n    } else if (target === this.hoverOverlayElement) {\n      type = \"hover\";\n    } else {\n      return;\n    }\n    if (event.newState === \"open\") {\n      this.open = type;\n    } else if (this.open === type) {\n      this.open = void 0;\n    }\n  }\n  update(changes) {\n    var _a, _b, _c, _d, _e, _f;\n    if (changes.has(\"clickContent\")) {\n      this.clickPlacement = ((_a = this.clickContent[0]) == null ? void 0 : _a.getAttribute(\"placement\")) || ((_b = this.clickContent[0]) == null ? void 0 : _b.getAttribute(\n        \"direction\"\n      )) || void 0;\n    }\n    if (changes.has(\"hoverContent\")) {\n      this.hoverPlacement = ((_c = this.hoverContent[0]) == null ? void 0 : _c.getAttribute(\"placement\")) || ((_d = this.hoverContent[0]) == null ? void 0 : _d.getAttribute(\n        \"direction\"\n      )) || void 0;\n    }\n    if (changes.has(\"longpressContent\")) {\n      this.longpressPlacement = ((_e = this.longpressContent[0]) == null ? void 0 : _e.getAttribute(\"placement\")) || ((_f = this.longpressContent[0]) == null ? void 0 : _f.getAttribute(\n        \"direction\"\n      )) || void 0;\n    }\n    super.update(changes);\n  }\n  renderSlot(name) {\n    return html`\n            <slot name=${name} @slotchange=${this.handleSlotContent}></slot>\n        `;\n  }\n  renderClickOverlay() {\n    var _a;\n    const slot = this.renderSlot(\"click-content\");\n    const clickOverlay = html`\n            <sp-overlay\n                id=\"click-overlay\"\n                ?disabled=${this.disabled || !this.clickContent.length}\n                ?open=${this.open === \"click\" && !!this.clickContent.length}\n                .offset=${this.offset}\n                .placement=${this.clickPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${\"click\"}\n                .type=${this.type !== \"modal\" ? \"auto\" : \"modal\"}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n        `;\n    if ((_a = this.triggeredBy) == null ? void 0 : _a.includes(\"click\")) {\n      return clickOverlay;\n    }\n    if (!this.clickContent.length) {\n      return slot;\n    } else {\n      return clickOverlay;\n    }\n  }\n  renderHoverOverlay() {\n    var _a;\n    const slot = this.renderSlot(\"hover-content\");\n    const hoverOverlay = html`\n            <sp-overlay\n                id=\"hover-overlay\"\n                ?open=${this.open === \"hover\" && !!this.hoverContent.length}\n                ?disabled=${this.disabled || !this.hoverContent.length || !!this.open && this.open !== \"hover\"}\n                .offset=${this.offset}\n                .placement=${this.hoverPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${\"hover\"}\n                .type=${\"hint\"}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n        `;\n    if ((_a = this.triggeredBy) == null ? void 0 : _a.includes(\"hover\")) {\n      return hoverOverlay;\n    }\n    if (!this.hoverContent.length) {\n      return slot;\n    } else {\n      return hoverOverlay;\n    }\n  }\n  renderLongpressOverlay() {\n    var _a;\n    const slot = this.renderSlot(\"longpress-content\");\n    const longpressOverlay = html`\n            <sp-overlay\n                id=\"longpress-overlay\"\n                ?disabled=${this.disabled || !this.longpressContent.length}\n                ?open=${this.open === \"longpress\" && !!this.longpressContent.length}\n                .offset=${this.offset}\n                .placement=${this.longpressPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${\"longpress\"}\n                .type=${\"auto\"}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n            <slot name=\"longpress-describedby-descriptor\"></slot>\n        `;\n    if ((_a = this.triggeredBy) == null ? void 0 : _a.includes(\"longpress\")) {\n      return longpressOverlay;\n    }\n    if (!this.longpressContent.length) {\n      return slot;\n    } else {\n      return longpressOverlay;\n    }\n  }\n  render() {\n    return html`\n            <slot\n                id=\"trigger\"\n                name=\"trigger\"\n                @slotchange=${this.handleTriggerContent}\n            ></slot>\n            ${[\n      this.renderClickOverlay(),\n      this.renderHoverOverlay(),\n      this.renderLongpressOverlay()\n    ]}\n        `;\n  }\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (!this.triggeredBy) {\n      const issues = [\n        \"You have not specified the `triggeredBy` property. For optimal performance, consider explicitly declaring which overlay types you plan to use.\",\n        'Example: triggered-by=\"click hover\"',\n        \"This helps avoid unnecessary DOM operations and potential race conditions.\"\n      ];\n      window.__swc.warn(\n        this,\n        \"Performance optimization available for <overlay-trigger>:\",\n        \"https://opensource.adobe.com/spectrum-web-components/components/overlay-trigger/#performance-optimization\",\n        { issues }\n      );\n    }\n    if (this.disabled && changedProperties.has(\"disabled\")) {\n      this.open = void 0;\n      return;\n    }\n  }\n  async getUpdateComplete() {\n    const complete = await super.getUpdateComplete();\n    return complete;\n  }\n}\n__decorateClass([\n  property({ attribute: \"triggered-by\" })\n], OverlayTrigger.prototype, \"triggeredBy\", 2);\n__decorateClass([\n  property({ reflect: true })\n], OverlayTrigger.prototype, \"placement\", 2);\n__decorateClass([\n  property()\n], OverlayTrigger.prototype, \"type\", 2);\n__decorateClass([\n  property({ type: Number })\n], OverlayTrigger.prototype, \"offset\", 2);\n__decorateClass([\n  property({ reflect: true })\n], OverlayTrigger.prototype, \"open\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], OverlayTrigger.prototype, \"disabled\", 2);\n__decorateClass([\n  property({ attribute: \"receives-focus\" })\n], OverlayTrigger.prototype, \"receivesFocus\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"clickContent\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"longpressContent\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"hoverContent\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"targetContent\", 2);\n__decorateClass([\n  query(\"#click-overlay\", true)\n], OverlayTrigger.prototype, \"clickOverlayElement\", 2);\n__decorateClass([\n  query(\"#longpress-overlay\", true)\n], OverlayTrigger.prototype, \"longpressOverlayElement\", 2);\n__decorateClass([\n  query(\"#hover-overlay\", true)\n], OverlayTrigger.prototype, \"hoverOverlayElement\", 2);\n//# sourceMappingURL=OverlayTrigger.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport styles from \"./underlay.css.js\";\nexport class Underlay extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.canClick = false;\n    this.open = false;\n  }\n  static get styles() {\n    return [styles];\n  }\n  click() {\n    this.dispatchEvent(new Event(\"close\"));\n  }\n  handlePointerdown() {\n    this.canClick = true;\n  }\n  handlePointerup() {\n    if (this.canClick) {\n      this.click();\n    }\n    this.canClick = false;\n  }\n  render() {\n    return html``;\n  }\n  firstUpdated() {\n    this.addEventListener(\"pointerdown\", this.handlePointerdown);\n    this.addEventListener(\"pointerup\", this.handlePointerup);\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Underlay.prototype, \"open\", 2);\n//# sourceMappingURL=Underlay.dev.js.map\n"],"names":[],"sourceRoot":""}