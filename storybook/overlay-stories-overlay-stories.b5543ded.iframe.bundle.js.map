{"version":3,"file":"overlay-stories-overlay-stories.b5543ded.iframe.bundle.js","mappings":";;AAwBA;;;;AAIA;AACA;;;;;AAMA;;ACjCA;AACA;;AAEA;;;AAGA;;;;;;;;;;ACRA;;ACEA;AACA;;AAEA;;;AAGA;;;;;;;;ACNA;;AAEA;AACA;;;AAGA;;;;;;;ACNA;AACA;;AAEA;;;AAGA;;;;;;;;;;ACPA;AAgEA;AACA;;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACOA;AAqDA;;;;AAIA;AACA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;;;;;AAQA;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmFA;;;;;;;;;;AAoBA;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;AAoDA;;AAKA;;;;;;;;;;AAWA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA;AA7CA;;AA8CA;;;;;;;;;AASA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;AAIA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;;;;;;;;AAcA;;;;;;;;;AAyFA;AAhBA;;AAiBA;;;;;;;;AAiDA;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA;;;;;AAOA;;;;;;AAQA;AAGA;;;;;;;;AASA;;;;;;;;;;;;;;;;;AAqBA;;;;;;;AASA;;;;;;;;;;;;;;;;;;AAkBA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;AAEA;;;;;;AAMA;;AAEA;;;;;AAOA;;;;;;;;;;;AAaA;AAGA;AAGA;;;;;;;;;;;;AAcA;AAGA;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;AAOA;AAKA;;;;;AAsBA;;;;;;AAQA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA;;;;;;;AACA;;;;;;AAqBA;;;;;;;;;AAkFA;;;AAlDA;;;;AAWA;;;;;;;;;;;AAoBA;;AA0BA;;;;;;;;;AA0DA;;;AAnDA;;;;AAWA;;;;;;;;;;;AAoBA;;AA2BA;;;;AAuBA;AACA;;;;AAIA;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;AASA;;AAKA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;;;;;;;;;;;;;;AA8HA","sources":["webpack://@adobe/spectrum-web-components/./packages/help-text/src/HelpTextManager.dev.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons-s2/OpenIn.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/elements/IconOpenIn.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons-s2/Search.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons/Magnify.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons/OpenIn.js","webpack://@adobe/spectrum-web-components/./packages/menu/src/MenuGroup.dev.js","webpack://@adobe/spectrum-web-components/./packages/overlay/stories/overlay.stories.js"],"sourcesContent":["\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport { conditionAttributeWithId } from \"@spectrum-web-components/base/src/condition-attribute-with-id.js\";\nimport { randomID } from \"@spectrum-web-components/shared/src/random-id.js\";\nexport class HelpTextManager {\n  constructor(host, { mode } = { mode: \"internal\" }) {\n    this.mode = \"internal\";\n    this.handleSlotchange = ({\n      target\n    }) => {\n      this.handleHelpText(target);\n      this.handleNegativeHelpText(target);\n    };\n    this.host = host;\n    this.id = `sp-help-text-${randomID()}`;\n    this.mode = mode;\n  }\n  get isInternal() {\n    return this.mode === \"internal\";\n  }\n  render(negative) {\n    return html`\n            <div\n                id=${ifDefined(this.isInternal ? this.id : void 0)}\n                aria-live=\"assertive\"\n            >\n                <slot\n                    name=${negative ? \"negative-help-text\" : `pass-through-help-text-${randomID()}`}\n                    @slotchange=${this.handleSlotchange}\n                >\n                    <slot name=\"help-text\"></slot>\n                </slot>\n            </div>\n        `;\n  }\n  addId() {\n    const id = this.helpTextElement ? this.helpTextElement.id : this.id;\n    this.conditionId = conditionAttributeWithId(\n      this.host,\n      \"aria-describedby\",\n      id\n    );\n    if (this.host.hasAttribute(\"tabindex\")) {\n      this.previousTabindex = parseFloat(\n        this.host.getAttribute(\"tabindex\")\n      );\n    }\n    this.host.tabIndex = 0;\n  }\n  removeId() {\n    if (this.conditionId) {\n      this.conditionId();\n      delete this.conditionId;\n    }\n    if (this.helpTextElement) return;\n    if (this.previousTabindex) {\n      this.host.tabIndex = this.previousTabindex;\n    } else {\n      this.host.removeAttribute(\"tabindex\");\n    }\n  }\n  handleHelpText(target) {\n    if (this.isInternal) return;\n    if (this.helpTextElement && this.helpTextElement.id === this.id) {\n      this.helpTextElement.removeAttribute(\"id\");\n    }\n    this.removeId();\n    const assignedElements = target.assignedElements();\n    const nextHelpTextElement = assignedElements[0];\n    this.helpTextElement = nextHelpTextElement;\n    if (nextHelpTextElement) {\n      if (!nextHelpTextElement.id) {\n        nextHelpTextElement.id = this.id;\n      }\n      this.addId();\n    }\n  }\n  handleNegativeHelpText(target) {\n    if (target.name !== \"negative-help-text\") return;\n    const assignedElements = target.assignedElements();\n    assignedElements.forEach(\n      (el) => el.variant = \"negative\"\n    );\n  }\n}\n//# sourceMappingURL=HelpTextManager.dev.js.map\n","\"use strict\";import{tag as c}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const OpenInIcon=({width:e=24,height:t=24,hidden:l=!1,title:r=\"Open In\"}={})=>c`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"${e}\"\n    height=\"${t}\"\n    viewBox=\"0 0 20 20\"\n    aria-hidden=${l?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${r}\"\n  >\n    <path\n      d=\"m18,15.75V4.25c0-1.24072-1.00928-2.25-2.25-2.25H4.25c-1.24072,0-2.25,1.00928-2.25,2.25v3.71777c0,.41406.33594.75.75.75s.75-.33594.75-.75v-3.71777c0-.41357.33643-.75.75-.75h11.5c.41357,0,.75.33643.75.75v11.5c0,.41357-.33643.75-.75.75h-3.81104c-.41406,0-.75.33594-.75.75s.33594.75.75.75h3.81104c1.24072,0,2.25-1.00928,2.25-2.25Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"m11,9.75v4.24268c0,.41406-.33594.75-.75.75s-.75-.33594-.75-.75v-2.43213l-6.46973,6.46973c-.14648.14648-.33838.21973-.53027.21973s-.38379-.07324-.53027-.21973c-.29297-.29297-.29297-.76758,0-1.06055l6.46973-6.46973h-2.43213c-.41406,0-.75-.33594-.75-.75s.33594-.75.75-.75h4.24268c.41406,0,.75.33594.75.75Z\"\n      fill=\"currentColor\"\n    />\n  </svg>`;\n//# sourceMappingURL=OpenIn.js.map\n","\"use strict\";import{html as e}from\"@spectrum-web-components/base\";import{IconBase as t}from\"@spectrum-web-components/icon\";import{setCustomTemplateLiteralTag as r}from\"../custom-tag.js\";import{OpenInIcon as l}from\"../icons-s2/OpenIn.js\";import{OpenInIcon as n}from\"../icons/OpenIn.js\";export class IconOpenIn extends t{render(){return r(e),this.spectrumVersion===2?l({hidden:!this.label,title:this.label}):n({hidden:!this.label,title:this.label})}}\n//# sourceMappingURL=IconOpenIn.js.map\n","\"use strict\";import{tag as a}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const SearchIcon=({width:e=24,height:t=24,hidden:r=!1,title:l=\"Search\"}={})=>a`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"${e}\"\n    height=\"${t}\"\n    viewBox=\"0 0 20 20\"\n    aria-hidden=${r?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${l}\"\n  >\n    <path\n      d=\"m18.53027,17.46973l-5.08325-5.08325c.96936-1.20142,1.55298-2.72644,1.55298-4.38647,0-3.85938-3.14062-7-7-7S1,4.14062,1,8s3.14062,7,7,7c1.66003,0,3.18506-.58362,4.38647-1.55298l5.08325,5.08325c.14648.14648.33789.21973.53027.21973s.38379-.07324.53027-.21973c.29297-.29297.29297-.76758,0-1.06055Zm-10.53027-3.96973c-3.03223,0-5.5-2.46777-5.5-5.5s2.46777-5.5,5.5-5.5,5.5,2.46777,5.5,5.5-2.46777,5.5-5.5,5.5Z\"\n      fill=\"currentColor\"\n    />\n  </svg>`;\n//# sourceMappingURL=Search.js.map\n","\"use strict\";import{tag as r}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const MagnifyIcon=({width:t=24,height:e=24,hidden:a=!1,title:l=\"Magnify\"}={})=>r`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height=\"${e}\"\n    viewBox=\"0 0 36 36\"\n    width=\"${t}\"\n    aria-hidden=${a?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${l}\"\n  >\n    <path\n      d=\"M33.173 30.215 25.4 22.443a12.826 12.826 0 1 0-2.957 2.957l7.772 7.772a2.1 2.1 0 0 0 2.958-2.958ZM6 15a9 9 0 1 1 9 9 9 9 0 0 1-9-9Z\"\n    />\n  </svg>`;\n//# sourceMappingURL=Magnify.js.map\n","\"use strict\";import{tag as r}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const OpenInIcon=({width:a=24,height:e=24,hidden:t=!1,title:l=\"Open In\"}={})=>r`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"${a}\"\n    height=\"${e}\"\n    viewBox=\"0 0 36 36\"\n    aria-hidden=${t?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${l}\"\n  >\n    <path\n      d=\"M33 2H3a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1V6h24v24H19a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1Z\"\n    />\n    <path\n      d=\"M18.636 27.764a.784.784 0 0 0 .56.236.803.803 0 0 0 .804-.754v-10.75a.497.497 0 0 0-.496-.496H8.754a.803.803 0 0 0-.754.804.785.785 0 0 0 .235.56l3.786 3.786-9.042 9.042a1 1 0 0 0 0 1.415l1.414 1.414a1 1 0 0 0 1.414 0l9.043-9.042Z\"\n    />\n  </svg>`;\n//# sourceMappingURL=OpenIn.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html\n} from \"@spectrum-web-components/base\";\nimport {\n  queryAssignedNodes,\n  state\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { randomID } from \"@spectrum-web-components/shared/src/random-id.js\";\nimport { Menu } from \"./Menu.dev.js\";\nimport \"@spectrum-web-components/menu/sp-menu.js\";\nimport menuGroupStyles from \"./menu-group.css.js\";\nexport class MenuGroup extends Menu {\n  constructor() {\n    super(...arguments);\n    this.headerId = \"\";\n  }\n  static get styles() {\n    return [...super.styles, menuGroupStyles];\n  }\n  /**\n   * a menu group must have the role `group`\n   * and should never function as a menu\n   */\n  get ownRole() {\n    return \"group\";\n  }\n  /**\n   * only a menu controls roving tabindex;\n   * groups should defer navigation to parent menu\n   */\n  get controlsRovingTabindex() {\n    return false;\n  }\n  updateLabel() {\n    const headerElement = this.headerElements.length ? this.headerElements[0] : void 0;\n    if (headerElement !== this.headerElement) {\n      if (this.headerElement && this.headerElement.id === this.headerId) {\n        this.headerElement.removeAttribute(\"id\");\n      }\n      if (headerElement) {\n        this.headerId = this.headerId || `sp-menu-group-label-${randomID()}`;\n        const headerId = headerElement.id || this.headerId;\n        if (!headerElement.id) {\n          headerElement.id = headerId;\n        }\n        this.setAttribute(\"aria-labelledby\", headerId);\n      } else {\n        this.removeAttribute(\"aria-labelledby\");\n      }\n    }\n    this.headerElement = headerElement;\n  }\n  render() {\n    return html`\n            <span class=\"header\" ?hidden=${!this.headerElement}>\n                <slot name=\"header\" @slotchange=${this.updateLabel}></slot>\n            </span>\n            ${this.renderMenuItemSlot()}\n        `;\n  }\n}\n__decorateClass([\n  queryAssignedNodes({\n    slot: \"header\",\n    flatten: true\n  })\n], MenuGroup.prototype, \"headerElements\", 2);\n__decorateClass([\n  state()\n], MenuGroup.prototype, \"headerElement\", 2);\n//# sourceMappingURL=MenuGroup.dev.js.map\n","\"use strict\";\nvar __freeze = Object.freeze;\nvar __defProp = Object.defineProperty;\nvar __template = (cooked, raw) => __freeze(__defProp(cooked, \"raw\", { value: __freeze(raw || cooked.slice()) }));\nvar _a;\nimport \"@spectrum-web-components/action-button/sp-action-button.js\";\nimport \"@spectrum-web-components/action-group/sp-action-group.js\";\nimport { html } from \"@spectrum-web-components/base\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport \"@spectrum-web-components/button/sp-button.js\";\nimport \"@spectrum-web-components/dialog/sp-dialog-wrapper.js\";\nimport \"@spectrum-web-components/dialog/sp-dialog.js\";\nimport \"@spectrum-web-components/field-label/sp-field-label.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-magnify.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-open-in.js\";\nimport {\n  openOverlay,\n  Overlay,\n  VirtualTrigger\n} from \"@spectrum-web-components/overlay\";\nimport \"@spectrum-web-components/overlay/overlay-trigger.js\";\nimport \"@spectrum-web-components/accordion/sp-accordion-item.js\";\nimport \"@spectrum-web-components/accordion/sp-accordion.js\";\nimport \"@spectrum-web-components/button-group/sp-button-group.js\";\nimport \"@spectrum-web-components/menu/sp-menu-divider.js\";\nimport \"@spectrum-web-components/menu/sp-menu-group.js\";\nimport \"@spectrum-web-components/menu/sp-menu-item.js\";\nimport \"@spectrum-web-components/menu/sp-menu.js\";\nimport \"@spectrum-web-components/overlay/sp-overlay.js\";\nimport \"@spectrum-web-components/picker/sp-picker.js\";\nimport \"@spectrum-web-components/popover/sp-popover.js\";\nimport \"@spectrum-web-components/radio/sp-radio-group.js\";\nimport \"@spectrum-web-components/radio/sp-radio.js\";\nimport \"@spectrum-web-components/slider/sp-slider.js\";\nimport \"@spectrum-web-components/theme/sp-theme.js\";\nimport \"@spectrum-web-components/theme/src/themes.js\";\nimport \"@spectrum-web-components/tooltip/sp-tooltip.js\";\nimport \"@spectrum-web-components/dialog/sp-dialog.js\";\nimport \"../../../projects/story-decorator/src/types.js\";\nimport { render } from \"lit-html\";\nimport \"./overlay-story-components.js\";\nconst storyStyles = html`\n    <style>\n        html,\n        body,\n        #root,\n        #root-inner,\n        sp-story-decorator {\n            height: 100%;\n            margin: 0;\n        }\n\n        sp-story-decorator::part(container) {\n            display: flex;\n            flex-direction: column;\n            width: 100%;\n            height: 100%;\n            align-items: center;\n            justify-content: center;\n        }\n\n        overlay-trigger {\n            flex: none;\n        }\n\n        #styled-div {\n            background-color: var(--styled-div-background-color, blue);\n            color: white;\n            padding: 4px 10px;\n            margin-bottom: 10px;\n        }\n\n        #inner-trigger {\n            display: inline-block;\n        }\n    </style>\n`;\nexport default {\n  title: \"Overlay\",\n  argTypes: {\n    offset: { control: \"number\" },\n    placement: {\n      control: {\n        type: \"inline-radio\",\n        options: [\n          \"top\",\n          \"top-start\",\n          \"top-end\",\n          \"bottom\",\n          \"bottom-start\",\n          \"bottom-end\",\n          \"left\",\n          \"left-start\",\n          \"left-end\",\n          \"right\",\n          \"right-start\",\n          \"right-end\",\n          \"auto\",\n          \"auto-start\",\n          \"auto-end\",\n          \"none\"\n        ]\n      }\n    },\n    type: {\n      control: {\n        type: \"inline-radio\",\n        options: [\"modal\", \"replace\", \"inline\"]\n      }\n    },\n    colorStop: {\n      control: {\n        type: \"inline-radio\",\n        options: [\"light\", \"dark\"]\n      }\n    }\n  },\n  args: {\n    placement: \"bottom\",\n    offset: 0,\n    colorStop: \"light\"\n  }\n};\nconst template = ({\n  placement,\n  offset,\n  open,\n  type\n}) => {\n  return html`\n        ${storyStyles}\n        <overlay-trigger\n            triggered-by=\"click hover\"\n            id=\"trigger\"\n            placement=\"${placement}\"\n            offset=\"${offset}\"\n            open=${ifDefined(open)}\n            type=${ifDefined(type)}\n        >\n            <sp-button variant=\"primary\" slot=\"trigger\">Show Popover</sp-button>\n            <sp-popover slot=\"click-content\" placement=\"${placement}\" tip>\n                <sp-dialog no-divider>\n                    <sp-slider\n                        value=\"5\"\n                        step=\"0.5\"\n                        min=\"0\"\n                        max=\"20\"\n                        label=\"Awesomeness\"\n                        default-value=\"10\"\n                    ></sp-slider>\n                    <div id=\"styled-div\">\n                        The background of this div should be blue\n                    </div>\n                    <overlay-trigger\n                        id=\"inner-trigger\"\n                        placement=\"bottom\"\n                        triggered-by=\"click hover\"\n                    >\n                        <sp-button slot=\"trigger\">Press Me</sp-button>\n                        <sp-popover slot=\"click-content\" placement=\"bottom\" tip>\n                            <sp-dialog size=\"s\" no-divider>\n                                Another Popover\n                            </sp-dialog>\n                        </sp-popover>\n\n                        <sp-tooltip slot=\"hover-content\" delayed tip=\"bottom\">\n                            Click to open another popover.\n                        </sp-tooltip>\n                    </overlay-trigger>\n                </sp-dialog>\n            </sp-popover>\n            <sp-tooltip\n                slot=\"hover-content\"\n                ?delayed=${open !== \"hover\"}\n                tip=\"bottom\"\n            >\n                Click to open a popover.\n            </sp-tooltip>\n        </overlay-trigger>\n    `;\n};\nconst extraText = html`\n    <p>This is some text.</p>\n    <p>This is some text.</p>\n    <p>\n        This is a\n        <a href=\"#anchor\">link</a>\n        .\n    </p>\n`;\nfunction nextFrame() {\n  return new Promise((res) => requestAnimationFrame(() => res()));\n}\nexport const Default = (args) => template(args);\nexport const accordion = () => {\n  return html`\n        <overlay-trigger\n            type=\"modal\"\n            placement=\"top-start\"\n            triggered-by=\"click\"\n        >\n            <style>\n                sp-button {\n                    margin-top: 70vh;\n                }\n            </style>\n            <sp-button variant=\"primary\" slot=\"trigger\">\n                Open overlay w/ accordion\n            </sp-button>\n            <sp-popover\n                slot=\"click-content\"\n                style=\"overflow-y: scroll;position: static;\"\n            >\n                <sp-dialog size=\"s\" no-divider>\n                    <sp-accordion allow-multiple>\n                        <sp-accordion-item label=\"Some things\">\n                            <p>\n                                Thing\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                more things\n                            </p>\n                        </sp-accordion-item>\n                        <sp-accordion-item label=\"Other things\">\n                            <p>\n                                Thing\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                more things\n                            </p>\n                        </sp-accordion-item>\n                        <sp-accordion-item label=\"More things\">\n                            <p>\n                                Thing\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                more things\n                            </p>\n                        </sp-accordion-item>\n                        <sp-accordion-item label=\"Additional things\">\n                            <p>\n                                Thing\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                more things\n                            </p>\n                        </sp-accordion-item>\n                    </sp-accordion>\n                </sp-dialog>\n            </sp-popover>\n        </overlay-trigger>\n    `;\n};\naccordion.swc_vrt = {\n  skip: true\n};\naccordion.parameters = {\n  // Disables Chromatic's snapshotting on a global level\n  chromatic: { disableSnapshot: true }\n};\nexport const clickAndHoverTarget = () => {\n  return html`\n        <overlay-trigger type=\"modal\" triggered-by=\"click hover\">\n            <sp-button variant=\"primary\" slot=\"trigger\">Button</sp-button>\n            <sp-popover slot=\"click-content\" placement=\"bottom\" tip>\n                Popover content\n            </sp-popover>\n            <sp-tooltip slot=\"hover-content\" placement=\"right\">\n                Tooltip content\n            </sp-tooltip>\n        </overlay-trigger>\n    `;\n};\nclickAndHoverTarget.swc_vrt = {\n  skip: true\n};\nclickAndHoverTarget.parameters = {\n  // Disables Chromatic's snapshotting on a global level\n  chromatic: { disableSnapshot: true }\n};\nexport const clickAndHoverTargets = () => {\n  return html`\n        <div>\n            ${storyStyles}\n            <style>\n                .friendly-target {\n                    padding: 4px;\n                    margin: 6px;\n                    border: 2px solid black;\n                    border-radius: 6px;\n                    cursor: default;\n                }\n            </style>\n            <overlay-trigger placement=\"right\" triggered-by=\"click\">\n                <div class=\"friendly-target\" slot=\"trigger\" tabindex=\"0\">\n                    Click me\n                </div>\n                <sp-tooltip slot=\"click-content\" tip=\"right\">\n                    Ok, now hover the other trigger\n                </sp-tooltip>\n            </overlay-trigger>\n            <overlay-trigger placement=\"left\" triggered-by=\"hover\">\n                <div class=\"friendly-target\" slot=\"trigger\" tabindex=\"0\">\n                    Then hover me\n                </div>\n                <sp-tooltip slot=\"hover-content\" tip=\"right\">\n                    Now click my trigger -- I should stay open, but the other\n                    overlay should close\n                </sp-tooltip>\n            </overlay-trigger>\n        </div>\n    `;\n};\nclickAndHoverTargets.swc_vrt = {\n  skip: true\n};\nclickAndHoverTargets.parameters = {\n  // Disables Chromatic's snapshotting on a global level\n  chromatic: { disableSnapshot: true }\n};\nclass ScrollForcer extends HTMLElement {\n  constructor() {\n    super();\n    this.doScroll = async () => {\n      var _a2;\n      (_a2 = this.previousElementSibling) == null ? void 0 : _a2.addEventListener(\n        \"sp-opened\",\n        this.doScroll\n      );\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      if (document.scrollingElement) {\n        document.scrollingElement.scrollTop = 100;\n      }\n      await nextFrame();\n      await nextFrame();\n      this.ready(true);\n    };\n    this.readyPromise = Promise.resolve(false);\n    this.readyPromise = new Promise((res) => {\n      this.ready = res;\n    });\n    this.setup();\n  }\n  async setup() {\n    var _a2, _b;\n    await nextFrame();\n    await nextFrame();\n    (_a2 = this.previousElementSibling) == null ? void 0 : _a2.addEventListener(\n      \"sp-opened\",\n      this.doScroll\n    );\n    await nextFrame();\n    await nextFrame();\n    ((_b = this.previousElementSibling) == null ? void 0 : _b.lastElementChild).open = \"click\";\n  }\n  get updateComplete() {\n    return this.readyPromise;\n  }\n}\ncustomElements.define(\"scroll-forcer\", ScrollForcer);\nexport const clickContentClosedOnScroll = (args) => html`\n    <div style=\"margin: 50vh 0 100vh;\">\n        ${template({\n  ...args\n})}\n    </div>\n`;\nclickContentClosedOnScroll.decorators = [\n  (story) => html`\n        <style>\n            html,\n            body,\n            #root,\n            #root-inner,\n            sp-story-decorator {\n                height: auto !important;\n            }\n        </style>\n        ${story()}\n        <scroll-forcer></scroll-forcer>\n    `\n];\nclass ComplexModalReady extends HTMLElement {\n  constructor() {\n    super();\n    this.handleTriggerOpened = async () => {\n      await nextFrame();\n      const picker = document.querySelector(\"#test-picker\");\n      picker.addEventListener(\"sp-opened\", this.handlePickerOpen);\n      picker.open = true;\n    };\n    this.handlePickerOpen = async () => {\n      const picker = document.querySelector(\"#test-picker\");\n      const actions = [nextFrame, picker.updateComplete];\n      picker.focus();\n      await Promise.all(actions);\n      this.ready(true);\n    };\n    this.readyPromise = Promise.resolve(false);\n    this.readyPromise = new Promise((res) => {\n      this.ready = res;\n      this.setup();\n    });\n  }\n  async setup() {\n    await nextFrame();\n    const overlay = document.querySelector(\n      `overlay-trigger`\n    );\n    overlay.addEventListener(\"sp-opened\", this.handleTriggerOpened);\n  }\n  get updateComplete() {\n    return this.readyPromise;\n  }\n}\ncustomElements.define(\"complex-modal-ready\", ComplexModalReady);\nconst complexModalDecorator = (story) => {\n  return html`\n        ${story()}\n        <complex-modal-ready></complex-modal-ready>\n    `;\n};\nexport const complexModal = () => {\n  return html`\n        <style>\n            body {\n                --swc-margin-test: 10px;\n                margin: var(--swc-margin-test);\n            }\n            sp-story-decorator::part(container) {\n                min-height: calc(100vh - (2 * var(--swc-margin-test)));\n                padding: 0;\n                display: grid;\n                place-content: center;\n            }\n        </style>\n        <overlay-trigger type=\"modal\" open=\"click\" triggered-by=\"click\">\n            <sp-dialog-wrapper\n                slot=\"click-content\"\n                headline=\"Dialog title\"\n                dismissable\n                underlay\n                footer=\"Content for footer\"\n            >\n                <sp-field-label for=\"test-picker\">\n                    Selection type:\n                </sp-field-label>\n                <sp-picker id=\"test-picker\">\n                    <sp-menu-item>Deselect</sp-menu-item>\n                    <sp-menu-item>Select inverse</sp-menu-item>\n                    <sp-menu-item>Feather...</sp-menu-item>\n                    <sp-menu-item>Select and mask...</sp-menu-item>\n                    <sp-menu-divider></sp-menu-divider>\n                    <sp-menu-item>Save selection</sp-menu-item>\n                    <sp-menu-item disabled>Make work path</sp-menu-item>\n                </sp-picker>\n            </sp-dialog-wrapper>\n            <sp-button slot=\"trigger\" variant=\"primary\">\n                Toggle Dialog\n            </sp-button>\n        </overlay-trigger>\n    `;\n};\ncomplexModal.decorators = [complexModalDecorator];\nexport const customizedClickContent = (args) => html`\n    <style>\n        sp-popover {\n            --styled-div-background-color: var(\n                --spectrum-accent-background-color-default\n            );\n            --mod-button-background-color-default: rebeccapurple;\n        }\n    </style>\n    ${template({\n  ...args,\n  open: \"click\"\n})}\n`;\nexport const deep = () => html`\n    <overlay-trigger triggered-by=\"click\">\n        <sp-button variant=\"primary\" slot=\"trigger\">\n            Open popover 1 with buttons + selfmanaged Tooltips\n        </sp-button>\n        <sp-popover slot=\"click-content\" placement=\"bottom\" tip>\n            <sp-dialog size=\"s\" no-divider>\n                <sp-action-button>\n                    <sp-tooltip self-managed placement=\"bottom\">\n                        My Tooltip 1\n                    </sp-tooltip>\n                    A\n                </sp-action-button>\n                <sp-action-button>\n                    <sp-tooltip self-managed placement=\"bottom\">\n                        My Tooltip 1\n                    </sp-tooltip>\n                    B\n                </sp-action-button>\n            </sp-dialog>\n        </sp-popover>\n    </overlay-trigger>\n\n    <overlay-trigger triggered-by=\"click\">\n        <sp-button variant=\"primary\" slot=\"trigger\">\n            Open popover 2 with buttons without ToolTips\n        </sp-button>\n        <sp-popover slot=\"click-content\" direction=\"bottom\" tip>\n            <sp-dialog size=\"s\" no-divider>\n                <sp-action-button>X</sp-action-button>\n                <sp-action-button>Y</sp-action-button>\n            </sp-dialog>\n        </sp-popover>\n    </overlay-trigger>\n`;\ndeep.swc_vrt = {\n  skip: true\n};\ndeep.parameters = {\n  // Disables Chromatic's snapshotting on a global level\n  chromatic: { disableSnapshot: true }\n};\nexport const deepChildTooltip = () => html`\n    <overlay-trigger triggered-by=\"click\">\n        <sp-button variant=\"primary\" slot=\"trigger\">Open popover</sp-button>\n        <sp-popover slot=\"click-content\" plaeemenm=\"bottom\" tip>\n            <sp-dialog no-divider>\n                <p>Let us open another overlay here</p>\n                <overlay-trigger triggered-by=\"click\">\n                    <sp-button variant=\"primary\" slot=\"trigger\">\n                        Open sub popover\n                    </sp-button>\n                    <sp-popover slot=\"click-content\" placement=\"bottom\" tip>\n                        <sp-dialog no-divider>\n                            <p>\n                                Render an action button with tooltips. Clicking\n                                the action button shouldn't close everything\n                            </p>\n                            <sp-action-button>\n                                Button with self-managed tooltip\n                                <sp-tooltip self-managed placement=\"top\">\n                                    Deep Child ToolTip\n                                </sp-tooltip>\n                            </sp-action-button>\n                            <sp-action-button>Just a button</sp-action-button>\n                        </sp-dialog>\n                    </sp-popover>\n                </overlay-trigger>\n            </sp-dialog>\n        </sp-popover>\n    </overlay-trigger>\n`;\nexport const deepNesting = () => {\n  const color = window.__swc_hack_knobs__.defaultColor;\n  const outter = color === \"light\" ? \"dark\" : \"light\";\n  return html`\n        ${storyStyles}\n        <sp-theme\n            color=${outter}\n            system=${window.__swc_hack_knobs__.defaultSystemVariant}\n            scale=${window.__swc_hack_knobs__.defaultScale}\n            dir=${window.__swc_hack_knobs__.defaultDirection}\n        >\n            <sp-theme\n                color=${color}\n                system=${window.__swc_hack_knobs__.defaultSystemVariant}\n                scale=${window.__swc_hack_knobs__.defaultScale}\n                dir=${window.__swc_hack_knobs__.defaultDirection}\n            >\n                <recursive-popover\n                    tabindex=\"\"\n                    style=\"\n                        background-color: var(--spectrum-gray-100);\n                        color: var(--spectrum-gray-800);\n                        padding: calc(var(--swc-scale-factor) * 22px);\n                    \"\n                ></recursive-popover>\n            </sp-theme>\n        </sp-theme>\n    `;\n};\nclass DefinedOverlayReady extends HTMLElement {\n  constructor() {\n    super(...arguments);\n    this.handleTriggerOpened = async () => {\n      this.overlayElement.removeEventListener(\n        \"sp-opened\",\n        this.handleTriggerOpened\n      );\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      this.popoverElement = document.querySelector(\n        \"popover-content\"\n      );\n      if (!this.popoverElement) {\n        return;\n      }\n      this.popoverElement.addEventListener(\n        \"sp-opened\",\n        this.handlePopoverOpen\n      );\n      await nextFrame();\n      await nextFrame();\n      this.popoverElement.button.click();\n    };\n    this.handlePopoverOpen = async () => {\n      await nextFrame();\n      this.ready(true);\n    };\n    this.readyPromise = Promise.resolve(false);\n  }\n  connectedCallback() {\n    if (!!this.ready) return;\n    this.readyPromise = new Promise((res) => {\n      this.ready = res;\n      this.setup();\n    });\n  }\n  async setup() {\n    await nextFrame();\n    await nextFrame();\n    this.overlayElement = document.querySelector(\n      `overlay-trigger`\n    );\n    const button = document.querySelector(\n      `[slot=\"trigger\"]`\n    );\n    this.overlayElement.addEventListener(\n      \"sp-opened\",\n      this.handleTriggerOpened\n    );\n    await nextFrame();\n    await nextFrame();\n    button.click();\n  }\n  disconnectedCallback() {\n    this.overlayElement.removeEventListener(\n      \"sp-opened\",\n      this.handleTriggerOpened\n    );\n    this.popoverElement.removeEventListener(\n      \"sp-opened\",\n      this.handlePopoverOpen\n    );\n  }\n  get updateComplete() {\n    return this.readyPromise;\n  }\n}\ncustomElements.define(\"defined-overlay-ready\", DefinedOverlayReady);\nconst definedOverlayDecorator = (story) => {\n  return html`\n        ${story()}\n        <defined-overlay-ready></defined-overlay-ready>\n    `;\n};\nexport const definedOverlayElement = () => {\n  return html`\n        <overlay-trigger placement=\"bottom\" type=\"modal\" triggered-by=\"click\">\n            <sp-button variant=\"primary\" slot=\"trigger\">Open popover</sp-button>\n            <sp-popover slot=\"click-content\" placement=\"bottom\">\n                <sp-dialog no-divider>\n                    <popover-content></popover-content>\n                </sp-dialog>\n            </sp-popover>\n        </overlay-trigger>\n    `;\n};\ndefinedOverlayElement.decorators = [definedOverlayDecorator];\nexport const detachedElement = () => {\n  let overlay;\n  const openDetachedOverlayContent = async ({\n    target\n  }) => {\n    if (overlay) {\n      overlay.open = false;\n      overlay = void 0;\n      return;\n    }\n    const div = document.createElement(\"div\");\n    div.open = false;\n    div.textContent = \"This div is overlaid\";\n    div.setAttribute(\n      \"style\",\n      `\n            background-color: var(--spectrum-gray-50);\n            color: var(--spectrum-gray-800);\n            border: 1px solid;\n            padding: 2em;\n        `\n    );\n    overlay = await Overlay.open(div, {\n      type: \"auto\",\n      trigger: target,\n      receivesFocus: \"auto\",\n      placement: \"bottom\",\n      offset: 0\n    });\n    overlay.addEventListener(\"sp-closed\", () => {\n      overlay = void 0;\n    });\n    target.insertAdjacentElement(\"afterend\", overlay);\n  };\n  requestAnimationFrame(() => {\n    openDetachedOverlayContent({\n      target: document.querySelector(\n        \"#detached-content-trigger\"\n      )\n    });\n  });\n  return html`\n        <style>\n            sp-overlay div:not([placement]) {\n                visibility: hidden;\n            }\n        </style>\n        <sp-action-button\n            id=\"detached-content-trigger\"\n            @click=${openDetachedOverlayContent}\n        >\n            <sp-icon-open-in\n                slot=\"icon\"\n                label=\"Open in overlay\"\n            ></sp-icon-open-in>\n        </sp-action-button>\n    `;\n};\nexport const edges = () => {\n  return html`\n        <style>\n            .demo {\n                position: absolute;\n            }\n            .top-left {\n                top: 0;\n                left: 0;\n            }\n            .top-right {\n                top: 0;\n                right: 0;\n            }\n            .bottom-right {\n                bottom: 0;\n                right: 0;\n            }\n            .bottom-left {\n                bottom: 0;\n                left: 0;\n            }\n        </style>\n        <overlay-trigger\n            class=\"demo top-left\"\n            placement=\"bottom\"\n            triggered-by=\"hover\"\n        >\n            <sp-button slot=\"trigger\">\n                Top/\n                <br />\n                Left\n            </sp-button>\n            <sp-tooltip slot=\"hover-content\" delayed tip=\"bottom\">\n                Triskaidekaphobia and More\n            </sp-tooltip>\n        </overlay-trigger>\n        <overlay-trigger\n            class=\"demo top-right\"\n            placement=\"bottom\"\n            triggered-by=\"hover\"\n        >\n            <sp-button slot=\"trigger\">\n                Top/\n                <br />\n                Right\n            </sp-button>\n            <sp-tooltip slot=\"hover-content\" delayed tip=\"bottom\">\n                Triskaidekaphobia and More\n            </sp-tooltip>\n        </overlay-trigger>\n        <overlay-trigger\n            class=\"demo bottom-left\"\n            placement=\"top\"\n            triggered-by=\"hover\"\n        >\n            <sp-button slot=\"trigger\">\n                Bottom/\n                <br />\n                Left\n            </sp-button>\n            <sp-tooltip slot=\"hover-content\" delayed tip=\"top\">\n                Triskaidekaphobia and More\n            </sp-tooltip>\n        </overlay-trigger>\n        <overlay-trigger\n            placement=\"top\"\n            class=\"demo bottom-right\"\n            triggered-by=\"hover\"\n        >\n            <sp-button slot=\"trigger\">\n                Bottom/\n                <br />\n                Right\n            </sp-button>\n            <sp-tooltip slot=\"hover-content\" delayed tip=\"top\">\n                Triskaidekaphobia and More\n            </sp-tooltip>\n        </overlay-trigger>\n    `;\n};\nexport const inline = () => {\n  const closeEvent = new Event(\"close\", { bubbles: true, composed: true });\n  return html`\n        <overlay-trigger type=\"inline\" triggered-by=\"click\">\n            <sp-button slot=\"trigger\">Open</sp-button>\n            <sp-popover slot=\"click-content\">\n                <sp-button\n                    @click=${(event) => {\n    event.target.dispatchEvent(closeEvent);\n  }}\n                >\n                    Close\n                </sp-button>\n            </sp-popover>\n        </overlay-trigger>\n        ${extraText}\n    `;\n};\nexport const longpress = () => {\n  return html`\n        <overlay-trigger triggered-by=\"longpress\" placement=\"right-start\">\n            <sp-action-button slot=\"trigger\" hold-affordance>\n                <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n            </sp-action-button>\n            <sp-tooltip slot=\"hover-content\">Search real hard...</sp-tooltip>\n            <sp-popover slot=\"longpress-content\" tip>\n                <sp-action-group\n                    @change=${(event) => event.target.dispatchEvent(\n    new Event(\"close\", { bubbles: true })\n  )}\n                    selects=\"single\"\n                    vertical\n                    style=\"margin: calc(var(--spectrum-actiongroup-button-gap-y,calc(var(--swc-scale-factor) * 10px)) / 2);\"\n                >\n                    <sp-action-button>\n                        <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                    </sp-action-button>\n                    <sp-action-button>\n                        <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                    </sp-action-button>\n                    <sp-action-button>\n                        <sp-icon-magnify slot=\"icon\"></sp-icon-magnify>\n                    </sp-action-button>\n                </sp-action-group>\n            </sp-popover>\n        </overlay-trigger>\n    `;\n};\nexport const modalLoose = () => {\n  const closeEvent = new Event(\"close\", { bubbles: true, composed: true });\n  return html`\n        <overlay-trigger type=\"modal\" triggered-by=\"click\">\n            <sp-button slot=\"trigger\">Open</sp-button>\n            <sp-dialog\n                size=\"s\"\n                dismissable\n                slot=\"click-content\"\n                @closed=${(event) => event.target.dispatchEvent(closeEvent)}\n            >\n                <h2 slot=\"heading\">Loose Dialog</h2>\n                <p>\n                    The\n                    <code>sp-dialog</code>\n                    element is not \"meant\" to be a modal alone. In that way it\n                    does not manage its own\n                    <code>open</code>\n                    attribute or outline when it should have\n                    <code>pointer-events: auto</code>\n                    . It's a part of this test suite to prove that content in\n                    this way can be used in an\n                    <code>overlay-trigger</code>\n                    element.\n                </p>\n            </sp-dialog>\n        </overlay-trigger>\n        ${extraText}\n    `;\n};\nexport const modalNoFocus = () => {\n  const closeEvent = new Event(\"close\", { bubbles: true, composed: true });\n  return html`\n        <overlay-trigger\n            type=\"modal\"\n            receives-focus=\"false\"\n            triggered-by=\"click\"\n        >\n            <sp-button slot=\"trigger\">Open</sp-button>\n            <sp-dialog-wrapper\n                underlay\n                slot=\"click-content\"\n                headline=\"Wrapped Dialog w/ Hero Image\"\n                size=\"s\"\n            >\n                <p>\n                    The\n                    <code>sp-dialog-wrapper</code>\n                    element has been prepared for use in an\n                    <code>overlay-trigger</code>\n                    element by it's combination of modal, underlay, etc. styles\n                    and features.\n                </p>\n                <sp-button-group style=\"margin-inline-start: auto\">\n                    <sp-button\n                        data-test-id=\"dialog-cancel-btn\"\n                        variant=\"secondary\"\n                        treatment=\"outline\"\n                        size=\"l\"\n                        @click=${(event) => event.target.dispatchEvent(closeEvent)}\n                    >\n                        ${\"Cancel\"}\n                    </sp-button>\n                    <sp-button\n                        data-test-id=\"dialog-override-btn\"\n                        variant=\"negative\"\n                        size=\"l\"\n                        @click=${(event) => event.target.dispatchEvent(closeEvent)}\n                    >\n                        ${\"Override\"}\n                    </sp-button>\n                </sp-button-group>\n            </sp-dialog-wrapper>\n        </overlay-trigger>\n    `;\n};\nexport const modalManaged = () => {\n  const closeEvent = new Event(\"close\", { bubbles: true, composed: true });\n  return html`\n        <overlay-trigger type=\"modal\" triggered-by=\"click\">\n            <sp-button slot=\"trigger\">Open</sp-button>\n            <sp-dialog-wrapper\n                underlay\n                slot=\"click-content\"\n                headline=\"Wrapped Dialog w/ Hero Image\"\n                confirm-label=\"Keep Both\"\n                secondary-label=\"Replace\"\n                cancel-label=\"Cancel\"\n                footer=\"Content for footer\"\n                @confirm=${(event) => {\n    event.target.dispatchEvent(closeEvent);\n  }}\n                @secondary=${(event) => {\n    event.target.dispatchEvent(closeEvent);\n  }}\n                @cancel=${(event) => {\n    event.target.dispatchEvent(closeEvent);\n  }}\n            >\n                <p>\n                    The\n                    <code>sp-dialog-wrapper</code>\n                    element has been prepared for use in an\n                    <code>overlay-trigger</code>\n                    element by it's combination of modal, underlay, etc. styles\n                    and features.\n                </p>\n            </sp-dialog-wrapper>\n        </overlay-trigger>\n        ${extraText}\n    `;\n};\nexport const modalWithinNonModal = () => {\n  return html`\n        <overlay-trigger type=\"inline\" triggered-by=\"click\">\n            <sp-button variant=\"primary\" slot=\"trigger\">\n                Open inline overlay\n            </sp-button>\n            <sp-popover slot=\"click-content\">\n                <sp-dialog size=\"s\" no-divider>\n                    <overlay-trigger type=\"modal\" triggered-by=\"click\">\n                        <sp-button variant=\"primary\" slot=\"trigger\">\n                            Open modal overlay\n                        </sp-button>\n                        <sp-popover slot=\"click-content\">\n                            <sp-dialog size=\"s\" no-divider>\n                                Modal overlay\n                            </sp-dialog>\n                        </sp-popover>\n                    </overlay-trigger>\n                </sp-dialog>\n            </sp-popover>\n        </overlay-trigger>\n    `;\n};\nexport const noCloseOnResize = (args) => html`\n    <style>\n        sp-button:hover {\n            border: 10px solid;\n            width: 100px;\n        }\n    </style>\n    ${template({\n  ...args,\n  open: \"click\"\n})}\n`;\nnoCloseOnResize.swc_vrt = {\n  skip: true\n};\nnoCloseOnResize.parameters = {\n  // Disables Chromatic's snapshotting on a global level\n  chromatic: { disableSnapshot: true }\n};\nexport const openClickContent = (args) => template({\n  ...args,\n  open: \"click\"\n});\nexport const openHoverContent = (args) => template({\n  ...args,\n  open: \"hover\"\n});\nexport const replace = () => {\n  const closeEvent = new Event(\"close\", { bubbles: true, composed: true });\n  return html`\n        <overlay-trigger type=\"replace\" triggered-by=\"click\">\n            <sp-button slot=\"trigger\">Open</sp-button>\n            <sp-popover slot=\"click-content\">\n                <sp-button\n                    @click=${(event) => {\n    event.target.dispatchEvent(closeEvent);\n  }}\n                >\n                    Close\n                </sp-button>\n            </sp-popover>\n        </overlay-trigger>\n        ${extraText}\n    `;\n};\nexport const sideHoverDraggable = () => {\n  return html`\n        ${storyStyles}\n        <style>\n            sp-tooltip {\n                transition: none;\n            }\n        </style>\n        <overlay-drag>\n            <overlay-trigger placement=\"right\" triggered-by=\"hover\">\n                <overlay-target-icon slot=\"trigger\"></overlay-target-icon>\n                <sp-tooltip slot=\"hover-content\" delayed tip=\"right\">\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                    Vivamus egestas sed enim sed condimentum. Nunc facilisis\n                    scelerisque massa sed luctus. Orci varius natoque penatibus\n                    et magnis dis parturient montes, nascetur ridiculus mus.\n                    Suspendisse sagittis sodales purus vitae ultricies. Integer\n                    at dui sem. Sed quam tortor, ornare in nisi et, rhoncus\n                    lacinia mauris. Sed vel rutrum mauris, ac pellentesque nibh.\n                    Sed feugiat semper libero, sit amet vehicula orci fermentum\n                    id. Vivamus imperdiet egestas luctus. Mauris tincidunt\n                    malesuada ante, faucibus viverra nunc blandit a. Fusce et\n                    nisl nisi. Aenean dictum quam id mollis faucibus. Nulla a\n                    ultricies dui. In hac habitasse platea dictumst. Curabitur\n                    gravida lobortis vestibulum.\n                </sp-tooltip>\n            </overlay-trigger>\n        </overlay-drag>\n    `;\n};\nexport const superComplexModal = () => {\n  return html`\n        <overlay-trigger type=\"modal\" triggered-by=\"click\">\n            <sp-button slot=\"trigger\" variant=\"accent\">Toggle Dialog</sp-button>\n            <sp-popover slot=\"click-content\">\n                <sp-dialog size=\"s\">\n                    <overlay-trigger triggered-by=\"click\">\n                        <sp-button slot=\"trigger\" variant=\"primary\">\n                            Toggle Dialog\n                        </sp-button>\n                        <sp-popover slot=\"click-content\">\n                            <sp-dialog size=\"s\" no-divider>\n                                <overlay-trigger\n                                    type=\"modal\"\n                                    triggered-by=\"click\"\n                                >\n                                    <sp-button\n                                        slot=\"trigger\"\n                                        variant=\"secondary\"\n                                    >\n                                        Toggle Dialog\n                                    </sp-button>\n                                    <sp-popover slot=\"click-content\">\n                                        <sp-dialog size=\"s\" no-divider>\n                                            <p>\n                                                When you get this deep, this\n                                                ActiveOverlay should be the only\n                                                one in [slot=\"open\"].\n                                            </p>\n                                            <p>\n                                                All of the rest of the\n                                                ActiveOverlay elements should\n                                                have had their [slot] attribute\n                                                removed.\n                                            </p>\n                                            <p>\n                                                Closing this ActiveOverlay\n                                                should replace them...\n                                            </p>\n                                        </sp-dialog>\n                                    </sp-popover>\n                                </overlay-trigger>\n                            </sp-dialog>\n                        </sp-popover>\n                    </overlay-trigger>\n                </sp-dialog>\n            </sp-popover>\n        </overlay-trigger>\n    `;\n};\nexport const updated = () => {\n  return html`\n        ${storyStyles}\n        <style>\n            sp-tooltip {\n                transition: none;\n            }\n        </style>\n        <overlay-drag>\n            <overlay-trigger\n                class=\"demo top-left\"\n                placement=\"bottom\"\n                triggered-by=\"hover\"\n            >\n                <overlay-target-icon\n                    slot=\"trigger\"\n                    style=\"translate(400px, 300px)\"\n                ></overlay-target-icon>\n                <sp-tooltip slot=\"hover-content\" delayed tip=\"bottom\">\n                    Click to open popover\n                </sp-tooltip>\n                <sp-popover slot=\"click-content\" placement=\"bottom\" tip>\n                    <sp-dialog size=\"s\" no-divider>\n                        <sp-slider\n                            value=\"5\"\n                            step=\"0.5\"\n                            min=\"0\"\n                            max=\"20\"\n                            label=\"Awesomeness\"\n                        ></sp-slider>\n                        <div id=\"styled-div\">\n                            The background of this div should be blue\n                        </div>\n                        <overlay-trigger\n                            id=\"inner-trigger\"\n                            placement=\"bottom\"\n                            triggered-by=\"click hover\"\n                        >\n                            <sp-button slot=\"trigger\">Press Me</sp-button>\n                            <sp-popover\n                                slot=\"click-content\"\n                                placement=\"bottom\"\n                                tip\n                            >\n                                <sp-dialog size=\"s\" no-divider>\n                                    Another Popover\n                                </sp-dialog>\n                            </sp-popover>\n\n                            <sp-tooltip\n                                slot=\"hover-content\"\n                                delayed\n                                tip=\"bottom\"\n                            >\n                                Click to open another popover.\n                            </sp-tooltip>\n                        </overlay-trigger>\n                    </sp-dialog>\n                </sp-popover>\n            </overlay-trigger>\n        </overlay-drag>\n    `;\n};\nexport const updating = () => {\n  const update = () => {\n    const button = document.querySelector('[slot=\"trigger\"]');\n    button.style.left = `${Math.floor(Math.random() * 200)}px`;\n    button.style.top = `${Math.floor(Math.random() * 200)}px`;\n    button.style.position = \"fixed\";\n  };\n  return html`\n        <overlay-trigger triggered-by=\"click\">\n            <sp-button variant=\"primary\" slot=\"trigger\">\n                Open inline overlay\n            </sp-button>\n            <sp-popover slot=\"click-content\">\n                <sp-dialog size=\"s\" no-divider>\n                    <sp-button variant=\"primary\" @click=${update}>\n                        Update trigger location.\n                    </sp-button>\n                </sp-dialog>\n            </sp-popover>\n        </overlay-trigger>\n    `;\n};\nupdating.swc_vrt = {\n  skip: true\n};\nupdating.parameters = {\n  // Disables Chromatic's snapshotting on a global level\n  chromatic: { disableSnapshot: true }\n};\nclass StartEndContextmenu extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n    this.shadowRoot.innerHTML = `\n            <style>\n                :host {\n                    display: flex;\n                    align-items: stretch;\n                }\n                div {\n                    width: 50%;\n                    height: 100%;\n                }\n            </style>\n            <div id=\"start\"></div>\n            <div id=\"end\"></div>\n        `;\n  }\n}\ncustomElements.define(\"start-end-contextmenu\", StartEndContextmenu);\nexport const virtualElementV1 = (args) => {\n  const contextMenuTemplate = (kind = \"\") => html`\n        <sp-popover\n            style=\"width:300px;\"\n            @click=${(event) => {\n    var _a2;\n    if (event.target.localName === \"sp-menu-item\") {\n      (_a2 = event.target) == null ? void 0 : _a2.dispatchEvent(\n        new Event(\"close\", { bubbles: true })\n      );\n    }\n  }}\n        >\n            <sp-menu>\n                <sp-menu-group>\n                    <span slot=\"header\">Menu source: ${kind}</span>\n                    <sp-menu-item>Deselect</sp-menu-item>\n                    <sp-menu-item>Select inverse</sp-menu-item>\n                    <sp-menu-item>Feather...</sp-menu-item>\n                    <sp-menu-item>Select and mask...</sp-menu-item>\n                    <sp-menu-divider></sp-menu-divider>\n                    <sp-menu-item>Save selection</sp-menu-item>\n                    <sp-menu-item disabled>Make work path</sp-menu-item>\n                </sp-menu-group>\n            </sp-menu>\n        </sp-popover>\n    `;\n  const handleContextmenu = async (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    const source = event.composedPath()[0];\n    const { id } = source;\n    const trigger = event.target;\n    const virtualTrigger = new VirtualTrigger(event.clientX, event.clientY);\n    const fragment = document.createDocumentFragment();\n    render(contextMenuTemplate(id), fragment);\n    const popover = fragment.querySelector(\"sp-popover\");\n    openOverlay(trigger, \"click\", popover, {\n      placement: args.placement,\n      receivesFocus: \"auto\",\n      virtualTrigger,\n      offset: 0,\n      notImmediatelyClosable: true\n    });\n  };\n  return html`\n        <style>\n            .app-root {\n                position: absolute;\n                inset: 0;\n            }\n        </style>\n        <start-end-contextmenu\n            class=\"app-root\"\n            @contextmenu=${{\n    capture: true,\n    handleEvent: handleContextmenu\n  }}\n        ></start-end-contextmenu>\n    `;\n};\nvirtualElementV1.args = {\n  placement: \"right-start\"\n};\nexport const virtualElement = (args) => {\n  const contextMenuTemplate = (kind = \"\") => html`\n        <sp-popover\n            style=\"width:300px;\"\n            @click=${(event) => {\n    var _a2;\n    if (event.target.localName === \"sp-menu-item\") {\n      (_a2 = event.target) == null ? void 0 : _a2.dispatchEvent(\n        new Event(\"close\", { bubbles: true })\n      );\n    }\n  }}\n        >\n            <sp-menu>\n                <sp-menu-group>\n                    <span slot=\"header\">Menu source: ${kind}</span>\n                    <sp-menu-item>Deselect</sp-menu-item>\n                    <sp-menu-item>Select inverse</sp-menu-item>\n                    <sp-menu-item>Feather...</sp-menu-item>\n                    <sp-menu-item>Select and mask...</sp-menu-item>\n                    <sp-menu-divider></sp-menu-divider>\n                    <sp-menu-item>Save selection</sp-menu-item>\n                    <sp-menu-item disabled>Make work path</sp-menu-item>\n                </sp-menu-group>\n            </sp-menu>\n        </sp-popover>\n    `;\n  const handleContextmenu = async (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    const source = event.composedPath()[0];\n    const { id } = source;\n    const trigger = event.target;\n    const virtualTrigger = new VirtualTrigger(event.clientX, event.clientY);\n    const fragment = document.createDocumentFragment();\n    render(contextMenuTemplate(id), fragment);\n    const popover = fragment.querySelector(\"sp-popover\");\n    const overlay = await openOverlay(popover, {\n      trigger: virtualTrigger,\n      placement: args.placement,\n      offset: 0,\n      notImmediatelyClosable: true,\n      type: \"auto\"\n    });\n    trigger.insertAdjacentElement(\"afterend\", overlay);\n  };\n  return html`\n        <style>\n            .app-root {\n                position: absolute;\n                inset: 0;\n            }\n        </style>\n        <start-end-contextmenu\n            class=\"app-root\"\n            @contextmenu=${{\n    capture: true,\n    handleEvent: handleContextmenu\n  }}\n        ></start-end-contextmenu>\n    `;\n};\nvirtualElement.args = {\n  placement: \"right-start\"\n};\nexport const virtualElementDeclaratively = (args) => {\n  const handleContextmenu = async (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    const overlay2 = document.querySelector(\n      \"sp-overlay:not([open])\"\n    );\n    if (overlay2.triggerElement instanceof VirtualTrigger) {\n      overlay2.triggerElement.updateBoundingClientRect(\n        event.clientX,\n        event.clientY\n      );\n    }\n    overlay2.willPreventClose = true;\n    overlay2.open = true;\n  };\n  const overlay = () => html`\n        <sp-overlay\n            offset=\"0\"\n            type=\"auto\"\n            placement=${args.placement}\n            .triggerElement=${new VirtualTrigger(0, 0)}\n        >\n            <sp-popover\n                style=\"width:300px;\"\n                @change=${(event) => {\n    var _a2;\n    (_a2 = event.target) == null ? void 0 : _a2.dispatchEvent(\n      new Event(\"close\", { bubbles: true })\n    );\n  }}\n            >\n                <sp-menu>\n                    <sp-menu-group>\n                        <span slot=\"header\">Menu</span>\n                        <sp-menu-item>Deselect</sp-menu-item>\n                        <sp-menu-item>Select inverse</sp-menu-item>\n                        <sp-menu-item>Feather...</sp-menu-item>\n                        <sp-menu-item>Select and mask...</sp-menu-item>\n                        <sp-menu-divider></sp-menu-divider>\n                        <sp-menu-item>Save selection</sp-menu-item>\n                        <sp-menu-item disabled>Make work path</sp-menu-item>\n                    </sp-menu-group>\n                </sp-menu>\n            </sp-popover>\n        </sp-overlay>\n    `;\n  return html`\n        <style>\n            .app-root {\n                position: absolute;\n                inset: 0;\n            }\n        </style>\n        <div\n            class=\"app-root\"\n            @contextmenu=${{\n    capture: true,\n    handleEvent: handleContextmenu\n  }}\n        >\n            ${overlay()} ${overlay()}\n        </div>\n    `;\n};\nvirtualElementDeclaratively.args = {\n  placement: \"right-start\"\n};\nvirtualElementDeclaratively.swc_vrt = {\n  skip: true\n};\nvirtualElementDeclaratively.parameters = {\n  // Disables Chromatic's snapshotting on a global level\n  chromatic: { disableSnapshot: true }\n};\nexport const triggeredByOptimization = () => {\n  return html`\n        <h2>\"triggered-by\" attribute optimization</h2>\n        <p>\n            This demo shows different ways to trigger overlays using the\n            <code>triggered-by</code>\n            attribute.\n        </p>\n        <p>\n            <strong>Pro tip:</strong>\n            Inspect the DOM to verify that only the respective overlay elements\n            are being rendered into the DOM based on the\n            <code>triggered-by</code>\n            value.\n        </p>\n        <p>\n            Unused interaction types aren't rendered. This improves performance,\n            reduces the number of unecessary DOM nodes and avoids race\n            conditions in slot reparenting.\n        </p>\n        <div style=\"display: flex; gap: 20px; flex-direction: column;\">\n            <!-- Click and hover only -->\n            <overlay-trigger triggered-by=\"click hover\">\n                <sp-button slot=\"trigger\">Click and hover trigger</sp-button>\n                <sp-popover slot=\"click-content\" direction=\"right\" tip>\n                    <sp-dialog size=\"s\" no-divider>Click content</sp-dialog>\n                </sp-popover>\n                <sp-tooltip slot=\"hover-content\">Hover content</sp-tooltip>\n            </overlay-trigger>\n\n            <!-- Longpress only -->\n            <overlay-trigger triggered-by=\"longpress\">\n                <sp-button slot=\"trigger\">Longpress trigger</sp-button>\n                <sp-popover slot=\"longpress-content\" direction=\"right\" tip>\n                    <sp-dialog size=\"s\" no-divider>Longpress content</sp-dialog>\n                </sp-popover>\n                <div slot=\"longpress-describedby-descriptor\">\n                    Press and hold to reveal more options\n                </div>\n            </overlay-trigger>\n\n            <!-- Click only -->\n            <overlay-trigger triggered-by=\"click\">\n                <sp-button slot=\"trigger\">Click only trigger</sp-button>\n                <sp-popover slot=\"click-content\" direction=\"right\" tip>\n                    <sp-dialog size=\"s\" no-divider>Click content</sp-dialog>\n                </sp-popover>\n            </overlay-trigger>\n\n            <!-- Hover only -->\n            <overlay-trigger triggered-by=\"hover\">\n                <sp-button slot=\"trigger\">Hover only trigger</sp-button>\n                <sp-tooltip slot=\"hover-content\">Hover content</sp-tooltip>\n            </overlay-trigger>\n        </div>\n    `;\n};\nexport const pickerInDialog = () => {\n  return html`\n        <sp-button variant=\"primary\" id=\"mybutton\">Button popover</sp-button>\n        <sp-overlay trigger=\"mybutton@click\" type=\"modal\" placement=\"bottom\">\n            <sp-popover tip>\n                <sp-dialog no-divider>\n                    <sp-field-label for=\"picker-value\">\n                        Open picker, then try clicking outside to close it:\n                    </sp-field-label>\n                    <sp-picker\n                        label=\"Select a Country with a very long label, too long in fact\"\n                        value=\"item-2\"\n                        id=\"picker-value\"\n                    >\n                        <sp-menu-item value=\"item-1\">Deselect</sp-menu-item>\n                        <sp-menu-item value=\"item-2\">\n                            Select inverse\n                        </sp-menu-item>\n                        <sp-menu-item value=\"item-3\">Feather...</sp-menu-item>\n                        <sp-menu-item value=\"item-4\">\n                            Select and mask...\n                        </sp-menu-item>\n                        <sp-menu-divider></sp-menu-divider>\n                        <sp-menu-item value=\"item-5\">\n                            Save selection\n                        </sp-menu-item>\n                        <sp-menu-item disabled value=\"item-6\">\n                            Make work path\n                        </sp-menu-item>\n                    </sp-picker>\n                </sp-dialog>\n            </sp-popover>\n        </sp-overlay>\n    `;\n};\npickerInDialog.swc_vrt = {\n  skip: true\n};\npickerInDialog.args = {\n  // Disables Chromatic's snapshotting on a global level\n  chromatic: { disableSnapshot: true }\n};\nexport const disabledOverlayTrigger = () => {\n  return html(_a || (_a = __template([\"\\n        \", `\n        <h2>Disabled Overlay Trigger</h2>\n        <p>This demonstrates how disabled overlay-triggers should work:</p>\n        <ul>\n            <li>\n                The overlay (tooltip/popover) functionality should be disabled\n            </li>\n            <li>But the trigger content itself should remain interactive</li>\n        </ul>\n\n        <div style=\"display: flex; gap: 24px; margin: 24px 0;\">\n            <!-- Disabled overlay-trigger with interactive content -->\n            <div>\n                <h3>Disabled overlay-trigger</h3>\n                <overlay-trigger triggered-by=\"click hover\" disabled>\n                    <div\n                        slot=\"trigger\"\n                        style=\"padding: 8px; border: 1px solid #ccc;\"\n                    >\n                        <p>This container has a disabled overlay-trigger</p>\n                        <sp-button variant=\"primary\" id=\"test-button-disabled\">\n                            This button should still be clickable\n                        </sp-button>\n                    </div>\n                    <sp-tooltip slot=\"hover-content\">\n                        This tooltip should not appear (disabled)\n                    </sp-tooltip>\n                    <sp-popover slot=\"click-content\" placement=\"bottom\" tip>\n                        <sp-dialog size=\"s\" no-divider>\n                            This popover should not appear (disabled)\n                        </sp-dialog>\n                    </sp-popover>\n                </overlay-trigger>\n                <p id=\"disabled-click-indicator\">Button not clicked yet</p>\n            </div>\n\n            <!-- Regular overlay-trigger for comparison -->\n            <div>\n                <h3>Regular overlay-trigger (for comparison)</h3>\n                <overlay-trigger triggered-by=\"click hover\">\n                    <div\n                        slot=\"trigger\"\n                        style=\"padding: 8px; border: 1px solid #ccc;\"\n                    >\n                        <p>This container has a regular overlay-trigger</p>\n                        <sp-button variant=\"primary\" id=\"test-button-enabled\">\n                            This button should be clickable\n                        </sp-button>\n                    </div>\n                    <sp-tooltip slot=\"hover-content\">\n                        This tooltip should appear on hover\n                    </sp-tooltip>\n                    <sp-popover slot=\"click-content\" placement=\"bottom\" tip>\n                        <sp-dialog size=\"s\" no-divider>\n                            This popover should appear on click\n                        </sp-dialog>\n                    </sp-popover>\n                </overlay-trigger>\n                <p id=\"enabled-click-indicator\">Button not clicked yet</p>\n            </div>\n        </div>\n\n        <script>\n            // Add click handlers to demonstrate button interactivity\n            setTimeout(() => {\n                const disabledButton = document.getElementById(\n                    'test-button-disabled'\n                );\n                const enabledButton = document.getElementById(\n                    'test-button-enabled'\n                );\n                const disabledIndicator = document.getElementById(\n                    'disabled-click-indicator'\n                );\n                const enabledIndicator = document.getElementById(\n                    'enabled-click-indicator'\n                );\n\n                if (disabledButton) {\n                    disabledButton.addEventListener('click', () => {\n                        disabledIndicator.textContent =\n                            'Button was clicked! \\u2705';\n                        disabledIndicator.style.color = 'green';\n                    });\n                }\n\n                if (enabledButton) {\n                    enabledButton.addEventListener('click', () => {\n                        enabledIndicator.textContent = 'Button was clicked! \\u2705';\n                        enabledIndicator.style.color = 'green';\n                    });\n                }\n            }, 100);\n        <\\/script>\n    `])), storyStyles);\n};\ndisabledOverlayTrigger.swc_vrt = {\n  skip: true\n};\nexport const WithInteractiveContent = () => {\n  return html`\n        <div>\n            <sp-button id=\"trigger\">Open Overlay</sp-button>\n            <sp-overlay trigger=\"trigger@click\" type=\"auto\" placement=\"bottom\">\n                <sp-popover dialog>\n                    <p>\n                        My slider in overlay element:\n                        <sp-slider\n                            label=\"Slider Label - Editable\"\n                            editable\n                        ></sp-slider>\n                    </p>\n                </sp-popover>\n            </sp-overlay>\n        </div>\n    `;\n};\n//# sourceMappingURL=overlay.stories.js.map\n;export const __namedExportsOrder = [\"Default\",\"accordion\",\"clickAndHoverTarget\",\"clickAndHoverTargets\",\"clickContentClosedOnScroll\",\"complexModal\",\"customizedClickContent\",\"deep\",\"deepChildTooltip\",\"deepNesting\",\"definedOverlayElement\",\"detachedElement\",\"edges\",\"inline\",\"longpress\",\"modalLoose\",\"modalNoFocus\",\"modalManaged\",\"modalWithinNonModal\",\"noCloseOnResize\",\"openClickContent\",\"openHoverContent\",\"replace\",\"sideHoverDraggable\",\"superComplexModal\",\"updated\",\"updating\",\"virtualElementV1\",\"virtualElement\",\"virtualElementDeclaratively\",\"triggeredByOptimization\",\"pickerInDialog\",\"disabledOverlayTrigger\",\"WithInteractiveContent\"];"],"names":[],"sourceRoot":""}