{"version":3,"file":"swatch-stories-swatch-group-stories.8c5e2c6f.iframe.bundle.js","mappings":";;AACA;;AAqMA;AACA;;AAGA;;AC9HA;;AASA;AACA;;AAKA;;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;;;AAOA","sources":["webpack://@adobe/spectrum-web-components/./packages/swatch/src/SwatchGroup.dev.js","webpack://@adobe/spectrum-web-components/./packages/swatch/stories/swatch-group.stories.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SizedMixin,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  queryAssignedElements\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { RovingTabindexController } from \"@spectrum-web-components/reactive-controllers/src/RovingTabindex.js\";\nimport { MutationController } from \"@lit-labs/observers/mutation-controller.js\";\nimport styles from \"./swatch-group.css.js\";\nexport class SwatchGroup extends SizedMixin(SpectrumElement, {\n  validSizes: [\"xs\", \"s\", \"m\", \"l\"],\n  noDefaultSize: true\n}) {\n  constructor() {\n    super();\n    // Specifically surface `_selected` internally so that change can be made to this value internally\n    // without triggering the update lifecycle directly.\n    this._selected = [];\n    this.selectedSet = /* @__PURE__ */ new Set();\n    this.rovingTabindexController = new RovingTabindexController(this, {\n      focusInIndex: (elements) => {\n        let firstEnabledIndex = -1;\n        const firstSelectedIndex = elements.findIndex((el, index) => {\n          if (!elements[firstEnabledIndex] && !el.disabled) {\n            firstEnabledIndex = index;\n          }\n          return el.selected && !el.disabled;\n        });\n        return elements[firstSelectedIndex] ? firstSelectedIndex : firstEnabledIndex;\n      },\n      elements: () => this.swatches,\n      isFocusableElement: (el) => !el.disabled\n    });\n    this.manageChange = async () => {\n      const presentSet = /* @__PURE__ */ new Set();\n      this.selectedSet = new Set(this.selected);\n      await Promise.all(this.swatches.map((swatch) => swatch.updateComplete));\n      this.swatches.forEach((swatch) => {\n        presentSet.add(swatch.value);\n        if (swatch.selected) {\n          this.selectedSet.add(swatch.value);\n        }\n      });\n      this.selectedSet.forEach((value) => {\n        if (!presentSet.has(value)) {\n          this.selectedSet.delete(value);\n        }\n      });\n      this._selected = [...this.selectedSet];\n      this.rovingTabindexController.clearElementCache();\n    };\n    new MutationController(this, {\n      config: {\n        attributes: true,\n        childList: true,\n        subtree: true\n      },\n      callback: () => {\n        this.manageChange();\n      }\n    });\n  }\n  static get styles() {\n    return [styles];\n  }\n  get selected() {\n    return this._selected;\n  }\n  set selected(selected) {\n    if (selected === this.selected) return;\n    const oldSelected = this.selected;\n    this._selected = selected;\n    this.requestUpdate(\"selected\", oldSelected);\n  }\n  focus(options) {\n    this.rovingTabindexController.focus(options);\n  }\n  handleChange(event) {\n    event.stopPropagation();\n    const oldSelected = this.selected;\n    if (!this.selects) {\n      event.preventDefault();\n      return;\n    }\n    if (this.selects === \"single\") {\n      const { target } = event;\n      target.tabIndex = 0;\n      target.selected = true;\n      if (this.selectedSet.has(target.value)) {\n        return;\n      }\n      this.selectedSet.clear();\n      this.selectedSet.add(target.value);\n      this.rovingTabindexController.elements.forEach((child) => {\n        if (child === target) return;\n        child.selected = false;\n      });\n    } else if (this.selects === \"multiple\") {\n      const { target } = event;\n      if (target.selected) {\n        this.selectedSet.add(target.value);\n      } else {\n        this.selectedSet.delete(target.value);\n      }\n    }\n    this._selected = [...this.selectedSet];\n    const applyDefault = this.dispatchEvent(\n      new Event(\"change\", {\n        cancelable: true,\n        bubbles: true\n      })\n    );\n    if (!applyDefault) {\n      this._selected = oldSelected;\n      event.preventDefault();\n    }\n  }\n  getPassthroughSwatchActions(changes) {\n    const targetValues = {};\n    if (changes.has(\"selects\") && (this.selects || typeof changes.get(\"selects\") !== \"undefined\")) {\n      targetValues.selects = this.selects;\n    }\n    if (changes.has(\"border\") && (this.border || typeof changes.get(\"border\") !== \"undefined\")) {\n      targetValues.border = this.border;\n    }\n    if (changes.has(\"rounding\") && (this.rounding || typeof changes.get(\"rounding\") !== \"undefined\")) {\n      targetValues.rounding = this.rounding;\n    }\n    if (changes.has(\"size\") && (this.size !== \"m\" || typeof changes.get(\"size\") !== \"undefined\")) {\n      targetValues.size = this.size;\n    }\n    if (changes.has(\"shape\") && (this.shape || typeof changes.get(\"shape\") !== \"undefined\")) {\n      targetValues.shape = this.shape;\n    }\n    const passThroughSwatchActions = [];\n    if (Object.keys(targetValues).length) {\n      passThroughSwatchActions.push((swatch) => {\n        if (true) {\n          if (\"selects\" in targetValues && targetValues.selects !== \"multiple\" && swatch.mixedValue) {\n            window.__swc.warn(\n              this,\n              `<sp-swatch> elements can only leverage the \"mixed-value\" attribute when their <sp-swatch-group> parent element is also leveraging \"selects=\"multiple\"\"`,\n              \"https://opensource.adobe.com/spectrum-web-components/components/swatch-group/#multiple\",\n              {\n                type: \"accessibility\"\n              }\n            );\n          }\n        }\n        if (\"border\" in targetValues)\n          swatch.border = targetValues.border;\n        if (\"rounding\" in targetValues)\n          swatch.rounding = targetValues.rounding;\n        if (\"shape\" in targetValues) swatch.shape = targetValues.shape;\n        if (\"size\" in targetValues)\n          swatch.size = targetValues.size;\n      });\n    }\n    return passThroughSwatchActions;\n  }\n  getSelectionSwatchActions(changes) {\n    const selectionSwatchActions = [];\n    if (!changes.has(\"selects\")) return selectionSwatchActions;\n    if (this.selects) {\n      this.setAttribute(\n        \"role\",\n        this.selects === \"single\" ? \"radiogroup\" : \"group\"\n      );\n    } else {\n      this.removeAttribute(\"role\");\n    }\n    const swatchRoles = {\n      single: \"radio\",\n      multiple: \"checkbox\"\n    };\n    const swatchRole = this.selects ? swatchRoles[this.selects] : \"button\";\n    selectionSwatchActions.push((swatch) => {\n      swatch.setAttribute(\"role\", swatchRole);\n    });\n    return selectionSwatchActions;\n  }\n  render() {\n    return html`\n            <slot\n                @change=${this.handleChange}\n                @slotchange=${this.manageChange}\n            ></slot>\n        `;\n  }\n  willUpdate(changes) {\n    const swatchActions = [\n      ...this.getPassthroughSwatchActions(changes),\n      ...this.getSelectionSwatchActions(changes)\n    ];\n    let nextSelected = new Set(this.selected);\n    const currentValues = /* @__PURE__ */ new Set();\n    if (changes.has(\"selected\")) {\n      swatchActions.push((swatch) => {\n        currentValues.add(swatch.value);\n        if (nextSelected.has(swatch.value) || !this.hasUpdated && swatch.selected) {\n          swatch.selected = true;\n        } else {\n          swatch.selected = false;\n        }\n      });\n    }\n    const doActions = () => {\n      nextSelected = new Set(this.selected);\n      this.swatches.forEach((swatch) => {\n        swatchActions.forEach((action) => {\n          action(swatch);\n        });\n      });\n      if (changes.has(\"selected\")) {\n        this._selected = [...nextSelected.values()].filter(\n          (selectedValue) => currentValues.has(selectedValue)\n        );\n      }\n    };\n    if (this.hasUpdated) {\n      doActions();\n    } else {\n      this.shadowRoot.addEventListener(\n        \"slotchange\",\n        () => {\n          requestAnimationFrame(doActions);\n        },\n        { once: true }\n      );\n    }\n  }\n}\n__decorateClass([\n  property({ reflect: true })\n], SwatchGroup.prototype, \"border\", 2);\n__decorateClass([\n  property({ reflect: true })\n], SwatchGroup.prototype, \"density\", 2);\n__decorateClass([\n  property({ reflect: true })\n], SwatchGroup.prototype, \"rounding\", 2);\n__decorateClass([\n  property({ type: Array })\n], SwatchGroup.prototype, \"selected\", 1);\n__decorateClass([\n  property()\n], SwatchGroup.prototype, \"selects\", 2);\n__decorateClass([\n  property({ reflect: true })\n], SwatchGroup.prototype, \"shape\", 2);\n__decorateClass([\n  queryAssignedElements({ flatten: true })\n], SwatchGroup.prototype, \"swatches\", 2);\n//# sourceMappingURL=SwatchGroup.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport \"@spectrum-web-components/swatch/sp-swatch-group.js\";\nimport \"@spectrum-web-components/swatch/sp-swatch.js\";\nexport default {\n  title: \"Swatch group\",\n  component: \"sp-swatch-group\",\n  args: {},\n  argTypes: {\n    border: {\n      name: \"border\",\n      type: { name: \"string\", required: false },\n      description: \"The border to apply to the Swatch children.\",\n      table: {\n        defaultValue: { summary: \"\" }\n      },\n      control: {\n        type: \"inline-radio\",\n        options: [\"normal\", \"light\", \"none\"]\n      }\n    },\n    density: {\n      name: \"density\",\n      type: { name: \"string\", required: false },\n      description: \"The density at which to display the Swatch children.\",\n      table: {\n        defaultValue: { summary: \"\" }\n      },\n      control: {\n        type: \"inline-radio\",\n        options: [\"normal\", \"compact\", \"spacious\"]\n      }\n    },\n    rounding: {\n      name: \"rounding\",\n      type: { name: \"string\", required: false },\n      description: \"The rounding to apply to the Swatch children.\",\n      table: {\n        defaultValue: { summary: \"\" }\n      },\n      control: {\n        type: \"inline-radio\",\n        options: [\"normal\", \"none\", \"full\"]\n      }\n    },\n    selects: {\n      name: \"selects\",\n      type: { name: \"string\", required: false },\n      description: \"Whether the Swatch Group manages a selection, and whether it is a sinlge or multiple selection.\",\n      table: {\n        defaultValue: { summary: \"\" }\n      },\n      control: {\n        type: \"inline-radio\",\n        options: [\"none\", \"single\", \"multiple\"]\n      }\n    },\n    shape: {\n      name: \"shape\",\n      type: { name: \"string\", required: false },\n      description: \"The shape to apply to the Swatch children.\",\n      table: {\n        defaultValue: { summary: \"\" }\n      },\n      control: {\n        type: \"inline-radio\",\n        options: [\"normal\", \"rectangle\"]\n      }\n    }\n  },\n  decorators: [\n    (story, {\n      args: { selected = [] }\n    }) => html`\n            <div\n                @change=${async (event) => {\n      await 0;\n      if (event.defaultPrevented) return;\n      const next = event.target.nextElementSibling;\n      next.textContent = `Selected: ${JSON.stringify(\n        event.target.selected\n      )}`;\n    }}\n            >\n                ${story()}\n                <div>Selected: ${JSON.stringify(selected)}</div>\n            </div>\n        `\n  ]\n};\nconst colors = [\n  \"--spectrum-gray-700\",\n  \"--spectrum-red-700\",\n  \"--spectrum-orange-700\",\n  \"--spectrum-yellow-700\",\n  \"--spectrum-chartreuse-700\",\n  \"--spectrum-celery-700\",\n  \"--spectrum-green-700\",\n  \"--spectrum-seafoam-700\",\n  \"--spectrum-blue-700\",\n  \"--spectrum-indigo-700\",\n  \"--spectrum-purple-700\",\n  \"--spectrum-fuchsia-700\",\n  \"--spectrum-magenta-700\"\n];\nconst template = ({\n  border,\n  density,\n  rounding,\n  selects,\n  selected = [],\n  shape\n}) => {\n  const groupLabel = !!selects ? selects === \"single\" ? \"Select a color\" : \"Selects color(s)\" : void 0;\n  return html`\n        <sp-swatch-group\n            border=${ifDefined(border === \"normal\" ? void 0 : border)}\n            density=${ifDefined(density === \"normal\" ? void 0 : density)}\n            rounding=${ifDefined(rounding === \"normal\" ? void 0 : rounding)}\n            selects=${ifDefined(selects === \"none\" ? void 0 : selects)}\n            .selected=${selected}\n            shape=${ifDefined(shape === \"normal\" ? void 0 : shape)}\n            aria-label=${ifDefined(groupLabel)}\n        >\n            ${colors.map(\n    (color) => html`\n                    <sp-swatch\n                        color=\"var(${color})\"\n                        label=${color}\n                        value=${color}\n                    ></sp-swatch>\n                `\n  )}\n        </sp-swatch-group>\n    `;\n};\nexport const Default = (args) => template(args);\nDefault.args = {};\nexport const densityCompact = (args) => template(args);\ndensityCompact.args = {\n  density: \"compact\"\n};\nexport const densitySpacious = (args) => template(args);\ndensitySpacious.args = {\n  density: \"spacious\"\n};\nexport const selectsSingle = (args) => template(args);\nselectsSingle.args = {\n  selects: \"single\",\n  selected: [\"--spectrum-yellow-500\"]\n};\nexport const selectsMultiple = (args) => template(args);\nselectsMultiple.args = {\n  selects: \"multiple\",\n  selected: [\n    \"--spectrum-celery-500\",\n    \"--spectrum-red-500\",\n    \"--spectrum-purple-500\",\n    \"--spectrum-blue-500\"\n  ]\n};\nexport const borderLight = (args) => template(args);\nborderLight.args = {\n  border: \"light\"\n};\nexport const borderNone = (args) => template(args);\nborderNone.args = {\n  border: \"none\"\n};\nexport const roundingNone = (args) => template(args);\nroundingNone.args = {\n  rounding: \"none\"\n};\nexport const roundingFull = (args) => template(args);\nroundingFull.args = {\n  rounding: \"full\"\n};\nexport const shapeRectangle = (args) => template(args);\nshapeRectangle.args = {\n  shape: \"rectangle\"\n};\n//# sourceMappingURL=swatch-group.stories.js.map\n;export const __namedExportsOrder = [\"Default\",\"densityCompact\",\"densitySpacious\",\"selectsSingle\",\"selectsMultiple\",\"borderLight\",\"borderNone\",\"roundingNone\",\"roundingFull\",\"shapeRectangle\"];"],"names":[],"sourceRoot":""}