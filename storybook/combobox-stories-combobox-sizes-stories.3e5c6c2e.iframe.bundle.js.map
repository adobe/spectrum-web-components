{"version":3,"file":"combobox-stories-combobox-sizes-stories.3e5c6c2e.iframe.bundle.js","mappings":";AAkDA;;AAIA;AAsIA","sources":["webpack://@adobe/spectrum-web-components/./packages/overlay/stories/index.js"],"sourcesContent":["\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nfunction nextFrame() {\n  return new Promise((res) => requestAnimationFrame(() => res()));\n}\nclass IsOverlayOpen extends HTMLElement {\n  constructor() {\n    super();\n    this.sendFocus = async () => {\n      var _a;\n      const selectedItem = (_a = document.querySelector(\"[focusable]\")) == null ? void 0 : _a.querySelector(\"[selected]\");\n      if (selectedItem) {\n        selectedItem.focus();\n        selectedItem.focused = true;\n        await nextFrame();\n        selectedItem.scrollIntoView({ block: \"start\" });\n        await nextFrame();\n      }\n    };\n    this.handleOpened = async (event) => {\n      const overlay = event.target;\n      const actions = [nextFrame(), overlay.updateComplete, this.sendFocus()];\n      await Promise.all(actions);\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      this.ready(true);\n    };\n    this.readyPromise = Promise.resolve(false);\n    this.readyPromise = new Promise((res) => {\n      this.ready = res;\n      this.setup();\n    });\n  }\n  async setup() {\n    await nextFrame();\n    document.addEventListener(\"sp-opened\", this.handleOpened);\n  }\n  get updateComplete() {\n    return this.readyPromise;\n  }\n  // remove event listeners in disconnectCallback\n  disconnectedCallback() {\n    document.removeEventListener(\"sp-opened\", this.handleOpened);\n  }\n}\ncustomElements.define(\"is-overlay-open\", IsOverlayOpen);\nexport const isOverlayOpen = (story) => {\n  return html`\n        ${story()}\n        <is-overlay-open></is-overlay-open>\n    `;\n};\nclass AreIconsPresent extends HTMLElement {\n  constructor() {\n    super();\n    this.overlayTimeout = null;\n    this.sendFocus = async () => {\n      var _a;\n      const selectedItem = (_a = document.querySelector(\"[focusable]\")) == null ? void 0 : _a.querySelector(\"[selected]\");\n      if (selectedItem) {\n        selectedItem.focus();\n        selectedItem.focused = true;\n        await nextFrame();\n        selectedItem.scrollIntoView({ block: \"start\" });\n        await nextFrame();\n      }\n    };\n    this.handleOpened = async (event) => {\n      if (this.overlayTimeout) {\n        clearTimeout(this.overlayTimeout);\n        this.overlayTimeout = null;\n      }\n      const overlay = event.target;\n      const actions = [nextFrame(), overlay.updateComplete, this.sendFocus()];\n      await Promise.all(actions);\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      this.checkIcons();\n    };\n    this.checkIcons = async () => {\n      const icons = [...document.querySelectorAll(\"sp-icon\")];\n      const picker = document.querySelector(\"sp-picker\");\n      if (picker) {\n        const pickerIcon = picker.querySelector(\"sp-icon\");\n        if (pickerIcon) {\n          icons.push(pickerIcon);\n        }\n      }\n      const iconLoadPromises = Array.from(icons).map((icon) => {\n        return new Promise((resolve) => {\n          var _a;\n          if (\"updateComplete\" in icon && typeof ((_a = icon.updateComplete) == null ? void 0 : _a.then) === \"function\") {\n            icon.updateComplete.then(() => {\n              resolve();\n            });\n            return;\n          }\n          const src = icon.getAttribute(\"src\");\n          if (!src) {\n            const imgElement2 = icon.querySelector(\"img\");\n            if (imgElement2) {\n              if (imgElement2.complete) {\n                resolve();\n              } else {\n                imgElement2.addEventListener(\n                  \"load\",\n                  () => {\n                    resolve();\n                  },\n                  { once: true }\n                );\n                imgElement2.addEventListener(\n                  \"error\",\n                  () => {\n                    console.warn(`Failed to load icon image`);\n                    resolve();\n                  },\n                  { once: true }\n                );\n              }\n              return;\n            }\n            resolve();\n            return;\n          }\n          const imgElement = icon.querySelector(\"img\");\n          if (imgElement) {\n            if (imgElement.complete) {\n              resolve();\n            } else {\n              imgElement.addEventListener(\n                \"load\",\n                () => {\n                  resolve();\n                },\n                { once: true }\n              );\n              imgElement.addEventListener(\n                \"error\",\n                () => {\n                  console.warn(\n                    `Failed to load icon image: ${src}`\n                  );\n                  resolve();\n                },\n                { once: true }\n              );\n            }\n            return;\n          }\n          const img = new Image();\n          img.onload = () => resolve();\n          img.onerror = () => {\n            console.warn(`Failed to load icon: ${src}`);\n            resolve();\n          };\n          img.src = src;\n        });\n      });\n      await Promise.all(iconLoadPromises);\n      await nextFrame();\n      this.ready(true);\n    };\n    this.readyPromise = Promise.resolve(false);\n    this.readyPromise = new Promise((res) => {\n      this.ready = res;\n      this.setup();\n    });\n  }\n  async setup() {\n    await nextFrame();\n    document.addEventListener(\"sp-opened\", this.handleOpened);\n  }\n  get updateComplete() {\n    return this.readyPromise;\n  }\n  // remove event listeners in disconnectCallback\n  disconnectedCallback() {\n    document.removeEventListener(\"sp-opened\", this.handleOpened);\n  }\n}\ncustomElements.define(\"are-icons-present\", AreIconsPresent);\nexport const areIconsPresent = (story) => {\n  return html`\n        ${story()}\n        <are-icons-present></are-icons-present>\n    `;\n};\n//# sourceMappingURL=index.js.map\n"],"names":[],"sourceRoot":""}