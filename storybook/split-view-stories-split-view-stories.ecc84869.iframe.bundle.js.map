{"version":3,"file":"split-view-stories-split-view-stories.ecc84869.iframe.bundle.js","mappings":";;AACA;;AAmGA;AAGA;AACA;;AAEA;;;AAGA;;AAEA;AAGA;AACA;AACA;AAGA;AAGA;AACA;;AAaA;;AAEA;;AAEA;AAEA;ACpHA;;;;AAMA;;;;AAKA;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;AAKA;;;;AAMA;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;;;;;;;;;;;;;;;;;;;;;AAwBA;AAEA;;;AAKA;AAEA;;;;;AAOA","sources":["webpack://@adobe/spectrum-web-components/./packages/split-view/src/SplitView.dev.js","webpack://@adobe/spectrum-web-components/./packages/split-view/stories/split-view.stories.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  classMap,\n  ifDefined\n} from \"@spectrum-web-components/base/src/directives.js\";\nimport {\n  property,\n  query,\n  state\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { streamingListener } from \"@spectrum-web-components/base/src/streaming-listener.js\";\nimport { randomID } from \"@spectrum-web-components/shared/src/random-id.js\";\nimport styles from \"./split-view.css.js\";\nconst DEFAULT_MAX_SIZE = 3840;\nconst SPLITTERSIZE = 2;\nconst ARROW_KEY_CHANGE_VALUE = 10;\nconst PAGEUPDOWN_KEY_CHANGE_VALUE = 50;\nconst COLLAPSE_THREASHOLD = 50;\nexport class SplitView extends SpectrumElement {\n  constructor() {\n    super();\n    this.vertical = false;\n    this.resizable = false;\n    this.collapsible = false;\n    this.primaryMin = 0;\n    this.primaryMax = DEFAULT_MAX_SIZE;\n    this.secondaryMin = 0;\n    this.secondaryMax = DEFAULT_MAX_SIZE;\n    this.firstPaneSize = \"auto\";\n    this.enoughChildren = false;\n    this.viewSize = 0;\n    this.offset = 0;\n    this.minPos = 0;\n    this.maxPos = DEFAULT_MAX_SIZE;\n    this.controlledElIDApplied = false;\n    const RO = window.ResizeObserver;\n    if (RO) {\n      this.observer = new RO(() => {\n        this.rect = void 0;\n        this.updateMinMax();\n      });\n    }\n  }\n  static get styles() {\n    return [styles];\n  }\n  connectedCallback() {\n    var _a;\n    super.connectedCallback();\n    (_a = this.observer) == null ? void 0 : _a.observe(this);\n  }\n  disconnectedCallback() {\n    var _a;\n    (_a = this.observer) == null ? void 0 : _a.unobserve(this);\n    super.disconnectedCallback();\n  }\n  /**\n   * @private\n   **/\n  get splitterSize() {\n    if (!this._splitterSize) {\n      this._splitterSize = this.splitter && Math.round(\n        parseFloat(\n          window.getComputedStyle(this.splitter).getPropertyValue(\n            this.vertical ? \"height\" : \"width\"\n          )\n        )\n      ) || SPLITTERSIZE;\n    }\n    return this._splitterSize;\n  }\n  render() {\n    var _a, _b;\n    const splitterClasses = {\n      \"is-resized-start\": this.splitterPos === this.minPos,\n      \"is-resized-end\": this.splitterPos && this.splitterPos > this.splitterSize && this.splitterPos === this.maxPos,\n      \"is-collapsed-start\": this.splitterPos === 0,\n      \"is-collapsed-end\": this.splitterPos && this.splitterPos >= Math.max(\n        this.splitterSize,\n        this.viewSize - this.splitterSize\n      )\n    };\n    const label = this.resizable ? this.label || \"Resize the panels\" : void 0;\n    return html`\n            <slot\n                id=${ifDefined(\n      this.resizable ? (_a = this.controlledEl) == null ? void 0 : _a.id : void 0\n    )}\n                @slotchange=${this.onContentSlotChange}\n                style=\"--spectrum-split-view-first-pane-size: ${this.firstPaneSize}\"\n            ></slot>\n            ${this.enoughChildren ? html`\n                      <div\n                          id=\"splitter\"\n                          class=${classMap(splitterClasses)}\n                          role=\"separator\"\n                          aria-controls=${ifDefined(\n      this.resizable ? (_b = this.controlledEl) == null ? void 0 : _b.id : void 0\n    )}\n                          aria-label=${ifDefined(label)}\n                          aria-orientation=${this.vertical ? \"horizontal\" : \"vertical\"}\n                          aria-valuenow=${Math.round(\n      parseFloat(this.firstPaneSize) / this.viewSize * 100\n    )}\n                          tabindex=${ifDefined(\n      this.resizable ? \"0\" : void 0\n    )}\n                          @keydown=${this.onKeydown}\n                          ${streamingListener({\n      start: [\"pointerdown\", this.onPointerdown],\n      streamInside: [\"pointermove\", this.onPointermove],\n      end: [\n        [\n          \"pointerup\",\n          \"pointercancel\",\n          \"pointerleave\"\n        ],\n        this.onPointerup\n      ]\n    })}\n                      >\n                          ${this.resizable ? html`\n                                    <div id=\"gripper\"></div>\n                                ` : nothing}\n                      </div>\n                  ` : nothing}\n        `;\n  }\n  onContentSlotChange(event) {\n    if (this.controlledEl && this.controlledElIDApplied) {\n      this.controlledEl.removeAttribute(\"id\");\n      this.controlledElIDApplied = false;\n    }\n    this.controlledEl = event.target.assignedElements()[0];\n    if (this.controlledEl && !this.controlledEl.id) {\n      this.controlledEl.id = `${this.tagName.toLowerCase()}-${randomID()}`;\n      this.controlledElIDApplied = true;\n    }\n    this.enoughChildren = this.children.length > 1;\n    this.checkResize();\n  }\n  onPointerdown(event) {\n    if (!this.resizable || event.button && event.button !== 0) {\n      event.preventDefault();\n      return;\n    }\n    this.splitter.setPointerCapture(event.pointerId);\n    this.offset = this.getOffset();\n  }\n  onPointermove(event) {\n    event.preventDefault();\n    let pos = this.vertical || this.isLTR ? this.getPosition(event) - this.offset : this.offset - this.getPosition(event);\n    if (this.collapsible && pos < this.minPos - COLLAPSE_THREASHOLD) {\n      pos = 0;\n    }\n    if (this.collapsible && pos > this.maxPos + COLLAPSE_THREASHOLD) {\n      pos = this.viewSize - this.splitterSize;\n    }\n    this.updatePosition(pos);\n  }\n  onPointerup(event) {\n    this.splitter.releasePointerCapture(event.pointerId);\n  }\n  getOffset() {\n    if (!this.rect) {\n      this.rect = this.getBoundingClientRect();\n    }\n    const offsetX = this.isLTR ? this.rect.left : this.rect.right;\n    return this.vertical ? this.rect.top : offsetX;\n  }\n  getPosition(event) {\n    return this.vertical ? event.clientY : event.clientX;\n  }\n  movePosition(event, offset) {\n    event.preventDefault();\n    if (this.splitterPos !== void 0) {\n      this.updatePosition(this.splitterPos + offset);\n    }\n  }\n  onKeydown(event) {\n    if (!this.resizable) {\n      return;\n    }\n    let direction = 0;\n    const isLTRorVertical = this.isLTR || this.vertical;\n    switch (event.key) {\n      case \"Home\":\n        event.preventDefault();\n        this.updatePosition(this.collapsible ? 0 : this.minPos);\n        return;\n      case \"End\":\n        event.preventDefault();\n        this.updatePosition(\n          this.collapsible ? this.viewSize - this.splitterSize : this.maxPos\n        );\n        return;\n      case \"ArrowLeft\":\n        direction = isLTRorVertical ? -1 : 1;\n        break;\n      case \"ArrowRight\":\n        direction = isLTRorVertical ? 1 : -1;\n        break;\n      case \"ArrowUp\":\n        direction = this.vertical ? -1 : 1;\n        break;\n      case \"ArrowDown\":\n        direction = this.vertical ? 1 : -1;\n        break;\n      case \"PageUp\":\n        direction = this.vertical ? -1 : 1;\n        break;\n      case \"PageDown\":\n        direction = this.vertical ? 1 : -1;\n        break;\n    }\n    if (direction !== 0) {\n      const moveBy = event.key.startsWith(\"Page\") ? PAGEUPDOWN_KEY_CHANGE_VALUE : ARROW_KEY_CHANGE_VALUE;\n      this.movePosition(event, moveBy * direction);\n    }\n  }\n  async checkResize() {\n    if (!this.enoughChildren) {\n      return;\n    }\n    this.updateMinMax();\n    if (this.splitterPos === void 0) {\n      const startPos = await this.calcStartPos();\n      this.updatePosition(startPos);\n    }\n  }\n  updateMinMax() {\n    this.viewSize = this.vertical ? this.offsetHeight : this.offsetWidth;\n    this.minPos = Math.max(\n      this.primaryMin,\n      this.viewSize - this.secondaryMax\n    );\n    this.maxPos = Math.min(\n      this.primaryMax,\n      this.viewSize - Math.max(this.secondaryMin, this.splitterSize)\n    );\n  }\n  updatePosition(x) {\n    let pos = this.getLimitedPosition(x);\n    if (this.collapsible && x <= 0) {\n      pos = 0;\n    }\n    if (this.collapsible && x > this.maxPos && x >= this.viewSize - this.splitterSize) {\n      pos = this.viewSize - this.splitterSize;\n    }\n    if (pos !== this.splitterPos) {\n      this.splitterPos = pos;\n      this.dispatchChangeEvent();\n    }\n  }\n  getLimitedPosition(input) {\n    if (input <= this.minPos) {\n      return this.minPos;\n    }\n    if (input >= this.maxPos) {\n      return this.maxPos;\n    }\n    return Math.max(this.minPos, Math.min(this.maxPos, input));\n  }\n  async calcStartPos() {\n    if (this.primarySize !== void 0 && /^\\d+(px)?$/.test(this.primarySize)) {\n      return parseInt(this.primarySize, 10);\n    }\n    if (this.primarySize !== void 0 && /^\\d+%$/.test(this.primarySize)) {\n      return parseInt(this.primarySize, 10) * this.viewSize / 100;\n    }\n    if (this.primarySize === \"auto\") {\n      this.firstPaneSize = \"auto\";\n      const nodes = this.paneSlot.assignedNodes({ flatten: true });\n      const firstEl = nodes.find(\n        (node) => node instanceof HTMLElement\n      );\n      if (typeof firstEl.updateComplete !== \"undefined\") {\n        await firstEl.updateComplete;\n      }\n      if (firstEl) {\n        const size = window.getComputedStyle(firstEl).getPropertyValue(this.vertical ? \"height\" : \"width\");\n        const size_i = parseFloat(size);\n        if (!isNaN(size_i)) {\n          return this.getLimitedPosition(Math.ceil(size_i));\n        }\n      }\n    }\n    return this.viewSize / 2;\n  }\n  dispatchChangeEvent() {\n    const changeEvent = new Event(\"change\", {\n      bubbles: true,\n      composed: true\n    });\n    this.dispatchEvent(changeEvent);\n  }\n  willUpdate(changed) {\n    if (!this.hasUpdated || changed.has(\"primarySize\")) {\n      this.splitterPos = void 0;\n      this.checkResize();\n    }\n    if (changed.has(\"splitterPos\") && this.splitterPos !== void 0 && this.enoughChildren) {\n      this.firstPaneSize = `${Math.round(this.splitterPos)}px`;\n    }\n  }\n}\n__decorateClass([\n  state()\n], SplitView.prototype, \"controlledEl\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], SplitView.prototype, \"vertical\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], SplitView.prototype, \"resizable\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], SplitView.prototype, \"collapsible\", 2);\n__decorateClass([\n  property({ type: Number, attribute: \"primary-min\" })\n], SplitView.prototype, \"primaryMin\", 2);\n__decorateClass([\n  property({ type: Number, attribute: \"primary-max\" })\n], SplitView.prototype, \"primaryMax\", 2);\n__decorateClass([\n  property({ type: String, attribute: \"primary-size\" })\n], SplitView.prototype, \"primarySize\", 2);\n__decorateClass([\n  property({ type: Number, attribute: \"secondary-min\" })\n], SplitView.prototype, \"secondaryMin\", 2);\n__decorateClass([\n  property({ type: Number, attribute: \"secondary-max\" })\n], SplitView.prototype, \"secondaryMax\", 2);\n__decorateClass([\n  property({ type: Number, reflect: true, attribute: \"splitter-pos\" })\n], SplitView.prototype, \"splitterPos\", 2);\n__decorateClass([\n  property({ type: String, attribute: false })\n], SplitView.prototype, \"firstPaneSize\", 2);\n__decorateClass([\n  property()\n], SplitView.prototype, \"label\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: false })\n], SplitView.prototype, \"enoughChildren\", 2);\n__decorateClass([\n  property({ type: Number })\n], SplitView.prototype, \"viewSize\", 2);\n__decorateClass([\n  query(\"slot\")\n], SplitView.prototype, \"paneSlot\", 2);\n__decorateClass([\n  query(\"#splitter\")\n], SplitView.prototype, \"splitter\", 2);\n//# sourceMappingURL=SplitView.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/split-view/sp-split-view.js\";\nexport default {\n  title: \"Split View\",\n  component: \"sp-split-view\",\n  args: {\n    primarySize: 100\n  },\n  argTypes: {\n    primarySize: {\n      name: \"primarySize\",\n      type: { name: \"number\", required: false },\n      description: \"Size of the primary panel.\",\n      table: {\n        type: { summary: \"number\" },\n        defaultValue: { summary: void 0 }\n      },\n      control: {\n        type: \"number\"\n      }\n    }\n  }\n};\nexport const Horizontal = (args) => {\n  return html`\n        <sp-split-view style=\"height: 200px\" .primarySize=\"${args.primarySize}\">\n            <div>First panel</div>\n            <div>Second panel</div>\n        </sp-split-view>\n    `;\n};\nexport const HorizontalResizable = (args) => {\n  return html`\n        <sp-split-view\n            resizable\n            primary-min=\"50\"\n            .primarySize=\"${args.primarySize}\"\n            secondary-min=\"50\"\n        >\n            <div>\n                <h1>First panel</h1>\n                <p>\n                    Lorem Ipsum is simply dummy text of the printing and\n                    typesetting industry.\n                </p>\n            </div>\n            <div>\n                <h2>Second panel</h2>\n                <p>\n                    It is a long established fact that a reader will be\n                    distracted by the readable content of a page when looking at\n                    its layout.\n                </p>\n            </div>\n        </sp-split-view>\n    `;\n};\nexport const HorizontalResizableCollapsible = (args) => {\n  return html`\n        <sp-split-view\n            resizable\n            collapsible\n            primary-min=\"50\"\n            secondary-min=\"50\"\n            style=\"height: 500px;\"\n            .primarySize=\"${args.primarySize}\"\n        >\n            <div>\n                <h1>First panel</h1>\n                <p>\n                    Lorem Ipsum is simply dummy text of the printing and\n                    typesetting industry. Lorem Ipsum has been the industry's\n                    standard dummy text ever since the 1500s, when an unknown\n                    printer took a galley of type and scrambled it to make a\n                    type specimen book. It has survived not only five centuries,\n                    but also the leap into electronic typesetting, remaining\n                    essentially unchanged. It was popularised in the 1960s with\n                    the release of Letraset sheets containing Lorem Ipsum\n                    passages, and more recently with desktop publishing software\n                    like Aldus PageMaker including versions of Lorem Ipsum.\n                </p>\n            </div>\n            <div>\n                <h2>Second panel</h2>\n                <p>\n                    It is a long established fact that a reader will be\n                    distracted by the readable content of a page when looking at\n                    its layout. The point of using Lorem Ipsum is that it has a\n                    more-or-less normal distribution of letters, as opposed to\n                    using 'Content here, content here', making it look like\n                    readable English. Many desktop publishing packages and web\n                    page editors now use Lorem Ipsum as their default model\n                    text, and a search for 'lorem ipsum' will uncover many web\n                    sites still in their infancy. Various versions have evolved\n                    over the years, sometimes by accident, sometimes on purpose\n                    (injected humour and the like).\n                </p>\n            </div>\n        </sp-split-view>\n    `;\n};\nHorizontalResizableCollapsible.args = {\n  primarySize: void 0\n};\nexport const Vertical = (args) => {\n  return html`\n        <sp-split-view vertical .primarySize=\"${args.primarySize}\">\n            <div>First panel</div>\n            <div>Second panel</div>\n        </sp-split-view>\n    `;\n};\nVertical.args = {\n  primarySize: void 0\n};\nexport const VerticalResizable = (args) => {\n  return html`\n        <sp-split-view\n            vertical\n            resizable\n            primary-min=\"50\"\n            primary-max=\"100\"\n            secondary-min=\"50\"\n            style=\"height: 400px;\"\n            .primarySize=\"${args.primarySize}\"\n        >\n            <div>\n                <h1>First panel</h1>\n                <p>\n                    Lorem Ipsum is simply dummy text of the printing and\n                    typesetting industry. Lorem Ipsum has been the industry's\n                    standard dummy text ever since the 1500s, when an unknown\n                    printer took a galley of type and scrambled it to make a\n                    type specimen book. It has survived not only five centuries,\n                    but also the leap into electronic typesetting, remaining\n                    essentially unchanged. It was popularised in the 1960s with\n                    the release of Letraset sheets containing Lorem Ipsum\n                    passages, and more recently with desktop publishing software\n                    like Aldus PageMaker including versions of Lorem Ipsum.\n                </p>\n            </div>\n            <div>\n                <h2>Second panel</h2>\n                <p>\n                    It is a long established fact that a reader will be\n                    distracted by the readable content of a page when looking at\n                    its layout. The point of using Lorem Ipsum is that it has a\n                    more-or-less normal distribution of letters, as opposed to\n                    using 'Content here, content here', making it look like\n                    readable English. Many desktop publishing packages and web\n                    page editors now use Lorem Ipsum as their default model\n                    text, and a search for 'lorem ipsum' will uncover many web\n                    sites still in their infancy. Various versions have evolved\n                    over the years, sometimes by accident, sometimes on purpose\n                    (injected humour and the like).\n                </p>\n            </div>\n        </sp-split-view>\n    `;\n};\nVerticalResizable.args = {\n  primarySize: void 0\n};\nexport const VerticalResizableCollapsible = (args) => {\n  return html`\n        <sp-split-view\n            vertical\n            resizable\n            collapsible\n            primary-min=\"50\"\n            secondary-min=\"40\"\n            style=\"height: 400px;\"\n            .primarySize=\"${args.primarySize}\"\n        >\n            <div>\n                <h1>First panel</h1>\n                <p>\n                    Lorem Ipsum is simply dummy text of the printing and\n                    typesetting industry. Lorem Ipsum has been the industry's\n                    standard dummy text ever since the 1500s, when an unknown\n                    printer took a galley of type and scrambled it to make a\n                    type specimen book. It has survived not only five centuries,\n                    but also the leap into electronic typesetting, remaining\n                    essentially unchanged. It was popularised in the 1960s with\n                    the release of Letraset sheets containing Lorem Ipsum\n                    passages, and more recently with desktop publishing software\n                    like Aldus PageMaker including versions of Lorem Ipsum.\n                </p>\n            </div>\n            <div>\n                <h2>Second panel</h2>\n                <p>\n                    It is a long established fact that a reader will be\n                    distracted by the readable content of a page when looking at\n                    its layout. The point of using Lorem Ipsum is that it has a\n                    more-or-less normal distribution of letters, as opposed to\n                    using 'Content here, content here', making it look like\n                    readable English. Many desktop publishing packages and web\n                    page editors now use Lorem Ipsum as their default model\n                    text, and a search for 'lorem ipsum' will uncover many web\n                    sites still in their infancy. Various versions have evolved\n                    over the years, sometimes by accident, sometimes on purpose\n                    (injected humour and the like).\n                </p>\n            </div>\n        </sp-split-view>\n    `;\n};\nVerticalResizableCollapsible.args = {\n  primarySize: 250\n};\nexport const MultipleLevels = (args) => {\n  return html`\n        <sp-split-view\n            resizable\n            primary-min=\"50\"\n            primary-max=\"200\"\n            secondary-min=\"50\"\n            style=\"height: 400px; width: 600px;\"\n        >\n            <div>\n                <h1>First panel - Level 1</h1>\n                <p>\n                    Lorem Ipsum is simply dummy text of the printing and\n                    typesetting industry. Lorem Ipsum has been the industry's\n                    standard dummy text ever since the 1500s, when an unknown\n                    printer took a galley of type and scrambled it to make a\n                    type specimen book. It has survived not only five centuries,\n                    but also the leap into electronic typesetting, remaining\n                    essentially unchanged. It was popularised in the 1960s with\n                    the release of Letraset sheets containing Lorem Ipsum\n                    passages, and more recently with desktop publishing software\n                    like Aldus PageMaker including versions of Lorem Ipsum.\n                </p>\n            </div>\n            <div>\n                <h2>Second panel - Level 1</h2>\n                <sp-split-view\n                    vertical\n                    resizable\n                    primary-min=\"50\"\n                    .primarySize=\"${args.primarySize}\"\n                    secondary-min=\"50\"\n                    style=\"height: 300px;\"\n                >\n                    <div>\n                        <h3>First panel - Level 2</h3>\n                        <p>\n                            Lorem Ipsum is simply dummy text of the printing and\n                            typesetting industry.\n                        </p>\n                    </div>\n                    <div>\n                        <h4>Second panel - Level 2</h4>\n                        <p>\n                            It is a long established fact that a reader will be\n                            distracted by the readable content of a page when\n                            looking at its layout.\n                        </p>\n                    </div>\n                </sp-split-view>\n            </div>\n        </sp-split-view>\n    `;\n};\nexport const OnePaneNoSplitter = (args) => {\n  return html`\n        <sp-split-view style=\"height: 200px\" .primarySize=\"${args.primarySize}\">\n            <div>First panel</div>\n        </sp-split-view>\n    `;\n};\nexport const ShowFirstTwoPanes = (args) => {\n  return html`\n        <sp-split-view style=\"height: 200px\" .primarySize=\"${args.primarySize}\">\n            <div>First panel</div>\n            <div>Second panel</div>\n            <div>Third (invisible) panel</div>\n        </sp-split-view>\n    `;\n};\nShowFirstTwoPanes.args = {\n  primarySize: void 0\n};\n//# sourceMappingURL=split-view.stories.js.map\n;export const __namedExportsOrder = [\"Horizontal\",\"HorizontalResizable\",\"HorizontalResizableCollapsible\",\"Vertical\",\"VerticalResizable\",\"VerticalResizableCollapsible\",\"MultipleLevels\",\"OnePaneNoSplitter\",\"ShowFirstTwoPanes\"];"],"names":[],"sourceRoot":""}