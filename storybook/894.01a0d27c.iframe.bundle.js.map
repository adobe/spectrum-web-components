{"version":3,"file":"894.01a0d27c.iframe.bundle.js","mappings":";;;;;;;;;;;;AA0CA;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;AAwBA;AAwEA;AAEA;;;;;;;;;;AAsCA;;;AAqCA;AACA;;;;;;;;AAQA;;;;AAIA;;;;;;AAMA;;;;AAIA;;AAEA;AACA;;;AAGA;;;;;;AAOA;;;;;;;;;;;;AA2BA;;;;;;;AAsBA;;;;;AAOA;;;;;AAMA;;AC1UA;;;;;;;;;AAwCA;;AAIA;AAEA","sources":["webpack://@adobe/spectrum-web-components/./packages/overlay/stories/overlay-story-components.js","webpack://@adobe/spectrum-web-components/./packages/popover/src/Popover.dev.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  css,\n  html,\n  LitElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport {\n  Overlay\n} from \"@spectrum-web-components/overlay\";\nimport \"@spectrum-web-components/button/sp-button.js\";\nimport \"@spectrum-web-components/popover/sp-popover.js\";\nimport \"@spectrum-web-components/radio/sp-radio.js\";\nimport \"@spectrum-web-components/radio/sp-radio-group.js\";\nimport \"@spectrum-web-components/overlay/overlay-trigger.js\";\nconst MAX_DEPTH = 7;\nclass OverlayTargetIcon extends LitElement {\n  static get styles() {\n    return css`\n            :host {\n                position: absolute;\n                display: block;\n                color: var(--spectrum-magenta-900);\n                width: 64px;\n                height: 64px;\n                top: 0;\n                left: 0;\n            }\n        `;\n  }\n  render() {\n    return html`\n            <svg\n                aria-hidden=\"true\"\n                focusable=\"false\"\n                data-prefix=\"fas\"\n                data-icon=\"bullseye\"\n                class=\"svg-inline--fa fa-bullseye fa-w-16\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 496 512\"\n            >\n                <path\n                    fill=\"currentColor\"\n                    d=\"M248 8C111.03 8 0 119.03 0 256s111.03 248 248 248 248-111.03 248-248S384.97 8 248 8zm0 432c-101.69 0-184-82.29-184-184 0-101.69 82.29-184 184-184 101.69 0 184 82.29 184 184 0 101.69-82.29 184-184 184zm0-312c-70.69 0-128 57.31-128 128s57.31 128 128 128 128-57.31 128-128-57.31-128-128-128zm0 192c-35.29 0-64-28.71-64-64s28.71-64 64-64 64 28.71 64 64-28.71 64-64 64z\"\n                ></path>\n            </svg>\n        `;\n  }\n}\ncustomElements.define(\"overlay-target-icon\", OverlayTargetIcon);\nclass OverlayDrag extends LitElement {\n  constructor() {\n    super(...arguments);\n    this.top = 100;\n    this.left = 100;\n  }\n  static get styles() {\n    return css`\n            :host {\n                display: block;\n                width: 100%;\n                height: 100%;\n                position: relative;\n            }\n\n            ::slotted(*) {\n                display: block;\n                width: 100%;\n                height: 100%;\n            }\n        `;\n  }\n  onSlotChange(event) {\n    const slot = event.target;\n    this.targetElement = void 0;\n    const nodes = slot.assignedNodes();\n    const slotElement = nodes.find(\n      (node) => node instanceof HTMLElement\n    );\n    if (!slotElement) return;\n    this.targetElement = slotElement.querySelector(\n      '[slot=\"trigger\"]'\n    );\n    if (!this.targetElement) return;\n    this.targetElement.addEventListener(\n      \"pointerdown\",\n      (event2) => this.onMouseDown(event2)\n    );\n    this.resetTargetPosition();\n  }\n  onMouseDown(event) {\n    const target = event.target;\n    const parent = target.parentElement;\n    if (!parent) return;\n    target.setPointerCapture(event.pointerId);\n    const max = {\n      x: parent.offsetWidth - target.offsetWidth,\n      y: parent.offsetHeight - target.offsetHeight\n    };\n    const dragStart = {\n      x: event.clientX,\n      y: event.clientY\n    };\n    const originalPos = {\n      x: this.left,\n      y: this.top\n    };\n    const onMouseMove = (event2) => {\n      const dragDelta = {\n        x: event2.clientX - dragStart.x,\n        y: event2.clientY - dragStart.y\n      };\n      const newPosition = {\n        x: dragDelta.x + originalPos.x,\n        y: dragDelta.y + originalPos.y\n      };\n      this.left = Math.min(Math.max(newPosition.x, 0), max.x);\n      this.top = Math.min(Math.max(newPosition.y, 0), max.y);\n      Overlay.update();\n    };\n    const onMouseUp = (event2) => {\n      target.setPointerCapture(event2.pointerId);\n      document.removeEventListener(\"pointermove\", onMouseMove);\n      document.removeEventListener(\"pointerup\", onMouseUp);\n    };\n    document.addEventListener(\"pointermove\", onMouseMove);\n    document.addEventListener(\"pointerup\", onMouseUp);\n  }\n  resetTargetPosition() {\n    if (!this.targetElement) return;\n    const target = this.targetElement;\n    const parent = target.parentElement;\n    if (!parent) return;\n    this.left = (parent.offsetWidth - target.offsetWidth) / 2;\n    this.top = (parent.offsetHeight - target.offsetHeight) / 2;\n  }\n  updated() {\n    if (this.targetElement) {\n      this.targetElement.style.transform = `translate(${this.left}px, ${this.top}px)`;\n    }\n  }\n  render() {\n    return html`\n            <slot @slotchange=${this.onSlotChange}></slot>\n        `;\n  }\n}\n__decorateClass([\n  property({ type: Number })\n], OverlayDrag.prototype, \"top\", 2);\n__decorateClass([\n  property({ type: Number })\n], OverlayDrag.prototype, \"left\", 2);\ncustomElements.define(\"overlay-drag\", OverlayDrag);\nclass RecursivePopover extends LitElement {\n  constructor() {\n    super();\n    this.depth = 0;\n    this.isShiftTabbing = false;\n    this.placement = \"right\";\n    this.depth = 0;\n    this.addEventListener(\"keydown\", (event) => {\n      const { code } = event;\n      if (code === \"Enter\") {\n        this.trigger.click();\n      }\n    });\n    this.addEventListener(\"focusin\", this.handleFocusin);\n  }\n  static get styles() {\n    return [\n      css`\n                :host {\n                    display: block;\n                    text-align: center;\n                }\n\n                overlay-trigger {\n                    display: inline-flex;\n                    margin-top: 11px;\n                }\n            `\n    ];\n  }\n  handleFocusin() {\n    this.focus();\n  }\n  focus() {\n    if (this.shadowRoot.activeElement !== null) {\n      return;\n    }\n    const firstFocusable = this.shadowRoot.querySelector(\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    );\n    if (firstFocusable) {\n      if (firstFocusable.updateComplete) {\n        firstFocusable.updateComplete.then(\n          () => firstFocusable.focus()\n        );\n      } else {\n        firstFocusable.focus();\n      }\n      return;\n    }\n    super.focus();\n  }\n  onRadioChange(event) {\n    const target = event.target;\n    this.placement = target.selected;\n  }\n  captureEnter(event) {\n    const { code } = event;\n    if (code === \"Enter\") {\n      event.stopPropagation();\n    }\n  }\n  render() {\n    return html`\n            <sp-radio-group\n                horizontal\n                @change=${this.onRadioChange}\n                selected=\"${this.placement}\"\n                name=\"group-example\"\n            >\n                <sp-radio value=\"top\">Top</sp-radio>\n                <sp-radio value=\"right\">Right</sp-radio>\n                <sp-radio value=\"bottom\">Bottom</sp-radio>\n                <sp-radio value=\"left\">Left</sp-radio>\n            </sp-radio-group>\n            <overlay-trigger placement=\"${this.placement}\" type=\"modal\">\n                <sp-button\n                    slot=\"trigger\"\n                    variant=\"accent\"\n                    @keydown=${this.captureEnter}\n                >\n                    Open Popover\n                </sp-button>\n                <sp-popover\n                    slot=\"click-content\"\n                    direction=\"${this.placement}\"\n                    tip\n                >\n                    <sp-dialog size=\"s\" no-divider>\n                        ${this.depth < MAX_DEPTH ? html`\n                                  <recursive-popover\n                                      position=\"${this.placement}\"\n                                      depth=\"${this.depth + 1}\"\n                                      tabindex=\"0\"\n                                  ></recursive-popover>\n                              ` : html`\n                                  <div>Maximum Depth</div>\n                              `}\n                    </sp-dialog>\n                </sp-popover>\n            </overlay-trigger>\n        `;\n  }\n}\n__decorateClass([\n  property({ type: String })\n], RecursivePopover.prototype, \"placement\", 2);\n__decorateClass([\n  property({ type: Number })\n], RecursivePopover.prototype, \"depth\", 2);\n__decorateClass([\n  query('[slot=\"trigger\"]')\n], RecursivePopover.prototype, \"trigger\", 2);\ncustomElements.define(\"recursive-popover\", RecursivePopover);\nexport class PopoverContent extends LitElement {\n  render() {\n    return html`\n            <overlay-trigger type=\"modal\" placement=\"bottom\">\n                <sp-button slot=\"trigger\">Open me</sp-button>\n                <sp-popover slot=\"click-content\" direction=\"bottom\">\n                    <sp-dialog no-divider>\n                        <p>This is all the content.</p>\n                        <p>This is all the content.</p>\n                        <p>This is all the content.</p>\n                        <p>This is all the content.</p>\n                    </sp-dialog>\n                </sp-popover>\n            </overlay-trigger>\n        `;\n  }\n}\n__decorateClass([\n  query('[slot=\"trigger\"]')\n], PopoverContent.prototype, \"button\", 2);\n__decorateClass([\n  query(\"overlay-trigger\")\n], PopoverContent.prototype, \"trigger\", 2);\ncustomElements.define(\"popover-content\", PopoverContent);\nexport default class TransientHover extends LitElement {\n  constructor() {\n    super(...arguments);\n    this.open = false;\n  }\n  render() {\n    return html`\n            <sp-button variant=\"primary\" id=\"triggerButton\">\n                Button popover\n            </sp-button>\n            <sp-overlay\n                type=\"auto\"\n                trigger=\"triggerButton@click\"\n                @sp-opened=${() => {\n      this.open = true;\n    }}\n            >\n                <sp-popover>My Popover</sp-popover>\n            </sp-overlay>\n\n            ${!this.open ? html`\n                      <sp-overlay trigger=\"triggerButton@hover\" type=\"hint\">\n                          <sp-tooltip placement=\"right\">My tooltip</sp-tooltip>\n                      </sp-overlay>\n                  ` : html``}\n        `;\n  }\n}\n__decorateClass([\n  property()\n], TransientHover.prototype, \"open\", 2);\ncustomElements.define(\"transient-hover\", TransientHover);\n//# sourceMappingURL=overlay-story-components.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport popoverStyles from \"./popover.css.js\";\nexport class Popover extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.open = false;\n    this.tip = false;\n  }\n  static get styles() {\n    return [popoverStyles];\n  }\n  renderTip() {\n    return html`\n            <div id=\"tip\" aria-hidden=\"true\">\n                <svg class=\"tip block\" viewBox=\"0 -0.5 16 9\">\n                    <path class=\"triangle\" d=\"M-1,-1 8,8 17,-1\"></path>\n                </svg>\n                <svg class=\"tip inline\" viewBox=\"0 -0.5 9 16\">\n                    <path class=\"triangle\" d=\"M-1,-1 8,8 -1,17\"></path>\n                </svg>\n            </div>\n        `;\n  }\n  render() {\n    return html`\n            <slot></slot>\n            ${this.tip ? this.renderTip() : nothing}\n        `;\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Popover.prototype, \"open\", 2);\n__decorateClass([\n  property({ reflect: true })\n], Popover.prototype, \"placement\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Popover.prototype, \"tip\", 2);\n__decorateClass([\n  query(\"#tip\")\n], Popover.prototype, \"tipElement\", 2);\n//# sourceMappingURL=Popover.dev.js.map\n"],"names":[],"sourceRoot":""}