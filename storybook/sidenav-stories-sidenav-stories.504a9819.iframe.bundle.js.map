{"version":3,"file":"sidenav-stories-sidenav-stories.504a9819.iframe.bundle.js","mappings":";;;;AACA;;AAwFA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAGA;AAGA;;;;AAMA;;;;AAIA;;;;AAIA;AAEA;;ACrHA;AAiCA;;;;AAKA;;ACkFA;AACA;;;;;AAKA;;;;AAKA;ACpHA;;;;;;;;;;;;;;;;;;;;;AAuBA;AAIA;;;;;;;;;;;;;;;;;;;;AAsBA;AAKA;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AAIA;;;AAGA;;;;;;;;;;;;;;;;;;;AAsBA","sources":["webpack://@adobe/spectrum-web-components/./packages/sidenav/src/SidenavItem.dev.js","webpack://@adobe/spectrum-web-components/./packages/sidenav/src/SidenavHeading.dev.js","webpack://@adobe/spectrum-web-components/./packages/sidenav/src/Sidenav.dev.js","webpack://@adobe/spectrum-web-components/./packages/sidenav/stories/sidenav.stories.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport { LikeAnchor } from \"@spectrum-web-components/shared/src/like-anchor.js\";\nimport { Focusable } from \"@spectrum-web-components/shared/src/focusable.js\";\nimport sidenavItemStyles from \"./sidenav-item.css.js\";\nconst _SideNavItem = class _SideNavItem extends LikeAnchor(Focusable) {\n  constructor() {\n    super(...arguments);\n    this.value = void 0;\n    this.selected = false;\n    this.expanded = false;\n  }\n  static get styles() {\n    return [sidenavItemStyles];\n  }\n  get parentSideNav() {\n    if (!this._parentSidenav) {\n      this._parentSidenav = this.closest(\"sp-sidenav\");\n    }\n    return this._parentSidenav;\n  }\n  get hasChildren() {\n    return !!this.querySelector(\"sp-sidenav-item\");\n  }\n  get depth() {\n    let depth = 0;\n    let element = this.parentElement;\n    while (element instanceof _SideNavItem) {\n      depth++;\n      element = element.parentElement;\n    }\n    return depth;\n  }\n  handleSideNavSelect(event) {\n    this.selected = event.target === this;\n  }\n  handleClick(event) {\n    if (!this.href && event) {\n      event.preventDefault();\n    }\n    if (!this.disabled && (!this.href || (event == null ? void 0 : event.defaultPrevented))) {\n      if (this.hasChildren) {\n        this.expanded = !this.expanded;\n      } else if (this.value) {\n        this.announceSelected(this.value);\n      }\n    }\n  }\n  announceSelected(value) {\n    const selectDetail = {\n      value\n    };\n    const selectionEvent = new CustomEvent(\"sidenav-select\", {\n      bubbles: true,\n      composed: true,\n      detail: selectDetail\n    });\n    this.dispatchEvent(selectionEvent);\n  }\n  click() {\n    this.handleClick();\n  }\n  get focusElement() {\n    return this.shadowRoot.querySelector(\"#item-link\");\n  }\n  update(changes) {\n    if (!this.hasAttribute(\"slot\")) {\n      this.slot = \"descendant\";\n    }\n    super.update(changes);\n  }\n  render() {\n    return html`\n            <a\n                href=${this.href || \"#\"}\n                target=${ifDefined(this.target)}\n                download=${ifDefined(this.download)}\n                rel=${ifDefined(this.rel)}\n                data-level=\"${this.depth}\"\n                @click=\"${this.handleClick}\"\n                id=\"item-link\"\n                aria-current=${ifDefined(\n      this.selected && this.href ? \"page\" : void 0\n    )}\n                aria-expanded=${ifDefined(\n      this.hasChildren ? this.expanded : void 0\n    )}\n                aria-controls=${ifDefined(\n      this.hasChildren && this.expanded ? \"list\" : void 0\n    )}\n            >\n                <slot name=\"icon\"></slot>\n                <span id=\"link-text\">\n                    ${this.label}\n                    <slot></slot>\n                </span>\n            </a>\n            ${this.expanded ? html`\n                      <div id=\"list\" aria-labelledby=\"item-link\" role=\"list\">\n                          <slot name=\"descendant\"></slot>\n                      </div>\n                  ` : nothing}\n        `;\n  }\n  updated(changes) {\n    var _a;\n    if (this.hasChildren && this.expanded && !this.selected && ((_a = this.parentSideNav) == null ? void 0 : _a.manageTabIndex)) {\n      this.focusElement.tabIndex = -1;\n    } else {\n      this.focusElement.removeAttribute(\"tabindex\");\n    }\n    super.updated(changes);\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.startTrackingSelection();\n  }\n  disconnectedCallback() {\n    this.stopTrackingSelection();\n    super.disconnectedCallback();\n  }\n  async startTrackingSelection() {\n    const parentSideNav = this.parentSideNav;\n    if (parentSideNav) {\n      await parentSideNav.updateComplete;\n      parentSideNav.startTrackingSelectionForItem(this);\n      this.selected = this.value != null && this.value === parentSideNav.value;\n      if (this.selected === true && parentSideNav.variant === \"multilevel\") {\n        let element = this.parentElement;\n        while (element instanceof _SideNavItem) {\n          element.expanded = true;\n          element = element.parentElement;\n        }\n      }\n    }\n  }\n  stopTrackingSelection() {\n    const parentSideNav = this.parentSideNav;\n    if (parentSideNav) {\n      parentSideNav.stopTrackingSelectionForItem(this);\n    }\n    this._parentSidenav = void 0;\n  }\n  firstUpdated(changed) {\n    super.firstUpdated(changed);\n    this.setAttribute(\"role\", \"listitem\");\n  }\n};\n__decorateClass([\n  property()\n], _SideNavItem.prototype, \"value\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], _SideNavItem.prototype, \"selected\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], _SideNavItem.prototype, \"expanded\", 2);\nexport let SideNavItem = _SideNavItem;\n//# sourceMappingURL=SidenavItem.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport sidenavItemStyles from \"./sidenav-item.css.js\";\nimport sidenavHeadingStyles from \"./sidenav-heading.css.js\";\nexport class SideNavHeading extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.label = \"\";\n  }\n  static get styles() {\n    return [sidenavItemStyles, sidenavHeadingStyles];\n  }\n  update(changes) {\n    if (!this.hasAttribute(\"slot\")) {\n      this.slot = \"descendant\";\n    }\n    super.update(changes);\n  }\n  render() {\n    return html`\n            <h2 id=\"heading\">${this.label}</h2>\n            <div id=\"list\" aria-labelledby=\"heading\" role=\"list\">\n                <slot name=\"descendant\"></slot>\n            </div>\n        `;\n  }\n  firstUpdated(changed) {\n    super.firstUpdated(changed);\n    this.setAttribute(\"role\", \"listitem\");\n  }\n}\n__decorateClass([\n  property({ reflect: true })\n], SideNavHeading.prototype, \"label\", 2);\n//# sourceMappingURL=SidenavHeading.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport { RovingTabindexController } from \"@spectrum-web-components/reactive-controllers/src/RovingTabindex.js\";\nimport sidenavStyles from \"./sidenav.css.js\";\nimport { Focusable } from \"@spectrum-web-components/shared\";\nimport { SideNavItem } from \"./SidenavItem.dev.js\";\nimport { SideNavHeading } from \"./SidenavHeading.dev.js\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nexport class SideNav extends Focusable {\n  constructor() {\n    super(...arguments);\n    this.items = /* @__PURE__ */ new Set();\n    this.rovingTabindexController = new RovingTabindexController(this, {\n      focusInIndex: (elements) => {\n        let parentSideNavItem;\n        let index = elements.findIndex((el) => {\n          if (el.value === this.value && this.isDisabledChild(el)) {\n            parentSideNavItem = el.closest(\n              \"sp-sidenav-item:not([expanded])\"\n            );\n          }\n          return this.value ? !el.disabled && !this.isDisabledChild(el) && el.value === this.value : !el.disabled && !this.isDisabledChild(el);\n        });\n        if (index === -1 && parentSideNavItem) {\n          index = elements.findIndex((el) => el === parentSideNavItem);\n        }\n        return index;\n      },\n      direction: \"vertical\",\n      elements: () => [...this.querySelectorAll(\"sp-sidenav-item\")],\n      isFocusableElement: (el) => !el.disabled && !this.isDisabledChild(el)\n    });\n    this.manageTabIndex = false;\n    this.value = void 0;\n    this.variant = void 0;\n    this.label = void 0;\n  }\n  static get styles() {\n    return [sidenavStyles];\n  }\n  startTrackingSelectionForItem(item) {\n    this.items.add(item);\n    this.rovingTabindexController.clearElementCache();\n  }\n  stopTrackingSelectionForItem(item) {\n    this.items.delete(item);\n    this.rovingTabindexController.clearElementCache();\n  }\n  handleSelect(event) {\n    event.stopPropagation();\n    if (this.value === event.detail.value) {\n      return;\n    }\n    const oldValue = this.value;\n    this.value = event.detail.value;\n    const applyDefault = this.dispatchEvent(\n      new Event(\"change\", {\n        bubbles: true,\n        composed: true,\n        cancelable: true\n      })\n    );\n    if (!applyDefault) {\n      this.value = oldValue;\n      event.target.selected = false;\n      event.preventDefault();\n    } else {\n      this.items.forEach((item) => item.handleSideNavSelect(event));\n    }\n  }\n  focus() {\n    this.rovingTabindexController.focus();\n  }\n  blur() {\n    if (this.focusElement === this) {\n      return;\n    }\n    super.blur();\n  }\n  click() {\n    if (this.focusElement === this) {\n      return;\n    }\n    super.click();\n  }\n  get focusElement() {\n    return this.rovingTabindexController.focusInElement || this;\n  }\n  isDisabledChild(child) {\n    if (child.disabled) {\n      return true;\n    }\n    let parent = child.parentElement;\n    while (parent instanceof SideNavHeading || !parent.disabled && parent instanceof SideNavItem && parent.expanded) {\n      parent = parent.parentElement;\n    }\n    return parent !== this;\n  }\n  handleSlotchange() {\n    if (this.manageTabIndex) {\n      this.rovingTabindexController.manage();\n    } else {\n      this.rovingTabindexController.unmanage();\n    }\n  }\n  render() {\n    return html`\n            <nav\n                @sidenav-select=${this.handleSelect}\n                aria-label=${ifDefined(this.label)}\n            >\n                <div role=\"list\">\n                    <slot\n                        name=\"descendant\"\n                        @slotchange=${this.handleSlotchange}\n                    ></slot>\n                </div>\n            </nav>\n        `;\n  }\n  willUpdate() {\n    if (!this.hasUpdated) {\n      const selectedChild = this.querySelector(\n        \"[selected]\"\n      );\n      if (selectedChild) {\n        this.value = selectedChild.value;\n      }\n    }\n  }\n  updated(changes) {\n    super.updated(changes);\n    if (changes.has(\"manageTabIndex\")) {\n      if (this.manageTabIndex) {\n        this.rovingTabindexController.manage();\n      } else {\n        this.rovingTabindexController.unmanage();\n      }\n    }\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true, attribute: \"manage-tab-index\" })\n], SideNav.prototype, \"manageTabIndex\", 2);\n__decorateClass([\n  property({ reflect: true })\n], SideNav.prototype, \"value\", 2);\n__decorateClass([\n  property({ reflect: true })\n], SideNav.prototype, \"variant\", 2);\n__decorateClass([\n  property({ reflect: true })\n], SideNav.prototype, \"label\", 2);\n//# sourceMappingURL=Sidenav.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/sidenav/sp-sidenav.js\";\nimport \"@spectrum-web-components/sidenav/sp-sidenav-item.js\";\nimport \"@spectrum-web-components/sidenav/sp-sidenav-heading.js\";\nexport default {\n  component: \"sp-sidenav\",\n  title: \"Sidenav\",\n  argTypes: {\n    onChange: { action: \"change\" }\n  }\n};\nexport const Default = ({\n  onChange\n}) => {\n  return html`\n        <sp-sidenav @change=${onChange} value=\"Section 1\">\n            <sp-sidenav-item\n                value=\"Section 1\"\n                label=\"Section 1\"\n            ></sp-sidenav-item>\n            <sp-sidenav-item\n                selected\n                value=\"Section 2\"\n                label=\"Section 2\"\n            ></sp-sidenav-item>\n            <sp-sidenav-heading label=\"Category 1\">\n                <sp-sidenav-item\n                    value=\"Section 3\"\n                    label=\"Section 3\"\n                ></sp-sidenav-item>\n                <sp-sidenav-item\n                    value=\"Section 4\"\n                    label=\"Section 4\"\n                ></sp-sidenav-item>\n            </sp-sidenav-heading>\n        </sp-sidenav>\n    `;\n};\nexport const Multilevel = ({\n  onChange\n}) => {\n  return html`\n        <sp-sidenav variant=\"multilevel\" value=\"2.3.1\" @change=${onChange}>\n            <sp-sidenav-item value=\"foo\" label=\"foo\"></sp-sidenav-item>\n            <sp-sidenav-item value=\"baz\" label=\"baz\">\n                <sp-sidenav-item value=\"2.1\" label=\"2.1\"></sp-sidenav-item>\n                <sp-sidenav-item value=\"2.2\" label=\"2.2\"></sp-sidenav-item>\n                <sp-sidenav-item value=\"2.3\" label=\"2.3\">\n                    <sp-sidenav-item\n                        value=\"2.3.1\"\n                        label=\"2.3.1\"\n                    ></sp-sidenav-item>\n                    <sp-sidenav-item\n                        disabled\n                        value=\"2.3.2\"\n                        label=\"2.3.2\"\n                    ></sp-sidenav-item>\n                </sp-sidenav-item>\n            </sp-sidenav-item>\n            <sp-sidenav-item value=\"test\" label=\"test\"></sp-sidenav-item>\n            <sp-sidenav-item value=\"hi\" label=\"hi\"></sp-sidenav-item>\n        </sp-sidenav>\n    `;\n};\nMultilevel.storyName = \"Multi-level\";\nexport const MultilevelSlotted = ({\n  onChange\n}) => {\n  return html`\n        <sp-sidenav variant=\"multilevel\" value=\"2.3.1\" @change=${onChange}>\n            <sp-sidenav-item value=\"foo\">foo</sp-sidenav-item>\n            <sp-sidenav-item value=\"baz\">\n                baz\n                <sp-sidenav-item value=\"2.1\">2.1</sp-sidenav-item>\n                <sp-sidenav-item value=\"2.2\">2.2</sp-sidenav-item>\n                <sp-sidenav-item value=\"2.3\">\n                    2.3\n                    <sp-sidenav-item value=\"2.3.1\">2.3.1</sp-sidenav-item>\n                    <sp-sidenav-item disabled value=\"2.3.2\">\n                        2.3.2\n                    </sp-sidenav-item>\n                </sp-sidenav-item>\n            </sp-sidenav-item>\n            <sp-sidenav-item value=\"test\">test</sp-sidenav-item>\n            <sp-sidenav-item value=\"hi\">hi</sp-sidenav-item>\n        </sp-sidenav>\n    `;\n};\nMultilevelSlotted.storyName = \"Multi-level Slotted\";\nexport const levelsAndDisabled = () => {\n  return html`\n        <sp-sidenav>\n            <sp-sidenav-heading label=\"Category 1\">\n                <sp-sidenav-item\n                    value=\"Section 1\"\n                    label=\"Section 1\"\n                ></sp-sidenav-item>\n                <sp-sidenav-item\n                    value=\"Section 2\"\n                    label=\"Section 2\"\n                    disabled\n                ></sp-sidenav-item>\n                <sp-sidenav-item value=\"Section 3\" label=\"Section 3\" expanded>\n                    <sp-sidenav-item\n                        value=\"Section 3a\"\n                        label=\"Section 3a\"\n                    ></sp-sidenav-item>\n                </sp-sidenav-item>\n            </sp-sidenav-heading>\n        </sp-sidenav>\n    `;\n};\nexport const manageTabIndex = () => {\n  return html`\n        <sp-sidenav manage-tab-index>\n            <sp-sidenav-heading label=\"Category 1\">\n                <sp-sidenav-item\n                    value=\"Section 0\"\n                    label=\"Section 0\"\n                ></sp-sidenav-item>\n                <sp-sidenav-item\n                    value=\"Section 1\"\n                    label=\"Section 1\"\n                    selected\n                ></sp-sidenav-item>\n                <sp-sidenav-item\n                    value=\"Section 2\"\n                    label=\"Section 2\"\n                    disabled\n                ></sp-sidenav-item>\n                <sp-sidenav-item value=\"Section 3\" label=\"Section 3\">\n                    <sp-sidenav-item\n                        value=\"Section 3a\"\n                        label=\"Section 3a\"\n                    ></sp-sidenav-item>\n                </sp-sidenav-item>\n            </sp-sidenav-heading>\n        </sp-sidenav>\n    `;\n};\nexport const Hrefs = ({\n  onChange\n}) => {\n  return html`\n        <sp-sidenav @change=${onChange} value=\"current\">\n            <sp-sidenav-heading label=\"Github\">\n                <sp-sidenav-item\n                    href=${window.location.href}\n                    label=\"Current\"\n                    value=\"current\"\n                    selected\n                ></sp-sidenav-item>\n                <sp-sidenav-item\n                    href=\"https://github.com/adobe/spectrum-web-components\"\n                    label=\"Code\"\n                ></sp-sidenav-item>\n                <sp-sidenav-item\n                    href=\"https://github.com/adobe/spectrum-web-components/issues\"\n                    label=\"Issues\"\n                ></sp-sidenav-item>\n                <sp-sidenav-item\n                    href=\"https://github.com/adobe/spectrum-web-components/pulls\"\n                    label=\"Pull Requests\"\n                ></sp-sidenav-item>\n            </sp-sidenav-heading>\n        </sp-sidenav>\n    `;\n};\n//# sourceMappingURL=sidenav.stories.js.map\n;export const __namedExportsOrder = [\"Default\",\"Multilevel\",\"MultilevelSlotted\",\"levelsAndDisabled\",\"manageTabIndex\",\"Hrefs\"];"],"names":[],"sourceRoot":""}