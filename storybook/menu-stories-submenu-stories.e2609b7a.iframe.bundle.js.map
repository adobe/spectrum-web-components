{"version":3,"file":"menu-stories-submenu-stories.e2609b7a.iframe.bundle.js","mappings":";;;AAiDA;;;;AAIA;AACA;;;;AAIA;;;;AAIA;;AAIA;;AAOA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AAIA;;AAEA;;;;AAIA;;AAEA;AAEA;;AClGA;;ACAA;AACA;;AAEA;;;AAGA;;;;;;;;;;;ACRA;;ACEA;AACA;;AAEA;;;AAGA;;;;;;;;;;;;;;;;ACNA;AACA;;AAEA;;;AAGA;;;;;;;ACNA;;AAEA;AACA;;;AAGA;;;;;;;;;ACPA;AAgEA;AACA;;AAEA;AAEA;;;ACiCA;AANA;;;;AA0BA;;;;;;;;;AASA;;;;;;AAMA;;;;;;;;;;;;;;;AAeA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;AA9GA;;AA+GA;;;;;;;;;;AACA;;;;;;;;;;;;;AAyDA;;AAnCA;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiGA;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;;AChbA;AAmGA;AAEA;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAIA;;;;AAcA;;AAEA;AAMA;;ACxMA;;;;;;;;;AAwCA;;AAIA;AAEA","sources":["webpack://@adobe/spectrum-web-components/./packages/action-menu/src/ActionMenu.dev.js","webpack://@adobe/spectrum-web-components/./packages/divider/src/divider.css.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons-s2/More.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/elements/IconMore.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons-s2/MenuHamburger.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons/More.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons/ShowMenu.js","webpack://@adobe/spectrum-web-components/./packages/menu/src/MenuGroup.dev.js","webpack://@adobe/spectrum-web-components/./packages/menu/stories/submenu.stories.js","webpack://@adobe/spectrum-web-components/./packages/overlay/src/OverlayTrigger.dev.js","webpack://@adobe/spectrum-web-components/./packages/popover/src/Popover.dev.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html\n} from \"@spectrum-web-components/base\";\nimport { state } from \"@spectrum-web-components/base/src/decorators.js\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport { DESCRIPTION_ID, PickerBase } from \"@spectrum-web-components/picker\";\nimport \"@spectrum-web-components/action-button/sp-action-button.js\";\nimport { ObserveSlotPresence } from \"@spectrum-web-components/shared/src/observe-slot-presence.js\";\nimport { ObserveSlotText } from \"@spectrum-web-components/shared/src/observe-slot-text.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-more.js\";\nimport actionMenuStyles from \"./action-menu.css.js\";\nimport { SlottableRequestEvent } from \"@spectrum-web-components/overlay/src/slottable-request-event.js\";\nexport class ActionMenu extends ObserveSlotPresence(\n  ObserveSlotText(PickerBase, \"label\"),\n  '[slot=\"label-only\"]'\n) {\n  constructor() {\n    super(...arguments);\n    this.selects = void 0;\n    this.listRole = \"menu\";\n    this.itemRole = \"menuitem\";\n    this.handleSlottableRequest = (event) => {\n      this.dispatchEvent(new SlottableRequestEvent(event.name, event.data));\n    };\n  }\n  static get styles() {\n    return [actionMenuStyles];\n  }\n  get hasLabel() {\n    return this.slotHasContent;\n  }\n  get labelOnly() {\n    return this.slotContentIsPresent;\n  }\n  get buttonContent() {\n    return [\n      html`\n                ${this.labelOnly ? html`` : html`\n                          <slot\n                              name=\"icon\"\n                              slot=\"icon\"\n                              ?icon-only=${!this.hasLabel}\n                              ?hidden=${this.labelOnly}\n                          >\n                              <sp-icon-more\n                                  class=\"icon\"\n                                  size=${this.size}\n                              ></sp-icon-more>\n                          </slot>\n                      `}\n                <slot name=\"label\" ?hidden=${!this.hasLabel}></slot>\n                <slot name=\"label-only\"></slot>\n            `\n    ];\n  }\n  render() {\n    if (this.tooltipEl) {\n      this.tooltipEl.disabled = this.open;\n    }\n    return html`\n            <sp-action-button\n                aria-describedby=${DESCRIPTION_ID}\n                ?quiet=${this.quiet}\n                ?selected=${this.open}\n                static-color=${ifDefined(this.staticColor)}\n                aria-haspopup=\"true\"\n                aria-controls=${ifDefined(this.open ? \"menu\" : void 0)}\n                aria-expanded=${this.open ? \"true\" : \"false\"}\n                aria-label=${ifDefined(this.label || void 0)}\n                id=\"button\"\n                class=\"button\"\n                size=${this.size}\n                @blur=${this.handleButtonBlur}\n                @focus=${this.handleButtonFocus}\n                @keydown=${{\n      handleEvent: this.handleEnterKeydown,\n      capture: true\n    }}\n                ?disabled=${this.disabled}\n            >\n                ${this.buttonContent}\n            </sp-action-button>\n            <slot\n                name=\"tooltip\"\n                @slotchange=${this.handleTooltipSlotchange}\n            ></slot>\n            ${this.renderMenu} ${this.renderDescriptionSlot}\n        `;\n  }\n  update(changedProperties) {\n    if (changedProperties.has(\"invalid\")) {\n      this.invalid = false;\n    }\n    super.update(changedProperties);\n  }\n  hasAccessibleLabel() {\n    return !!this.label || !!this.getAttribute(\"aria-label\") || !!this.getAttribute(\"aria-labelledby\") || !!this.appliedLabel || this.hasLabel || this.labelOnly;\n  }\n  warnNoLabel() {\n    window.__swc.warn(\n      this,\n      `<${this.localName}> needs one of the following to be accessible:`,\n      \"https://opensource.adobe.com/spectrum-web-components/components/action-menu/#accessibility\",\n      {\n        type: \"accessibility\",\n        issues: [\n          `an <sp-field-label> element with a \\`for\\` attribute referencing the \\`id\\` of the \\`<${this.localName}>\\`, or`,\n          'value supplied to the \"label\" attribute, which will be displayed visually as placeholder text',\n          'text content supplied in a <span> with slot=\"label\", or, text content supplied in a <span> with slot=\"label-only\"',\n          \"which will also be displayed visually as placeholder text.\"\n        ]\n      }\n    );\n  }\n}\n__decorateClass([\n  property({ type: String })\n], ActionMenu.prototype, \"selects\", 2);\n__decorateClass([\n  property({ reflect: true, attribute: \"static-color\" })\n], ActionMenu.prototype, \"staticColor\", 2);\n__decorateClass([\n  state()\n], ActionMenu.prototype, \"labelOnly\", 1);\n//# sourceMappingURL=ActionMenu.dev.js.map\n","\"use strict\";import{css as r}from\"@spectrum-web-components/base\";const i=r`\n    @media (forced-colors:active){:host{--highcontrast-divider-background-color:CanvasText}}:host{--spectrum-divider-thickness:var(--spectrum-divider-thickness-medium)}:host([size=s]){--spectrum-divider-thickness:var(--spectrum-divider-thickness-small)}:host([size=l]){--spectrum-divider-thickness:var(--spectrum-divider-thickness-large);--spectrum-divider-background-color:var(--spectrum-gray-800)}:host([static-color=white]){--mod-divider-background-color:var(--mod-divider-background-color-medium-static-white,var(--spectrum-divider-background-color-static-white))}:host([static-color=white][size=s]){--mod-divider-background-color:var(--mod-divider-background-color-small-static-white,var(--spectrum-divider-background-color-static-white))}:host([static-color=white][size=l]){--mod-divider-background-color:var(--mod-divider-background-color-large-static-white,var(--spectrum-transparent-white-800))}:host([static-color=black]){--mod-divider-background-color:var(--mod-divider-background-color-medium-static-black,var(--spectrum-divider-background-color-static-black))}:host([static-color=black][size=s]){--mod-divider-background-color:var(--mod-divider-background-color-small-static-black,var(--spectrum-divider-background-color-static-black))}:host([static-color=black][size=l]){--mod-divider-background-color:var(--mod-divider-background-color-large-static-black,var(--spectrum-transparent-black-800))}:host{block-size:var(--mod-divider-thickness,var(--spectrum-divider-thickness));border:none;border-width:var(--mod-divider-thickness,var(--spectrum-divider-thickness));border-radius:var(--mod-divider-thickness,var(--spectrum-divider-thickness));background-color:var(--highcontrast-divider-background-color,var(--mod-divider-background-color,var(--spectrum-divider-background-color)));inline-size:100%;overflow:visible}:host([vertical]){inline-size:var(--mod-divider-thickness,var(--spectrum-divider-thickness));block-size:100%;block-size:var(--mod-divider-vertical-height,100%);margin-block:var(--mod-divider-vertical-margin);align-self:var(--mod-divider-vertical-align)}:host{--spectrum-divider-background-color:var(--system-divider-background-color);--spectrum-divider-background-color-static-white:var(--system-divider-background-color-static-white);--spectrum-divider-background-color-static-black:var(--system-divider-background-color-static-black)}:host{display:block}hr{border:none;margin:0}\n`;export default i;\n//# sourceMappingURL=divider.css.js.map\n","\"use strict\";import{tag as t}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const MoreIcon=({width:r=24,height:l=24,hidden:e=!1,title:c=\"More\"}={})=>t`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"${r}\"\n    height=\"${l}\"\n    viewBox=\"0 0 20 20\"\n    aria-hidden=${e?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${c}\"\n  >\n    <circle cx=\"10\" cy=\"10.02114\" r=\"1.5\" fill=\"currentColor\" />\n    <path\n      d=\"m10,8.5c-.82843,0-1.5.67157-1.5,1.5s.67157,1.5,1.5,1.5,1.5-.67157,1.5-1.5-.67157-1.5-1.5-1.5Z\"\n      fill=\"currentColor\"\n    />\n    <circle cx=\"4\" cy=\"10.02114\" r=\"1.5\" fill=\"currentColor\" />\n    <circle cx=\"4\" cy=\"10\" r=\"1.5\" fill=\"currentColor\" />\n    <circle cx=\"16\" cy=\"10.02114\" r=\"1.5\" fill=\"currentColor\" />\n    <circle cx=\"16\" cy=\"10\" r=\"1.5\" fill=\"currentColor\" />\n  </svg>`;\n//# sourceMappingURL=More.js.map\n","\"use strict\";import{html as e}from\"@spectrum-web-components/base\";import{IconBase as t}from\"@spectrum-web-components/icon\";import{setCustomTemplateLiteralTag as r}from\"../custom-tag.js\";import{MoreIcon as o}from\"../icons-s2/More.js\";import{MoreIcon as l}from\"../icons/More.js\";export class IconMore extends t{render(){return r(e),this.spectrumVersion===2?o({hidden:!this.label,title:this.label}):l({hidden:!this.label,title:this.label})}}\n//# sourceMappingURL=IconMore.js.map\n","\"use strict\";import{tag as a}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const MenuHamburgerIcon=({width:r=24,height:e=24,hidden:t=!1,title:l=\"Menu Hamburger\"}={})=>a`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"${r}\"\n    height=\"${e}\"\n    viewBox=\"0 0 20 20\"\n    aria-hidden=${t?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${l}\"\n  >\n    <path\n      d=\"m16.25,14H3.75c-.41406,0-.75.33594-.75.75s.33594.75.75.75h12.5c.41406,0,.75-.33594.75-.75s-.33594-.75-.75-.75Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"m3.75,5.5h12.5c.41406,0,.75-.33594.75-.75s-.33594-.75-.75-.75H3.75c-.41406,0-.75.33594-.75.75s.33594.75.75.75Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"m16.25,9H3.75c-.41406,0-.75.33594-.75.75s.33594.75.75.75h12.5c.41406,0,.75-.33594.75-.75s-.33594-.75-.75-.75Z\"\n      fill=\"currentColor\"\n    />\n  </svg>`;\n//# sourceMappingURL=MenuHamburger.js.map\n","\"use strict\";import{tag as c}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const MoreIcon=({width:e=24,height:r=24,hidden:t=!1,title:l=\"More\"}={})=>c`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"${e}\"\n    height=\"${r}\"\n    viewBox=\"0 0 36 36\"\n    aria-hidden=${t?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${l}\"\n  >\n    <circle cx=\"17.8\" cy=\"18.2\" r=\"3.4\" />\n    <circle cx=\"29.5\" cy=\"18.2\" r=\"3.4\" />\n    <circle cx=\"6.1\" cy=\"18.2\" r=\"3.4\" />\n  </svg>`;\n//# sourceMappingURL=More.js.map\n","\"use strict\";import{tag as i}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const ShowMenuIcon=({width:t=24,height:e=24,hidden:r=!1,title:h=\"Show Menu\"}={})=>i`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height=\"${e}\"\n    viewBox=\"0 0 36 36\"\n    width=\"${t}\"\n    aria-hidden=${r?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${h}\"\n  >\n    <rect height=\"4\" rx=\"1\" ry=\"1\" width=\"28\" x=\"4\" y=\"16\" />\n    <rect height=\"4\" rx=\"1\" ry=\"1\" width=\"28\" x=\"4\" y=\"6\" />\n    <rect height=\"4\" rx=\"1\" ry=\"1\" width=\"28\" x=\"4\" y=\"26\" />\n  </svg>`;\n//# sourceMappingURL=ShowMenu.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html\n} from \"@spectrum-web-components/base\";\nimport {\n  queryAssignedNodes,\n  state\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { randomID } from \"@spectrum-web-components/shared/src/random-id.js\";\nimport { Menu } from \"./Menu.dev.js\";\nimport \"@spectrum-web-components/menu/sp-menu.js\";\nimport menuGroupStyles from \"./menu-group.css.js\";\nexport class MenuGroup extends Menu {\n  constructor() {\n    super(...arguments);\n    this.headerId = \"\";\n  }\n  static get styles() {\n    return [...super.styles, menuGroupStyles];\n  }\n  /**\n   * a menu group must have the role `group`\n   * and should never function as a menu\n   */\n  get ownRole() {\n    return \"group\";\n  }\n  /**\n   * only a menu controls roving tabindex;\n   * groups should defer navigation to parent menu\n   */\n  get controlsRovingTabindex() {\n    return false;\n  }\n  updateLabel() {\n    const headerElement = this.headerElements.length ? this.headerElements[0] : void 0;\n    if (headerElement !== this.headerElement) {\n      if (this.headerElement && this.headerElement.id === this.headerId) {\n        this.headerElement.removeAttribute(\"id\");\n      }\n      if (headerElement) {\n        this.headerId = this.headerId || `sp-menu-group-label-${randomID()}`;\n        const headerId = headerElement.id || this.headerId;\n        if (!headerElement.id) {\n          headerElement.id = headerId;\n        }\n        this.setAttribute(\"aria-labelledby\", headerId);\n      } else {\n        this.removeAttribute(\"aria-labelledby\");\n      }\n    }\n    this.headerElement = headerElement;\n  }\n  render() {\n    return html`\n            <span class=\"header\" ?hidden=${!this.headerElement}>\n                <slot name=\"header\" @slotchange=${this.updateLabel}></slot>\n            </span>\n            ${this.renderMenuItemSlot()}\n        `;\n  }\n}\n__decorateClass([\n  queryAssignedNodes({\n    slot: \"header\",\n    flatten: true\n  })\n], MenuGroup.prototype, \"headerElements\", 2);\n__decorateClass([\n  state()\n], MenuGroup.prototype, \"headerElement\", 2);\n//# sourceMappingURL=MenuGroup.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/action-menu/sp-action-menu.js\";\nimport \"@spectrum-web-components/menu/sp-menu.js\";\nimport \"@spectrum-web-components/menu/sp-menu-item.js\";\nimport \"@spectrum-web-components/menu/sp-menu-divider.js\";\nimport \"@spectrum-web-components/menu/sp-menu-group.js\";\nimport { VirtualTrigger } from \"@spectrum-web-components/overlay\";\nimport \"@spectrum-web-components/popover/sp-popover.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-show-menu.js\";\nexport default {\n  component: \"sp-menu\",\n  title: \"Menu/Submenu\"\n};\nfunction nextFrame() {\n  return new Promise((res) => requestAnimationFrame(() => res()));\n}\nclass SubmenuReady extends HTMLElement {\n  constructor() {\n    super();\n    this.handleMenuOpened = async (event) => {\n      this.menu.removeEventListener(\"sp-opened\", this.handleMenuOpened);\n      await nextFrame();\n      await event.target.updateComplete;\n      this.submenu = document.querySelector(\"#submenu-item-1\");\n      if (!this.submenu) {\n        return;\n      }\n      this.submenu.addEventListener(\"sp-opened\", this.handleSubmenuOpened);\n      this.submenu.click();\n    };\n    this.handleSubmenuOpened = async (event) => {\n      this.submenu.removeEventListener(\"sp-opened\", this.handleSubmenuOpened);\n      await nextFrame();\n      await event.target.updateComplete;\n      this.submenuChild = document.querySelector(\n        \"#submenu-item-2\"\n      );\n      if (!this.submenuChild) {\n        return;\n      }\n      this.submenuChild.addEventListener(\n        \"sp-opened\",\n        this.handleSubmenuChildOpened\n      );\n      this.submenuChild.click();\n    };\n    this.handleSubmenuChildOpened = async (event) => {\n      this.submenuChild.removeEventListener(\n        \"sp-opened\",\n        this.handleSubmenuChildOpened\n      );\n      await nextFrame();\n      await event.target.updateComplete;\n      this.ready(true);\n    };\n    this.readyPromise = Promise.resolve(false);\n    this.readyPromise = new Promise((res) => {\n      this.ready = res;\n      this.setup();\n    });\n  }\n  async setup() {\n    await nextFrame();\n    this.menu = document.querySelector(`sp-action-menu`);\n    this.menu.addEventListener(\"sp-opened\", this.handleMenuOpened);\n    this.menu.addEventListener(\n      \"sp-closed\",\n      () => {\n        this.menu.removeEventListener(\n          \"sp-opened\",\n          this.handleMenuOpened\n        );\n      },\n      { once: true }\n    );\n    this.menu.open = true;\n  }\n  get updateComplete() {\n    return this.readyPromise;\n  }\n}\ncustomElements.define(\"submenu-ready\", SubmenuReady);\nconst submenuDecorator = (story) => {\n  return html`\n        ${story()}\n        <submenu-ready></submenu-ready>\n    `;\n};\nexport const submenu = () => {\n  const getValueEls = () => {\n    return {\n      root: document.querySelector(\"#root-value\"),\n      first: document.querySelector(\"#first-value\"),\n      second: document.querySelector(\"#second-value\")\n    };\n  };\n  const clearValues = () => {\n    const valueEls = getValueEls();\n    valueEls.root.textContent = \"\";\n    valueEls.first.textContent = \"\";\n    valueEls.second.textContent = \"\";\n  };\n  const handleRootChange = (event) => {\n    const valueEls = getValueEls();\n    valueEls.root.textContent = event.target.value;\n  };\n  const handleFirstDescendantChange = (event) => {\n    const valueEls = getValueEls();\n    valueEls.first.textContent = event.target.selected[0] || \"\";\n  };\n  const handleSecondDescendantChange = (event) => {\n    const valueEls = getValueEls();\n    valueEls.second.textContent = event.target.selected[0] || \"\";\n  };\n  return html`\n        <sp-action-menu\n            label=\"More Actions\"\n            @change=${handleRootChange}\n            @sp-opened=${clearValues}\n        >\n            <sp-icon-show-menu slot=\"icon\"></sp-icon-show-menu>\n            <sp-menu-group\n                @change=${() => console.log(\"group change\")}\n                role=\"none\"\n            >\n                <span slot=\"header\">New York</span>\n                <sp-menu-item>Bronx</sp-menu-item>\n                <sp-menu-item id=\"submenu-item-1\">\n                    Brooklyn\n                    <sp-menu\n                        slot=\"submenu\"\n                        @change=${handleFirstDescendantChange}\n                    >\n                        <sp-menu-item id=\"submenu-item-2\">\n                            Ft. Greene\n                            <sp-menu\n                                slot=\"submenu\"\n                                @change=${handleSecondDescendantChange}\n                            >\n                                <sp-menu-item>S. Oxford St</sp-menu-item>\n                                <sp-menu-item>S. Portland Ave</sp-menu-item>\n                                <sp-menu-item>S. Elliot Pl</sp-menu-item>\n                            </sp-menu>\n                        </sp-menu-item>\n                        <sp-menu-item disabled>Park Slope</sp-menu-item>\n                        <sp-menu-item>Williamsburg</sp-menu-item>\n                    </sp-menu>\n                </sp-menu-item>\n                <sp-menu-item>\n                    Manhattan\n                    <sp-menu\n                        slot=\"submenu\"\n                        @change=${handleFirstDescendantChange}\n                    >\n                        <sp-menu-item disabled>SoHo</sp-menu-item>\n                        <sp-menu-item>\n                            Union Square\n                            <sp-menu\n                                slot=\"submenu\"\n                                @change=${handleSecondDescendantChange}\n                            >\n                                <sp-menu-item>14th St</sp-menu-item>\n                                <sp-menu-item>Broadway</sp-menu-item>\n                                <sp-menu-item>Park Ave</sp-menu-item>\n                            </sp-menu>\n                        </sp-menu-item>\n                        <sp-menu-item>Upper East Side</sp-menu-item>\n                    </sp-menu>\n                </sp-menu-item>\n                <sp-menu-item disabled>\n                    Queens\n                    <sp-menu slot=\"submenu\">\n                        <sp-menu-item>\n                            You shouldn't be able to see this!\n                        </sp-menu-item>\n                        <sp-menu-item>Forest Hills</sp-menu-item>\n                        <sp-menu-item>Jamaica</sp-menu-item>\n                    </sp-menu>\n                </sp-menu-item>\n            </sp-menu-group>\n        </sp-action-menu>\n        <div>\n            Root value:\n            <span id=\"root-value\"></span>\n            <br />\n            First descendant value:\n            <span id=\"first-value\"></span>\n            <br />\n            Second descendant value:\n            <span id=\"second-value\"></span>\n            <br />\n        </div>\n    `;\n};\nsubmenu.decorators = [submenuDecorator];\nexport const contextMenu = () => {\n  const contextmenu = async (event) => {\n    event.preventDefault();\n    const virtualTrigger = new VirtualTrigger(event.clientX, event.clientY);\n    const overlay = document.querySelector(\"sp-overlay\");\n    clearValues();\n    overlay.triggerElement = virtualTrigger;\n    overlay.willPreventClose = true;\n    overlay.type = \"auto\";\n    overlay.placement = \"right-start\";\n    overlay.open = true;\n  };\n  const getValueEls = () => {\n    return {\n      root: document.querySelector(\"#root-value\"),\n      first: document.querySelector(\"#first-value\")\n    };\n  };\n  const clearValues = () => {\n    const valueEls = getValueEls();\n    valueEls.root.textContent = \"\";\n    valueEls.first.textContent = \"\";\n  };\n  const handleRootChange = (event) => {\n    var _a;\n    const valueEls = getValueEls();\n    valueEls.root.textContent = event.target.value;\n    (_a = event.target.parentElement) == null ? void 0 : _a.dispatchEvent(\n      new Event(\"close\", { bubbles: true })\n    );\n  };\n  const handleFirstDescendantChange = (event) => {\n    const valueEls = getValueEls();\n    valueEls.first.textContent = event.target.selected[0] || \"\";\n  };\n  return html`\n        <style>\n            .app-root {\n                position: absolute;\n                inset: 0;\n            }\n            active-overlay::part(theme) {\n                --swc-menu-width: 200px;\n            }\n        </style>\n        <div class=\"app-root\" @contextmenu=${contextmenu}>\n            <div>\n                Root value:\n                <span id=\"root-value\"></span>\n                <br />\n                First descendant value:\n                <span id=\"first-value\"></span>\n                <br />\n            </div>\n        </div>\n        <sp-overlay>\n            <sp-popover\n                style=\"max-width: 33vw;\"\n                @click=${(event) => {\n    var _a;\n    return (_a = event.target) == null ? void 0 : _a.dispatchEvent(\n      new Event(\"close\", { bubbles: true })\n    );\n  }}\n            >\n                <sp-menu @change=${handleRootChange}>\n                    <sp-menu-group>\n                        <span slot=\"header\">Options</span>\n                        <sp-menu-item>\n                            Copy\n                            <span slot=\"value\">⌘​S</span>\n                        </sp-menu-item>\n                        <sp-menu-item>\n                            Paste\n                            <span slot=\"value\">⌘​P</span>\n                        </sp-menu-item>\n                        <sp-menu-item>\n                            Cut\n                            <span slot=\"value\">⌘​X</span>\n                        </sp-menu-item>\n                        <sp-menu-divider></sp-menu-divider>\n                        <sp-menu-item>\n                            Select layer\n                            <sp-menu\n                                slot=\"submenu\"\n                                selects=\"single\"\n                                @change=${handleFirstDescendantChange}\n                            >\n                                <sp-menu-item selected>Ellipse 1</sp-menu-item>\n                                <sp-menu-item>Rectangle</sp-menu-item>\n                            </sp-menu>\n                        </sp-menu-item>\n                        <sp-menu-item>\n                            Group\n                            <span slot=\"value\">⌘​G</span>\n                        </sp-menu-item>\n                        <sp-menu-item>\n                            Unlock\n                            <span slot=\"value\">⌘​L</span>\n                        </sp-menu-item>\n                        <sp-menu-divider></sp-menu-divider>\n                        <sp-menu-item>\n                            Bring to front\n                            <span slot=\"value\">⇧​⌘​​]</span>\n                        </sp-menu-item>\n                        <sp-menu-item>\n                            Bring forward\n                            <span slot=\"value\">⌘​​]</span>\n                        </sp-menu-item>\n                        <sp-menu-item>\n                            Send backward\n                            <span slot=\"value\">⌘​​[</span>\n                        </sp-menu-item>\n                        <sp-menu-item>\n                            Send to back\n                            <span slot=\"value\">⇧​⌘​​[</span>\n                        </sp-menu-item>\n                        <sp-menu-divider></sp-menu-divider>\n                        <sp-menu-item>\n                            Delete\n                            <span slot=\"value\">DEL</span>\n                        </sp-menu-item>\n                    </sp-menu-group>\n                </sp-menu>\n            </sp-popover>\n        </sp-overlay>\n    `;\n};\nexport const customRootSubmenu = () => {\n  return html`\n        <sp-action-menu label=\"More Actions\">\n            <sp-menu-item>Bronx</sp-menu-item>\n            <sp-menu-item id=\"submenu-item-1\">\n                Brooklyn\n                <div role=\"menuitem\" slot=\"submenu\" style=\"padding: 12px\">\n                    <img\n                        src=\"https://placekitten.com/200/200\"\n                        alt=\"Kitten\"\n                        style=\"width: 100%; height: auto; border-radius: 4px\"\n                    />\n                    <p>I am an arbitrary content in submenu</p>\n                </div>\n            </sp-menu-item>\n        </sp-action-menu>\n    `;\n};\nexport const customRootSubmenuWithScroll = () => {\n  return html`\n        <sp-action-menu label=\"More Actions\">\n            <sp-menu-item>Bronx</sp-menu-item>\n            <sp-menu-item id=\"submenu-item-1\">\n                Brooklyn\n                <div role=\"menuitem\" slot=\"submenu\" style=\"padding: 12px\">\n                    <sp-menu-item>Additional options</sp-menu-item>\n                    <sp-menu-item>Available on request</sp-menu-item>\n                    <sp-menu-item value=\"item-1\">Deselect</sp-menu-item>\n                    <sp-menu-item value=\"item-2\">Select inverse</sp-menu-item>\n                    <sp-menu-item value=\"item-3\">Feather...</sp-menu-item>\n                    <sp-menu-item value=\"item-4\">\n                        Select and mask...\n                    </sp-menu-item>\n                    <sp-menu-item value=\"item-5\">Save selection</sp-menu-item>\n                    <sp-menu-item value=\"item-1\">Deselect</sp-menu-item>\n                    <sp-menu-item value=\"item-2\">Select inverse</sp-menu-item>\n                    <sp-menu-item value=\"item-3\">Feather...</sp-menu-item>\n                    <sp-menu-item value=\"item-4\">\n                        Select and mask...\n                    </sp-menu-item>\n                    <sp-menu-item value=\"item-5\">Save selection</sp-menu-item>\n                    <sp-menu-item value=\"item-1\">Deselect</sp-menu-item>\n                    <sp-menu-item value=\"item-2\">Select inverse</sp-menu-item>\n                    <sp-menu-item value=\"item-3\">Feather...</sp-menu-item>\n                    <sp-menu-item value=\"item-4\">\n                        Select and mask...\n                    </sp-menu-item>\n                    <sp-menu-item value=\"item-5\">Save selection</sp-menu-item>\n                    <sp-menu-item value=\"item-1\">Deselect</sp-menu-item>\n                    <sp-menu-item value=\"item-2\">Select inverse</sp-menu-item>\n                    <sp-menu-item value=\"item-3\">Feather...</sp-menu-item>\n                    <sp-menu-item value=\"item-4\">\n                        Select and mask...\n                    </sp-menu-item>\n                    <sp-menu-item value=\"item-5\">Save selection</sp-menu-item>\n                    <sp-menu-item value=\"item-1\">Deselect</sp-menu-item>\n                    <sp-menu-item value=\"item-2\">Select inverse</sp-menu-item>\n                    <sp-menu-item value=\"item-3\">Feather...</sp-menu-item>\n                    <sp-menu-item value=\"item-4\">\n                        Select and mask...\n                    </sp-menu-item>\n                    <sp-menu-item value=\"item-5\">Save selection</sp-menu-item>\n                    <sp-menu-item value=\"item-1\">Deselect</sp-menu-item>\n                    <sp-menu-item value=\"item-2\">Select inverse</sp-menu-item>\n                    <sp-menu-item value=\"item-3\">Feather...</sp-menu-item>\n                    <sp-menu-item value=\"item-4\">\n                        Select and mask...\n                    </sp-menu-item>\n                    <sp-menu-item value=\"item-5\">Save selection</sp-menu-item>\n                    <sp-menu-item value=\"item-1\">Deselect</sp-menu-item>\n                    <sp-menu-item value=\"item-2\">Select inverse</sp-menu-item>\n                    <sp-menu-item value=\"item-3\">Feather...</sp-menu-item>\n                    <sp-menu-item value=\"item-4\">\n                        Select and mask...\n                    </sp-menu-item>\n                    <sp-menu-item value=\"item-5\">Save selection</sp-menu-item>\n                    <sp-menu-item value=\"item-1\">Deselect</sp-menu-item>\n                    <sp-menu-item value=\"item-2\">Select inverse</sp-menu-item>\n                    <sp-menu-item value=\"item-3\">Feather...</sp-menu-item>\n                    <sp-menu-item value=\"item-4\">\n                        Select and mask...\n                    </sp-menu-item>\n                    <sp-menu-item value=\"item-5\">Save selection</sp-menu-item>\n                    <sp-menu-item value=\"item-1\">Deselect</sp-menu-item>\n                    <sp-menu-item value=\"item-2\">Select inverse</sp-menu-item>\n                    <sp-menu-item value=\"item-3\">Feather...</sp-menu-item>\n                    <sp-menu-item value=\"item-4\">\n                        Select and mask...\n                    </sp-menu-item>\n                    <sp-menu-item value=\"item-5\">Save selection</sp-menu-item>\n                    <sp-menu-item value=\"item-1\">Deselect</sp-menu-item>\n                    <sp-menu-item value=\"item-2\">Select inverse</sp-menu-item>\n                    <sp-menu-item value=\"item-3\">Feather...</sp-menu-item>\n                    <sp-menu-item value=\"item-4\">\n                        Select and mask...\n                    </sp-menu-item>\n                    <sp-menu-item value=\"item-5\">Save selection</sp-menu-item>\n                    <sp-menu-item value=\"item-1\">Deselect</sp-menu-item>\n                    <sp-menu-item value=\"item-2\">Select inverse</sp-menu-item>\n                    <sp-menu-item value=\"item-3\">Feather...</sp-menu-item>\n                    <sp-menu-item value=\"item-4\">\n                        Select and mask...\n                    </sp-menu-item>\n                    <sp-menu-item value=\"item-5\">Save selection</sp-menu-item>\n                </div>\n            </sp-menu-item>\n        </sp-action-menu>\n    `;\n};\ncustomRootSubmenu.swc_vrt = {\n  skip: true\n};\n//# sourceMappingURL=submenu.stories.js.map\n;export const __namedExportsOrder = [\"submenu\",\"contextMenu\",\"customRootSubmenu\",\"customRootSubmenuWithScroll\"];","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query,\n  state\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/overlay/sp-overlay.js\";\nimport overlayTriggerStyles from \"./overlay-trigger.css.js\";\nexport class OverlayTrigger extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.offset = 6;\n    this.disabled = false;\n    this.receivesFocus = \"auto\";\n    this.clickContent = [];\n    this.longpressContent = [];\n    this.hoverContent = [];\n    this.targetContent = [];\n  }\n  static get styles() {\n    return [overlayTriggerStyles];\n  }\n  getAssignedElementsFromSlot(slot) {\n    return slot.assignedElements({ flatten: true });\n  }\n  handleTriggerContent(event) {\n    this.targetContent = this.getAssignedElementsFromSlot(event.target);\n  }\n  handleSlotContent(event) {\n    switch (event.target.name) {\n      case \"click-content\":\n        this.clickContent = this.getAssignedElementsFromSlot(\n          event.target\n        );\n        break;\n      case \"longpress-content\":\n        this.longpressContent = this.getAssignedElementsFromSlot(\n          event.target\n        );\n        break;\n      case \"hover-content\":\n        this.hoverContent = this.getAssignedElementsFromSlot(\n          event.target\n        );\n        break;\n    }\n  }\n  handleBeforetoggle(event) {\n    const { target } = event;\n    let type;\n    if (target === this.clickOverlayElement) {\n      type = \"click\";\n    } else if (target === this.longpressOverlayElement) {\n      type = \"longpress\";\n    } else if (target === this.hoverOverlayElement) {\n      type = \"hover\";\n    } else {\n      return;\n    }\n    if (event.newState === \"open\") {\n      this.open = type;\n    } else if (this.open === type) {\n      this.open = void 0;\n    }\n  }\n  update(changes) {\n    var _a, _b, _c, _d, _e, _f;\n    if (changes.has(\"clickContent\")) {\n      this.clickPlacement = ((_a = this.clickContent[0]) == null ? void 0 : _a.getAttribute(\"placement\")) || ((_b = this.clickContent[0]) == null ? void 0 : _b.getAttribute(\n        \"direction\"\n      )) || void 0;\n    }\n    if (changes.has(\"hoverContent\")) {\n      this.hoverPlacement = ((_c = this.hoverContent[0]) == null ? void 0 : _c.getAttribute(\"placement\")) || ((_d = this.hoverContent[0]) == null ? void 0 : _d.getAttribute(\n        \"direction\"\n      )) || void 0;\n    }\n    if (changes.has(\"longpressContent\")) {\n      this.longpressPlacement = ((_e = this.longpressContent[0]) == null ? void 0 : _e.getAttribute(\"placement\")) || ((_f = this.longpressContent[0]) == null ? void 0 : _f.getAttribute(\n        \"direction\"\n      )) || void 0;\n    }\n    super.update(changes);\n  }\n  renderSlot(name) {\n    return html`\n            <slot name=${name} @slotchange=${this.handleSlotContent}></slot>\n        `;\n  }\n  renderClickOverlay() {\n    var _a;\n    const slot = this.renderSlot(\"click-content\");\n    const clickOverlay = html`\n            <sp-overlay\n                id=\"click-overlay\"\n                ?disabled=${this.disabled || !this.clickContent.length}\n                ?open=${this.open === \"click\" && !!this.clickContent.length}\n                .offset=${this.offset}\n                .placement=${this.clickPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${\"click\"}\n                .type=${this.type !== \"modal\" ? \"auto\" : \"modal\"}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n        `;\n    if ((_a = this.triggeredBy) == null ? void 0 : _a.includes(\"click\")) {\n      return clickOverlay;\n    }\n    if (!this.clickContent.length) {\n      return slot;\n    } else {\n      return clickOverlay;\n    }\n  }\n  renderHoverOverlay() {\n    var _a;\n    const slot = this.renderSlot(\"hover-content\");\n    const hoverOverlay = html`\n            <sp-overlay\n                id=\"hover-overlay\"\n                ?open=${this.open === \"hover\" && !!this.hoverContent.length}\n                ?disabled=${this.disabled || !this.hoverContent.length || !!this.open && this.open !== \"hover\"}\n                .offset=${this.offset}\n                .placement=${this.hoverPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${\"hover\"}\n                .type=${\"hint\"}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n        `;\n    if ((_a = this.triggeredBy) == null ? void 0 : _a.includes(\"hover\")) {\n      return hoverOverlay;\n    }\n    if (!this.hoverContent.length) {\n      return slot;\n    } else {\n      return hoverOverlay;\n    }\n  }\n  renderLongpressOverlay() {\n    var _a;\n    const slot = this.renderSlot(\"longpress-content\");\n    const longpressOverlay = html`\n            <sp-overlay\n                id=\"longpress-overlay\"\n                ?disabled=${this.disabled || !this.longpressContent.length}\n                ?open=${this.open === \"longpress\" && !!this.longpressContent.length}\n                .offset=${this.offset}\n                .placement=${this.longpressPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${\"longpress\"}\n                .type=${\"auto\"}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n            <slot name=\"longpress-describedby-descriptor\"></slot>\n        `;\n    if ((_a = this.triggeredBy) == null ? void 0 : _a.includes(\"longpress\")) {\n      return longpressOverlay;\n    }\n    if (!this.longpressContent.length) {\n      return slot;\n    } else {\n      return longpressOverlay;\n    }\n  }\n  render() {\n    return html`\n            <slot\n                id=\"trigger\"\n                name=\"trigger\"\n                @slotchange=${this.handleTriggerContent}\n            ></slot>\n            ${[\n      this.renderClickOverlay(),\n      this.renderHoverOverlay(),\n      this.renderLongpressOverlay()\n    ]}\n        `;\n  }\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (!this.triggeredBy) {\n      const issues = [\n        \"You have not specified the `triggeredBy` property. For optimal performance, consider explicitly declaring which overlay types you plan to use.\",\n        'Example: triggered-by=\"click hover\"',\n        \"This helps avoid unnecessary DOM operations and potential race conditions.\"\n      ];\n      window.__swc.warn(\n        this,\n        \"Performance optimization available for <overlay-trigger>:\",\n        \"https://opensource.adobe.com/spectrum-web-components/components/overlay-trigger/#performance-optimization\",\n        { issues }\n      );\n    }\n    if (this.disabled && changedProperties.has(\"disabled\")) {\n      this.open = void 0;\n      return;\n    }\n  }\n  async getUpdateComplete() {\n    const complete = await super.getUpdateComplete();\n    return complete;\n  }\n}\n__decorateClass([\n  property({ attribute: \"triggered-by\" })\n], OverlayTrigger.prototype, \"triggeredBy\", 2);\n__decorateClass([\n  property({ reflect: true })\n], OverlayTrigger.prototype, \"placement\", 2);\n__decorateClass([\n  property()\n], OverlayTrigger.prototype, \"type\", 2);\n__decorateClass([\n  property({ type: Number })\n], OverlayTrigger.prototype, \"offset\", 2);\n__decorateClass([\n  property({ reflect: true })\n], OverlayTrigger.prototype, \"open\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], OverlayTrigger.prototype, \"disabled\", 2);\n__decorateClass([\n  property({ attribute: \"receives-focus\" })\n], OverlayTrigger.prototype, \"receivesFocus\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"clickContent\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"longpressContent\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"hoverContent\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"targetContent\", 2);\n__decorateClass([\n  query(\"#click-overlay\", true)\n], OverlayTrigger.prototype, \"clickOverlayElement\", 2);\n__decorateClass([\n  query(\"#longpress-overlay\", true)\n], OverlayTrigger.prototype, \"longpressOverlayElement\", 2);\n__decorateClass([\n  query(\"#hover-overlay\", true)\n], OverlayTrigger.prototype, \"hoverOverlayElement\", 2);\n//# sourceMappingURL=OverlayTrigger.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport popoverStyles from \"./popover.css.js\";\nexport class Popover extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.open = false;\n    this.tip = false;\n  }\n  static get styles() {\n    return [popoverStyles];\n  }\n  renderTip() {\n    return html`\n            <div id=\"tip\" aria-hidden=\"true\">\n                <svg class=\"tip block\" viewBox=\"0 -0.5 16 9\">\n                    <path class=\"triangle\" d=\"M-1,-1 8,8 17,-1\"></path>\n                </svg>\n                <svg class=\"tip inline\" viewBox=\"0 -0.5 9 16\">\n                    <path class=\"triangle\" d=\"M-1,-1 8,8 -1,17\"></path>\n                </svg>\n            </div>\n        `;\n  }\n  render() {\n    return html`\n            <slot></slot>\n            ${this.tip ? this.renderTip() : nothing}\n        `;\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Popover.prototype, \"open\", 2);\n__decorateClass([\n  property({ reflect: true })\n], Popover.prototype, \"placement\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Popover.prototype, \"tip\", 2);\n__decorateClass([\n  query(\"#tip\")\n], Popover.prototype, \"tipElement\", 2);\n//# sourceMappingURL=Popover.dev.js.map\n"],"names":[],"sourceRoot":""}