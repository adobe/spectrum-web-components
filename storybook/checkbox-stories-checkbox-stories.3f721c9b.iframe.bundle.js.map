{"version":3,"file":"checkbox-stories-checkbox-stories.3f721c9b.iframe.bundle.js","mappings":";;AAaA;;AAKA;;;;;;;;AAWA;;AAKA;;AAKA;;AAKA;;AAKA;;AAKA;;AAKA;;AAKA;;AAKA;;AAKA;;AAKA;;AAKA;;AAKA;;AAKA;;AAKA;;AAKA;;AAKA;;AAKA;;;;;;;;AAWA;;;;;;;;AAYA;;ACxIA;;AAoCA;;AAEA;AAEA;;ACjBA;;;;AAIA;AACA;;;;;AAMA","sources":["webpack://@adobe/spectrum-web-components/./packages/checkbox/stories/checkbox.stories.js","webpack://@adobe/spectrum-web-components/./packages/field-group/src/FieldGroup.dev.js","webpack://@adobe/spectrum-web-components/./packages/help-text/src/HelpTextManager.dev.js"],"sourcesContent":["\"use strict\";\nimport \"@spectrum-web-components/checkbox/sp-checkbox.js\";\nimport \"@spectrum-web-components/field-group/sp-field-group.js\";\nimport { html } from \"@spectrum-web-components/base\";\nexport default {\n  component: \"sp-checkbox\",\n  title: \"Checkbox\"\n};\nexport const Default = () => {\n  return html`\n        <sp-checkbox>Checkbox</sp-checkbox>\n    `;\n};\nexport const readonly = () => {\n  return html`\n        <sp-checkbox checked readonly>Checkbox</sp-checkbox>\n    `;\n};\nexport const Indeterminate = () => {\n  return html`\n        <sp-checkbox indeterminate>\n            Checkbox, indeterminate, not checked\n        </sp-checkbox>\n        <br />\n        <sp-checkbox indeterminate checked>\n            Checkbox, indeterminate, checked\n        </sp-checkbox>\n    `;\n};\nexport const Checked = () => {\n  return html`\n        <sp-checkbox checked>Checkbox</sp-checkbox>\n    `;\n};\nexport const emphasized = () => {\n  return html`\n        <sp-checkbox emphasized>Checkbox</sp-checkbox>\n    `;\n};\nexport const emphasizedIndeterminate = () => {\n  return html`\n        <sp-checkbox emphasized indeterminate>Checkbox</sp-checkbox>\n    `;\n};\nexport const emphasizedChecked = () => {\n  return html`\n        <sp-checkbox emphasized checked>Checkbox</sp-checkbox>\n    `;\n};\nexport const emphasizedInvalid = () => {\n  return html`\n        <sp-checkbox emphasized invalid>Checkbox</sp-checkbox>\n    `;\n};\nexport const emphasizedInvalidIndeterminate = () => {\n  return html`\n        <sp-checkbox emphasized invalid indeterminate>Checkbox</sp-checkbox>\n    `;\n};\nexport const emphasizedInvalidChecked = () => {\n  return html`\n        <sp-checkbox emphasized invalid checked>Checkbox</sp-checkbox>\n    `;\n};\nexport const Invalid = () => {\n  return html`\n        <sp-checkbox invalid>Checkbox</sp-checkbox>\n    `;\n};\nexport const invalidIndeterminate = () => {\n  return html`\n        <sp-checkbox invalid indeterminate>Checkbox</sp-checkbox>\n    `;\n};\nexport const invalidChecked = () => {\n  return html`\n        <sp-checkbox invalid checked>Checkbox</sp-checkbox>\n    `;\n};\nexport const Autofocus = () => {\n  return html`\n        <sp-checkbox autofocus>Checkbox</sp-checkbox>\n    `;\n};\nexport const Disabled = () => {\n  return html`\n        <sp-checkbox disabled>Checkbox</sp-checkbox>\n    `;\n};\nexport const disabledChecked = () => {\n  return html`\n        <sp-checkbox disabled checked>Checkbox</sp-checkbox>\n    `;\n};\nexport const disabledIndeterminate = () => {\n  return html`\n        <sp-checkbox disabled indeterminate>Checkbox</sp-checkbox>\n    `;\n};\nexport const emphasizedDisabled = () => {\n  return html`\n        <sp-checkbox emphasized disabled>Checkbox</sp-checkbox>\n    `;\n};\nexport const emphasizedDisabledIndeterminate = () => {\n  return html`\n        <sp-checkbox emphasized disabled indeterminate>Checkbox</sp-checkbox>\n    `;\n};\nexport const emphasizedDisabledChecked = () => {\n  return html`\n        <sp-checkbox emphasized checked>Checkbox</sp-checkbox>\n    `;\n};\nexport const tabIndexExample = () => {\n  return html`\n        <sp-field-group horizontal>\n            <sp-checkbox tabindex=\"0\">Checkbox 0</sp-checkbox>\n            <sp-checkbox disabled tabindex=\"3\">Checkbox 3</sp-checkbox>\n            <sp-checkbox tabindex=\"4\">Checkbox 4</sp-checkbox>\n            <sp-checkbox tabindex=\"2\" autofocus>Checkbox 2</sp-checkbox>\n            <sp-checkbox tabindex=\"1\">Checkbox 1</sp-checkbox>\n        </sp-field-group>\n    `;\n};\nexport const verticalTabIndexExample = () => {\n  return html`\n        <sp-field-group vertical>\n            <sp-checkbox tabindex=\"0\">Checkbox 0</sp-checkbox>\n            <sp-checkbox disabled tabindex=\"3\">Checkbox 3</sp-checkbox>\n            <sp-checkbox tabindex=\"4\">Checkbox 4</sp-checkbox>\n            <sp-checkbox tabindex=\"2\" autofocus>Checkbox 2</sp-checkbox>\n            <sp-checkbox tabindex=\"1\">Checkbox 1</sp-checkbox>\n        </sp-field-group>\n    `;\n};\n//# sourceMappingURL=checkbox.stories.js.map\n;export const __namedExportsOrder = [\"Default\",\"readonly\",\"Indeterminate\",\"Checked\",\"emphasized\",\"emphasizedIndeterminate\",\"emphasizedChecked\",\"emphasizedInvalid\",\"emphasizedInvalidIndeterminate\",\"emphasizedInvalidChecked\",\"Invalid\",\"invalidIndeterminate\",\"invalidChecked\",\"Autofocus\",\"Disabled\",\"disabledChecked\",\"disabledIndeterminate\",\"emphasizedDisabled\",\"emphasizedDisabledIndeterminate\",\"emphasizedDisabledChecked\",\"tabIndexExample\",\"verticalTabIndexExample\"];","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport { ManageHelpText } from \"@spectrum-web-components/help-text/src/manage-help-text.js\";\nimport styles from \"./field-group.css.js\";\nexport class FieldGroup extends ManageHelpText(SpectrumElement, {\n  mode: \"external\"\n}) {\n  constructor() {\n    super(...arguments);\n    this.horizontal = false;\n    this.invalid = false;\n    this.label = \"\";\n    this.vertical = false;\n  }\n  static get styles() {\n    return [styles];\n  }\n  handleSlotchange() {\n    return;\n  }\n  render() {\n    return html`\n            <div class=\"group\" role=\"presentation\">\n                <slot @slotchange=${this.handleSlotchange}></slot>\n            </div>\n            ${this.renderHelpText(this.invalid)}\n        `;\n  }\n  firstUpdated(changes) {\n    super.firstUpdated(changes);\n    if (!this.hasAttribute(\"role\")) {\n      this.setAttribute(\"role\", \"group\");\n    }\n  }\n  updated(changes) {\n    super.updated(changes);\n    if (changes.has(\"label\")) {\n      if (this.label) {\n        this.setAttribute(\"aria-label\", this.label);\n      } else {\n        this.removeAttribute(\"aria-label\");\n      }\n    }\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], FieldGroup.prototype, \"horizontal\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], FieldGroup.prototype, \"invalid\", 2);\n__decorateClass([\n  property()\n], FieldGroup.prototype, \"label\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], FieldGroup.prototype, \"vertical\", 2);\n//# sourceMappingURL=FieldGroup.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport { conditionAttributeWithId } from \"@spectrum-web-components/base/src/condition-attribute-with-id.js\";\nimport { randomID } from \"@spectrum-web-components/shared/src/random-id.js\";\nexport class HelpTextManager {\n  constructor(host, { mode } = { mode: \"internal\" }) {\n    this.mode = \"internal\";\n    this.handleSlotchange = ({\n      target\n    }) => {\n      this.handleHelpText(target);\n      this.handleNegativeHelpText(target);\n    };\n    this.host = host;\n    this.id = `sp-help-text-${randomID()}`;\n    this.mode = mode;\n  }\n  get isInternal() {\n    return this.mode === \"internal\";\n  }\n  render(negative) {\n    return html`\n            <div\n                id=${ifDefined(this.isInternal ? this.id : void 0)}\n                aria-live=\"assertive\"\n            >\n                <slot\n                    name=${negative ? \"negative-help-text\" : `pass-through-help-text-${randomID()}`}\n                    @slotchange=${this.handleSlotchange}\n                >\n                    <slot name=\"help-text\"></slot>\n                </slot>\n            </div>\n        `;\n  }\n  addId() {\n    const id = this.helpTextElement ? this.helpTextElement.id : this.id;\n    this.conditionId = conditionAttributeWithId(\n      this.host,\n      \"aria-describedby\",\n      id\n    );\n    if (this.host.hasAttribute(\"tabindex\")) {\n      this.previousTabindex = parseFloat(\n        this.host.getAttribute(\"tabindex\")\n      );\n    }\n    this.host.tabIndex = 0;\n  }\n  removeId() {\n    if (this.conditionId) {\n      this.conditionId();\n      delete this.conditionId;\n    }\n    if (this.helpTextElement) return;\n    if (this.previousTabindex) {\n      this.host.tabIndex = this.previousTabindex;\n    } else {\n      this.host.removeAttribute(\"tabindex\");\n    }\n  }\n  handleHelpText(target) {\n    if (this.isInternal) return;\n    if (this.helpTextElement && this.helpTextElement.id === this.id) {\n      this.helpTextElement.removeAttribute(\"id\");\n    }\n    this.removeId();\n    const assignedElements = target.assignedElements();\n    const nextHelpTextElement = assignedElements[0];\n    this.helpTextElement = nextHelpTextElement;\n    if (nextHelpTextElement) {\n      if (!nextHelpTextElement.id) {\n        nextHelpTextElement.id = this.id;\n      }\n      this.addId();\n    }\n  }\n  handleNegativeHelpText(target) {\n    if (target.name !== \"negative-help-text\") return;\n    const assignedElements = target.assignedElements();\n    assignedElements.forEach(\n      (el) => el.variant = \"negative\"\n    );\n  }\n}\n//# sourceMappingURL=HelpTextManager.dev.js.map\n"],"names":[],"sourceRoot":""}