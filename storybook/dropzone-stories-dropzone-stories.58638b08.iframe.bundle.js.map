{"version":3,"file":"dropzone-stories-dropzone-stories.58638b08.iframe.bundle.js","mappings":";;AACA;;AAyGA;AClDA;;AAEA;;;;;;;;;;;;;;;;;;;;;AAuBA;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;AAuBA;AAKA;;;AAKA;;;;;;;;;;;;AAsBA;AACA;AACA;AACA;;;;AAIA;;AAEA;;;;;;;;;;;;;;;;AAgBA;;;;;AAMA;;AAyBA;;ACnMA","sources":["webpack://@adobe/spectrum-web-components/./packages/dropzone/src/Dropzone.dev.js","webpack://@adobe/spectrum-web-components/./packages/dropzone/stories/dropzone.stories.js","webpack://@adobe/spectrum-web-components/./packages/link/src/Link.dev.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport { property } from \"@spectrum-web-components/base/src/decorators.js\";\nimport dropzoneStyles from \"./dropzone.css.js\";\nexport class Dropzone extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this._dropEffect = \"copy\";\n    this.isDragged = false;\n    this.isFilled = false;\n    this.debouncedDragLeave = null;\n  }\n  static get styles() {\n    return [dropzoneStyles];\n  }\n  /**\n   * Controls the feedback (typically visual) the user is given during a drag and drop operation\n   * @attr\n   * @type {'copy' | 'move' | 'link' | 'none'}\n   */\n  get dropEffect() {\n    return this._dropEffect;\n  }\n  set dropEffect(value) {\n    if ([\"copy\", \"move\", \"link\", \"none\"].includes(value)) {\n      this._dropEffect = value;\n    }\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.addEventListener(\"drop\", this.onDrop);\n    this.addEventListener(\"dragover\", this.onDragOver);\n    this.addEventListener(\"dragleave\", this.onDragLeave);\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.removeEventListener(\"drop\", this.onDrop);\n    this.removeEventListener(\"dragover\", this.onDragOver);\n    this.removeEventListener(\"dragleave\", this.onDragLeave);\n  }\n  onDragOver(event) {\n    const shouldAcceptEvent = new CustomEvent(\"sp-dropzone-should-accept\", {\n      bubbles: true,\n      cancelable: true,\n      composed: true,\n      detail: event\n    });\n    const shouldAccept = this.dispatchEvent(shouldAcceptEvent);\n    if (!event.dataTransfer) {\n      return;\n    }\n    if (!shouldAccept) {\n      event.dataTransfer.dropEffect = \"none\";\n      return;\n    }\n    event.preventDefault();\n    this.clearDebouncedDragLeave();\n    this.isDragged = true;\n    event.dataTransfer.dropEffect = this.dropEffect;\n    const dragOverEvent = new CustomEvent(\"sp-dropzone-dragover\", {\n      bubbles: true,\n      composed: true,\n      detail: event\n    });\n    this.dispatchEvent(dragOverEvent);\n  }\n  onDragLeave(event) {\n    this.clearDebouncedDragLeave();\n    this.debouncedDragLeave = window.setTimeout(() => {\n      this.isDragged = false;\n      const dragLeave = new CustomEvent(\"sp-dropzone-dragleave\", {\n        bubbles: true,\n        composed: true,\n        detail: event\n      });\n      this.dispatchEvent(dragLeave);\n    }, 100);\n  }\n  onDrop(event) {\n    event.preventDefault();\n    this.clearDebouncedDragLeave();\n    this.isDragged = false;\n    const dropEvent = new CustomEvent(\"sp-dropzone-drop\", {\n      bubbles: true,\n      composed: true,\n      detail: event\n    });\n    this.dispatchEvent(dropEvent);\n  }\n  render() {\n    return html`\n            <slot></slot>\n        `;\n  }\n  clearDebouncedDragLeave() {\n    if (this.debouncedDragLeave) {\n      clearTimeout(this.debouncedDragLeave);\n      this.debouncedDragLeave = null;\n    }\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true, attribute: \"dragged\" })\n], Dropzone.prototype, \"isDragged\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"filled\" })\n], Dropzone.prototype, \"isFilled\", 2);\n//# sourceMappingURL=Dropzone.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  LitElement\n} from \"@spectrum-web-components/base\";\nimport { defineElement } from \"@spectrum-web-components/base/src/define-element.js\";\nimport { state } from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/dropzone/sp-dropzone.js\";\nimport \"@spectrum-web-components/action-button/sp-action-button.js\";\nimport { illustration } from \"../test/test-svg\";\nimport \"@spectrum-web-components/illustrated-message/sp-illustrated-message.js\";\nimport \"@spectrum-web-components/link/sp-link.js\";\nexport default {\n  component: \"sp-dropzone\",\n  title: \"Dropzone\",\n  args: {\n    isDragged: false,\n    isFilled: false\n  },\n  argTypes: {\n    isDragged: {\n      name: \"isDragged\",\n      type: { name: \"boolean\", required: false },\n      table: {\n        type: { summary: \"boolean\" },\n        defaultValue: { summary: false }\n      },\n      control: {\n        type: \"boolean\"\n      }\n    },\n    isFilled: {\n      name: \"isFilled\",\n      type: { name: \"boolean\", required: false },\n      table: {\n        type: { summary: \"boolean\" },\n        defaultValue: { summary: false }\n      },\n      control: {\n        type: \"boolean\"\n      }\n    }\n  }\n};\nexport const Default = (args) => {\n  return html`\n        <sp-dropzone id=\"dropzone\" tabindex=\"0\" ?dragged=${args.isDragged}>\n            <sp-illustrated-message heading=\"Drag and Drop Your File\">\n                ${illustration}\n            </sp-illustrated-message>\n            <div>\n                <label for=\"file-input\">\n                    <sp-link\n                        href=\"javascript:;\"\n                        onclick=\"this.parentElement.nextElementSibling.click()\"\n                    >\n                        Select a File\n                    </sp-link>\n                    from your computer\n                </label>\n                <input type=\"file\" id=\"file-input\" style=\"display: none\" />\n            </div>\n            <div>\n                or\n                <sp-link href=\"http://stock.adobe.com\" target=\"blank\">\n                    Search Adobe Stock\n                </sp-link>\n            </div>\n        </sp-dropzone>\n    `;\n};\nexport const Dragged = (args) => {\n  return html`\n        <sp-dropzone id=\"dropzone\" tabindex=\"0\" ?dragged=${args.isDragged}>\n            <sp-illustrated-message heading=\"Drag and Drop Your File\">\n                ${illustration}\n            </sp-illustrated-message>\n            <div>\n                <label for=\"file-input\">\n                    <sp-link\n                        href=\"javascript:;\"\n                        onclick=\"this.parentElement.nextElementSibling.click()\"\n                    >\n                        Select a File\n                    </sp-link>\n                    from your computer\n                </label>\n                <input type=\"file\" id=\"file-input\" style=\"display: none\" />\n            </div>\n            <div>\n                or\n                <sp-link href=\"http://stock.adobe.com\" target=\"blank\">\n                    Search Adobe Stock\n                </sp-link>\n            </div>\n        </sp-dropzone>\n    `;\n};\nDragged.args = {\n  isDragged: true\n};\nexport const Filled = (args) => {\n  return html`\n        <sp-dropzone id=\"dropzone\" ?filled=${args.isFilled}>\n            Filled dropzone\n        </sp-dropzone>\n    `;\n};\nFilled.args = {\n  isFilled: true\n};\nclass ControlledDropzone extends LitElement {\n  constructor() {\n    super(...arguments);\n    this.beingDraggedOver = false;\n    this.input = void 0;\n  }\n  render() {\n    return html`\n            <span>\n                <sp-action-button\n                    draggable=\"true\"\n                    style=\"margin-block-end: 16px;\"\n                >\n                    Drag me\n                </sp-action-button>\n                <sp-dropzone\n                    tabindex=\"0\"\n                    id=\"dropzone\"\n                    drop-effect=\"copy\"\n                    ?filled=${this.input !== void 0}\n                    @sp-dropzone-drop=${this.onChange}\n                    @sp-dropzone-dragover=${this.onDragOver}\n                    @sp-dropzone-dragleave=${this.onDragLeave}\n                >\n                    <sp-illustrated-message\n                        style=\"--mod-illustrated-message-display: flex;\"\n                        heading=${this.input !== void 0 ? this.beingDraggedOver ? \"Drop here to replace!\" : \"You dropped something!\" : \"Drag and drop your file\"}\n                    >\n                        ${illustration}\n                    </sp-illustrated-message>\n                    <div>\n                        <label for=\"file-input\">\n                            <sp-link\n                                href=\"javascript:;\"\n                                onclick=\"this.parentElement.nextElementSibling.click()\"\n                            >\n                                Select a File\n                            </sp-link>\n                            from your computer\n                        </label>\n                        <input\n                            type=\"file\"\n                            id=\"file-input\"\n                            style=\"display: none\"\n                            @change=${this.onChange}\n                        />\n                    </div>\n                </sp-dropzone>\n            </span>\n        `;\n  }\n  onChange() {\n    this.input = \"mock-file\";\n    this.beingDraggedOver = false;\n  }\n  onDragOver() {\n    this.beingDraggedOver = true;\n  }\n  onDragLeave() {\n    this.beingDraggedOver = false;\n  }\n}\n__decorateClass([\n  state()\n], ControlledDropzone.prototype, \"beingDraggedOver\", 2);\n__decorateClass([\n  state()\n], ControlledDropzone.prototype, \"input\", 2);\ndefineElement(\"controlled-dropzone\", ControlledDropzone);\nexport const Controlled = () => {\n  return html`\n        <controlled-dropzone></controlled-dropzone>\n    `;\n};\n//# sourceMappingURL=dropzone.stories.js.map\n;export const __namedExportsOrder = [\"Default\",\"Dragged\",\"Filled\",\"Controlled\"];","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { LikeAnchor } from \"@spectrum-web-components/shared/src/like-anchor.js\";\nimport { Focusable } from \"@spectrum-web-components/shared/src/focusable.js\";\nimport linkStyles from \"./link.css.js\";\nexport class Link extends LikeAnchor(Focusable) {\n  constructor() {\n    super(...arguments);\n    this.quiet = false;\n  }\n  static get styles() {\n    return [linkStyles];\n  }\n  get focusElement() {\n    return this.anchorElement;\n  }\n  render() {\n    return this.renderAnchor({ id: \"anchor\" });\n  }\n}\n__decorateClass([\n  query(\"#anchor\")\n], Link.prototype, \"anchorElement\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], Link.prototype, \"variant\", 2);\n__decorateClass([\n  property({ reflect: true, attribute: \"static-color\" })\n], Link.prototype, \"staticColor\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true, attribute: \"quiet\" })\n], Link.prototype, \"quiet\", 2);\n//# sourceMappingURL=Link.dev.js.map\n"],"names":[],"sourceRoot":""}