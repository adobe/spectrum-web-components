{"version":3,"file":"popover-stories-popover-stories.523a734e.iframe.bundle.js","mappings":";;AACA;;AAgEA;;;;AAOA;AAOA;;;AAIA;;;AAKA;;;AAGA;;AAGA;;AAIA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAGA;;AC9GA;AAmGA;AAEA;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAIA;;;;AAcA;;AAEA;AAMA;ACvJA;;AAIA;AAsIA;;;;AC3LA;;;;;;;;;AAwCA;;AAIA;AAEA;;;ACOA;;;AAKA;;;;;AAoBA;AACA;;AAEA;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;AAEA;AACA;;AAIA;AACA;;;AAKA;;;AAGA;;;;;AAKA;;AAEA;;;;;;AAUA","sources":["webpack://@adobe/spectrum-web-components/./packages/dialog/src/Dialog.dev.js","webpack://@adobe/spectrum-web-components/./packages/overlay/src/OverlayTrigger.dev.js","webpack://@adobe/spectrum-web-components/./packages/overlay/stories/index.js","webpack://@adobe/spectrum-web-components/./packages/popover/src/Popover.dev.js","webpack://@adobe/spectrum-web-components/./packages/popover/stories/popover.stories.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/button-group/sp-button-group.js\";\nimport \"@spectrum-web-components/button/sp-close-button.js\";\nimport \"@spectrum-web-components/divider/sp-divider.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js\";\nimport { ObserveSlotPresence } from \"@spectrum-web-components/shared\";\nimport { AlertDialog } from \"@spectrum-web-components/alert-dialog/src/AlertDialog.js\";\nimport { classMap } from \"@spectrum-web-components/base/src/directives.js\";\nimport styles from \"./dialog.css.js\";\nexport class Dialog extends ObserveSlotPresence(AlertDialog, [\n  '[slot=\"hero\"]',\n  '[slot=\"footer\"]',\n  '[slot=\"button\"]'\n]) {\n  constructor() {\n    super(...arguments);\n    this.error = false;\n    this.dismissable = false;\n    this.dismissLabel = \"Close\";\n    this.noDivider = false;\n  }\n  static get styles() {\n    return [styles];\n  }\n  get hasFooter() {\n    return this.getSlotContentPresence('[slot=\"footer\"]');\n  }\n  get hasButtons() {\n    return this.getSlotContentPresence('[slot=\"button\"]');\n  }\n  /* c8 ignore next 3 */\n  get hasHero() {\n    return this.getSlotContentPresence('[slot=\"hero\"]');\n  }\n  close() {\n    this.dispatchEvent(\n      new Event(\"close\", {\n        bubbles: true,\n        composed: true,\n        cancelable: true\n      })\n    );\n  }\n  renderHero() {\n    return html`\n            <slot name=\"hero\"></slot>\n        `;\n  }\n  renderFooter() {\n    return html`\n            <div class=\"footer\">\n                <slot name=\"footer\"></slot>\n            </div>\n        `;\n  }\n  renderButtons() {\n    const classes = {\n      \"button-group\": true,\n      \"button-group--noFooter\": !this.hasFooter\n    };\n    return html`\n            <sp-button-group class=${classMap(classes)}>\n                <slot name=\"button\"></slot>\n            </sp-button-group>\n        `;\n  }\n  renderDismiss() {\n    return html`\n            <sp-close-button\n                class=\"close-button\"\n                label=${this.dismissLabel}\n                quiet\n                size=\"m\"\n                @click=${this.close}\n            ></sp-close-button>\n        `;\n  }\n  render() {\n    return html`\n            <div class=\"grid\">\n                ${this.renderHero()} ${this.renderHeading()}\n                ${this.error ? html`\n                          <sp-icon-alert class=\"type-icon\"></sp-icon-alert>\n                      ` : nothing}\n                ${this.noDivider ? nothing : html`\n                          <sp-divider size=\"m\" class=\"divider\"></sp-divider>\n                      `}\n                ${this.renderContent()}\n                ${this.hasFooter ? this.renderFooter() : nothing}\n                ${this.hasButtons ? this.renderButtons() : nothing}\n                ${this.dismissable ? this.renderDismiss() : nothing}\n            </div>\n        `;\n  }\n  shouldUpdate(changes) {\n    if (changes.has(\"mode\") && !!this.mode) {\n      this.dismissable = false;\n    }\n    if (changes.has(\"dismissable\") && this.dismissable) {\n      this.dismissable = !this.mode;\n    }\n    return super.shouldUpdate(changes);\n  }\n  firstUpdated(changes) {\n    super.firstUpdated(changes);\n    this.setAttribute(\"role\", \"dialog\");\n  }\n  updated(changes) {\n    super.updated(changes);\n  }\n}\n__decorateClass([\n  query(\".close-button\")\n], Dialog.prototype, \"closeButton\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Dialog.prototype, \"error\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Dialog.prototype, \"dismissable\", 2);\n__decorateClass([\n  property({ type: String, reflect: true, attribute: \"dismiss-label\" })\n], Dialog.prototype, \"dismissLabel\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true, attribute: \"no-divider\" })\n], Dialog.prototype, \"noDivider\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], Dialog.prototype, \"mode\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], Dialog.prototype, \"size\", 2);\n//# sourceMappingURL=Dialog.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query,\n  state\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/overlay/sp-overlay.js\";\nimport overlayTriggerStyles from \"./overlay-trigger.css.js\";\nexport class OverlayTrigger extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.offset = 6;\n    this.disabled = false;\n    this.receivesFocus = \"auto\";\n    this.clickContent = [];\n    this.longpressContent = [];\n    this.hoverContent = [];\n    this.targetContent = [];\n  }\n  static get styles() {\n    return [overlayTriggerStyles];\n  }\n  getAssignedElementsFromSlot(slot) {\n    return slot.assignedElements({ flatten: true });\n  }\n  handleTriggerContent(event) {\n    this.targetContent = this.getAssignedElementsFromSlot(event.target);\n  }\n  handleSlotContent(event) {\n    switch (event.target.name) {\n      case \"click-content\":\n        this.clickContent = this.getAssignedElementsFromSlot(\n          event.target\n        );\n        break;\n      case \"longpress-content\":\n        this.longpressContent = this.getAssignedElementsFromSlot(\n          event.target\n        );\n        break;\n      case \"hover-content\":\n        this.hoverContent = this.getAssignedElementsFromSlot(\n          event.target\n        );\n        break;\n    }\n  }\n  handleBeforetoggle(event) {\n    const { target } = event;\n    let type;\n    if (target === this.clickOverlayElement) {\n      type = \"click\";\n    } else if (target === this.longpressOverlayElement) {\n      type = \"longpress\";\n    } else if (target === this.hoverOverlayElement) {\n      type = \"hover\";\n    } else {\n      return;\n    }\n    if (event.newState === \"open\") {\n      this.open = type;\n    } else if (this.open === type) {\n      this.open = void 0;\n    }\n  }\n  update(changes) {\n    var _a, _b, _c, _d, _e, _f;\n    if (changes.has(\"clickContent\")) {\n      this.clickPlacement = ((_a = this.clickContent[0]) == null ? void 0 : _a.getAttribute(\"placement\")) || ((_b = this.clickContent[0]) == null ? void 0 : _b.getAttribute(\n        \"direction\"\n      )) || void 0;\n    }\n    if (changes.has(\"hoverContent\")) {\n      this.hoverPlacement = ((_c = this.hoverContent[0]) == null ? void 0 : _c.getAttribute(\"placement\")) || ((_d = this.hoverContent[0]) == null ? void 0 : _d.getAttribute(\n        \"direction\"\n      )) || void 0;\n    }\n    if (changes.has(\"longpressContent\")) {\n      this.longpressPlacement = ((_e = this.longpressContent[0]) == null ? void 0 : _e.getAttribute(\"placement\")) || ((_f = this.longpressContent[0]) == null ? void 0 : _f.getAttribute(\n        \"direction\"\n      )) || void 0;\n    }\n    super.update(changes);\n  }\n  renderSlot(name) {\n    return html`\n            <slot name=${name} @slotchange=${this.handleSlotContent}></slot>\n        `;\n  }\n  renderClickOverlay() {\n    var _a;\n    const slot = this.renderSlot(\"click-content\");\n    const clickOverlay = html`\n            <sp-overlay\n                id=\"click-overlay\"\n                ?disabled=${this.disabled || !this.clickContent.length}\n                ?open=${this.open === \"click\" && !!this.clickContent.length}\n                .offset=${this.offset}\n                .placement=${this.clickPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${\"click\"}\n                .type=${this.type !== \"modal\" ? \"auto\" : \"modal\"}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n        `;\n    if ((_a = this.triggeredBy) == null ? void 0 : _a.includes(\"click\")) {\n      return clickOverlay;\n    }\n    if (!this.clickContent.length) {\n      return slot;\n    } else {\n      return clickOverlay;\n    }\n  }\n  renderHoverOverlay() {\n    var _a;\n    const slot = this.renderSlot(\"hover-content\");\n    const hoverOverlay = html`\n            <sp-overlay\n                id=\"hover-overlay\"\n                ?open=${this.open === \"hover\" && !!this.hoverContent.length}\n                ?disabled=${this.disabled || !this.hoverContent.length || !!this.open && this.open !== \"hover\"}\n                .offset=${this.offset}\n                .placement=${this.hoverPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${\"hover\"}\n                .type=${\"hint\"}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n        `;\n    if ((_a = this.triggeredBy) == null ? void 0 : _a.includes(\"hover\")) {\n      return hoverOverlay;\n    }\n    if (!this.hoverContent.length) {\n      return slot;\n    } else {\n      return hoverOverlay;\n    }\n  }\n  renderLongpressOverlay() {\n    var _a;\n    const slot = this.renderSlot(\"longpress-content\");\n    const longpressOverlay = html`\n            <sp-overlay\n                id=\"longpress-overlay\"\n                ?disabled=${this.disabled || !this.longpressContent.length}\n                ?open=${this.open === \"longpress\" && !!this.longpressContent.length}\n                .offset=${this.offset}\n                .placement=${this.longpressPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${\"longpress\"}\n                .type=${\"auto\"}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n            <slot name=\"longpress-describedby-descriptor\"></slot>\n        `;\n    if ((_a = this.triggeredBy) == null ? void 0 : _a.includes(\"longpress\")) {\n      return longpressOverlay;\n    }\n    if (!this.longpressContent.length) {\n      return slot;\n    } else {\n      return longpressOverlay;\n    }\n  }\n  render() {\n    return html`\n            <slot\n                id=\"trigger\"\n                name=\"trigger\"\n                @slotchange=${this.handleTriggerContent}\n            ></slot>\n            ${[\n      this.renderClickOverlay(),\n      this.renderHoverOverlay(),\n      this.renderLongpressOverlay()\n    ]}\n        `;\n  }\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (!this.triggeredBy) {\n      const issues = [\n        \"You have not specified the `triggeredBy` property. For optimal performance, consider explicitly declaring which overlay types you plan to use.\",\n        'Example: triggered-by=\"click hover\"',\n        \"This helps avoid unnecessary DOM operations and potential race conditions.\"\n      ];\n      window.__swc.warn(\n        this,\n        \"Performance optimization available for <overlay-trigger>:\",\n        \"https://opensource.adobe.com/spectrum-web-components/components/overlay-trigger/#performance-optimization\",\n        { issues }\n      );\n    }\n    if (this.disabled && changedProperties.has(\"disabled\")) {\n      this.open = void 0;\n      return;\n    }\n  }\n  async getUpdateComplete() {\n    const complete = await super.getUpdateComplete();\n    return complete;\n  }\n}\n__decorateClass([\n  property({ attribute: \"triggered-by\" })\n], OverlayTrigger.prototype, \"triggeredBy\", 2);\n__decorateClass([\n  property({ reflect: true })\n], OverlayTrigger.prototype, \"placement\", 2);\n__decorateClass([\n  property()\n], OverlayTrigger.prototype, \"type\", 2);\n__decorateClass([\n  property({ type: Number })\n], OverlayTrigger.prototype, \"offset\", 2);\n__decorateClass([\n  property({ reflect: true })\n], OverlayTrigger.prototype, \"open\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], OverlayTrigger.prototype, \"disabled\", 2);\n__decorateClass([\n  property({ attribute: \"receives-focus\" })\n], OverlayTrigger.prototype, \"receivesFocus\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"clickContent\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"longpressContent\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"hoverContent\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"targetContent\", 2);\n__decorateClass([\n  query(\"#click-overlay\", true)\n], OverlayTrigger.prototype, \"clickOverlayElement\", 2);\n__decorateClass([\n  query(\"#longpress-overlay\", true)\n], OverlayTrigger.prototype, \"longpressOverlayElement\", 2);\n__decorateClass([\n  query(\"#hover-overlay\", true)\n], OverlayTrigger.prototype, \"hoverOverlayElement\", 2);\n//# sourceMappingURL=OverlayTrigger.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nfunction nextFrame() {\n  return new Promise((res) => requestAnimationFrame(() => res()));\n}\nclass IsOverlayOpen extends HTMLElement {\n  constructor() {\n    super();\n    this.sendFocus = async () => {\n      var _a;\n      const selectedItem = (_a = document.querySelector(\"[focusable]\")) == null ? void 0 : _a.querySelector(\"[selected]\");\n      if (selectedItem) {\n        selectedItem.focus();\n        selectedItem.focused = true;\n        await nextFrame();\n        selectedItem.scrollIntoView({ block: \"start\" });\n        await nextFrame();\n      }\n    };\n    this.handleOpened = async (event) => {\n      const overlay = event.target;\n      const actions = [nextFrame(), overlay.updateComplete, this.sendFocus()];\n      await Promise.all(actions);\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      this.ready(true);\n    };\n    this.readyPromise = Promise.resolve(false);\n    this.readyPromise = new Promise((res) => {\n      this.ready = res;\n      this.setup();\n    });\n  }\n  async setup() {\n    await nextFrame();\n    document.addEventListener(\"sp-opened\", this.handleOpened);\n  }\n  get updateComplete() {\n    return this.readyPromise;\n  }\n  // remove event listeners in disconnectCallback\n  disconnectedCallback() {\n    document.removeEventListener(\"sp-opened\", this.handleOpened);\n  }\n}\ncustomElements.define(\"is-overlay-open\", IsOverlayOpen);\nexport const isOverlayOpen = (story) => {\n  return html`\n        ${story()}\n        <is-overlay-open></is-overlay-open>\n    `;\n};\nclass AreIconsPresent extends HTMLElement {\n  constructor() {\n    super();\n    this.overlayTimeout = null;\n    this.sendFocus = async () => {\n      var _a;\n      const selectedItem = (_a = document.querySelector(\"[focusable]\")) == null ? void 0 : _a.querySelector(\"[selected]\");\n      if (selectedItem) {\n        selectedItem.focus();\n        selectedItem.focused = true;\n        await nextFrame();\n        selectedItem.scrollIntoView({ block: \"start\" });\n        await nextFrame();\n      }\n    };\n    this.handleOpened = async (event) => {\n      if (this.overlayTimeout) {\n        clearTimeout(this.overlayTimeout);\n        this.overlayTimeout = null;\n      }\n      const overlay = event.target;\n      const actions = [nextFrame(), overlay.updateComplete, this.sendFocus()];\n      await Promise.all(actions);\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      this.checkIcons();\n    };\n    this.checkIcons = async () => {\n      const icons = [...document.querySelectorAll(\"sp-icon\")];\n      const picker = document.querySelector(\"sp-picker\");\n      if (picker) {\n        const pickerIcon = picker.querySelector(\"sp-icon\");\n        if (pickerIcon) {\n          icons.push(pickerIcon);\n        }\n      }\n      const iconLoadPromises = Array.from(icons).map((icon) => {\n        return new Promise((resolve) => {\n          var _a;\n          if (\"updateComplete\" in icon && typeof ((_a = icon.updateComplete) == null ? void 0 : _a.then) === \"function\") {\n            icon.updateComplete.then(() => {\n              resolve();\n            });\n            return;\n          }\n          const src = icon.getAttribute(\"src\");\n          if (!src) {\n            const imgElement2 = icon.querySelector(\"img\");\n            if (imgElement2) {\n              if (imgElement2.complete) {\n                resolve();\n              } else {\n                imgElement2.addEventListener(\n                  \"load\",\n                  () => {\n                    resolve();\n                  },\n                  { once: true }\n                );\n                imgElement2.addEventListener(\n                  \"error\",\n                  () => {\n                    console.warn(`Failed to load icon image`);\n                    resolve();\n                  },\n                  { once: true }\n                );\n              }\n              return;\n            }\n            resolve();\n            return;\n          }\n          const imgElement = icon.querySelector(\"img\");\n          if (imgElement) {\n            if (imgElement.complete) {\n              resolve();\n            } else {\n              imgElement.addEventListener(\n                \"load\",\n                () => {\n                  resolve();\n                },\n                { once: true }\n              );\n              imgElement.addEventListener(\n                \"error\",\n                () => {\n                  console.warn(\n                    `Failed to load icon image: ${src}`\n                  );\n                  resolve();\n                },\n                { once: true }\n              );\n            }\n            return;\n          }\n          const img = new Image();\n          img.onload = () => resolve();\n          img.onerror = () => {\n            console.warn(`Failed to load icon: ${src}`);\n            resolve();\n          };\n          img.src = src;\n        });\n      });\n      await Promise.all(iconLoadPromises);\n      await nextFrame();\n      this.ready(true);\n    };\n    this.readyPromise = Promise.resolve(false);\n    this.readyPromise = new Promise((res) => {\n      this.ready = res;\n      this.setup();\n    });\n  }\n  async setup() {\n    await nextFrame();\n    document.addEventListener(\"sp-opened\", this.handleOpened);\n  }\n  get updateComplete() {\n    return this.readyPromise;\n  }\n  // remove event listeners in disconnectCallback\n  disconnectedCallback() {\n    document.removeEventListener(\"sp-opened\", this.handleOpened);\n  }\n}\ncustomElements.define(\"are-icons-present\", AreIconsPresent);\nexport const areIconsPresent = (story) => {\n  return html`\n        ${story()}\n        <are-icons-present></are-icons-present>\n    `;\n};\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport popoverStyles from \"./popover.css.js\";\nexport class Popover extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.open = false;\n    this.tip = false;\n  }\n  static get styles() {\n    return [popoverStyles];\n  }\n  renderTip() {\n    return html`\n            <div id=\"tip\" aria-hidden=\"true\">\n                <svg class=\"tip block\" viewBox=\"0 -0.5 16 9\">\n                    <path class=\"triangle\" d=\"M-1,-1 8,8 17,-1\"></path>\n                </svg>\n                <svg class=\"tip inline\" viewBox=\"0 -0.5 9 16\">\n                    <path class=\"triangle\" d=\"M-1,-1 8,8 -1,17\"></path>\n                </svg>\n            </div>\n        `;\n  }\n  render() {\n    return html`\n            <slot></slot>\n            ${this.tip ? this.renderTip() : nothing}\n        `;\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Popover.prototype, \"open\", 2);\n__decorateClass([\n  property({ reflect: true })\n], Popover.prototype, \"placement\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Popover.prototype, \"tip\", 2);\n__decorateClass([\n  query(\"#tip\")\n], Popover.prototype, \"tipElement\", 2);\n//# sourceMappingURL=Popover.dev.js.map\n","\"use strict\";\nimport \"@spectrum-web-components/popover/sp-popover.js\";\nimport { html } from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/overlay/overlay-trigger.js\";\nimport \"@spectrum-web-components/dialog/sp-dialog.js\";\nimport \"@spectrum-web-components/button/sp-button.js\";\nimport { ifDefined } from \"@spectrum-web-components/base/src/directives.js\";\nimport { isOverlayOpen } from \"../../overlay/stories/index.js\";\nimport \"../../overlay/stories/index.js\";\nexport default {\n  component: \"sp-popover\",\n  title: \"Popover\",\n  argTypes: {\n    open: {\n      name: \"open\",\n      type: { name: \"boolean\", required: false },\n      description: \"Whether the popover is open or not.\",\n      table: {\n        type: { summary: \"boolean\" },\n        defaultValue: { summary: false }\n      },\n      control: \"boolean\"\n    },\n    placement: {\n      name: \"placement\",\n      type: { name: \"string\", required: false },\n      description: \"The placement of the popover content in relation to the tip\",\n      table: {\n        type: { summary: \"string\" },\n        defaultValue: { summary: \"none\" }\n      },\n      control: \"text\"\n    },\n    tip: {\n      name: \"tip\",\n      description: \"Whether the popover has a tip.\",\n      type: { name: \"boolean\", required: false },\n      table: {\n        type: { summary: \"boolean\" },\n        defaultValue: { summary: false }\n      },\n      control: \"boolean\"\n    }\n  },\n  args: {\n    open: true,\n    placement: \"none\",\n    tip: false\n  }\n};\nexport const Default = ({ content }) => {\n  return html`\n        <div style=\"color: var(--spectrum-gray-800)\">\n            <sp-popover variant=\"default\" open style=\"max-width: 320px\">\n                <div style=\"font-size: 14px; padding: 10px\">${content}</div>\n            </sp-popover>\n        </div>\n    `;\n};\nDefault.args = {\n  content: \"The quick brown fox jumps over the lazy dog\"\n};\nDefault.argTypes = {\n  content: {\n    name: \"content\",\n    type: { name: \"string\", required: false },\n    table: {\n      type: { summary: \"string\" },\n      defaultValue: { summary: \"\" }\n    },\n    control: \"text\"\n  }\n};\nconst Template = ({ tip, placement, open }) => {\n  return html`\n        <div\n            style=\"color: var(--spectrum-gray-800); position: relative; display: contents\"\n        >\n            <sp-popover\n                placement=${placement}\n                ?open=${open}\n                style=\" max-width: 320px\"\n                .tip=\"${tip}\"\n            >\n                <sp-dialog size=\"s\">\n                    <h2 slot=\"heading\">Popover Title</h2>\n                    Cupcake ipsum dolor sit amet jelly beans. Chocolate jelly\n                    caramels. Icing soufflé chupa chups donut cheesecake.\n                    Jelly-o chocolate cake sweet roll cake danish candy biscuit\n                    halvah\n                </sp-dialog>\n            </sp-popover>\n        </div>\n    `;\n};\nexport const dialogTop = (args) => Template(args);\ndialogTop.args = {\n  tip: true,\n  placement: \"top\"\n};\nexport const dialogRight = (args) => Template(args);\ndialogRight.args = {\n  tip: true,\n  placement: \"right\"\n};\nexport const dialogBottom = (args) => Template(args);\ndialogBottom.args = {\n  tip: true,\n  placement: \"bottom\"\n};\nexport const dialogLeft = (args) => Template(args);\ndialogLeft.args = {\n  tip: true,\n  placement: \"left\"\n};\nconst overlayStyles = html`\n    <style>\n        html,\n        body,\n        #root,\n        #root-inner,\n        sp-story-decorator {\n            height: 100%;\n            margin: 0;\n        }\n\n        sp-story-decorator > div {\n            display: contents;\n        }\n\n        sp-story-decorator::part(container) {\n            display: flex;\n            flex-direction: column;\n            width: 100%;\n            height: 100%;\n            align-items: center;\n            justify-content: center;\n        }\n\n        overlay-trigger {\n            flex: none;\n            margin: 24px 0;\n        }\n    </style>\n`;\nconst overlaid = (openPlacement) => {\n  return html`\n        ${overlayStyles}\n        ${[\"bottom\", \"left\", \"right\", \"top\"].map(\n    (placement) => {\n      return html`\n                    <overlay-trigger\n                        placement=\"${placement}-start\"\n                        open=${ifDefined(\n        openPlacement === placement ? \"click\" : void 0\n      )}\n                    >\n                        <sp-button\n                            label=\"${placement}-start test\"\n                            slot=\"trigger\"\n                        >\n                            Click for ${placement}-start popover\n                        </sp-button>\n                        <sp-popover tip slot=\"click-content\">\n                            <sp-dialog style=\"--mod-dialog-min-inline-size: 0;\">\n                                <h2 slot=\"heading\">\n                                    Popover ${placement}-start\n                                </h2>\n                                This popover is on the ${placement}-start of its\n                                button.\n                            </sp-dialog>\n                        </sp-popover>\n                    </overlay-trigger>\n                `;\n    }\n  )}\n    `;\n};\nexport const overlaidTop = () => overlaid(\"top\");\noverlaidTop.decorators = [isOverlayOpen];\nexport const overlaidRight = () => overlaid(\"right\");\noverlaidRight.decorators = [isOverlayOpen];\nexport const overlaidBottom = () => overlaid(\"bottom\");\noverlaidBottom.decorators = [isOverlayOpen];\nexport const overlaidLeft = () => overlaid(\"left\");\noverlaidLeft.decorators = [isOverlayOpen];\n//# sourceMappingURL=popover.stories.js.map\n;export const __namedExportsOrder = [\"Default\",\"dialogTop\",\"dialogRight\",\"dialogBottom\",\"dialogLeft\",\"overlaidTop\",\"overlaidRight\",\"overlaidBottom\",\"overlaidLeft\"];"],"names":[],"sourceRoot":""}