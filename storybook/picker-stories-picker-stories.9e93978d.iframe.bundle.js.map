{"version":3,"file":"picker-stories-picker-stories.9e93978d.iframe.bundle.js","mappings":";;AACA;;AAgEA;;;;AAOA;AAOA;;;AAIA;;;AAKA;;;AAGA;;AAGA;;AAIA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAGA;;AC7GA;AACA;;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;;ACEA;AACA;;AAEA;;;AAGA;;;;;;;;;;;;;;ACRA;;ACEA;AACA;;AAEA;;;AAGA;;;;;;ACRA;;ACEA;;AAEA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;;AAEA;AACA;;;AAGA;;;;;;;ACNA;;AAEA;AACA;;;AAGA;;;;;;;ACPA;;ACAA;AAmGA;AAEA;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAIA;;;;AAcA;;AAEA;AAMA;ACvJA;;AAIA;AAsIA;;;AC/HA;;;;;AAKA;;AAEA;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;AAKA;;;;;;AAMA;;;;;;AAMA;;;;;;;;;;;;AAYA;;;;;;AAQA;AAWA;;;;;AAKA;;AAEA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;AAgBA;;;;AASA;;;;;;AAMA;;AAEA;;;;;;;;;;;;;;;;;;AAoBA;;AAGA;;AAEA;;;;;;;;;;;;;;;;;;AAoBA;AAEA;;;;;;;;;;;;;;;;;;AAoBA;AAEA;;;;AAIA;;AAEA;;;;;;;;;;;;;;;AAiBA;;;;AAQA;;;;;AAKA;;AAEA;;;;;;;;;;;;;;;AAiBA;AAKA;;;;AAIA;;AAEA;;;;;;;;;;;;;;;;;AAmBA;AAEA;;;;AAIA;;AAEA;;;;;;;;;;;;;;;;;;AAoBA;AAMA;;;;AAIA;;AAEA;;;;;;;;;;;;;;;;;;;AAqBA;AAEA;;;;AAIA;;AAEA;;;;;;;;;;;;;;;AAiBA;;;;;AAUA;;;;AAIA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;AAiBA;;;;;;;;;AAiBA;;;;;;AAMA;AACA;;;;;;;;;;;;;;AAcA;;;;;;AAMA;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;;;;;;AAMA;AACA;;;;;;;;;;;;;;AAcA;;;;;;AAMA;;;;;;;;AAUA;AAaA;;;;;AAKA;;AAEA;;;;;;;;;;;;AAcA;;AAGA;;;AAGA;;;;;;;;;;;;AAcA;AAGA;;;;;AAKA;;;AAGA;AAVA;;AAaA;;AAGA;AACA;AAjBA;;AAoBA;;;;;;;;;;;AAcA;;;;;;;;AAaA;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6EA;ACxzBA;;;;;AAKA;;AAEA;;;;;;;;;;;ACpBA;;;;;;;;;AAwCA;;AAIA;AAEA","sources":["webpack://@adobe/spectrum-web-components/./packages/dialog/src/Dialog.dev.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons-s2/Copy.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/elements/IconCopy.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons-s2/Delete.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/elements/IconDelete.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons-s2/Edit.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/elements/IconEdit.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons/Copy.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons/Delete.js","webpack://@adobe/spectrum-web-components/./packages/icons-workflow/src/icons/Edit.js","webpack://@adobe/spectrum-web-components/./packages/link/src/Link.dev.js","webpack://@adobe/spectrum-web-components/./packages/overlay/src/OverlayTrigger.dev.js","webpack://@adobe/spectrum-web-components/./packages/overlay/stories/index.js","webpack://@adobe/spectrum-web-components/./packages/picker/stories/picker.stories.js","webpack://@adobe/spectrum-web-components/./packages/picker/stories/template.js","webpack://@adobe/spectrum-web-components/./packages/popover/src/Popover.dev.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/button-group/sp-button-group.js\";\nimport \"@spectrum-web-components/button/sp-close-button.js\";\nimport \"@spectrum-web-components/divider/sp-divider.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js\";\nimport { ObserveSlotPresence } from \"@spectrum-web-components/shared\";\nimport { AlertDialog } from \"@spectrum-web-components/alert-dialog/src/AlertDialog.js\";\nimport { classMap } from \"@spectrum-web-components/base/src/directives.js\";\nimport styles from \"./dialog.css.js\";\nexport class Dialog extends ObserveSlotPresence(AlertDialog, [\n  '[slot=\"hero\"]',\n  '[slot=\"footer\"]',\n  '[slot=\"button\"]'\n]) {\n  constructor() {\n    super(...arguments);\n    this.error = false;\n    this.dismissable = false;\n    this.dismissLabel = \"Close\";\n    this.noDivider = false;\n  }\n  static get styles() {\n    return [styles];\n  }\n  get hasFooter() {\n    return this.getSlotContentPresence('[slot=\"footer\"]');\n  }\n  get hasButtons() {\n    return this.getSlotContentPresence('[slot=\"button\"]');\n  }\n  /* c8 ignore next 3 */\n  get hasHero() {\n    return this.getSlotContentPresence('[slot=\"hero\"]');\n  }\n  close() {\n    this.dispatchEvent(\n      new Event(\"close\", {\n        bubbles: true,\n        composed: true,\n        cancelable: true\n      })\n    );\n  }\n  renderHero() {\n    return html`\n            <slot name=\"hero\"></slot>\n        `;\n  }\n  renderFooter() {\n    return html`\n            <div class=\"footer\">\n                <slot name=\"footer\"></slot>\n            </div>\n        `;\n  }\n  renderButtons() {\n    const classes = {\n      \"button-group\": true,\n      \"button-group--noFooter\": !this.hasFooter\n    };\n    return html`\n            <sp-button-group class=${classMap(classes)}>\n                <slot name=\"button\"></slot>\n            </sp-button-group>\n        `;\n  }\n  renderDismiss() {\n    return html`\n            <sp-close-button\n                class=\"close-button\"\n                label=${this.dismissLabel}\n                quiet\n                size=\"m\"\n                @click=${this.close}\n            ></sp-close-button>\n        `;\n  }\n  render() {\n    return html`\n            <div class=\"grid\">\n                ${this.renderHero()} ${this.renderHeading()}\n                ${this.error ? html`\n                          <sp-icon-alert class=\"type-icon\"></sp-icon-alert>\n                      ` : nothing}\n                ${this.noDivider ? nothing : html`\n                          <sp-divider size=\"m\" class=\"divider\"></sp-divider>\n                      `}\n                ${this.renderContent()}\n                ${this.hasFooter ? this.renderFooter() : nothing}\n                ${this.hasButtons ? this.renderButtons() : nothing}\n                ${this.dismissable ? this.renderDismiss() : nothing}\n            </div>\n        `;\n  }\n  shouldUpdate(changes) {\n    if (changes.has(\"mode\") && !!this.mode) {\n      this.dismissable = false;\n    }\n    if (changes.has(\"dismissable\") && this.dismissable) {\n      this.dismissable = !this.mode;\n    }\n    return super.shouldUpdate(changes);\n  }\n  firstUpdated(changes) {\n    super.firstUpdated(changes);\n    this.setAttribute(\"role\", \"dialog\");\n  }\n  updated(changes) {\n    super.updated(changes);\n  }\n}\n__decorateClass([\n  query(\".close-button\")\n], Dialog.prototype, \"closeButton\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Dialog.prototype, \"error\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Dialog.prototype, \"dismissable\", 2);\n__decorateClass([\n  property({ type: String, reflect: true, attribute: \"dismiss-label\" })\n], Dialog.prototype, \"dismissLabel\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true, attribute: \"no-divider\" })\n], Dialog.prototype, \"noDivider\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], Dialog.prototype, \"mode\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], Dialog.prototype, \"size\", 2);\n//# sourceMappingURL=Dialog.dev.js.map\n","\"use strict\";import{tag as o}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const CopyIcon=({width:r=24,height:l=24,hidden:t=!1,title:c=\"Copy\"}={})=>o`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"${r}\"\n    height=\"${l}\"\n    viewBox=\"0 0 20 20\"\n    aria-hidden=${t?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${c}\"\n  >\n    <path\n      d=\"m11.75,18h-7.5c-1.24023,0-2.25-1.00977-2.25-2.25v-7.5c0-1.24023,1.00977-2.25,2.25-2.25.41406,0,.75.33594.75.75s-.33594.75-.75.75c-.41309,0-.75.33691-.75.75v7.5c0,.41309.33691.75.75.75h7.5c.41309,0,.75-.33691.75-.75,0-.41406.33594-.75.75-.75s.75.33594.75.75c0,1.24023-1.00977,2.25-2.25,2.25Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"m6.75,5c-.41406,0-.75-.33594-.75-.75,0-1.24023,1.00977-2.25,2.25-2.25.41406,0,.75.33594.75.75s-.33594.75-.75.75c-.41309,0-.75.33691-.75.75,0,.41406-.33594.75-.75.75Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"m13,3.5h-2c-.41406,0-.75-.33594-.75-.75s.33594-.75.75-.75h2c.41406,0,.75.33594.75.75s-.33594.75-.75.75Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"m13,14h-2c-.41406,0-.75-.33594-.75-.75s.33594-.75.75-.75h2c.41406,0,.75.33594.75.75s-.33594.75-.75.75Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"m15.75,14c-.41406,0-.75-.33594-.75-.75s.33594-.75.75-.75c.41309,0,.75-.33691.75-.75,0-.41406.33594-.75.75-.75s.75.33594.75.75c0,1.24023-1.00977,2.25-2.25,2.25Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"m17.25,5c-.41406,0-.75-.33594-.75-.75,0-.41309-.33691-.75-.75-.75-.41406,0-.75-.33594-.75-.75s.33594-.75.75-.75c1.24023,0,2.25,1.00977,2.25,2.25,0,.41406-.33594.75-.75.75Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"m17.25,9.75c-.41406,0-.75-.33594-.75-.75v-2c0-.41406.33594-.75.75-.75s.75.33594.75.75v2c0,.41406-.33594.75-.75.75Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"m6.75,9.75c-.41406,0-.75-.33594-.75-.75v-2c0-.41406.33594-.75.75-.75s.75.33594.75.75v2c0,.41406-.33594.75-.75.75Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"m8.25,14c-1.24023,0-2.25-1.00977-2.25-2.25,0-.41406.33594-.75.75-.75s.75.33594.75.75c0,.41309.33691.75.75.75.41406,0,.75.33594.75.75s-.33594.75-.75.75Z\"\n      fill=\"currentColor\"\n    />\n  </svg>`;\n//# sourceMappingURL=Copy.js.map\n","\"use strict\";import{html as e}from\"@spectrum-web-components/base\";import{IconBase as t}from\"@spectrum-web-components/icon\";import{setCustomTemplateLiteralTag as r}from\"../custom-tag.js\";import{CopyIcon as o}from\"../icons-s2/Copy.js\";import{CopyIcon as l}from\"../icons/Copy.js\";export class IconCopy extends t{render(){return r(e),this.spectrumVersion===2?o({hidden:!this.label,title:this.label}):l({hidden:!this.label,title:this.label})}}\n//# sourceMappingURL=IconCopy.js.map\n","\"use strict\";import{tag as c}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const DeleteIcon=({width:l=24,height:e=24,hidden:t=!1,title:r=\"Delete\"}={})=>c`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"${l}\"\n    height=\"${e}\"\n    viewBox=\"0 0 20 20\"\n    aria-hidden=${t?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${r}\"\n  >\n    <path\n      d=\"m8.24902,15.02148c-.40039,0-.7334-.31738-.74805-.7207l-.25-6.5c-.0166-.41406.30664-.7627.71973-.77832.01074-.00098.02051-.00098.03027-.00098.40039,0,.7334.31738.74805.7207l.25,6.5c.0166.41406-.30664.7627-.71973.77832-.01074.00098-.02051.00098-.03027.00098Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"m11.75098,15.02148c-.00977,0-.01953,0-.03027-.00098-.41309-.01562-.73633-.36426-.71973-.77832l.25-6.5c.01465-.40332.34766-.7207.74805-.7207.00977,0,.01953,0,.03027.00098.41309.01562.73633.36426.71973.77832l-.25,6.5c-.01465.40332-.34766.7207-.74805.7207Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"m17,4h-3.5v-.75c0-1.24023-1.00977-2.25-2.25-2.25h-2.5c-1.24023,0-2.25,1.00977-2.25,2.25v.75h-3.5c-.41406,0-.75.33594-.75.75s.33594.75.75.75h.52002l.42236,10.3418c.04785,1.20996,1.03613,2.1582,2.24805,2.1582h7.61914c1.21191,0,2.2002-.94824,2.24805-2.1582l.42236-10.3418h.52002c.41406,0,.75-.33594.75-.75s-.33594-.75-.75-.75Zm-9-.75c0-.41309.33691-.75.75-.75h2.5c.41309,0,.75.33691.75.75v.75h-4v-.75Zm6.55957,12.53125c-.0166.40332-.3457.71875-.75.71875h-7.61914c-.4043,0-.7334-.31543-.75-.71875l-.41968-10.28125h9.9585l-.41968,10.28125Z\"\n      fill=\"currentColor\"\n    />\n  </svg>`;\n//# sourceMappingURL=Delete.js.map\n","\"use strict\";import{html as e}from\"@spectrum-web-components/base\";import{IconBase as t}from\"@spectrum-web-components/icon\";import{setCustomTemplateLiteralTag as l}from\"../custom-tag.js\";import{DeleteIcon as r}from\"../icons-s2/Delete.js\";import{DeleteIcon as o}from\"../icons/Delete.js\";export class IconDelete extends t{render(){return l(e),this.spectrumVersion===2?r({hidden:!this.label,title:this.label}):o({hidden:!this.label,title:this.label})}}\n//# sourceMappingURL=IconDelete.js.map\n","\"use strict\";import{tag as a}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const EditIcon=({width:t=24,height:l=24,hidden:e=!1,title:r=\"Edit\"}={})=>a`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"${t}\"\n    height=\"${l}\"\n    viewBox=\"0 0 20 20\"\n    aria-hidden=${e?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${r}\"\n  >\n    <path\n      d=\"m17.78076,1.75684c-1.27197-1.04102-3.22705-.89844-4.4502.32324L3.07764,12.33398c-.32031.31934-.55859.7168-.68896,1.15039l-1.38428,4.58398c-.08008.26465-.00781.55176.1875.74707.14258.14258.33447.21973.53027.21973.07227,0,.14551-.01074.2168-.03223l4.58252-1.38379c.43359-.12988.83154-.36816,1.15088-.68848,0,0,10.16846-10.16797,10.35547-10.35547.64795-.64746.99316-1.54492.94775-2.45996-.0459-.91504-.48145-1.77539-1.19482-2.3584ZM2.84473,17.16309l.97998-3.24609c.02716-.09033.06714-.17578.11377-.25732l2.40869,2.40918c-.08154.04639-.16718.08643-.25781.11377l-3.24463.98047Zm14.12158-11.64746c-.15472.15552-7.09985,7.1001-9.52545,9.52588l-2.47461-2.4751L14.39111,3.14062c.38623-.38672.896-.58594,1.38965-.58594.38086,0,.75244.11914,1.05029.3623.3916.32129.62109.77246.646,1.27246.0249.49316-.16113.97656-.51074,1.32617Z\"\n      fill=\"currentColor\"\n    />\n  </svg>`;\n//# sourceMappingURL=Edit.js.map\n","\"use strict\";import{html as e}from\"@spectrum-web-components/base\";import{IconBase as t}from\"@spectrum-web-components/icon\";import{setCustomTemplateLiteralTag as r}from\"../custom-tag.js\";import{EditIcon as l}from\"../icons-s2/Edit.js\";import{EditIcon as i}from\"../icons/Edit.js\";export class IconEdit extends t{render(){return r(e),this.spectrumVersion===2?l({hidden:!this.label,title:this.label}):i({hidden:!this.label,title:this.label})}}\n//# sourceMappingURL=IconEdit.js.map\n","\"use strict\";import{tag as i}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const CopyIcon=({width:t=24,height:r=24,hidden:h=!1,title:e=\"Copy\"}={})=>i`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height=\"${r}\"\n    viewBox=\"0 0 36 36\"\n    width=\"${t}\"\n    aria-hidden=${h?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${e}\"\n  >\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"32\" y=\"22\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"32\" y=\"18\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"32\" y=\"14\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"32\" y=\"10\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"32\" y=\"6\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"32\" y=\"2\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"28\" y=\"2\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"24\" y=\"2\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"20\" y=\"2\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"16\" y=\"2\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"12\" y=\"2\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"12\" y=\"6\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"12\" y=\"10\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"12\" y=\"14\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"12\" y=\"18\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"12\" y=\"22\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"16\" y=\"22\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"20\" y=\"22\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"24\" y=\"22\" />\n    <rect height=\"2\" rx=\".5\" ry=\".5\" width=\"2\" x=\"28\" y=\"22\" />\n    <path d=\"M10 12H3a1 1 0 0 0-1 1v20a1 1 0 0 0 1 1h20a1 1 0 0 0 1-1v-7H11a1 1 0 0 1-1-1Z\" />\n  </svg>`;\n//# sourceMappingURL=Copy.js.map\n","\"use strict\";import{tag as r}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const DeleteIcon=({width:a=24,height:e=24,hidden:t=!1,title:l=\"Delete\"}={})=>r`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height=\"${e}\"\n    viewBox=\"0 0 36 36\"\n    width=\"${a}\"\n    aria-hidden=${t?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${l}\"\n  >\n    <path\n      d=\"M31.5 6H24V4a2 2 0 0 0-2-2H12a2 2 0 0 0-2 2v2H2.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h2l2.413 25.1a1 1 0 0 0 1 .9h18.179a1 1 0 0 0 1-.9L29.5 8h2a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5ZM11.065 29A1 1 0 0 1 10 28.068l-1.071-16a1 1 0 1 1 2-.134l1.071 16A1 1 0 0 1 11.065 29ZM18 28a1 1 0 0 1-2 0V12a1 1 0 0 1 2 0Zm4-22H12V4h10Zm2 22.068a1 1 0 1 1-2-.134l1.071-16a1 1 0 1 1 2 .134Z\"\n    />\n  </svg>`;\n//# sourceMappingURL=Delete.js.map\n","\"use strict\";import{tag as r}from\"../custom-tag.js\";export{setCustomTemplateLiteralTag}from\"../custom-tag.js\";export const EditIcon=({width:t=24,height:e=24,hidden:a=!1,title:l=\"Edit\"}={})=>r`<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height=\"${e}\"\n    viewBox=\"0 0 36 36\"\n    width=\"${t}\"\n    aria-hidden=${a?\"true\":\"false\"}\n    role=\"img\"\n    fill=\"currentColor\"\n    aria-label=\"${l}\"\n  >\n    <path\n      d=\"M33.567 8.2 27.8 2.432a1.215 1.215 0 0 0-.866-.353H26.9a1.371 1.371 0 0 0-.927.406L5.084 23.372a.99.99 0 0 0-.251.422L2.055 33.1c-.114.377.459.851.783.851a.251.251 0 0 0 .062-.007c.276-.063 7.866-2.344 9.311-2.778a.972.972 0 0 0 .414-.249l20.888-20.889a1.372 1.372 0 0 0 .4-.883 1.221 1.221 0 0 0-.346-.945ZM11.4 29.316c-2.161.649-4.862 1.465-6.729 2.022l2.009-6.73Z\"\n    />\n  </svg>`;\n//# sourceMappingURL=Edit.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport { LikeAnchor } from \"@spectrum-web-components/shared/src/like-anchor.js\";\nimport { Focusable } from \"@spectrum-web-components/shared/src/focusable.js\";\nimport linkStyles from \"./link.css.js\";\nexport class Link extends LikeAnchor(Focusable) {\n  constructor() {\n    super(...arguments);\n    this.quiet = false;\n  }\n  static get styles() {\n    return [linkStyles];\n  }\n  get focusElement() {\n    return this.anchorElement;\n  }\n  render() {\n    return this.renderAnchor({ id: \"anchor\" });\n  }\n}\n__decorateClass([\n  query(\"#anchor\")\n], Link.prototype, \"anchorElement\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], Link.prototype, \"variant\", 2);\n__decorateClass([\n  property({ reflect: true, attribute: \"static-color\" })\n], Link.prototype, \"staticColor\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true, attribute: \"quiet\" })\n], Link.prototype, \"quiet\", 2);\n//# sourceMappingURL=Link.dev.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query,\n  state\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport \"@spectrum-web-components/overlay/sp-overlay.js\";\nimport overlayTriggerStyles from \"./overlay-trigger.css.js\";\nexport class OverlayTrigger extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.offset = 6;\n    this.disabled = false;\n    this.receivesFocus = \"auto\";\n    this.clickContent = [];\n    this.longpressContent = [];\n    this.hoverContent = [];\n    this.targetContent = [];\n  }\n  static get styles() {\n    return [overlayTriggerStyles];\n  }\n  getAssignedElementsFromSlot(slot) {\n    return slot.assignedElements({ flatten: true });\n  }\n  handleTriggerContent(event) {\n    this.targetContent = this.getAssignedElementsFromSlot(event.target);\n  }\n  handleSlotContent(event) {\n    switch (event.target.name) {\n      case \"click-content\":\n        this.clickContent = this.getAssignedElementsFromSlot(\n          event.target\n        );\n        break;\n      case \"longpress-content\":\n        this.longpressContent = this.getAssignedElementsFromSlot(\n          event.target\n        );\n        break;\n      case \"hover-content\":\n        this.hoverContent = this.getAssignedElementsFromSlot(\n          event.target\n        );\n        break;\n    }\n  }\n  handleBeforetoggle(event) {\n    const { target } = event;\n    let type;\n    if (target === this.clickOverlayElement) {\n      type = \"click\";\n    } else if (target === this.longpressOverlayElement) {\n      type = \"longpress\";\n    } else if (target === this.hoverOverlayElement) {\n      type = \"hover\";\n    } else {\n      return;\n    }\n    if (event.newState === \"open\") {\n      this.open = type;\n    } else if (this.open === type) {\n      this.open = void 0;\n    }\n  }\n  update(changes) {\n    var _a, _b, _c, _d, _e, _f;\n    if (changes.has(\"clickContent\")) {\n      this.clickPlacement = ((_a = this.clickContent[0]) == null ? void 0 : _a.getAttribute(\"placement\")) || ((_b = this.clickContent[0]) == null ? void 0 : _b.getAttribute(\n        \"direction\"\n      )) || void 0;\n    }\n    if (changes.has(\"hoverContent\")) {\n      this.hoverPlacement = ((_c = this.hoverContent[0]) == null ? void 0 : _c.getAttribute(\"placement\")) || ((_d = this.hoverContent[0]) == null ? void 0 : _d.getAttribute(\n        \"direction\"\n      )) || void 0;\n    }\n    if (changes.has(\"longpressContent\")) {\n      this.longpressPlacement = ((_e = this.longpressContent[0]) == null ? void 0 : _e.getAttribute(\"placement\")) || ((_f = this.longpressContent[0]) == null ? void 0 : _f.getAttribute(\n        \"direction\"\n      )) || void 0;\n    }\n    super.update(changes);\n  }\n  renderSlot(name) {\n    return html`\n            <slot name=${name} @slotchange=${this.handleSlotContent}></slot>\n        `;\n  }\n  renderClickOverlay() {\n    var _a;\n    const slot = this.renderSlot(\"click-content\");\n    const clickOverlay = html`\n            <sp-overlay\n                id=\"click-overlay\"\n                ?disabled=${this.disabled || !this.clickContent.length}\n                ?open=${this.open === \"click\" && !!this.clickContent.length}\n                .offset=${this.offset}\n                .placement=${this.clickPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${\"click\"}\n                .type=${this.type !== \"modal\" ? \"auto\" : \"modal\"}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n        `;\n    if ((_a = this.triggeredBy) == null ? void 0 : _a.includes(\"click\")) {\n      return clickOverlay;\n    }\n    if (!this.clickContent.length) {\n      return slot;\n    } else {\n      return clickOverlay;\n    }\n  }\n  renderHoverOverlay() {\n    var _a;\n    const slot = this.renderSlot(\"hover-content\");\n    const hoverOverlay = html`\n            <sp-overlay\n                id=\"hover-overlay\"\n                ?open=${this.open === \"hover\" && !!this.hoverContent.length}\n                ?disabled=${this.disabled || !this.hoverContent.length || !!this.open && this.open !== \"hover\"}\n                .offset=${this.offset}\n                .placement=${this.hoverPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${\"hover\"}\n                .type=${\"hint\"}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n        `;\n    if ((_a = this.triggeredBy) == null ? void 0 : _a.includes(\"hover\")) {\n      return hoverOverlay;\n    }\n    if (!this.hoverContent.length) {\n      return slot;\n    } else {\n      return hoverOverlay;\n    }\n  }\n  renderLongpressOverlay() {\n    var _a;\n    const slot = this.renderSlot(\"longpress-content\");\n    const longpressOverlay = html`\n            <sp-overlay\n                id=\"longpress-overlay\"\n                ?disabled=${this.disabled || !this.longpressContent.length}\n                ?open=${this.open === \"longpress\" && !!this.longpressContent.length}\n                .offset=${this.offset}\n                .placement=${this.longpressPlacement || this.placement}\n                .triggerElement=${this.targetContent[0]}\n                .triggerInteraction=${\"longpress\"}\n                .type=${\"auto\"}\n                @beforetoggle=${this.handleBeforetoggle}\n                .receivesFocus=${this.receivesFocus}\n            >\n                ${slot}\n            </sp-overlay>\n            <slot name=\"longpress-describedby-descriptor\"></slot>\n        `;\n    if ((_a = this.triggeredBy) == null ? void 0 : _a.includes(\"longpress\")) {\n      return longpressOverlay;\n    }\n    if (!this.longpressContent.length) {\n      return slot;\n    } else {\n      return longpressOverlay;\n    }\n  }\n  render() {\n    return html`\n            <slot\n                id=\"trigger\"\n                name=\"trigger\"\n                @slotchange=${this.handleTriggerContent}\n            ></slot>\n            ${[\n      this.renderClickOverlay(),\n      this.renderHoverOverlay(),\n      this.renderLongpressOverlay()\n    ]}\n        `;\n  }\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (!this.triggeredBy) {\n      const issues = [\n        \"You have not specified the `triggeredBy` property. For optimal performance, consider explicitly declaring which overlay types you plan to use.\",\n        'Example: triggered-by=\"click hover\"',\n        \"This helps avoid unnecessary DOM operations and potential race conditions.\"\n      ];\n      window.__swc.warn(\n        this,\n        \"Performance optimization available for <overlay-trigger>:\",\n        \"https://opensource.adobe.com/spectrum-web-components/components/overlay-trigger/#performance-optimization\",\n        { issues }\n      );\n    }\n    if (this.disabled && changedProperties.has(\"disabled\")) {\n      this.open = void 0;\n      return;\n    }\n  }\n  async getUpdateComplete() {\n    const complete = await super.getUpdateComplete();\n    return complete;\n  }\n}\n__decorateClass([\n  property({ attribute: \"triggered-by\" })\n], OverlayTrigger.prototype, \"triggeredBy\", 2);\n__decorateClass([\n  property({ reflect: true })\n], OverlayTrigger.prototype, \"placement\", 2);\n__decorateClass([\n  property()\n], OverlayTrigger.prototype, \"type\", 2);\n__decorateClass([\n  property({ type: Number })\n], OverlayTrigger.prototype, \"offset\", 2);\n__decorateClass([\n  property({ reflect: true })\n], OverlayTrigger.prototype, \"open\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], OverlayTrigger.prototype, \"disabled\", 2);\n__decorateClass([\n  property({ attribute: \"receives-focus\" })\n], OverlayTrigger.prototype, \"receivesFocus\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"clickContent\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"longpressContent\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"hoverContent\", 2);\n__decorateClass([\n  state()\n], OverlayTrigger.prototype, \"targetContent\", 2);\n__decorateClass([\n  query(\"#click-overlay\", true)\n], OverlayTrigger.prototype, \"clickOverlayElement\", 2);\n__decorateClass([\n  query(\"#longpress-overlay\", true)\n], OverlayTrigger.prototype, \"longpressOverlayElement\", 2);\n__decorateClass([\n  query(\"#hover-overlay\", true)\n], OverlayTrigger.prototype, \"hoverOverlayElement\", 2);\n//# sourceMappingURL=OverlayTrigger.dev.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nfunction nextFrame() {\n  return new Promise((res) => requestAnimationFrame(() => res()));\n}\nclass IsOverlayOpen extends HTMLElement {\n  constructor() {\n    super();\n    this.sendFocus = async () => {\n      var _a;\n      const selectedItem = (_a = document.querySelector(\"[focusable]\")) == null ? void 0 : _a.querySelector(\"[selected]\");\n      if (selectedItem) {\n        selectedItem.focus();\n        selectedItem.focused = true;\n        await nextFrame();\n        selectedItem.scrollIntoView({ block: \"start\" });\n        await nextFrame();\n      }\n    };\n    this.handleOpened = async (event) => {\n      const overlay = event.target;\n      const actions = [nextFrame(), overlay.updateComplete, this.sendFocus()];\n      await Promise.all(actions);\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      this.ready(true);\n    };\n    this.readyPromise = Promise.resolve(false);\n    this.readyPromise = new Promise((res) => {\n      this.ready = res;\n      this.setup();\n    });\n  }\n  async setup() {\n    await nextFrame();\n    document.addEventListener(\"sp-opened\", this.handleOpened);\n  }\n  get updateComplete() {\n    return this.readyPromise;\n  }\n  // remove event listeners in disconnectCallback\n  disconnectedCallback() {\n    document.removeEventListener(\"sp-opened\", this.handleOpened);\n  }\n}\ncustomElements.define(\"is-overlay-open\", IsOverlayOpen);\nexport const isOverlayOpen = (story) => {\n  return html`\n        ${story()}\n        <is-overlay-open></is-overlay-open>\n    `;\n};\nclass AreIconsPresent extends HTMLElement {\n  constructor() {\n    super();\n    this.overlayTimeout = null;\n    this.sendFocus = async () => {\n      var _a;\n      const selectedItem = (_a = document.querySelector(\"[focusable]\")) == null ? void 0 : _a.querySelector(\"[selected]\");\n      if (selectedItem) {\n        selectedItem.focus();\n        selectedItem.focused = true;\n        await nextFrame();\n        selectedItem.scrollIntoView({ block: \"start\" });\n        await nextFrame();\n      }\n    };\n    this.handleOpened = async (event) => {\n      if (this.overlayTimeout) {\n        clearTimeout(this.overlayTimeout);\n        this.overlayTimeout = null;\n      }\n      const overlay = event.target;\n      const actions = [nextFrame(), overlay.updateComplete, this.sendFocus()];\n      await Promise.all(actions);\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      await nextFrame();\n      this.checkIcons();\n    };\n    this.checkIcons = async () => {\n      const icons = [...document.querySelectorAll(\"sp-icon\")];\n      const picker = document.querySelector(\"sp-picker\");\n      if (picker) {\n        const pickerIcon = picker.querySelector(\"sp-icon\");\n        if (pickerIcon) {\n          icons.push(pickerIcon);\n        }\n      }\n      const iconLoadPromises = Array.from(icons).map((icon) => {\n        return new Promise((resolve) => {\n          var _a;\n          if (\"updateComplete\" in icon && typeof ((_a = icon.updateComplete) == null ? void 0 : _a.then) === \"function\") {\n            icon.updateComplete.then(() => {\n              resolve();\n            });\n            return;\n          }\n          const src = icon.getAttribute(\"src\");\n          if (!src) {\n            const imgElement2 = icon.querySelector(\"img\");\n            if (imgElement2) {\n              if (imgElement2.complete) {\n                resolve();\n              } else {\n                imgElement2.addEventListener(\n                  \"load\",\n                  () => {\n                    resolve();\n                  },\n                  { once: true }\n                );\n                imgElement2.addEventListener(\n                  \"error\",\n                  () => {\n                    console.warn(`Failed to load icon image`);\n                    resolve();\n                  },\n                  { once: true }\n                );\n              }\n              return;\n            }\n            resolve();\n            return;\n          }\n          const imgElement = icon.querySelector(\"img\");\n          if (imgElement) {\n            if (imgElement.complete) {\n              resolve();\n            } else {\n              imgElement.addEventListener(\n                \"load\",\n                () => {\n                  resolve();\n                },\n                { once: true }\n              );\n              imgElement.addEventListener(\n                \"error\",\n                () => {\n                  console.warn(\n                    `Failed to load icon image: ${src}`\n                  );\n                  resolve();\n                },\n                { once: true }\n              );\n            }\n            return;\n          }\n          const img = new Image();\n          img.onload = () => resolve();\n          img.onerror = () => {\n            console.warn(`Failed to load icon: ${src}`);\n            resolve();\n          };\n          img.src = src;\n        });\n      });\n      await Promise.all(iconLoadPromises);\n      await nextFrame();\n      this.ready(true);\n    };\n    this.readyPromise = Promise.resolve(false);\n    this.readyPromise = new Promise((res) => {\n      this.ready = res;\n      this.setup();\n    });\n  }\n  async setup() {\n    await nextFrame();\n    document.addEventListener(\"sp-opened\", this.handleOpened);\n  }\n  get updateComplete() {\n    return this.readyPromise;\n  }\n  // remove event listeners in disconnectCallback\n  disconnectedCallback() {\n    document.removeEventListener(\"sp-opened\", this.handleOpened);\n  }\n}\ncustomElements.define(\"are-icons-present\", AreIconsPresent);\nexport const areIconsPresent = (story) => {\n  return html`\n        ${story()}\n        <are-icons-present></are-icons-present>\n    `;\n};\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nimport { html } from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/button/sp-button.js\";\nimport \"@spectrum-web-components/dialog/sp-dialog.js\";\nimport \"@spectrum-web-components/field-label/sp-field-label.js\";\nimport \"@spectrum-web-components/icon/sp-icon.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-copy.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-delete.js\";\nimport \"@spectrum-web-components/icons-workflow/icons/sp-icon-edit.js\";\nimport \"@spectrum-web-components/link/sp-link.js\";\nimport \"@spectrum-web-components/menu/sp-menu-item.js\";\nimport \"@spectrum-web-components/overlay/overlay-trigger.js\";\nimport \"@spectrum-web-components/overlay/sp-overlay.js\";\nimport \"@spectrum-web-components/picker/sp-picker.js\";\nimport \"@spectrum-web-components/popover/sp-popover.js\";\nimport \"@spectrum-web-components/tooltip/sp-tooltip.js\";\nimport { ifDefined } from \"lit-html/directives/if-defined.js\";\nimport { spreadProps } from \"../../../test/lit-helpers.js\";\nimport \"../../overlay/stories/index.js\";\nimport { areIconsPresent, isOverlayOpen } from \"../../overlay/stories/index.js\";\nimport { argTypes } from \"./args.js\";\nimport { states } from \"./states.js\";\nimport { handleChange, Template } from \"./template.js\";\nexport default {\n  title: \"Picker\",\n  component: \"sp-picker\",\n  args: {\n    disabled: false,\n    invalid: false,\n    open: false,\n    quiet: false,\n    pending: false\n  },\n  argTypes: {\n    ...argTypes,\n    onChange: { action: \"change\" },\n    open: {\n      name: \"open\",\n      type: { name: \"boolean\", required: false },\n      description: \"Whether the menu is open or not.\",\n      table: {\n        type: { summary: \"boolean\" },\n        defaultValue: { summary: false }\n      },\n      control: \"boolean\"\n    },\n    pending: {\n      name: \"pending\",\n      type: { name: \"boolean\", required: false },\n      table: {\n        type: { summary: \"boolean\" },\n        defaultValue: { summary: false }\n      },\n      control: {\n        type: \"boolean\"\n      }\n    }\n  }\n};\nexport const Default = (args) => {\n  return html`\n        <sp-field-label for=\"picker-1\" size=${ifDefined(args.size)}>\n            Where do you live?\n        </sp-field-label>\n        <sp-picker\n            id=\"picker-1\"\n            @change=${handleChange(args)}\n            label=\"Select a Country with a very long label, too long, in fact\"\n            ${spreadProps(args)}\n        >\n            <sp-menu-item value=\"option-1\">Deselect</sp-menu-item>\n            <sp-menu-item value=\"option-2\">Select Inverse</sp-menu-item>\n            <sp-menu-item value=\"option-3\">Feather...</sp-menu-item>\n            <sp-menu-item value=\"option-4\">Select and Mask...</sp-menu-item>\n            <sp-menu-item value=\"option-5\">Save Selection</sp-menu-item>\n            <sp-menu-item disabled value=\"option-6\">\n                Make Work Path\n            </sp-menu-item>\n        </sp-picker>\n        <p>This is some text.</p>\n        <p>This is some text.</p>\n        <p>\n            This is a\n            <a href=\"#anchor\">link</a>\n            .\n        </p>\n    `;\n};\nexport const forcePopoverOnMobile = (args) => {\n  return html`\n        <div style=\"padding: 40px\">\n            <h1>Force Popover on Mobile</h1>\n            <p>\n                The force-popover attribute overrides the mobile device\n                functionality of rendering a tray so that a popover will always\n                render no matter the device.\n            </p>\n            <ol>\n                <li>Open Chrome DevTools (or equivalent).</li>\n                <li>Toggle the Device Toolbar (the phone/tablet icon).</li>\n                <li>Select a device preset (e.g. iPhone 12).</li>\n                <li>\n                    Chrome will set user-agent strings, simulate touch, and\n                    adjust DPI.\n                </li>\n                <li>Reload the page</li>\n                <li>Click the Picker 1 and see a tray</li>\n                <li>Click the Picker 2 and see a popover</li>\n            </ol>\n            <sp-field-label for=\"picker-1\" size=${ifDefined(args.size)}>\n                Do you want to see a tray menu?\n            </sp-field-label>\n            <sp-picker\n                id=\"picker-1\"\n                @change=${handleChange(args)}\n                label=\"Select an option\"\n            >\n                <sp-menu-item value=\"option-1\">Yes</sp-menu-item>\n                <sp-menu-item value=\"option-2\">No</sp-menu-item>\n            </sp-picker>\n            <sp-field-label for=\"picker-2\" size=${ifDefined(args.size)}>\n                Do you want to see a popover menu?\n            </sp-field-label>\n            <sp-picker\n                id=\"picker-2\"\n                force-popover\n                @change=${handleChange(args)}\n                label=\"Select an option\"\n            >\n                <sp-menu-item value=\"option-1\">Yes</sp-menu-item>\n                <sp-menu-item value=\"option-2\">No</sp-menu-item>\n            </sp-picker>\n            <div>\n                <p>\n                    This button should't be clickable if a popover is open over\n                    it.\n                </p>\n                <sp-button\n                    @click=${() => console.log(\"Whoops! I was clicked.\")}\n                >\n                    Shouldn't be clickable\n                </sp-button>\n            </div>\n        </div>\n    `;\n};\nexport const disabled = (args) => Template(args);\ndisabled.args = {\n  disabled: true\n};\nexport const invalid = (args) => Template(args);\ninvalid.args = {\n  invalid: true\n};\nexport const tooltip = (args) => {\n  const { open, ...rest } = args;\n  return html`\n        <sp-field-label for=\"picker-1\" size=${ifDefined(args.size)}>\n            Where do you live?\n        </sp-field-label>\n        <sp-picker\n            id=\"picker-1\"\n            @change=${handleChange(args)}\n            label=\"Select a Country with a very long label, too long, in fact\"\n            ${spreadProps(rest)}\n        >\n            <sp-menu-item value=\"option-1\">Deselect</sp-menu-item>\n            <sp-menu-item value=\"option-2\">Select Inverse</sp-menu-item>\n            <sp-menu-item value=\"option-3\">Feather...</sp-menu-item>\n            <sp-menu-item value=\"option-4\">Select and Mask...</sp-menu-item>\n            <sp-menu-item value=\"option-5\">Save Selection</sp-menu-item>\n            <sp-menu-item disabled value=\"option-6\">\n                Make Work Path\n            </sp-menu-item>\n            <sp-tooltip\n                slot=\"tooltip\"\n                ?open=${open}\n                self-managed\n                placement=\"right\"\n            >\n                This Picker wants to know where you live.\n            </sp-tooltip>\n        </sp-picker>\n        <p>This is some text.</p>\n        <p>This is some text.</p>\n        <p>\n            This is a\n            <a href=\"#anchor\">link</a>\n            .\n        </p>\n    `;\n};\ntooltip.args = {\n  open: true\n};\ntooltip.decorators = [isOverlayOpen];\nexport const leftSideLabel = (args) => {\n  return html`\n        <sp-field-label\n            side-aligned=\"start\"\n            for=\"picker-1\"\n            size=${ifDefined(args.size)}\n        >\n            Where do you live?\n        </sp-field-label>\n        <sp-picker\n            id=\"picker-1\"\n            @change=${handleChange(args)}\n            label=\"Select a Country with a very long label, too long, in fact\"\n            ${spreadProps(args)}\n        >\n            <sp-menu-item value=\"option-1\">Deselect</sp-menu-item>\n            <sp-menu-item value=\"option-2\">Select Inverse</sp-menu-item>\n            <sp-menu-item value=\"option-3\">Feather...</sp-menu-item>\n            <sp-menu-item value=\"option-4\">Select and Mask...</sp-menu-item>\n            <sp-menu-item value=\"option-5\">Save Selection</sp-menu-item>\n            <sp-menu-item disabled value=\"option-6\">\n                Make Work Path\n            </sp-menu-item>\n        </sp-picker>\n        <p>This is some text.</p>\n        <p>This is some text.</p>\n        <p>\n            This is a\n            <a href=\"#anchor\">link</a>\n            .\n        </p>\n    `;\n};\nexport const noVisibleLabel = (args) => {\n  return html`\n        <sp-picker\n            @change=${handleChange(args)}\n            label=\"Where do you live?\"\n            ${spreadProps(args)}\n        >\n            <sp-menu-item value=\"option-1\">Deselect</sp-menu-item>\n            <sp-menu-item value=\"option-2\">Select Inverse</sp-menu-item>\n            <sp-menu-item value=\"option-3\">Feather...</sp-menu-item>\n            <sp-menu-item value=\"option-4\">Select and Mask...</sp-menu-item>\n            <sp-menu-item value=\"option-5\">Save Selection</sp-menu-item>\n            <sp-menu-item disabled value=\"option-6\">\n                Make Work Path\n            </sp-menu-item>\n        </sp-picker>\n        <p>This is some text.</p>\n        <p>This is some text.</p>\n        <p>\n            This is a\n            <a href=\"#anchor\">link</a>\n            .\n        </p>\n    `;\n};\nexport const slottedLabel = (args) => {\n  return html`\n        <sp-picker @change=${handleChange(args)} ${spreadProps(args)}>\n            <span slot=\"label\">Where do you live?</span>\n            <sp-menu-item value=\"option-1\">Deselect</sp-menu-item>\n            <sp-menu-item value=\"option-2\">Select Inverse</sp-menu-item>\n            <sp-menu-item value=\"option-3\">Feather...</sp-menu-item>\n            <sp-menu-item value=\"option-4\">Select and Mask...</sp-menu-item>\n            <sp-menu-item value=\"option-5\">Save Selection</sp-menu-item>\n            <sp-menu-item disabled value=\"option-6\">\n                Make Work Path\n            </sp-menu-item>\n        </sp-picker>\n        <p>This is some text.</p>\n        <p>This is some text.</p>\n        <p>\n            This is a\n            <a href=\"#anchor\">link</a>\n            .\n        </p>\n    `;\n};\nexport const quiet = (args) => {\n  return html`\n        <sp-field-label for=\"picker-quiet\" size=${ifDefined(args.size)}>\n            Where do you live?\n        </sp-field-label>\n        <sp-picker\n            ${spreadProps(args)}\n            id=\"picker-quiet\"\n            @change=${handleChange(args)}\n            label=\"Pick an item\"\n        >\n            <sp-menu-item value=\"1\">Item 1</sp-menu-item>\n            <sp-menu-item value=\"2\">Item 2</sp-menu-item>\n            <sp-menu-item value=\"3\">Item 3</sp-menu-item>\n            <sp-menu-item value=\"4\">Item 4</sp-menu-item>\n        </sp-picker>\n        <p>This is some text.</p>\n        <p>This is some text.</p>\n        <p>\n            This is a\n            <a href=\"#anchor\">link</a>\n            .\n        </p>\n    `;\n};\nquiet.args = {\n  quiet: true\n};\nexport const quietSideLabel = (args) => {\n  return html`\n        <sp-field-label\n            side-aligned=\"start\"\n            for=\"picker-quiet-sidelabel\"\n            size=${ifDefined(args.size)}\n        >\n            Where do you live?\n        </sp-field-label>\n        <sp-picker\n            ${spreadProps(args)}\n            id=\"picker-quiet-sidelabel\"\n            @change=${handleChange(args)}\n            label=\"Pick an item\"\n        >\n            <sp-menu-item value=\"1\">Item 1</sp-menu-item>\n            <sp-menu-item value=\"2\">Item 2</sp-menu-item>\n            <sp-menu-item value=\"3\">Item 3</sp-menu-item>\n            <sp-menu-item value=\"4\">Item 4</sp-menu-item>\n        </sp-picker>\n        <p>This is some text.</p>\n        <p>This is some text.</p>\n        <p>\n            This is a\n            <a href=\"#anchor\">link</a>\n            .\n        </p>\n    `;\n};\nquietSideLabel.args = {\n  quiet: true\n};\nexport const icons = (args) => {\n  return html`\n        <sp-field-label for=\"picker-quiet\" size=${ifDefined(args.size)}>\n            Choose an action type...\n        </sp-field-label>\n        <sp-picker\n            ${spreadProps(args)}\n            id=\"picker-quiet\"\n            @change=${handleChange(args)}\n            label=\"Pick an action\"\n            value=\"1\"\n        >\n            <sp-menu-item value=\"1\">\n                <sp-icon-edit slot=\"icon\"></sp-icon-edit>\n                Edit\n            </sp-menu-item>\n            <sp-menu-item value=\"2\">\n                <sp-icon-copy slot=\"icon\"></sp-icon-copy>\n                Copy\n            </sp-menu-item>\n            <sp-menu-item value=\"3\">\n                <sp-icon-delete slot=\"icon\"></sp-icon-delete>\n                Delete\n            </sp-menu-item>\n        </sp-picker>\n    `;\n};\nexport const iconsNone = (args) => {\n  return html`\n        <sp-field-label for=\"picker-quiet\" size=${ifDefined(args.size)}>\n            Choose an action type...\n        </sp-field-label>\n        <sp-picker\n            ${spreadProps(args)}\n            id=\"picker-quiet\"\n            @change=${handleChange(args)}\n            label=\"Pick an action\"\n            value=\"1\"\n            icons=\"none\"\n        >\n            <sp-menu-item value=\"1\" selected active focused>\n                <sp-icon-edit slot=\"icon\"></sp-icon-edit>\n                Edit\n            </sp-menu-item>\n            <sp-menu-item value=\"2\">\n                <sp-icon-copy slot=\"icon\"></sp-icon-copy>\n                Copy\n            </sp-menu-item>\n            <sp-menu-item value=\"3\">\n                <sp-icon-delete slot=\"icon\"></sp-icon-delete>\n                Delete\n            </sp-menu-item>\n        </sp-picker>\n    `;\n};\niconsNone.args = {\n  open: true\n};\niconsNone.decorators = [isOverlayOpen];\nexport const iconValue = (args) => {\n  return html`\n        <sp-field-label for=\"picker-quiet\" size=${ifDefined(args.size)}>\n            Choose an action type...\n        </sp-field-label>\n        <sp-picker\n            ${spreadProps(args)}\n            id=\"picker-quiet\"\n            @change=${handleChange(args)}\n            label=\"Pick an action\"\n            icons=\"only\"\n            style=\"width: 100px\"\n            value=\"2\"\n        >\n            <sp-menu-item value=\"1\">\n                <sp-icon-edit slot=\"icon\"></sp-icon-edit>\n                Edit\n            </sp-menu-item>\n            <sp-menu-item value=\"2\">\n                <sp-icon-copy slot=\"icon\"></sp-icon-copy>\n                Copy\n            </sp-menu-item>\n            <sp-menu-item value=\"3\">\n                <sp-icon-delete slot=\"icon\"></sp-icon-delete>\n                Delete\n            </sp-menu-item>\n        </sp-picker>\n    `;\n};\nexport const iconsOnly = (args) => {\n  return html`\n        <sp-field-label for=\"picker-quiet\" size=${ifDefined(args.size)}>\n            Choose an action type...\n        </sp-field-label>\n        <sp-picker\n            ${spreadProps(args)}\n            id=\"picker-quiet\"\n            @change=${handleChange(args)}\n            label=\"Pick an action\"\n            style=\"width: 100px\"\n            value=\"3\"\n        >\n            <sp-menu-item value=\"1\">\n                <sp-icon-edit slot=\"icon\" label=\"Edit\"></sp-icon-edit>\n            </sp-menu-item>\n            <sp-menu-item value=\"2\">\n                <sp-icon-copy slot=\"icon\" label=\"Copy\"></sp-icon-copy>\n            </sp-menu-item>\n            <sp-menu-item value=\"3\">\n                <sp-icon-delete slot=\"icon\" label=\"Delete\"></sp-icon-delete>\n            </sp-menu-item>\n        </sp-picker>\n    `;\n};\niconsOnly.args = {\n  open: true\n};\niconsOnly.decorators = [isOverlayOpen];\nexport const dynamicIcons = (args) => {\n  return html`\n        <p>\n            The icon displayed in the picker should match the icon of the\n            selected menu item, even when the icons are updated dynamically.\n        </p>\n        <sp-field-label for=\"picker-quiet\" size=${ifDefined(args.size)}>\n            Choose an action type...\n        </sp-field-label>\n        <sp-picker\n            ${spreadProps(args)}\n            id=\"picker-quiet\"\n            @change=${handleChange(args)}\n            label=\"Pick an action\"\n            value=\"2\"\n        >\n            <sp-menu-item value=\"1\">\n                <sp-icon\n                    slot=\"icon\"\n                    src=\"https://loremicon.com/rect/20/20/1/png\"\n                ></sp-icon>\n                Edit\n            </sp-menu-item>\n            <sp-menu-item value=\"2\">\n                <sp-icon\n                    slot=\"icon\"\n                    src=\"https://loremicon.com/rect/20/20/2/png\"\n                ></sp-icon>\n                Copy\n            </sp-menu-item>\n            <sp-menu-item value=\"3\">\n                <sp-icon\n                    slot=\"icon\"\n                    src=\"https://loremicon.com/rect/20/20/3/png\"\n                ></sp-icon>\n                Delete\n            </sp-menu-item>\n        </sp-picker>\n        <sp-button\n            @click=${() => {\n    const icons2 = document.querySelectorAll(\"sp-icon\");\n    const seed = Math.round(Math.random() * 1e3);\n    icons2.forEach((icon, index) => {\n      icon.setAttribute(\n        \"src\",\n        `https://loremicon.com/rect/20/20/${seed + index}/png`\n      );\n    });\n    const picker = document.querySelector(\"sp-picker\");\n    if (picker) picker.open = true;\n  }}\n        >\n            Change icons\n        </sp-button>\n    `;\n};\ndynamicIcons.args = {\n  open: true\n};\ndynamicIcons.decorators = [areIconsPresent];\ndynamicIcons.swc_vrt = {\n  skip: true\n};\nexport const Open = (args) => {\n  return html`\n        <style>\n            fieldset {\n                float: left;\n                clear: left;\n                margin-bottom: 15px;\n            }\n        </style>\n        <fieldset class=\"backdrop-filter-test\">\n            <sp-field-label for=\"picker-open\" size=${ifDefined(args.size)}>\n                Where do you live?\n            </sp-field-label>\n            <sp-picker\n                id=\"picker-open\"\n                label=\"Open picker\"\n                ${spreadProps(args)}\n                @change=${handleChange(args)}\n            >\n                <span slot=\"label\">\n                    Select a Country with a very long label, too long, in fact\n                </span>\n                <sp-menu-item>Deselect</sp-menu-item>\n                <sp-menu-item>Select Inverse</sp-menu-item>\n                <sp-menu-item>Feather...</sp-menu-item>\n                <sp-menu-item>Select and Mask...</sp-menu-item>\n                <sp-menu-item>Save Selection</sp-menu-item>\n                <sp-menu-item disabled>Make Work Path</sp-menu-item>\n            </sp-picker>\n        </fieldset>\n        <fieldset>\n            <sp-field-label for=\"picker-closed\" size=${ifDefined(args.size)}>\n                Where do you live?\n            </sp-field-label>\n            <sp-picker\n                id=\"picker-closed\"\n                label=\"Picker that displays below the options\"\n                @change=${handleChange(args)}\n            >\n                <span slot=\"label\">\n                    Other menu that goes behind the open one\n                </span>\n                <sp-menu-item>Not so many options...</sp-menu-item>\n            </sp-picker>\n        </fieldset>\n    `;\n};\nOpen.args = {\n  open: true\n};\nOpen.decorators = [isOverlayOpen];\nexport const OpenShowingEdgeCase = (args) => {\n  return html`\n        <style>\n            fieldset {\n                float: left;\n                clear: left;\n                margin-bottom: 15px;\n            }\n            /* Enforce CSS stacking to test \"transition-behavior: allow-discrete\" */\n            /* Breaks the story in non-[popover] supporting browsers */\n            fieldset:nth-of-type(2) {\n                position: relative;\n                z-index: 2;\n            }\n            .backdrop-filter-test {\n                backdrop-filter: saturate(80%);\n            }\n        </style>\n        <p>\n            In browser that do not support\n            <code>[popover]</code>\n            , the following \"open\"\n            <code>sp-picker</code>\n            will display behind both the closed\n            <code>sp-picker</code>\n            as well as the\n            <code>fieldset</code>\n            that contains it.\n        </p>\n        <p>\n            Learn more about this situation in our\n            <sp-link\n                href=\"https://opensource.adobe.com/spectrum-web-components/components/overlay/#fallback-support\"\n            >\n                documentation site\n            </sp-link>\n            .\n        </p>\n        <fieldset class=\"backdrop-filter-test\">\n            <sp-field-label for=\"picker-open\" size=${ifDefined(args.size)}>\n                Where do you live?\n            </sp-field-label>\n            <sp-picker\n                id=\"picker-open\"\n                label=\"Open picker\"\n                ${spreadProps(args)}\n                @change=${handleChange(args)}\n            >\n                <span slot=\"label\">\n                    Select a Country with a very long label, too long, in fact\n                </span>\n                <sp-menu-item>Deselect</sp-menu-item>\n                <sp-menu-item>Select Inverse</sp-menu-item>\n                <sp-menu-item>Feather...</sp-menu-item>\n                <sp-menu-item>Select and Mask...</sp-menu-item>\n                <sp-menu-item>Save Selection</sp-menu-item>\n                <sp-menu-item disabled>Make Work Path</sp-menu-item>\n            </sp-picker>\n        </fieldset>\n        <fieldset>\n            <sp-field-label for=\"picker-closed\" size=${ifDefined(args.size)}>\n                Where do you live?\n            </sp-field-label>\n            <sp-picker\n                id=\"picker-closed\"\n                label=\"Picker that displays below the options\"\n                @change=${handleChange(args)}\n            >\n                <span slot=\"label\">\n                    Other menu that goes behind the open one\n                </span>\n                <sp-menu-item>Not so many options...</sp-menu-item>\n            </sp-picker>\n        </fieldset>\n    `;\n};\nOpenShowingEdgeCase.args = {\n  open: true\n};\nOpenShowingEdgeCase.decorators = [isOverlayOpen];\nOpenShowingEdgeCase.swc_vrt = {\n  skip: true\n};\nOpenShowingEdgeCase.parameters = {\n  // Disables Chromatic's snapshotting on a global level\n  chromatic: { disableSnapshot: true }\n};\nexport const initialValue = (args) => {\n  return html`\n        <sp-field-label for=\"picker-initial\" size=${ifDefined(args.size)}>\n            Where do you live?\n        </sp-field-label>\n        <sp-picker\n            id=\"picker-initial\"\n            @change=${handleChange(args)}\n            value=\"item-2\"\n            ${spreadProps(args)}\n        >\n            <span slot=\"label\">\n                Select a Country with a very long label, too long in fact\n            </span>\n            <sp-menu-item value=\"item-1\">Deselect</sp-menu-item>\n            <sp-menu-item value=\"item-2\">Select Inverse</sp-menu-item>\n            <sp-menu-item value=\"item-3\">Feather...</sp-menu-item>\n            <sp-menu-item value=\"item-4\">Select and Mask...</sp-menu-item>\n            <sp-menu-item value=\"item-5\">Save Selection</sp-menu-item>\n            <sp-menu-item disabled value=\"item-6\">Make Work Path</sp-menu-item>\n        </sp-picker>\n    `;\n};\nexport const readonly = (args) => {\n  return html`\n        <sp-picker\n            @change=${handleChange(args)}\n            readonly\n            value=\"item-2\"\n            ${spreadProps(args)}\n        >\n            <span slot=\"label\">\n                Select a Country with a very long label, too long in fact\n            </span>\n            <sp-menu-item value=\"item-1\">Deselect</sp-menu-item>\n            <sp-menu-item value=\"item-2\">Select Inverse</sp-menu-item>\n            <sp-menu-item value=\"item-3\">Feather...</sp-menu-item>\n            <sp-menu-item value=\"item-4\">Select and Mask...</sp-menu-item>\n            <sp-menu-item value=\"item-5\">Save Selection</sp-menu-item>\n            <sp-menu-item disabled value=\"item-6\">Make Work Path</sp-menu-item>\n        </sp-picker>\n    `;\n};\nexport const custom = (args) => {\n  const initialState = \"lb1-mo\";\n  return html`\n        <sp-field-label for=\"picker-state\" size=${ifDefined(args.size)}>\n            What state do you live in?\n        </sp-field-label>\n        <sp-picker\n            style=\"width: 400px;\"\n            @change=${handleChange(args)}\n            id=\"picker-state\"\n            label=\"Pick a state\"\n            ${spreadProps(args)}\n            value=${initialState}\n        >\n            ${states.map(\n    (state) => html`\n                    <sp-menu-item\n                        id=${state.id}\n                        value=${state.id}\n                        ?selected=${state.id === initialState}\n                    >\n                        ${state.label}\n                    </sp-menu-item>\n                `\n  )}\n        </sp-picker>\n        <p>This is some text.</p>\n        <p>This is some text.</p>\n        <p>\n            This is a\n            <a href=\"#anchor\">link</a>\n            .\n        </p>\n    `;\n};\ncustom.args = {\n  open: true\n};\ncustom.decorators = [isOverlayOpen];\nexport const BackgroundClickTest = () => {\n  return html`\n        <div style=\"display: flex; flex-direction: column;\">\n            <sp-picker size=\"l\">\n                <sp-menu-item value=\"option-1\">Deselect</sp-menu-item>\n                <sp-menu-item value=\"option-2\">Select Inverse</sp-menu-item>\n            </sp-picker>\n            <div style=\"position: absolute; bottom: 50px;\">\n                <sp-button\n                    @click=${() => {\n    alert(\n      \"this button should not receive a click event on menu-item selection\"\n    );\n    console.log(\n      \"this button should not receive a click event on menu-item selection\"\n    );\n  }}\n                    size=\"l\"\n                >\n                    I shall not be clicked\n                </sp-button>\n            </div>\n        </div>\n    `;\n};\nBackgroundClickTest.swc_vrt = {\n  skip: true\n};\nexport const PickerInModalOverlay = () => {\n  return html`\n        <div>\n            <div>\n                <h3>Picker in sp-overlay (non-modal)</h3>\n                <sp-button id=\"trigger\">Overlay Trigger</sp-button>\n                <sp-overlay trigger=\"trigger@click\" placement=\"bottom\">\n                    <sp-popover>\n                        <sp-picker\n                            label=\"What would you like to do?\"\n                            value=\"item-2\"\n                            id=\"picker-icons\"\n                            style=\"margin: 20px\"\n                        >\n                            <sp-menu-item>Save</sp-menu-item>\n                            <sp-menu-item>Finish</sp-menu-item>\n                            <sp-menu-item>Review</sp-menu-item>\n                        </sp-picker>\n                    </sp-popover>\n                </sp-overlay>\n            </div>\n\n            <div>\n                <h3>\n                    Picker in overlay-trigger (modal) - Test Escape key behavior\n                </h3>\n                <overlay-trigger\n                    type=\"modal\"\n                    id=\"modal-trigger\"\n                    placement=\"top\"\n                >\n                    <sp-button\n                        variant=\"primary\"\n                        slot=\"trigger\"\n                        style=\"position:absolute;bottom:50px\"\n                    >\n                        Button popover\n                    </sp-button>\n                    <sp-popover slot=\"click-content\" tip>\n                        <sp-dialog no-divider class=\"options-popover-content\">\n                            <sp-picker\n                                label=\"Select a Country with a very long label, too long in fact\"\n                                value=\"item-2\"\n                                id=\"picker-value\"\n                            >\n                                <sp-menu-item value=\"item-1\">\n                                    Deselect\n                                </sp-menu-item>\n                                <sp-menu-item value=\"item-2\">\n                                    Select inverse\n                                </sp-menu-item>\n                                <sp-menu-item value=\"item-3\">\n                                    Feather...\n                                </sp-menu-item>\n                                <sp-menu-item value=\"item-4\">\n                                    Select and mask...\n                                </sp-menu-item>\n                                <sp-menu-item value=\"item-5\">\n                                    Save selection\n                                </sp-menu-item>\n                                <sp-menu-item disabled value=\"item-6\">\n                                    Make work path\n                                </sp-menu-item>\n                            </sp-picker>\n                        </sp-dialog>\n                    </sp-popover>\n                    <sp-tooltip slot=\"hover-content\" placement=\"right\">\n                        I'm a tooltip in a different direction\n                    </sp-tooltip>\n                </overlay-trigger>\n            </div>\n        </div>\n    `;\n};\nPickerInModalOverlay.swc_vrt = {\n  skip: true\n};\n//# sourceMappingURL=picker.stories.js.map\n;export const __namedExportsOrder = [\"Default\",\"forcePopoverOnMobile\",\"disabled\",\"invalid\",\"tooltip\",\"leftSideLabel\",\"noVisibleLabel\",\"slottedLabel\",\"quiet\",\"quietSideLabel\",\"icons\",\"iconsNone\",\"iconValue\",\"iconsOnly\",\"dynamicIcons\",\"Open\",\"OpenShowingEdgeCase\",\"initialValue\",\"readonly\",\"custom\",\"BackgroundClickTest\",\"PickerInModalOverlay\"];","\"use strict\";\nimport {\n  html\n} from \"@spectrum-web-components/base\";\nimport \"@spectrum-web-components/field-label/sp-field-label.js\";\nimport \"@spectrum-web-components/picker/sp-picker.js\";\nimport \"@spectrum-web-components/menu/sp-menu-item.js\";\nimport { spreadProps } from \"../../../test/lit-helpers.js\";\nimport { ifDefined } from \"lit-html/directives/if-defined.js\";\nexport const handleChange = ({ onChange }) => (event) => {\n  const picker = event.target;\n  if (onChange) onChange(picker.value);\n};\nexport const Template = (args) => html`\n    <sp-field-label for=\"picker-1\" size=${ifDefined(args.size)}>\n        Where do you live?\n    </sp-field-label>\n    <sp-picker\n        id=\"picker-1\"\n        @change=${handleChange(args)}\n        label=\"Choose your neighborhood\"\n        ${spreadProps(args)}\n    >\n        <sp-menu-item value=\"option-1\">Carol Gardens</sp-menu-item>\n        <sp-menu-item value=\"option-2\">Cobble Hill</sp-menu-item>\n        <sp-menu-item value=\"option-3\">Ft. Greene</sp-menu-item>\n        <sp-menu-item value=\"option-4\">Park Slope</sp-menu-item>\n        <sp-menu-item disabled value=\"option-5\">Prospect Park</sp-menu-item>\n        <sp-menu-item value=\"option-6\">Red Hook</sp-menu-item>\n    </sp-picker>\n`;\n//# sourceMappingURL=template.js.map\n","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\nimport {\n  html,\n  nothing,\n  SpectrumElement\n} from \"@spectrum-web-components/base\";\nimport {\n  property,\n  query\n} from \"@spectrum-web-components/base/src/decorators.js\";\nimport popoverStyles from \"./popover.css.js\";\nexport class Popover extends SpectrumElement {\n  constructor() {\n    super(...arguments);\n    this.open = false;\n    this.tip = false;\n  }\n  static get styles() {\n    return [popoverStyles];\n  }\n  renderTip() {\n    return html`\n            <div id=\"tip\" aria-hidden=\"true\">\n                <svg class=\"tip block\" viewBox=\"0 -0.5 16 9\">\n                    <path class=\"triangle\" d=\"M-1,-1 8,8 17,-1\"></path>\n                </svg>\n                <svg class=\"tip inline\" viewBox=\"0 -0.5 9 16\">\n                    <path class=\"triangle\" d=\"M-1,-1 8,8 -1,17\"></path>\n                </svg>\n            </div>\n        `;\n  }\n  render() {\n    return html`\n            <slot></slot>\n            ${this.tip ? this.renderTip() : nothing}\n        `;\n  }\n}\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Popover.prototype, \"open\", 2);\n__decorateClass([\n  property({ reflect: true })\n], Popover.prototype, \"placement\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Popover.prototype, \"tip\", 2);\n__decorateClass([\n  query(\"#tip\")\n], Popover.prototype, \"tipElement\", 2);\n//# sourceMappingURL=Popover.dev.js.map\n"],"names":[],"sourceRoot":""}