{"version":3,"file":"swc.BfvFKyV2.js","sources":["../../../node_modules/tabbable/dist/index.esm.js","../../../node_modules/focus-trap/dist/focus-trap.esm.js"],"sourcesContent":["/*!\n* tabbable 6.2.0\n* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE\n*/\n// NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nvar candidateSelectors = ['input:not([inert])', 'select:not([inert])', 'textarea:not([inert])', 'a[href]:not([inert])', 'button:not([inert])', '[tabindex]:not(slot):not([inert])', 'audio[controls]:not([inert])', 'video[controls]:not([inert])', '[contenteditable]:not([contenteditable=\"false\"]):not([inert])', 'details>summary:first-of-type:not([inert])', 'details:not([inert])'];\nvar candidateSelector = /* #__PURE__ */candidateSelectors.join(',');\nvar NoElement = typeof Element === 'undefined';\nvar matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\nvar getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {\n  var _element$getRootNode;\n  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);\n} : function (element) {\n  return element === null || element === void 0 ? void 0 : element.ownerDocument;\n};\n\n/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */\nvar isInert = function isInert(node, lookUp) {\n  var _node$getAttribute;\n  if (lookUp === void 0) {\n    lookUp = true;\n  }\n  // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n  //  JS API property; we have to check the attribute, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's an active element\n  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, 'inert');\n  var inert = inertAtt === '' || inertAtt === 'true';\n\n  // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n  //  if it weren't for `matches()` not being a function on shadow roots; the following\n  //  code works for any kind of node\n  // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n  //  so it likely would not support `:is([inert] *)` either...\n  var result = inert || lookUp && node && isInert(node.parentNode); // recursive\n\n  return result;\n};\n\n/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */\nvar isContentEditable = function isContentEditable(node) {\n  var _node$getAttribute2;\n  // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n  //  to use the attribute directly to check for this, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's a non-editable element\n  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, 'contenteditable');\n  return attValue === '' || attValue === 'true';\n};\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nvar getCandidates = function getCandidates(el, includeContainer, filter) {\n  // even if `includeContainer=false`, we still have to check it for inertness because\n  //  if it's inert, all its children are inert\n  if (isInert(el)) {\n    return [];\n  }\n  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\nvar getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {\n  var candidates = [];\n  var elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    var element = elementsToCheck.shift();\n    if (isInert(element, false)) {\n      // no need to look up since we're drilling down\n      // anything inside this container will also be inert\n      continue;\n    }\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      var assigned = element.assignedElements();\n      var content = assigned.length ? assigned : element.children;\n      var nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push.apply(candidates, nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates\n        });\n      }\n    } else {\n      // check candidate element\n      var validCandidate = matches.call(element, candidateSelector);\n      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      var shadowRoot = element.shadowRoot ||\n      // check for an undisclosed shadow\n      typeof options.getShadowRoot === 'function' && options.getShadowRoot(element);\n\n      // no inert look up because we're already drilling down and checking for inertness\n      //  on the way down, so all containers to this root node should have already been\n      //  vetted as non-inert\n      var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);\n        if (options.flatten) {\n          candidates.push.apply(candidates, _nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: _nestedCandidates\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift.apply(elementsToCheck, element.children);\n      }\n    }\n  }\n  return candidates;\n};\n\n/**\n * @private\n * Determines if the node has an explicitly specified `tabindex` attribute.\n * @param {HTMLElement} node\n * @returns {boolean} True if so; false if not.\n */\nvar hasTabIndex = function hasTabIndex(node) {\n  return !isNaN(parseInt(node.getAttribute('tabindex'), 10));\n};\n\n/**\n * Determine the tab index of a given node.\n * @param {HTMLElement} node\n * @returns {number} Tab order (negative, 0, or positive number).\n * @throws {Error} If `node` is falsy.\n */\nvar getTabIndex = function getTabIndex(node) {\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {\n      return 0;\n    }\n  }\n  return node.tabIndex;\n};\n\n/**\n * Determine the tab index of a given node __for sort order purposes__.\n * @param {HTMLElement} node\n * @param {boolean} [isScope] True for a custom element with shadow root or slot that, by default,\n *  has tabIndex -1, but needs to be sorted by document order in order for its content to be\n *  inserted into the correct sort position.\n * @returns {number} Tab order (negative, 0, or positive number).\n */\nvar getSortOrderTabIndex = function getSortOrderTabIndex(node, isScope) {\n  var tabIndex = getTabIndex(node);\n  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {\n    return 0;\n  }\n  return tabIndex;\n};\nvar sortOrderedTabbables = function sortOrderedTabbables(a, b) {\n  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;\n};\nvar isInput = function isInput(node) {\n  return node.tagName === 'INPUT';\n};\nvar isHiddenInput = function isHiddenInput(node) {\n  return isInput(node) && node.type === 'hidden';\n};\nvar isDetailsWithSummary = function isDetailsWithSummary(node) {\n  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {\n    return child.tagName === 'SUMMARY';\n  });\n  return r;\n};\nvar getCheckedRadio = function getCheckedRadio(nodes, form) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\nvar isTabbableRadio = function isTabbableRadio(node) {\n  if (!node.name) {\n    return true;\n  }\n  var radioScope = node.form || getRootNode(node);\n  var queryRadios = function queryRadios(name) {\n    return radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + name + '\"]');\n  };\n  var radioSet;\n  if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);\n      return false;\n    }\n  }\n  var checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\nvar isRadio = function isRadio(node) {\n  return isInput(node) && node.type === 'radio';\n};\nvar isNonTabbableRadio = function isNonTabbableRadio(node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\n// determines if a node is ultimately attached to the window's document\nvar isNodeAttached = function isNodeAttached(node) {\n  var _nodeRoot;\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n  //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n  //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n  //  `ownerDocument` will be `null`, hence the optional chaining on it.\n  var nodeRoot = node && getRootNode(node);\n  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;\n\n  // in some cases, a detached node will return itself as the root instead of a document or\n  //  shadow root object, in which case, we shouldn't try to look further up the host chain\n  var attached = false;\n  if (nodeRoot && nodeRoot !== node) {\n    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;\n    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));\n    while (!attached && nodeRootHost) {\n      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;\n      // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n      //  which means we need to get the host's host and check if that parent host is contained\n      //  in (i.e. attached to) the document\n      nodeRoot = getRootNode(nodeRootHost);\n      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;\n      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));\n    }\n  }\n  return attached;\n};\nvar isZeroArea = function isZeroArea(node) {\n  var _node$getBoundingClie = node.getBoundingClientRect(),\n    width = _node$getBoundingClie.width,\n    height = _node$getBoundingClie.height;\n  return width === 0 && height === 0;\n};\nvar isHidden = function isHidden(node, _ref) {\n  var displayCheck = _ref.displayCheck,\n    getShadowRoot = _ref.getShadowRoot;\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n  if (!displayCheck || displayCheck === 'full' || displayCheck === 'legacy-full') {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      var originalNode = node;\n      while (node) {\n        var parentElement = node.parentElement;\n        var rootNode = getRootNode(node);\n        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    }\n    // else, fallback to 'none' mode and consider the node visible\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nvar isDisabledFromFieldset = function isDisabledFromFieldset(node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    var parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (var i = 0; i < parentNode.children.length; i++) {\n          var child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\nvar isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {\n  if (node.disabled ||\n  // we must do an inert look up to filter out any elements inside an inert ancestor\n  //  because we're limited in the type of selectors we can use in JSDom (see related\n  //  note related to `candidateSelectors`)\n  isInert(node) || isHiddenInput(node) || isHidden(node, options) ||\n  // For a details element with a summary, the summary element gets the focus\n  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {\n    return false;\n  }\n  return true;\n};\nvar isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {\n  if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {\n    return false;\n  }\n  return true;\n};\nvar isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {\n  var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\nvar sortByOrder = function sortByOrder(candidates) {\n  var regularTabbables = [];\n  var orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    var isScope = !!item.scopeParent;\n    var element = isScope ? item.scopeParent : item;\n    var candidateTabindex = getSortOrderTabIndex(element, isScope);\n    var elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements\n      });\n    }\n  });\n  return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {\n    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);\n    return acc;\n  }, []).concat(regularTabbables);\n};\nvar tabbable = function tabbable(container, options) {\n  options = options || {};\n  var candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([container], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable\n    });\n  } else {\n    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));\n  }\n  return sortByOrder(candidates);\n};\nvar focusable = function focusable(container, options) {\n  options = options || {};\n  var candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([container], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot\n    });\n  } else {\n    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));\n  }\n  return candidates;\n};\nvar isTabbable = function isTabbable(node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\nvar focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');\nvar isFocusable = function isFocusable(node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { focusable, getTabIndex, isFocusable, isTabbable, tabbable };\n//# sourceMappingURL=index.esm.js.map\n","/*!\n* focus-trap 7.6.5\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\nimport { tabbable, focusable, isTabbable, getTabIndex, isFocusable } from 'tabbable';\n\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: true,\n    configurable: true,\n    writable: true\n  }) : e[r] = t, e;\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), true).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r);\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\n\nvar activeFocusTraps = {\n  activateTrap: function activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      var activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap._setPausedState(true);\n      }\n    }\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n  deactivateTrap: function deactivateTrap(trapStack, trap) {\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n    if (trapStack.length > 0 && !trapStack[trapStack.length - 1]._isManuallyPaused()) {\n      trapStack[trapStack.length - 1]._setPausedState(false);\n    }\n  }\n};\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return (e === null || e === void 0 ? void 0 : e.key) === 'Escape' || (e === null || e === void 0 ? void 0 : e.key) === 'Esc' || (e === null || e === void 0 ? void 0 : e.keyCode) === 27;\n};\nvar isTabEvent = function isTabEvent(e) {\n  return (e === null || e === void 0 ? void 0 : e.key) === 'Tab' || (e === null || e === void 0 ? void 0 : e.keyCode) === 9;\n};\n\n// checks for TAB by default\nvar isKeyForward = function isKeyForward(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nvar isKeyBackward = function isKeyBackward(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nvar internalTrapStack = [];\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n  var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward: isKeyForward,\n    isKeyBackward: isKeyBackward\n  }, userOptions);\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   posTabIndexesFound: boolean,\n    //   firstTabbableNode: HTMLElement|undefined,\n    //   lastTabbableNode: HTMLElement|undefined,\n    //   firstDomTabbableNode: HTMLElement|undefined,\n    //   lastDomTabbableNode: HTMLElement|undefined,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    manuallyPaused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any\n    recentNavEvent: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event] If available, and `element` isn't directly found in any container,\n   *  the event's composed path is used to see if includes any known trap containers in the\n   *  case where the element is inside a Shadow DOM.\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  var findContainerIndex = function findContainerIndex(element, event) {\n    var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === 'function' ? event.composedPath() : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n        tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) || (// fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @param {Object} options\n   * @param {boolean} [options.hasFallback] True if the option could be a selector string\n   *  and the option allows for a fallback scenario in the case where the selector is\n   *  valid but does not match a node (i.e. the queried node doesn't exist in the DOM).\n   * @param {Array} [options.params] Params to pass to the option if it's a function.\n   * @returns {undefined | null | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `null` if the option didn't resolve\n   *  to a node but `options.hasFallback=true`, `false` if the option resolved to `false`\n   *  (node explicitly not given); otherwise, the resolved DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node, unless the option is a selector string and `options.hasFallback=true`.\n   */\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$hasFallback = _ref2.hasFallback,\n      hasFallback = _ref2$hasFallback === void 0 ? false : _ref2$hasFallback,\n      _ref2$params = _ref2.params,\n      params = _ref2$params === void 0 ? [] : _ref2$params;\n    var optionValue = config[optionName];\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue.apply(void 0, _toConsumableArray(params));\n    }\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      try {\n        node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      } catch (err) {\n        throw new Error(\"`\".concat(optionName, \"` appears to be an invalid selector; error=\\\"\").concat(err.message, \"\\\"\"));\n      }\n      if (!node) {\n        if (!hasFallback) {\n          throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n        }\n        // else, `node` MUST be `null` because that's what `Document.querySelector()` returns\n        //  if the selector is valid but doesn't match anything\n      }\n    }\n    return node;\n  };\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus', {\n      hasFallback: true\n    });\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n    if (node === undefined || node && !isFocusable(node, config.tabbableOptions)) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    } else if (node === null) {\n      // option is a VALID selector string that doesn't yield a node: use the `fallbackFocus`\n      //  option instead of the default behavior when the option isn't specified at all\n      node = getNodeForOption('fallbackFocus');\n    }\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n    return node;\n  };\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes since nodes with negative `tabindex` attributes\n      //  are focusable but not tabbable\n      var focusableNodes = focusable(container, config.tabbableOptions);\n      var firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : undefined;\n      var lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : undefined;\n      var firstDomTabbableNode = focusableNodes.find(function (node) {\n        return isTabbable(node);\n      });\n      var lastDomTabbableNode = focusableNodes.slice().reverse().find(function (node) {\n        return isTabbable(node);\n      });\n      var posTabIndexesFound = !!tabbableNodes.find(function (node) {\n        return getTabIndex(node) > 0;\n      });\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n        /** True if at least one node with positive `tabindex` was found in this container. */\n        posTabIndexesFound: posTabIndexesFound,\n        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */\n        firstTabbableNode: firstTabbableNode,\n        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */\n        lastTabbableNode: lastTabbableNode,\n        // NOTE: DOM order is NOT NECESSARILY \"document position\" order, but figuring that out\n        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n        //  because that API doesn't work with Shadow DOM as well as it should (@see\n        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,\n        //  to address an edge case related to positive tabindex support, this seems like a much easier,\n        //  \"close enough most of the time\" alternative for positive tabindexes which should generally\n        //  be avoided anyway...\n        /** First tabbable node in container, __DOM__ order; `undefined` if none. */\n        firstDomTabbableNode: firstDomTabbableNode,\n        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */\n        lastDomTabbableNode: lastDomTabbableNode,\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          var nodeIdx = tabbableNodes.indexOf(node);\n          if (nodeIdx < 0) {\n            // either not tabbable nor focusable, or was focused but not tabbable (negative tabindex):\n            //  since `node` should at least have been focusable, we assume that's the case and mimic\n            //  what browsers do, which is set focus to the next node in __document position order__,\n            //  regardless of positive tabindexes, if any -- and for reasons explained in the NOTE\n            //  above related to `firstDomTabbable` and `lastDomTabbable` properties, we fall back to\n            //  basic DOM order\n            if (forward) {\n              return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find(function (el) {\n                return isTabbable(el);\n              });\n            }\n            return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find(function (el) {\n              return isTabbable(el);\n            });\n          }\n          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    });\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n\n    // NOTE: Positive tabindexes are only properly supported in single-container traps because\n    //  doing it across multiple containers where tabindexes could be all over the place\n    //  would require Tabbable to support multiple containers, would require additional\n    //  specialized Shadow DOM support, and would require Tabbable's multi-container support\n    //  to look at those containers in document position order rather than user-provided\n    //  order (as they are treated in Focus-trap, for legacy reasons). See discussion on\n    //  https://github.com/focus-trap/focus-trap/issues/375 for more details.\n    if (state.containerGroups.find(function (g) {\n      return g.posTabIndexesFound;\n    }) && state.containerGroups.length > 1) {\n      throw new Error(\"At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.\");\n    }\n  };\n\n  /**\n   * Gets the current activeElement. If it's a web-component and has open shadow-root\n   * it will recursively search inside shadow roots for the \"true\" activeElement.\n   *\n   * @param {Document | ShadowRoot} el\n   *\n   * @returns {HTMLElement} The element that currently has the focus\n   **/\n  var _getActiveElement = function getActiveElement(el) {\n    var activeElement = el.activeElement;\n    if (!activeElement) {\n      return;\n    }\n    if (activeElement.shadowRoot && activeElement.shadowRoot.activeElement !== null) {\n      return _getActiveElement(activeElement.shadowRoot);\n    }\n    return activeElement;\n  };\n  var _tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n    if (node === _getActiveElement(document)) {\n      return;\n    }\n    if (!node || !node.focus) {\n      _tryFocus(getInitialFocusNode());\n      return;\n    }\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    // NOTE: focus() API does not trigger focusIn event so set MRU node manually\n    state.mostRecentlyFocusedNode = node;\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', {\n      params: [previousActiveElement]\n    });\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  /**\n   * Finds the next node (in either direction) where focus should move according to a\n   *  keyboard focus-in event.\n   * @param {Object} params\n   * @param {Node} [params.target] Known target __from which__ to navigate, if any.\n   * @param {KeyboardEvent|FocusEvent} [params.event] Event to use if `target` isn't known (event\n   *  will be used to determine the `target`). Ignored if `target` is specified.\n   * @param {boolean} [params.isBackward] True if focus should move backward.\n   * @returns {Node|undefined} The next node, or `undefined` if a next node couldn't be\n   *  determined given the current state of the trap.\n   */\n  var findNextNavNode = function findNextNavNode(_ref3) {\n    var target = _ref3.target,\n      event = _ref3.event,\n      _ref3$isBackward = _ref3.isBackward,\n      isBackward = _ref3$isBackward === void 0 ? false : _ref3$isBackward;\n    target = target || getActualTarget(event);\n    updateTabbableNodes();\n    var destinationNode = null;\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target, event);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = state.tabbableGroups.findIndex(function (_ref4) {\n          var firstTabbableNode = _ref4.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = getTabIndex(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = state.tabbableGroups.findIndex(function (_ref5) {\n          var lastTabbableNode = _ref5.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = getTabIndex(target) >= 0 ? _destinationGroup.firstTabbableNode : _destinationGroup.firstDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n    return destinationNode;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  // NOTE: the focusIn event is NOT cancelable, so if focus escapes, it may cause unexpected\n  //  scrolling if the node that got focused was out of view; there's nothing we can do to\n  //  prevent that from happening by the time we discover that focus escaped\n  var checkFocusIn = function checkFocusIn(event) {\n    var target = getActualTarget(event);\n    var targetContained = findContainerIndex(target, event) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      event.stopImmediatePropagation();\n\n      // focus will escape if the MRU node had a positive tab index and user tried to nav forward;\n      //  it will also escape if the MRU node had a 0 tab index and user tried to nav backward\n      //  toward a node with a positive tab index\n      var nextNode; // next node to focus, if we find one\n      var navAcrossContainers = true;\n      if (state.mostRecentlyFocusedNode) {\n        if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {\n          // MRU container index must be >=0 otherwise we wouldn't have it as an MRU node...\n          var mruContainerIdx = findContainerIndex(state.mostRecentlyFocusedNode);\n          // there MAY not be any tabbable nodes in the container if there are at least 2 containers\n          //  and the MRU node is focusable but not tabbable (focus-trap requires at least 1 container\n          //  with at least one tabbable node in order to function, so this could be the other container\n          //  with nothing tabbable in it)\n          var tabbableNodes = state.containerGroups[mruContainerIdx].tabbableNodes;\n          if (tabbableNodes.length > 0) {\n            // MRU tab index MAY not be found if the MRU node is focusable but not tabbable\n            var mruTabIdx = tabbableNodes.findIndex(function (node) {\n              return node === state.mostRecentlyFocusedNode;\n            });\n            if (mruTabIdx >= 0) {\n              if (config.isKeyForward(state.recentNavEvent)) {\n                if (mruTabIdx + 1 < tabbableNodes.length) {\n                  nextNode = tabbableNodes[mruTabIdx + 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              } else {\n                if (mruTabIdx - 1 >= 0) {\n                  nextNode = tabbableNodes[mruTabIdx - 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              }\n              // else, don't find in container order without considering direction too\n            }\n          }\n          // else, no tabbable nodes in that container (which means we must have at least one other\n          //  container with at least one tabbable node in it, otherwise focus-trap would've thrown\n          //  an error the last time updateTabbableNodes() was run): find next node among all known\n          //  containers\n        } else {\n          // check to see if there's at least one tabbable node with a positive tab index inside\n          //  the trap because focus seems to escape when navigating backward from a tabbable node\n          //  with tabindex=0 when this is the case (instead of wrapping to the tabbable node with\n          //  the greatest positive tab index like it should)\n          if (!state.containerGroups.some(function (g) {\n            return g.tabbableNodes.some(function (n) {\n              return getTabIndex(n) > 0;\n            });\n          })) {\n            // no containers with tabbable nodes with positive tab indexes which means the focus\n            //  escaped for some other reason and we should just execute the fallback to the\n            //  MRU node or initial focus node, if any\n            navAcrossContainers = false;\n          }\n        }\n      } else {\n        // no MRU node means we're likely in some initial condition when the trap has just\n        //  been activated and initial focus hasn't been given yet, in which case we should\n        //  fall through to trying to focus the initial focus node, which is what should\n        //  happen below at this point in the logic\n        navAcrossContainers = false;\n      }\n      if (navAcrossContainers) {\n        nextNode = findNextNavNode({\n          // move FROM the MRU node, not event-related node (which will be the node that is\n          //  outside the trap causing the focus escape we're trying to fix)\n          target: state.mostRecentlyFocusedNode,\n          isBackward: config.isKeyBackward(state.recentNavEvent)\n        });\n      }\n      if (nextNode) {\n        _tryFocus(nextNode);\n      } else {\n        _tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n      }\n    }\n    state.recentNavEvent = undefined; // clear\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  var checkKeyNav = function checkKeyNav(event) {\n    var isBackward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    state.recentNavEvent = event;\n    var destinationNode = findNextNavNode({\n      event: event,\n      isBackward: isBackward\n    });\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      _tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n  var checkTabKey = function checkTabKey(event) {\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n\n  // we use a different event phase for the Escape key to allow canceling the event and checking for this in escapeDeactivates\n  var checkEscapeKey = function checkEscapeKey(event) {\n    if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {\n      event.preventDefault();\n      trap.deactivate();\n    }\n  };\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      _tryFocus(getInitialFocusNode());\n    }) : _tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkTabKey, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkEscapeKey);\n    return trap;\n  };\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkTabKey, true);\n    doc.removeEventListener('keydown', checkEscapeKey);\n    return trap;\n  };\n\n  //\n  // MUTATION OBSERVER\n  //\n\n  var checkDomRemoval = function checkDomRemoval(mutations) {\n    var isFocusedNodeRemoved = mutations.some(function (mutation) {\n      var removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    });\n\n    // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n    if (isFocusedNodeRemoved) {\n      _tryFocus(getInitialFocusNode());\n    }\n  };\n\n  // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n  var mutationObserver = typeof window !== 'undefined' && 'MutationObserver' in window ? new MutationObserver(checkDomRemoval) : undefined;\n  var updateObservedNodes = function updateObservedNodes() {\n    if (!mutationObserver) {\n      return;\n    }\n    mutationObserver.disconnect();\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true\n        });\n      });\n    }\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n    get paused() {\n      return state.paused;\n    },\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = _getActiveElement(doc);\n      onActivate === null || onActivate === void 0 || onActivate();\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        updateObservedNodes();\n        onPostActivate === null || onPostActivate === void 0 || onPostActivate();\n      };\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n      onDeactivate === null || onDeactivate === void 0 || onDeactivate();\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            _tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate === null || onPostDeactivate === void 0 || onPostDeactivate();\n        });\n      };\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause(pauseOptions) {\n      if (!state.active) {\n        return this;\n      }\n      state.manuallyPaused = true;\n      return this._setPausedState(true, pauseOptions);\n    },\n    unpause: function unpause(unpauseOptions) {\n      if (!state.active) {\n        return this;\n      }\n      state.manuallyPaused = false;\n      if (trapStack[trapStack.length - 1] !== this) {\n        return this;\n      }\n      return this._setPausedState(false, unpauseOptions);\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n      if (state.active) {\n        updateTabbableNodes();\n      }\n      updateObservedNodes();\n      return this;\n    }\n  };\n  Object.defineProperties(trap, {\n    _isManuallyPaused: {\n      value: function value() {\n        return state.manuallyPaused;\n      }\n    },\n    _setPausedState: {\n      value: function value(paused, options) {\n        if (state.paused === paused) {\n          return this;\n        }\n        state.paused = paused;\n        if (paused) {\n          var onPause = getOption(options, 'onPause');\n          var onPostPause = getOption(options, 'onPostPause');\n          onPause === null || onPause === void 0 || onPause();\n          removeListeners();\n          updateObservedNodes();\n          onPostPause === null || onPostPause === void 0 || onPostPause();\n        } else {\n          var onUnpause = getOption(options, 'onUnpause');\n          var onPostUnpause = getOption(options, 'onPostUnpause');\n          onUnpause === null || onUnpause === void 0 || onUnpause();\n          updateTabbableNodes();\n          addListeners();\n          updateObservedNodes();\n          onPostUnpause === null || onPostUnpause === void 0 || onPostUnpause();\n        }\n        return this;\n      }\n    }\n  });\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n  return trap;\n};\n\nexport { createFocusTrap };\n//# sourceMappingURL=focus-trap.esm.js.map\n"],"names":["candidateSelectors","candidateSelector","join","NoElement","Element","matches","prototype","msMatchesSelector","webkitMatchesSelector","getRootNode","element","_element$getRootNode","call","ownerDocument","isInert","node","lookUp","_node$getAttribute","inertAtt","getAttribute","parentNode","getCandidates","el","includeContainer","filter","candidates","Array","slice","apply","querySelectorAll","unshift","getCandidatesIteratively","elements","options","elementsToCheck","from","length","shift","tagName","assigned","assignedElements","nestedCandidates","children","flatten","push","scopeParent","includes","shadowRoot","getShadowRoot","validShadowRoot","shadowRootFilter","_nestedCandidates","hasTabIndex","isNaN","parseInt","getTabIndex","Error","tabIndex","test","_node$getAttribute2","attValue","isContentEditable","sortOrderedTabbables","a","b","documentOrder","isInput","isNonTabbableRadio","type","isRadio","name","radioSet","radioScope","form","queryRadios","window","CSS","escape","err","console","error","message","checked","nodes","i","getCheckedRadio","isTabbableRadio","isZeroArea","_node$getBoundingClie","getBoundingClientRect","width","height","isHidden","_ref","displayCheck","getComputedStyle","visibility","nodeUnderDetails","parentElement","originalNode","rootNode","assignedSlot","host","_nodeRoot","_nodeRootHost","_nodeRootHost$ownerDo","_node$ownerDocument","nodeRoot","nodeRootHost","attached","contains","_nodeRoot2","_nodeRootHost2","_nodeRootHost2$ownerD","isNodeAttached","getClientRects","isNodeMatchingSelectorFocusable","disabled","isHiddenInput","some","child","isDetailsWithSummary","item","isDisabledFromFieldset","isNodeMatchingSelectorTabbable","isValidShadowRootTabbable","shadowHostNode","sortByOrder","regularTabbables","orderedTabbables","forEach","isScope","candidateTabindex","getSortOrderTabIndex","content","sort","reduce","acc","sortable","concat","isTabbable","focusableCandidateSelector","isFocusable","_arrayLikeToArray","r","e","n","_defineProperty","t","Symbol","toPrimitive","TypeError","String","Number","_toPrimitive","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","ownKeys","keys","getOwnPropertySymbols","o","getOwnPropertyDescriptor","_objectSpread2","arguments","getOwnPropertyDescriptors","defineProperties","_toConsumableArray","isArray","_arrayWithoutHoles","iterator","_iterableToArray","toString","constructor","_unsupportedIterableToArray","_nonIterableSpread","activeFocusTraps","trapStack","trap","activeTrap","_setPausedState","trapIndex","indexOf","splice","_isManuallyPaused","isTabEvent","key","keyCode","isKeyForward","shiftKey","isKeyBackward","delay","fn","setTimeout","valueOrHandler","_len","params","_key","getActualTarget","event","target","composedPath","internalTrapStack","createFocusTrap","userOptions","doc","document","config","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","manuallyPaused","delayInitialFocusTimer","undefined","recentNavEvent","getOption","configOverrideOptions","optionName","configOptionName","findContainerIndex","findIndex","container","tabbableNodes","find","getNodeForOption","_ref2","_ref2$hasFallback","hasFallback","_ref2$params","optionValue","querySelector","getInitialFocusNode","tabbableOptions","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","bind","tabbable","focusableNodes","focusable","lastTabbableNode","firstDomTabbableNode","lastDomTabbableNode","reverse","posTabIndexesFound","nextTabbableNode","forward","nodeIdx","group","g","_getActiveElement","_tryFocus","focus","preventScroll","toLowerCase","select","isSelectableInput","getReturnFocusNode","previousActiveElement","findNextNavNode","_ref3","_ref3$isBackward","isBackward","destinationNode","containerIndex","containerGroup","startOfGroupIndex","_ref4","destinationGroupIndex","destinationGroup","lastOfGroupIndex","_ref5","_destinationGroupIndex","_destinationGroup","checkPointerDown","clickOutsideDeactivates","deactivate","returnFocus","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","nextNode","stopImmediatePropagation","navAcrossContainers","mruContainerIdx","mruTabIdx","checkTabKey","checkKeyNav","checkEscapeKey","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","mutationObserver","MutationObserver","mutations","mutation","removedNodes","updateObservedNodes","disconnect","observe","subtree","childList","activate","activateOptions","this","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","then","deactivateOptions","onDeactivate","onPostDeactivate","checkCanReturnFocus","clearTimeout","finishDeactivation","pause","pauseOptions","unpause","unpauseOptions","updateContainerElements","containerElements","elementsAsArray","Boolean","onPause","onPostPause","onUnpause","onPostUnpause"],"mappings":"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","x_google_ignoreList":[0,1]}